
project_rtos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a8c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000154  08005c1c  08005c1c  00015c1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d70  08005d70  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08005d70  08005d70  00015d70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005d78  08005d78  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d78  08005d78  00015d78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005d7c  08005d7c  00015d7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005d80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          00006ff0  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20007000  20007000  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001182f  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002a3a  00000000  00000000  000318b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000fa8  00000000  00000000  000342f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000bed  00000000  00000000  00035298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00002fe2  00000000  00000000  00035e85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00010f5e  00000000  00000000  00038e67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000cf2f5  00000000  00000000  00049dc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004128  00000000  00000000  001190bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000057  00000000  00000000  0011d1e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005c04 	.word	0x08005c04

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08005c04 	.word	0x08005c04

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b970 	b.w	80004c8 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9e08      	ldr	r6, [sp, #32]
 8000206:	460d      	mov	r5, r1
 8000208:	4604      	mov	r4, r0
 800020a:	460f      	mov	r7, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14a      	bne.n	80002a6 <__udivmoddi4+0xa6>
 8000210:	428a      	cmp	r2, r1
 8000212:	4694      	mov	ip, r2
 8000214:	d965      	bls.n	80002e2 <__udivmoddi4+0xe2>
 8000216:	fab2 f382 	clz	r3, r2
 800021a:	b143      	cbz	r3, 800022e <__udivmoddi4+0x2e>
 800021c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000220:	f1c3 0220 	rsb	r2, r3, #32
 8000224:	409f      	lsls	r7, r3
 8000226:	fa20 f202 	lsr.w	r2, r0, r2
 800022a:	4317      	orrs	r7, r2
 800022c:	409c      	lsls	r4, r3
 800022e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000232:	fa1f f58c 	uxth.w	r5, ip
 8000236:	fbb7 f1fe 	udiv	r1, r7, lr
 800023a:	0c22      	lsrs	r2, r4, #16
 800023c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000240:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000244:	fb01 f005 	mul.w	r0, r1, r5
 8000248:	4290      	cmp	r0, r2
 800024a:	d90a      	bls.n	8000262 <__udivmoddi4+0x62>
 800024c:	eb1c 0202 	adds.w	r2, ip, r2
 8000250:	f101 37ff 	add.w	r7, r1, #4294967295
 8000254:	f080 811c 	bcs.w	8000490 <__udivmoddi4+0x290>
 8000258:	4290      	cmp	r0, r2
 800025a:	f240 8119 	bls.w	8000490 <__udivmoddi4+0x290>
 800025e:	3902      	subs	r1, #2
 8000260:	4462      	add	r2, ip
 8000262:	1a12      	subs	r2, r2, r0
 8000264:	b2a4      	uxth	r4, r4
 8000266:	fbb2 f0fe 	udiv	r0, r2, lr
 800026a:	fb0e 2210 	mls	r2, lr, r0, r2
 800026e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000272:	fb00 f505 	mul.w	r5, r0, r5
 8000276:	42a5      	cmp	r5, r4
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x90>
 800027a:	eb1c 0404 	adds.w	r4, ip, r4
 800027e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000282:	f080 8107 	bcs.w	8000494 <__udivmoddi4+0x294>
 8000286:	42a5      	cmp	r5, r4
 8000288:	f240 8104 	bls.w	8000494 <__udivmoddi4+0x294>
 800028c:	4464      	add	r4, ip
 800028e:	3802      	subs	r0, #2
 8000290:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000294:	1b64      	subs	r4, r4, r5
 8000296:	2100      	movs	r1, #0
 8000298:	b11e      	cbz	r6, 80002a2 <__udivmoddi4+0xa2>
 800029a:	40dc      	lsrs	r4, r3
 800029c:	2300      	movs	r3, #0
 800029e:	e9c6 4300 	strd	r4, r3, [r6]
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d908      	bls.n	80002bc <__udivmoddi4+0xbc>
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	f000 80ed 	beq.w	800048a <__udivmoddi4+0x28a>
 80002b0:	2100      	movs	r1, #0
 80002b2:	e9c6 0500 	strd	r0, r5, [r6]
 80002b6:	4608      	mov	r0, r1
 80002b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002bc:	fab3 f183 	clz	r1, r3
 80002c0:	2900      	cmp	r1, #0
 80002c2:	d149      	bne.n	8000358 <__udivmoddi4+0x158>
 80002c4:	42ab      	cmp	r3, r5
 80002c6:	d302      	bcc.n	80002ce <__udivmoddi4+0xce>
 80002c8:	4282      	cmp	r2, r0
 80002ca:	f200 80f8 	bhi.w	80004be <__udivmoddi4+0x2be>
 80002ce:	1a84      	subs	r4, r0, r2
 80002d0:	eb65 0203 	sbc.w	r2, r5, r3
 80002d4:	2001      	movs	r0, #1
 80002d6:	4617      	mov	r7, r2
 80002d8:	2e00      	cmp	r6, #0
 80002da:	d0e2      	beq.n	80002a2 <__udivmoddi4+0xa2>
 80002dc:	e9c6 4700 	strd	r4, r7, [r6]
 80002e0:	e7df      	b.n	80002a2 <__udivmoddi4+0xa2>
 80002e2:	b902      	cbnz	r2, 80002e6 <__udivmoddi4+0xe6>
 80002e4:	deff      	udf	#255	; 0xff
 80002e6:	fab2 f382 	clz	r3, r2
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8090 	bne.w	8000410 <__udivmoddi4+0x210>
 80002f0:	1a8a      	subs	r2, r1, r2
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2101      	movs	r1, #1
 80002fc:	fbb2 f5f7 	udiv	r5, r2, r7
 8000300:	fb07 2015 	mls	r0, r7, r5, r2
 8000304:	0c22      	lsrs	r2, r4, #16
 8000306:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800030a:	fb0e f005 	mul.w	r0, lr, r5
 800030e:	4290      	cmp	r0, r2
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x124>
 8000312:	eb1c 0202 	adds.w	r2, ip, r2
 8000316:	f105 38ff 	add.w	r8, r5, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x122>
 800031c:	4290      	cmp	r0, r2
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2b8>
 8000322:	4645      	mov	r5, r8
 8000324:	1a12      	subs	r2, r2, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb2 f0f7 	udiv	r0, r2, r7
 800032c:	fb07 2210 	mls	r2, r7, r0, r2
 8000330:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x14e>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 32ff 	add.w	r2, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x14c>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2c2>
 800034c:	4610      	mov	r0, r2
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000356:	e79f      	b.n	8000298 <__udivmoddi4+0x98>
 8000358:	f1c1 0720 	rsb	r7, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa05 f401 	lsl.w	r4, r5, r1
 800036a:	fa20 f307 	lsr.w	r3, r0, r7
 800036e:	40fd      	lsrs	r5, r7
 8000370:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000374:	4323      	orrs	r3, r4
 8000376:	fbb5 f8f9 	udiv	r8, r5, r9
 800037a:	fa1f fe8c 	uxth.w	lr, ip
 800037e:	fb09 5518 	mls	r5, r9, r8, r5
 8000382:	0c1c      	lsrs	r4, r3, #16
 8000384:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000388:	fb08 f50e 	mul.w	r5, r8, lr
 800038c:	42a5      	cmp	r5, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	fa00 f001 	lsl.w	r0, r0, r1
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b0>
 8000398:	eb1c 0404 	adds.w	r4, ip, r4
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2b4>
 80003a4:	42a5      	cmp	r5, r4
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2b4>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4464      	add	r4, ip
 80003b0:	1b64      	subs	r4, r4, r5
 80003b2:	b29d      	uxth	r5, r3
 80003b4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b8:	fb09 4413 	mls	r4, r9, r3, r4
 80003bc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c4:	45a6      	cmp	lr, r4
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1da>
 80003c8:	eb1c 0404 	adds.w	r4, ip, r4
 80003cc:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2ac>
 80003d2:	45a6      	cmp	lr, r4
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2ac>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	4464      	add	r4, ip
 80003da:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003de:	fba3 9502 	umull	r9, r5, r3, r2
 80003e2:	eba4 040e 	sub.w	r4, r4, lr
 80003e6:	42ac      	cmp	r4, r5
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46ae      	mov	lr, r5
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x29c>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x298>
 80003f0:	b156      	cbz	r6, 8000408 <__udivmoddi4+0x208>
 80003f2:	ebb0 0208 	subs.w	r2, r0, r8
 80003f6:	eb64 040e 	sbc.w	r4, r4, lr
 80003fa:	fa04 f707 	lsl.w	r7, r4, r7
 80003fe:	40ca      	lsrs	r2, r1
 8000400:	40cc      	lsrs	r4, r1
 8000402:	4317      	orrs	r7, r2
 8000404:	e9c6 7400 	strd	r7, r4, [r6]
 8000408:	4618      	mov	r0, r3
 800040a:	2100      	movs	r1, #0
 800040c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000410:	f1c3 0120 	rsb	r1, r3, #32
 8000414:	fa02 fc03 	lsl.w	ip, r2, r3
 8000418:	fa20 f201 	lsr.w	r2, r0, r1
 800041c:	fa25 f101 	lsr.w	r1, r5, r1
 8000420:	409d      	lsls	r5, r3
 8000422:	432a      	orrs	r2, r5
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000430:	fb07 1510 	mls	r5, r7, r0, r1
 8000434:	0c11      	lsrs	r1, r2, #16
 8000436:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800043a:	fb00 f50e 	mul.w	r5, r0, lr
 800043e:	428d      	cmp	r5, r1
 8000440:	fa04 f403 	lsl.w	r4, r4, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x258>
 8000446:	eb1c 0101 	adds.w	r1, ip, r1
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000450:	428d      	cmp	r5, r1
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000454:	3802      	subs	r0, #2
 8000456:	4461      	add	r1, ip
 8000458:	1b49      	subs	r1, r1, r5
 800045a:	b292      	uxth	r2, r2
 800045c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000460:	fb07 1115 	mls	r1, r7, r5, r1
 8000464:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000468:	fb05 f10e 	mul.w	r1, r5, lr
 800046c:	4291      	cmp	r1, r2
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x282>
 8000470:	eb1c 0202 	adds.w	r2, ip, r2
 8000474:	f105 38ff 	add.w	r8, r5, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2a8>
 800047a:	4291      	cmp	r1, r2
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2a8>
 800047e:	3d02      	subs	r5, #2
 8000480:	4462      	add	r2, ip
 8000482:	1a52      	subs	r2, r2, r1
 8000484:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0xfc>
 800048a:	4631      	mov	r1, r6
 800048c:	4630      	mov	r0, r6
 800048e:	e708      	b.n	80002a2 <__udivmoddi4+0xa2>
 8000490:	4639      	mov	r1, r7
 8000492:	e6e6      	b.n	8000262 <__udivmoddi4+0x62>
 8000494:	4610      	mov	r0, r2
 8000496:	e6fb      	b.n	8000290 <__udivmoddi4+0x90>
 8000498:	4548      	cmp	r0, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f0>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a4:	3b01      	subs	r3, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f0>
 80004a8:	4645      	mov	r5, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x282>
 80004ac:	462b      	mov	r3, r5
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1da>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x258>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b0>
 80004b8:	3d02      	subs	r5, #2
 80004ba:	4462      	add	r2, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x124>
 80004be:	4608      	mov	r0, r1
 80004c0:	e70a      	b.n	80002d8 <__udivmoddi4+0xd8>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x14e>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	DWT->CTRL |= (1<<0);
 80004d0:	4b13      	ldr	r3, [pc, #76]	; (8000520 <main+0x54>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	4a12      	ldr	r2, [pc, #72]	; (8000520 <main+0x54>)
 80004d6:	f043 0301 	orr.w	r3, r3, #1
 80004da:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004dc:	f000 f956 	bl	800078c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e0:	f000 f82c 	bl	800053c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e4:	f000 f888 	bl	80005f8 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  SEGGER_SYSVIEW_Conf();
 80004e8:	f003 fde6 	bl	80040b8 <SEGGER_SYSVIEW_Conf>
  vSetVarulMaxPRIGROUPValue();
 80004ec:	f003 fb94 	bl	8003c18 <vSetVarulMaxPRIGROUPValue>
  SEGGER_SYSVIEW_Start();
 80004f0:	f004 fd66 	bl	8004fc0 <SEGGER_SYSVIEW_Start>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004f4:	f000 fefa 	bl	80012ec <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of myTask1 */
  myTask1Handle = osThreadNew(StartTask1, NULL, &myTask1_attributes);
 80004f8:	4a0a      	ldr	r2, [pc, #40]	; (8000524 <main+0x58>)
 80004fa:	2100      	movs	r1, #0
 80004fc:	480a      	ldr	r0, [pc, #40]	; (8000528 <main+0x5c>)
 80004fe:	f000 ff3f 	bl	8001380 <osThreadNew>
 8000502:	4603      	mov	r3, r0
 8000504:	4a09      	ldr	r2, [pc, #36]	; (800052c <main+0x60>)
 8000506:	6013      	str	r3, [r2, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 8000508:	4a09      	ldr	r2, [pc, #36]	; (8000530 <main+0x64>)
 800050a:	2100      	movs	r1, #0
 800050c:	4809      	ldr	r0, [pc, #36]	; (8000534 <main+0x68>)
 800050e:	f000 ff37 	bl	8001380 <osThreadNew>
 8000512:	4603      	mov	r3, r0
 8000514:	4a08      	ldr	r2, [pc, #32]	; (8000538 <main+0x6c>)
 8000516:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000518:	f000 ff0c 	bl	8001334 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800051c:	e7fe      	b.n	800051c <main+0x50>
 800051e:	bf00      	nop
 8000520:	e0001000 	.word	0xe0001000
 8000524:	08005d04 	.word	0x08005d04
 8000528:	08000649 	.word	0x08000649
 800052c:	2000002c 	.word	0x2000002c
 8000530:	08005d28 	.word	0x08005d28
 8000534:	08000659 	.word	0x08000659
 8000538:	20000030 	.word	0x20000030

0800053c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b094      	sub	sp, #80	; 0x50
 8000540:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000542:	f107 0320 	add.w	r3, r7, #32
 8000546:	2230      	movs	r2, #48	; 0x30
 8000548:	2100      	movs	r1, #0
 800054a:	4618      	mov	r0, r3
 800054c:	f005 fb20 	bl	8005b90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000550:	f107 030c 	add.w	r3, r7, #12
 8000554:	2200      	movs	r2, #0
 8000556:	601a      	str	r2, [r3, #0]
 8000558:	605a      	str	r2, [r3, #4]
 800055a:	609a      	str	r2, [r3, #8]
 800055c:	60da      	str	r2, [r3, #12]
 800055e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000560:	2300      	movs	r3, #0
 8000562:	60bb      	str	r3, [r7, #8]
 8000564:	4b22      	ldr	r3, [pc, #136]	; (80005f0 <SystemClock_Config+0xb4>)
 8000566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000568:	4a21      	ldr	r2, [pc, #132]	; (80005f0 <SystemClock_Config+0xb4>)
 800056a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800056e:	6413      	str	r3, [r2, #64]	; 0x40
 8000570:	4b1f      	ldr	r3, [pc, #124]	; (80005f0 <SystemClock_Config+0xb4>)
 8000572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000574:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000578:	60bb      	str	r3, [r7, #8]
 800057a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800057c:	2300      	movs	r3, #0
 800057e:	607b      	str	r3, [r7, #4]
 8000580:	4b1c      	ldr	r3, [pc, #112]	; (80005f4 <SystemClock_Config+0xb8>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4a1b      	ldr	r2, [pc, #108]	; (80005f4 <SystemClock_Config+0xb8>)
 8000586:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800058a:	6013      	str	r3, [r2, #0]
 800058c:	4b19      	ldr	r3, [pc, #100]	; (80005f4 <SystemClock_Config+0xb8>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000594:	607b      	str	r3, [r7, #4]
 8000596:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000598:	2302      	movs	r3, #2
 800059a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800059c:	2301      	movs	r3, #1
 800059e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005a0:	2310      	movs	r3, #16
 80005a2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005a4:	2300      	movs	r3, #0
 80005a6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a8:	f107 0320 	add.w	r3, r7, #32
 80005ac:	4618      	mov	r0, r3
 80005ae:	f000 fa45 	bl	8000a3c <HAL_RCC_OscConfig>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d001      	beq.n	80005bc <SystemClock_Config+0x80>
  {
    Error_Handler();
 80005b8:	f000 f856 	bl	8000668 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005bc:	230f      	movs	r3, #15
 80005be:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005c0:	2300      	movs	r3, #0
 80005c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c4:	2300      	movs	r3, #0
 80005c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005c8:	2300      	movs	r3, #0
 80005ca:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005cc:	2300      	movs	r3, #0
 80005ce:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005d0:	f107 030c 	add.w	r3, r7, #12
 80005d4:	2100      	movs	r1, #0
 80005d6:	4618      	mov	r0, r3
 80005d8:	f000 fca8 	bl	8000f2c <HAL_RCC_ClockConfig>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d001      	beq.n	80005e6 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80005e2:	f000 f841 	bl	8000668 <Error_Handler>
  }
}
 80005e6:	bf00      	nop
 80005e8:	3750      	adds	r7, #80	; 0x50
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	40023800 	.word	0x40023800
 80005f4:	40007000 	.word	0x40007000

080005f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005f8:	b480      	push	{r7}
 80005fa:	b083      	sub	sp, #12
 80005fc:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005fe:	2300      	movs	r3, #0
 8000600:	607b      	str	r3, [r7, #4]
 8000602:	4b10      	ldr	r3, [pc, #64]	; (8000644 <MX_GPIO_Init+0x4c>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000606:	4a0f      	ldr	r2, [pc, #60]	; (8000644 <MX_GPIO_Init+0x4c>)
 8000608:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800060c:	6313      	str	r3, [r2, #48]	; 0x30
 800060e:	4b0d      	ldr	r3, [pc, #52]	; (8000644 <MX_GPIO_Init+0x4c>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000612:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000616:	607b      	str	r3, [r7, #4]
 8000618:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800061a:	2300      	movs	r3, #0
 800061c:	603b      	str	r3, [r7, #0]
 800061e:	4b09      	ldr	r3, [pc, #36]	; (8000644 <MX_GPIO_Init+0x4c>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000622:	4a08      	ldr	r2, [pc, #32]	; (8000644 <MX_GPIO_Init+0x4c>)
 8000624:	f043 0301 	orr.w	r3, r3, #1
 8000628:	6313      	str	r3, [r2, #48]	; 0x30
 800062a:	4b06      	ldr	r3, [pc, #24]	; (8000644 <MX_GPIO_Init+0x4c>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062e:	f003 0301 	and.w	r3, r3, #1
 8000632:	603b      	str	r3, [r7, #0]
 8000634:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000636:	bf00      	nop
 8000638:	370c      	adds	r7, #12
 800063a:	46bd      	mov	sp, r7
 800063c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000640:	4770      	bx	lr
 8000642:	bf00      	nop
 8000644:	40023800 	.word	0x40023800

08000648 <StartTask1>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask1 */
void StartTask1(void *argument)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000650:	2001      	movs	r0, #1
 8000652:	f000 ff27 	bl	80014a4 <osDelay>
 8000656:	e7fb      	b.n	8000650 <StartTask1+0x8>

08000658 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000660:	2001      	movs	r0, #1
 8000662:	f000 ff1f 	bl	80014a4 <osDelay>
 8000666:	e7fb      	b.n	8000660 <StartTask02+0x8>

08000668 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000668:	b480      	push	{r7}
 800066a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800066c:	b672      	cpsid	i
}
 800066e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000670:	e7fe      	b.n	8000670 <Error_Handler+0x8>
	...

08000674 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800067a:	2300      	movs	r3, #0
 800067c:	607b      	str	r3, [r7, #4]
 800067e:	4b12      	ldr	r3, [pc, #72]	; (80006c8 <HAL_MspInit+0x54>)
 8000680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000682:	4a11      	ldr	r2, [pc, #68]	; (80006c8 <HAL_MspInit+0x54>)
 8000684:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000688:	6453      	str	r3, [r2, #68]	; 0x44
 800068a:	4b0f      	ldr	r3, [pc, #60]	; (80006c8 <HAL_MspInit+0x54>)
 800068c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800068e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000692:	607b      	str	r3, [r7, #4]
 8000694:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000696:	2300      	movs	r3, #0
 8000698:	603b      	str	r3, [r7, #0]
 800069a:	4b0b      	ldr	r3, [pc, #44]	; (80006c8 <HAL_MspInit+0x54>)
 800069c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800069e:	4a0a      	ldr	r2, [pc, #40]	; (80006c8 <HAL_MspInit+0x54>)
 80006a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006a4:	6413      	str	r3, [r2, #64]	; 0x40
 80006a6:	4b08      	ldr	r3, [pc, #32]	; (80006c8 <HAL_MspInit+0x54>)
 80006a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006ae:	603b      	str	r3, [r7, #0]
 80006b0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80006b2:	2200      	movs	r2, #0
 80006b4:	210f      	movs	r1, #15
 80006b6:	f06f 0001 	mvn.w	r0, #1
 80006ba:	f000 f996 	bl	80009ea <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006be:	bf00      	nop
 80006c0:	3708      	adds	r7, #8
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	40023800 	.word	0x40023800

080006cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006cc:	b480      	push	{r7}
 80006ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006d0:	e7fe      	b.n	80006d0 <NMI_Handler+0x4>

080006d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006d2:	b480      	push	{r7}
 80006d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006d6:	e7fe      	b.n	80006d6 <HardFault_Handler+0x4>

080006d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006d8:	b480      	push	{r7}
 80006da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006dc:	e7fe      	b.n	80006dc <MemManage_Handler+0x4>

080006de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006de:	b480      	push	{r7}
 80006e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006e2:	e7fe      	b.n	80006e2 <BusFault_Handler+0x4>

080006e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006e4:	b480      	push	{r7}
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006e8:	e7fe      	b.n	80006e8 <UsageFault_Handler+0x4>

080006ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006ea:	b480      	push	{r7}
 80006ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006ee:	bf00      	nop
 80006f0:	46bd      	mov	sp, r7
 80006f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f6:	4770      	bx	lr

080006f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006fc:	f000 f898 	bl	8000830 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000700:	f002 fbf0 	bl	8002ee4 <xTaskGetSchedulerState>
 8000704:	4603      	mov	r3, r0
 8000706:	2b01      	cmp	r3, #1
 8000708:	d001      	beq.n	800070e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800070a:	f003 f9ed 	bl	8003ae8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800070e:	bf00      	nop
 8000710:	bd80      	pop	{r7, pc}
	...

08000714 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000714:	b480      	push	{r7}
 8000716:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000718:	4b06      	ldr	r3, [pc, #24]	; (8000734 <SystemInit+0x20>)
 800071a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800071e:	4a05      	ldr	r2, [pc, #20]	; (8000734 <SystemInit+0x20>)
 8000720:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000724:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000728:	bf00      	nop
 800072a:	46bd      	mov	sp, r7
 800072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop
 8000734:	e000ed00 	.word	0xe000ed00

08000738 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000738:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000770 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800073c:	480d      	ldr	r0, [pc, #52]	; (8000774 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800073e:	490e      	ldr	r1, [pc, #56]	; (8000778 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000740:	4a0e      	ldr	r2, [pc, #56]	; (800077c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000742:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000744:	e002      	b.n	800074c <LoopCopyDataInit>

08000746 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000746:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000748:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800074a:	3304      	adds	r3, #4

0800074c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800074c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800074e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000750:	d3f9      	bcc.n	8000746 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000752:	4a0b      	ldr	r2, [pc, #44]	; (8000780 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000754:	4c0b      	ldr	r4, [pc, #44]	; (8000784 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000756:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000758:	e001      	b.n	800075e <LoopFillZerobss>

0800075a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800075a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800075c:	3204      	adds	r2, #4

0800075e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800075e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000760:	d3fb      	bcc.n	800075a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000762:	f7ff ffd7 	bl	8000714 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000766:	f005 fa1b 	bl	8005ba0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800076a:	f7ff feaf 	bl	80004cc <main>
  bx  lr    
 800076e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000770:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000774:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000778:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 800077c:	08005d80 	.word	0x08005d80
  ldr r2, =_sbss
 8000780:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000784:	20007000 	.word	0x20007000

08000788 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000788:	e7fe      	b.n	8000788 <ADC_IRQHandler>
	...

0800078c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000790:	4b0e      	ldr	r3, [pc, #56]	; (80007cc <HAL_Init+0x40>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	4a0d      	ldr	r2, [pc, #52]	; (80007cc <HAL_Init+0x40>)
 8000796:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800079a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800079c:	4b0b      	ldr	r3, [pc, #44]	; (80007cc <HAL_Init+0x40>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	4a0a      	ldr	r2, [pc, #40]	; (80007cc <HAL_Init+0x40>)
 80007a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80007a6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007a8:	4b08      	ldr	r3, [pc, #32]	; (80007cc <HAL_Init+0x40>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	4a07      	ldr	r2, [pc, #28]	; (80007cc <HAL_Init+0x40>)
 80007ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007b4:	2003      	movs	r0, #3
 80007b6:	f000 f90d 	bl	80009d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007ba:	200f      	movs	r0, #15
 80007bc:	f000 f808 	bl	80007d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007c0:	f7ff ff58 	bl	8000674 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007c4:	2300      	movs	r3, #0
}
 80007c6:	4618      	mov	r0, r3
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	40023c00 	.word	0x40023c00

080007d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007d8:	4b12      	ldr	r3, [pc, #72]	; (8000824 <HAL_InitTick+0x54>)
 80007da:	681a      	ldr	r2, [r3, #0]
 80007dc:	4b12      	ldr	r3, [pc, #72]	; (8000828 <HAL_InitTick+0x58>)
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	4619      	mov	r1, r3
 80007e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80007ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80007ee:	4618      	mov	r0, r3
 80007f0:	f000 f917 	bl	8000a22 <HAL_SYSTICK_Config>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007fa:	2301      	movs	r3, #1
 80007fc:	e00e      	b.n	800081c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	2b0f      	cmp	r3, #15
 8000802:	d80a      	bhi.n	800081a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000804:	2200      	movs	r2, #0
 8000806:	6879      	ldr	r1, [r7, #4]
 8000808:	f04f 30ff 	mov.w	r0, #4294967295
 800080c:	f000 f8ed 	bl	80009ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000810:	4a06      	ldr	r2, [pc, #24]	; (800082c <HAL_InitTick+0x5c>)
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000816:	2300      	movs	r3, #0
 8000818:	e000      	b.n	800081c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800081a:	2301      	movs	r3, #1
}
 800081c:	4618      	mov	r0, r3
 800081e:	3708      	adds	r7, #8
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	20000000 	.word	0x20000000
 8000828:	20000008 	.word	0x20000008
 800082c:	20000004 	.word	0x20000004

08000830 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000834:	4b06      	ldr	r3, [pc, #24]	; (8000850 <HAL_IncTick+0x20>)
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	461a      	mov	r2, r3
 800083a:	4b06      	ldr	r3, [pc, #24]	; (8000854 <HAL_IncTick+0x24>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	4413      	add	r3, r2
 8000840:	4a04      	ldr	r2, [pc, #16]	; (8000854 <HAL_IncTick+0x24>)
 8000842:	6013      	str	r3, [r2, #0]
}
 8000844:	bf00      	nop
 8000846:	46bd      	mov	sp, r7
 8000848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084c:	4770      	bx	lr
 800084e:	bf00      	nop
 8000850:	20000008 	.word	0x20000008
 8000854:	20000034 	.word	0x20000034

08000858 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  return uwTick;
 800085c:	4b03      	ldr	r3, [pc, #12]	; (800086c <HAL_GetTick+0x14>)
 800085e:	681b      	ldr	r3, [r3, #0]
}
 8000860:	4618      	mov	r0, r3
 8000862:	46bd      	mov	sp, r7
 8000864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000868:	4770      	bx	lr
 800086a:	bf00      	nop
 800086c:	20000034 	.word	0x20000034

08000870 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000870:	b480      	push	{r7}
 8000872:	b085      	sub	sp, #20
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	f003 0307 	and.w	r3, r3, #7
 800087e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000880:	4b0c      	ldr	r3, [pc, #48]	; (80008b4 <__NVIC_SetPriorityGrouping+0x44>)
 8000882:	68db      	ldr	r3, [r3, #12]
 8000884:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000886:	68ba      	ldr	r2, [r7, #8]
 8000888:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800088c:	4013      	ands	r3, r2
 800088e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000894:	68bb      	ldr	r3, [r7, #8]
 8000896:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000898:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800089c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008a2:	4a04      	ldr	r2, [pc, #16]	; (80008b4 <__NVIC_SetPriorityGrouping+0x44>)
 80008a4:	68bb      	ldr	r3, [r7, #8]
 80008a6:	60d3      	str	r3, [r2, #12]
}
 80008a8:	bf00      	nop
 80008aa:	3714      	adds	r7, #20
 80008ac:	46bd      	mov	sp, r7
 80008ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b2:	4770      	bx	lr
 80008b4:	e000ed00 	.word	0xe000ed00

080008b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008bc:	4b04      	ldr	r3, [pc, #16]	; (80008d0 <__NVIC_GetPriorityGrouping+0x18>)
 80008be:	68db      	ldr	r3, [r3, #12]
 80008c0:	0a1b      	lsrs	r3, r3, #8
 80008c2:	f003 0307 	and.w	r3, r3, #7
}
 80008c6:	4618      	mov	r0, r3
 80008c8:	46bd      	mov	sp, r7
 80008ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ce:	4770      	bx	lr
 80008d0:	e000ed00 	.word	0xe000ed00

080008d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008d4:	b480      	push	{r7}
 80008d6:	b083      	sub	sp, #12
 80008d8:	af00      	add	r7, sp, #0
 80008da:	4603      	mov	r3, r0
 80008dc:	6039      	str	r1, [r7, #0]
 80008de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	db0a      	blt.n	80008fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008e8:	683b      	ldr	r3, [r7, #0]
 80008ea:	b2da      	uxtb	r2, r3
 80008ec:	490c      	ldr	r1, [pc, #48]	; (8000920 <__NVIC_SetPriority+0x4c>)
 80008ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008f2:	0112      	lsls	r2, r2, #4
 80008f4:	b2d2      	uxtb	r2, r2
 80008f6:	440b      	add	r3, r1
 80008f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008fc:	e00a      	b.n	8000914 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008fe:	683b      	ldr	r3, [r7, #0]
 8000900:	b2da      	uxtb	r2, r3
 8000902:	4908      	ldr	r1, [pc, #32]	; (8000924 <__NVIC_SetPriority+0x50>)
 8000904:	79fb      	ldrb	r3, [r7, #7]
 8000906:	f003 030f 	and.w	r3, r3, #15
 800090a:	3b04      	subs	r3, #4
 800090c:	0112      	lsls	r2, r2, #4
 800090e:	b2d2      	uxtb	r2, r2
 8000910:	440b      	add	r3, r1
 8000912:	761a      	strb	r2, [r3, #24]
}
 8000914:	bf00      	nop
 8000916:	370c      	adds	r7, #12
 8000918:	46bd      	mov	sp, r7
 800091a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091e:	4770      	bx	lr
 8000920:	e000e100 	.word	0xe000e100
 8000924:	e000ed00 	.word	0xe000ed00

08000928 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000928:	b480      	push	{r7}
 800092a:	b089      	sub	sp, #36	; 0x24
 800092c:	af00      	add	r7, sp, #0
 800092e:	60f8      	str	r0, [r7, #12]
 8000930:	60b9      	str	r1, [r7, #8]
 8000932:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	f003 0307 	and.w	r3, r3, #7
 800093a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800093c:	69fb      	ldr	r3, [r7, #28]
 800093e:	f1c3 0307 	rsb	r3, r3, #7
 8000942:	2b04      	cmp	r3, #4
 8000944:	bf28      	it	cs
 8000946:	2304      	movcs	r3, #4
 8000948:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800094a:	69fb      	ldr	r3, [r7, #28]
 800094c:	3304      	adds	r3, #4
 800094e:	2b06      	cmp	r3, #6
 8000950:	d902      	bls.n	8000958 <NVIC_EncodePriority+0x30>
 8000952:	69fb      	ldr	r3, [r7, #28]
 8000954:	3b03      	subs	r3, #3
 8000956:	e000      	b.n	800095a <NVIC_EncodePriority+0x32>
 8000958:	2300      	movs	r3, #0
 800095a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800095c:	f04f 32ff 	mov.w	r2, #4294967295
 8000960:	69bb      	ldr	r3, [r7, #24]
 8000962:	fa02 f303 	lsl.w	r3, r2, r3
 8000966:	43da      	mvns	r2, r3
 8000968:	68bb      	ldr	r3, [r7, #8]
 800096a:	401a      	ands	r2, r3
 800096c:	697b      	ldr	r3, [r7, #20]
 800096e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000970:	f04f 31ff 	mov.w	r1, #4294967295
 8000974:	697b      	ldr	r3, [r7, #20]
 8000976:	fa01 f303 	lsl.w	r3, r1, r3
 800097a:	43d9      	mvns	r1, r3
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000980:	4313      	orrs	r3, r2
         );
}
 8000982:	4618      	mov	r0, r3
 8000984:	3724      	adds	r7, #36	; 0x24
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr
	...

08000990 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	3b01      	subs	r3, #1
 800099c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80009a0:	d301      	bcc.n	80009a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009a2:	2301      	movs	r3, #1
 80009a4:	e00f      	b.n	80009c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009a6:	4a0a      	ldr	r2, [pc, #40]	; (80009d0 <SysTick_Config+0x40>)
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	3b01      	subs	r3, #1
 80009ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009ae:	210f      	movs	r1, #15
 80009b0:	f04f 30ff 	mov.w	r0, #4294967295
 80009b4:	f7ff ff8e 	bl	80008d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009b8:	4b05      	ldr	r3, [pc, #20]	; (80009d0 <SysTick_Config+0x40>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009be:	4b04      	ldr	r3, [pc, #16]	; (80009d0 <SysTick_Config+0x40>)
 80009c0:	2207      	movs	r2, #7
 80009c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009c4:	2300      	movs	r3, #0
}
 80009c6:	4618      	mov	r0, r3
 80009c8:	3708      	adds	r7, #8
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	e000e010 	.word	0xe000e010

080009d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009dc:	6878      	ldr	r0, [r7, #4]
 80009de:	f7ff ff47 	bl	8000870 <__NVIC_SetPriorityGrouping>
}
 80009e2:	bf00      	nop
 80009e4:	3708      	adds	r7, #8
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}

080009ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009ea:	b580      	push	{r7, lr}
 80009ec:	b086      	sub	sp, #24
 80009ee:	af00      	add	r7, sp, #0
 80009f0:	4603      	mov	r3, r0
 80009f2:	60b9      	str	r1, [r7, #8]
 80009f4:	607a      	str	r2, [r7, #4]
 80009f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80009f8:	2300      	movs	r3, #0
 80009fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009fc:	f7ff ff5c 	bl	80008b8 <__NVIC_GetPriorityGrouping>
 8000a00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a02:	687a      	ldr	r2, [r7, #4]
 8000a04:	68b9      	ldr	r1, [r7, #8]
 8000a06:	6978      	ldr	r0, [r7, #20]
 8000a08:	f7ff ff8e 	bl	8000928 <NVIC_EncodePriority>
 8000a0c:	4602      	mov	r2, r0
 8000a0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a12:	4611      	mov	r1, r2
 8000a14:	4618      	mov	r0, r3
 8000a16:	f7ff ff5d 	bl	80008d4 <__NVIC_SetPriority>
}
 8000a1a:	bf00      	nop
 8000a1c:	3718      	adds	r7, #24
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}

08000a22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a22:	b580      	push	{r7, lr}
 8000a24:	b082      	sub	sp, #8
 8000a26:	af00      	add	r7, sp, #0
 8000a28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a2a:	6878      	ldr	r0, [r7, #4]
 8000a2c:	f7ff ffb0 	bl	8000990 <SysTick_Config>
 8000a30:	4603      	mov	r3, r0
}
 8000a32:	4618      	mov	r0, r3
 8000a34:	3708      	adds	r7, #8
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
	...

08000a3c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b086      	sub	sp, #24
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d101      	bne.n	8000a4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	e267      	b.n	8000f1e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	f003 0301 	and.w	r3, r3, #1
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d075      	beq.n	8000b46 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000a5a:	4b88      	ldr	r3, [pc, #544]	; (8000c7c <HAL_RCC_OscConfig+0x240>)
 8000a5c:	689b      	ldr	r3, [r3, #8]
 8000a5e:	f003 030c 	and.w	r3, r3, #12
 8000a62:	2b04      	cmp	r3, #4
 8000a64:	d00c      	beq.n	8000a80 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000a66:	4b85      	ldr	r3, [pc, #532]	; (8000c7c <HAL_RCC_OscConfig+0x240>)
 8000a68:	689b      	ldr	r3, [r3, #8]
 8000a6a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000a6e:	2b08      	cmp	r3, #8
 8000a70:	d112      	bne.n	8000a98 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000a72:	4b82      	ldr	r3, [pc, #520]	; (8000c7c <HAL_RCC_OscConfig+0x240>)
 8000a74:	685b      	ldr	r3, [r3, #4]
 8000a76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000a7a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000a7e:	d10b      	bne.n	8000a98 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000a80:	4b7e      	ldr	r3, [pc, #504]	; (8000c7c <HAL_RCC_OscConfig+0x240>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d05b      	beq.n	8000b44 <HAL_RCC_OscConfig+0x108>
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	685b      	ldr	r3, [r3, #4]
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d157      	bne.n	8000b44 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000a94:	2301      	movs	r3, #1
 8000a96:	e242      	b.n	8000f1e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	685b      	ldr	r3, [r3, #4]
 8000a9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000aa0:	d106      	bne.n	8000ab0 <HAL_RCC_OscConfig+0x74>
 8000aa2:	4b76      	ldr	r3, [pc, #472]	; (8000c7c <HAL_RCC_OscConfig+0x240>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	4a75      	ldr	r2, [pc, #468]	; (8000c7c <HAL_RCC_OscConfig+0x240>)
 8000aa8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000aac:	6013      	str	r3, [r2, #0]
 8000aae:	e01d      	b.n	8000aec <HAL_RCC_OscConfig+0xb0>
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	685b      	ldr	r3, [r3, #4]
 8000ab4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000ab8:	d10c      	bne.n	8000ad4 <HAL_RCC_OscConfig+0x98>
 8000aba:	4b70      	ldr	r3, [pc, #448]	; (8000c7c <HAL_RCC_OscConfig+0x240>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	4a6f      	ldr	r2, [pc, #444]	; (8000c7c <HAL_RCC_OscConfig+0x240>)
 8000ac0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ac4:	6013      	str	r3, [r2, #0]
 8000ac6:	4b6d      	ldr	r3, [pc, #436]	; (8000c7c <HAL_RCC_OscConfig+0x240>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	4a6c      	ldr	r2, [pc, #432]	; (8000c7c <HAL_RCC_OscConfig+0x240>)
 8000acc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ad0:	6013      	str	r3, [r2, #0]
 8000ad2:	e00b      	b.n	8000aec <HAL_RCC_OscConfig+0xb0>
 8000ad4:	4b69      	ldr	r3, [pc, #420]	; (8000c7c <HAL_RCC_OscConfig+0x240>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a68      	ldr	r2, [pc, #416]	; (8000c7c <HAL_RCC_OscConfig+0x240>)
 8000ada:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ade:	6013      	str	r3, [r2, #0]
 8000ae0:	4b66      	ldr	r3, [pc, #408]	; (8000c7c <HAL_RCC_OscConfig+0x240>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4a65      	ldr	r2, [pc, #404]	; (8000c7c <HAL_RCC_OscConfig+0x240>)
 8000ae6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000aea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	685b      	ldr	r3, [r3, #4]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d013      	beq.n	8000b1c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000af4:	f7ff feb0 	bl	8000858 <HAL_GetTick>
 8000af8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000afa:	e008      	b.n	8000b0e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000afc:	f7ff feac 	bl	8000858 <HAL_GetTick>
 8000b00:	4602      	mov	r2, r0
 8000b02:	693b      	ldr	r3, [r7, #16]
 8000b04:	1ad3      	subs	r3, r2, r3
 8000b06:	2b64      	cmp	r3, #100	; 0x64
 8000b08:	d901      	bls.n	8000b0e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000b0a:	2303      	movs	r3, #3
 8000b0c:	e207      	b.n	8000f1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b0e:	4b5b      	ldr	r3, [pc, #364]	; (8000c7c <HAL_RCC_OscConfig+0x240>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d0f0      	beq.n	8000afc <HAL_RCC_OscConfig+0xc0>
 8000b1a:	e014      	b.n	8000b46 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b1c:	f7ff fe9c 	bl	8000858 <HAL_GetTick>
 8000b20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b22:	e008      	b.n	8000b36 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000b24:	f7ff fe98 	bl	8000858 <HAL_GetTick>
 8000b28:	4602      	mov	r2, r0
 8000b2a:	693b      	ldr	r3, [r7, #16]
 8000b2c:	1ad3      	subs	r3, r2, r3
 8000b2e:	2b64      	cmp	r3, #100	; 0x64
 8000b30:	d901      	bls.n	8000b36 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000b32:	2303      	movs	r3, #3
 8000b34:	e1f3      	b.n	8000f1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b36:	4b51      	ldr	r3, [pc, #324]	; (8000c7c <HAL_RCC_OscConfig+0x240>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d1f0      	bne.n	8000b24 <HAL_RCC_OscConfig+0xe8>
 8000b42:	e000      	b.n	8000b46 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	f003 0302 	and.w	r3, r3, #2
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d063      	beq.n	8000c1a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000b52:	4b4a      	ldr	r3, [pc, #296]	; (8000c7c <HAL_RCC_OscConfig+0x240>)
 8000b54:	689b      	ldr	r3, [r3, #8]
 8000b56:	f003 030c 	and.w	r3, r3, #12
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d00b      	beq.n	8000b76 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000b5e:	4b47      	ldr	r3, [pc, #284]	; (8000c7c <HAL_RCC_OscConfig+0x240>)
 8000b60:	689b      	ldr	r3, [r3, #8]
 8000b62:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000b66:	2b08      	cmp	r3, #8
 8000b68:	d11c      	bne.n	8000ba4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000b6a:	4b44      	ldr	r3, [pc, #272]	; (8000c7c <HAL_RCC_OscConfig+0x240>)
 8000b6c:	685b      	ldr	r3, [r3, #4]
 8000b6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d116      	bne.n	8000ba4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000b76:	4b41      	ldr	r3, [pc, #260]	; (8000c7c <HAL_RCC_OscConfig+0x240>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	f003 0302 	and.w	r3, r3, #2
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d005      	beq.n	8000b8e <HAL_RCC_OscConfig+0x152>
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	68db      	ldr	r3, [r3, #12]
 8000b86:	2b01      	cmp	r3, #1
 8000b88:	d001      	beq.n	8000b8e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	e1c7      	b.n	8000f1e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b8e:	4b3b      	ldr	r3, [pc, #236]	; (8000c7c <HAL_RCC_OscConfig+0x240>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	691b      	ldr	r3, [r3, #16]
 8000b9a:	00db      	lsls	r3, r3, #3
 8000b9c:	4937      	ldr	r1, [pc, #220]	; (8000c7c <HAL_RCC_OscConfig+0x240>)
 8000b9e:	4313      	orrs	r3, r2
 8000ba0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ba2:	e03a      	b.n	8000c1a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	68db      	ldr	r3, [r3, #12]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d020      	beq.n	8000bee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000bac:	4b34      	ldr	r3, [pc, #208]	; (8000c80 <HAL_RCC_OscConfig+0x244>)
 8000bae:	2201      	movs	r2, #1
 8000bb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000bb2:	f7ff fe51 	bl	8000858 <HAL_GetTick>
 8000bb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000bb8:	e008      	b.n	8000bcc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000bba:	f7ff fe4d 	bl	8000858 <HAL_GetTick>
 8000bbe:	4602      	mov	r2, r0
 8000bc0:	693b      	ldr	r3, [r7, #16]
 8000bc2:	1ad3      	subs	r3, r2, r3
 8000bc4:	2b02      	cmp	r3, #2
 8000bc6:	d901      	bls.n	8000bcc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000bc8:	2303      	movs	r3, #3
 8000bca:	e1a8      	b.n	8000f1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000bcc:	4b2b      	ldr	r3, [pc, #172]	; (8000c7c <HAL_RCC_OscConfig+0x240>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	f003 0302 	and.w	r3, r3, #2
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d0f0      	beq.n	8000bba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000bd8:	4b28      	ldr	r3, [pc, #160]	; (8000c7c <HAL_RCC_OscConfig+0x240>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	691b      	ldr	r3, [r3, #16]
 8000be4:	00db      	lsls	r3, r3, #3
 8000be6:	4925      	ldr	r1, [pc, #148]	; (8000c7c <HAL_RCC_OscConfig+0x240>)
 8000be8:	4313      	orrs	r3, r2
 8000bea:	600b      	str	r3, [r1, #0]
 8000bec:	e015      	b.n	8000c1a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000bee:	4b24      	ldr	r3, [pc, #144]	; (8000c80 <HAL_RCC_OscConfig+0x244>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000bf4:	f7ff fe30 	bl	8000858 <HAL_GetTick>
 8000bf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000bfa:	e008      	b.n	8000c0e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000bfc:	f7ff fe2c 	bl	8000858 <HAL_GetTick>
 8000c00:	4602      	mov	r2, r0
 8000c02:	693b      	ldr	r3, [r7, #16]
 8000c04:	1ad3      	subs	r3, r2, r3
 8000c06:	2b02      	cmp	r3, #2
 8000c08:	d901      	bls.n	8000c0e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000c0a:	2303      	movs	r3, #3
 8000c0c:	e187      	b.n	8000f1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c0e:	4b1b      	ldr	r3, [pc, #108]	; (8000c7c <HAL_RCC_OscConfig+0x240>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	f003 0302 	and.w	r3, r3, #2
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d1f0      	bne.n	8000bfc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	f003 0308 	and.w	r3, r3, #8
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d036      	beq.n	8000c94 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	695b      	ldr	r3, [r3, #20]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d016      	beq.n	8000c5c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000c2e:	4b15      	ldr	r3, [pc, #84]	; (8000c84 <HAL_RCC_OscConfig+0x248>)
 8000c30:	2201      	movs	r2, #1
 8000c32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000c34:	f7ff fe10 	bl	8000858 <HAL_GetTick>
 8000c38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000c3a:	e008      	b.n	8000c4e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000c3c:	f7ff fe0c 	bl	8000858 <HAL_GetTick>
 8000c40:	4602      	mov	r2, r0
 8000c42:	693b      	ldr	r3, [r7, #16]
 8000c44:	1ad3      	subs	r3, r2, r3
 8000c46:	2b02      	cmp	r3, #2
 8000c48:	d901      	bls.n	8000c4e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000c4a:	2303      	movs	r3, #3
 8000c4c:	e167      	b.n	8000f1e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000c4e:	4b0b      	ldr	r3, [pc, #44]	; (8000c7c <HAL_RCC_OscConfig+0x240>)
 8000c50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000c52:	f003 0302 	and.w	r3, r3, #2
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d0f0      	beq.n	8000c3c <HAL_RCC_OscConfig+0x200>
 8000c5a:	e01b      	b.n	8000c94 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000c5c:	4b09      	ldr	r3, [pc, #36]	; (8000c84 <HAL_RCC_OscConfig+0x248>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000c62:	f7ff fdf9 	bl	8000858 <HAL_GetTick>
 8000c66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000c68:	e00e      	b.n	8000c88 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000c6a:	f7ff fdf5 	bl	8000858 <HAL_GetTick>
 8000c6e:	4602      	mov	r2, r0
 8000c70:	693b      	ldr	r3, [r7, #16]
 8000c72:	1ad3      	subs	r3, r2, r3
 8000c74:	2b02      	cmp	r3, #2
 8000c76:	d907      	bls.n	8000c88 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8000c78:	2303      	movs	r3, #3
 8000c7a:	e150      	b.n	8000f1e <HAL_RCC_OscConfig+0x4e2>
 8000c7c:	40023800 	.word	0x40023800
 8000c80:	42470000 	.word	0x42470000
 8000c84:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000c88:	4b88      	ldr	r3, [pc, #544]	; (8000eac <HAL_RCC_OscConfig+0x470>)
 8000c8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000c8c:	f003 0302 	and.w	r3, r3, #2
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d1ea      	bne.n	8000c6a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	f003 0304 	and.w	r3, r3, #4
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	f000 8097 	beq.w	8000dd0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000ca6:	4b81      	ldr	r3, [pc, #516]	; (8000eac <HAL_RCC_OscConfig+0x470>)
 8000ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000caa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d10f      	bne.n	8000cd2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	60bb      	str	r3, [r7, #8]
 8000cb6:	4b7d      	ldr	r3, [pc, #500]	; (8000eac <HAL_RCC_OscConfig+0x470>)
 8000cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cba:	4a7c      	ldr	r2, [pc, #496]	; (8000eac <HAL_RCC_OscConfig+0x470>)
 8000cbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cc0:	6413      	str	r3, [r2, #64]	; 0x40
 8000cc2:	4b7a      	ldr	r3, [pc, #488]	; (8000eac <HAL_RCC_OscConfig+0x470>)
 8000cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cca:	60bb      	str	r3, [r7, #8]
 8000ccc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000cce:	2301      	movs	r3, #1
 8000cd0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000cd2:	4b77      	ldr	r3, [pc, #476]	; (8000eb0 <HAL_RCC_OscConfig+0x474>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d118      	bne.n	8000d10 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000cde:	4b74      	ldr	r3, [pc, #464]	; (8000eb0 <HAL_RCC_OscConfig+0x474>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	4a73      	ldr	r2, [pc, #460]	; (8000eb0 <HAL_RCC_OscConfig+0x474>)
 8000ce4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ce8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000cea:	f7ff fdb5 	bl	8000858 <HAL_GetTick>
 8000cee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000cf0:	e008      	b.n	8000d04 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000cf2:	f7ff fdb1 	bl	8000858 <HAL_GetTick>
 8000cf6:	4602      	mov	r2, r0
 8000cf8:	693b      	ldr	r3, [r7, #16]
 8000cfa:	1ad3      	subs	r3, r2, r3
 8000cfc:	2b02      	cmp	r3, #2
 8000cfe:	d901      	bls.n	8000d04 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8000d00:	2303      	movs	r3, #3
 8000d02:	e10c      	b.n	8000f1e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d04:	4b6a      	ldr	r3, [pc, #424]	; (8000eb0 <HAL_RCC_OscConfig+0x474>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d0f0      	beq.n	8000cf2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	689b      	ldr	r3, [r3, #8]
 8000d14:	2b01      	cmp	r3, #1
 8000d16:	d106      	bne.n	8000d26 <HAL_RCC_OscConfig+0x2ea>
 8000d18:	4b64      	ldr	r3, [pc, #400]	; (8000eac <HAL_RCC_OscConfig+0x470>)
 8000d1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000d1c:	4a63      	ldr	r2, [pc, #396]	; (8000eac <HAL_RCC_OscConfig+0x470>)
 8000d1e:	f043 0301 	orr.w	r3, r3, #1
 8000d22:	6713      	str	r3, [r2, #112]	; 0x70
 8000d24:	e01c      	b.n	8000d60 <HAL_RCC_OscConfig+0x324>
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	689b      	ldr	r3, [r3, #8]
 8000d2a:	2b05      	cmp	r3, #5
 8000d2c:	d10c      	bne.n	8000d48 <HAL_RCC_OscConfig+0x30c>
 8000d2e:	4b5f      	ldr	r3, [pc, #380]	; (8000eac <HAL_RCC_OscConfig+0x470>)
 8000d30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000d32:	4a5e      	ldr	r2, [pc, #376]	; (8000eac <HAL_RCC_OscConfig+0x470>)
 8000d34:	f043 0304 	orr.w	r3, r3, #4
 8000d38:	6713      	str	r3, [r2, #112]	; 0x70
 8000d3a:	4b5c      	ldr	r3, [pc, #368]	; (8000eac <HAL_RCC_OscConfig+0x470>)
 8000d3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000d3e:	4a5b      	ldr	r2, [pc, #364]	; (8000eac <HAL_RCC_OscConfig+0x470>)
 8000d40:	f043 0301 	orr.w	r3, r3, #1
 8000d44:	6713      	str	r3, [r2, #112]	; 0x70
 8000d46:	e00b      	b.n	8000d60 <HAL_RCC_OscConfig+0x324>
 8000d48:	4b58      	ldr	r3, [pc, #352]	; (8000eac <HAL_RCC_OscConfig+0x470>)
 8000d4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000d4c:	4a57      	ldr	r2, [pc, #348]	; (8000eac <HAL_RCC_OscConfig+0x470>)
 8000d4e:	f023 0301 	bic.w	r3, r3, #1
 8000d52:	6713      	str	r3, [r2, #112]	; 0x70
 8000d54:	4b55      	ldr	r3, [pc, #340]	; (8000eac <HAL_RCC_OscConfig+0x470>)
 8000d56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000d58:	4a54      	ldr	r2, [pc, #336]	; (8000eac <HAL_RCC_OscConfig+0x470>)
 8000d5a:	f023 0304 	bic.w	r3, r3, #4
 8000d5e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	689b      	ldr	r3, [r3, #8]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d015      	beq.n	8000d94 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000d68:	f7ff fd76 	bl	8000858 <HAL_GetTick>
 8000d6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000d6e:	e00a      	b.n	8000d86 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000d70:	f7ff fd72 	bl	8000858 <HAL_GetTick>
 8000d74:	4602      	mov	r2, r0
 8000d76:	693b      	ldr	r3, [r7, #16]
 8000d78:	1ad3      	subs	r3, r2, r3
 8000d7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d901      	bls.n	8000d86 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8000d82:	2303      	movs	r3, #3
 8000d84:	e0cb      	b.n	8000f1e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000d86:	4b49      	ldr	r3, [pc, #292]	; (8000eac <HAL_RCC_OscConfig+0x470>)
 8000d88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000d8a:	f003 0302 	and.w	r3, r3, #2
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d0ee      	beq.n	8000d70 <HAL_RCC_OscConfig+0x334>
 8000d92:	e014      	b.n	8000dbe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d94:	f7ff fd60 	bl	8000858 <HAL_GetTick>
 8000d98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000d9a:	e00a      	b.n	8000db2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000d9c:	f7ff fd5c 	bl	8000858 <HAL_GetTick>
 8000da0:	4602      	mov	r2, r0
 8000da2:	693b      	ldr	r3, [r7, #16]
 8000da4:	1ad3      	subs	r3, r2, r3
 8000da6:	f241 3288 	movw	r2, #5000	; 0x1388
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d901      	bls.n	8000db2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8000dae:	2303      	movs	r3, #3
 8000db0:	e0b5      	b.n	8000f1e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000db2:	4b3e      	ldr	r3, [pc, #248]	; (8000eac <HAL_RCC_OscConfig+0x470>)
 8000db4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000db6:	f003 0302 	and.w	r3, r3, #2
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d1ee      	bne.n	8000d9c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000dbe:	7dfb      	ldrb	r3, [r7, #23]
 8000dc0:	2b01      	cmp	r3, #1
 8000dc2:	d105      	bne.n	8000dd0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000dc4:	4b39      	ldr	r3, [pc, #228]	; (8000eac <HAL_RCC_OscConfig+0x470>)
 8000dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc8:	4a38      	ldr	r2, [pc, #224]	; (8000eac <HAL_RCC_OscConfig+0x470>)
 8000dca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000dce:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	699b      	ldr	r3, [r3, #24]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	f000 80a1 	beq.w	8000f1c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000dda:	4b34      	ldr	r3, [pc, #208]	; (8000eac <HAL_RCC_OscConfig+0x470>)
 8000ddc:	689b      	ldr	r3, [r3, #8]
 8000dde:	f003 030c 	and.w	r3, r3, #12
 8000de2:	2b08      	cmp	r3, #8
 8000de4:	d05c      	beq.n	8000ea0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	699b      	ldr	r3, [r3, #24]
 8000dea:	2b02      	cmp	r3, #2
 8000dec:	d141      	bne.n	8000e72 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000dee:	4b31      	ldr	r3, [pc, #196]	; (8000eb4 <HAL_RCC_OscConfig+0x478>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000df4:	f7ff fd30 	bl	8000858 <HAL_GetTick>
 8000df8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000dfa:	e008      	b.n	8000e0e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000dfc:	f7ff fd2c 	bl	8000858 <HAL_GetTick>
 8000e00:	4602      	mov	r2, r0
 8000e02:	693b      	ldr	r3, [r7, #16]
 8000e04:	1ad3      	subs	r3, r2, r3
 8000e06:	2b02      	cmp	r3, #2
 8000e08:	d901      	bls.n	8000e0e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8000e0a:	2303      	movs	r3, #3
 8000e0c:	e087      	b.n	8000f1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000e0e:	4b27      	ldr	r3, [pc, #156]	; (8000eac <HAL_RCC_OscConfig+0x470>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d1f0      	bne.n	8000dfc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	69da      	ldr	r2, [r3, #28]
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	6a1b      	ldr	r3, [r3, #32]
 8000e22:	431a      	orrs	r2, r3
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e28:	019b      	lsls	r3, r3, #6
 8000e2a:	431a      	orrs	r2, r3
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e30:	085b      	lsrs	r3, r3, #1
 8000e32:	3b01      	subs	r3, #1
 8000e34:	041b      	lsls	r3, r3, #16
 8000e36:	431a      	orrs	r2, r3
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e3c:	061b      	lsls	r3, r3, #24
 8000e3e:	491b      	ldr	r1, [pc, #108]	; (8000eac <HAL_RCC_OscConfig+0x470>)
 8000e40:	4313      	orrs	r3, r2
 8000e42:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000e44:	4b1b      	ldr	r3, [pc, #108]	; (8000eb4 <HAL_RCC_OscConfig+0x478>)
 8000e46:	2201      	movs	r2, #1
 8000e48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e4a:	f7ff fd05 	bl	8000858 <HAL_GetTick>
 8000e4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000e50:	e008      	b.n	8000e64 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000e52:	f7ff fd01 	bl	8000858 <HAL_GetTick>
 8000e56:	4602      	mov	r2, r0
 8000e58:	693b      	ldr	r3, [r7, #16]
 8000e5a:	1ad3      	subs	r3, r2, r3
 8000e5c:	2b02      	cmp	r3, #2
 8000e5e:	d901      	bls.n	8000e64 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8000e60:	2303      	movs	r3, #3
 8000e62:	e05c      	b.n	8000f1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000e64:	4b11      	ldr	r3, [pc, #68]	; (8000eac <HAL_RCC_OscConfig+0x470>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d0f0      	beq.n	8000e52 <HAL_RCC_OscConfig+0x416>
 8000e70:	e054      	b.n	8000f1c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000e72:	4b10      	ldr	r3, [pc, #64]	; (8000eb4 <HAL_RCC_OscConfig+0x478>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e78:	f7ff fcee 	bl	8000858 <HAL_GetTick>
 8000e7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000e7e:	e008      	b.n	8000e92 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000e80:	f7ff fcea 	bl	8000858 <HAL_GetTick>
 8000e84:	4602      	mov	r2, r0
 8000e86:	693b      	ldr	r3, [r7, #16]
 8000e88:	1ad3      	subs	r3, r2, r3
 8000e8a:	2b02      	cmp	r3, #2
 8000e8c:	d901      	bls.n	8000e92 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8000e8e:	2303      	movs	r3, #3
 8000e90:	e045      	b.n	8000f1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000e92:	4b06      	ldr	r3, [pc, #24]	; (8000eac <HAL_RCC_OscConfig+0x470>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d1f0      	bne.n	8000e80 <HAL_RCC_OscConfig+0x444>
 8000e9e:	e03d      	b.n	8000f1c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	699b      	ldr	r3, [r3, #24]
 8000ea4:	2b01      	cmp	r3, #1
 8000ea6:	d107      	bne.n	8000eb8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	e038      	b.n	8000f1e <HAL_RCC_OscConfig+0x4e2>
 8000eac:	40023800 	.word	0x40023800
 8000eb0:	40007000 	.word	0x40007000
 8000eb4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8000eb8:	4b1b      	ldr	r3, [pc, #108]	; (8000f28 <HAL_RCC_OscConfig+0x4ec>)
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	699b      	ldr	r3, [r3, #24]
 8000ec2:	2b01      	cmp	r3, #1
 8000ec4:	d028      	beq.n	8000f18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000ed0:	429a      	cmp	r2, r3
 8000ed2:	d121      	bne.n	8000f18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000ede:	429a      	cmp	r2, r3
 8000ee0:	d11a      	bne.n	8000f18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8000ee2:	68fa      	ldr	r2, [r7, #12]
 8000ee4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8000ee8:	4013      	ands	r3, r2
 8000eea:	687a      	ldr	r2, [r7, #4]
 8000eec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000eee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8000ef0:	4293      	cmp	r3, r2
 8000ef2:	d111      	bne.n	8000f18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000efe:	085b      	lsrs	r3, r3, #1
 8000f00:	3b01      	subs	r3, #1
 8000f02:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8000f04:	429a      	cmp	r2, r3
 8000f06:	d107      	bne.n	8000f18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f12:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8000f14:	429a      	cmp	r2, r3
 8000f16:	d001      	beq.n	8000f1c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8000f18:	2301      	movs	r3, #1
 8000f1a:	e000      	b.n	8000f1e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8000f1c:	2300      	movs	r3, #0
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	3718      	adds	r7, #24
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	40023800 	.word	0x40023800

08000f2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b084      	sub	sp, #16
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
 8000f34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d101      	bne.n	8000f40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	e0cc      	b.n	80010da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000f40:	4b68      	ldr	r3, [pc, #416]	; (80010e4 <HAL_RCC_ClockConfig+0x1b8>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	f003 0307 	and.w	r3, r3, #7
 8000f48:	683a      	ldr	r2, [r7, #0]
 8000f4a:	429a      	cmp	r2, r3
 8000f4c:	d90c      	bls.n	8000f68 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f4e:	4b65      	ldr	r3, [pc, #404]	; (80010e4 <HAL_RCC_ClockConfig+0x1b8>)
 8000f50:	683a      	ldr	r2, [r7, #0]
 8000f52:	b2d2      	uxtb	r2, r2
 8000f54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000f56:	4b63      	ldr	r3, [pc, #396]	; (80010e4 <HAL_RCC_ClockConfig+0x1b8>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	f003 0307 	and.w	r3, r3, #7
 8000f5e:	683a      	ldr	r2, [r7, #0]
 8000f60:	429a      	cmp	r2, r3
 8000f62:	d001      	beq.n	8000f68 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8000f64:	2301      	movs	r3, #1
 8000f66:	e0b8      	b.n	80010da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	f003 0302 	and.w	r3, r3, #2
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d020      	beq.n	8000fb6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f003 0304 	and.w	r3, r3, #4
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d005      	beq.n	8000f8c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000f80:	4b59      	ldr	r3, [pc, #356]	; (80010e8 <HAL_RCC_ClockConfig+0x1bc>)
 8000f82:	689b      	ldr	r3, [r3, #8]
 8000f84:	4a58      	ldr	r2, [pc, #352]	; (80010e8 <HAL_RCC_ClockConfig+0x1bc>)
 8000f86:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8000f8a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f003 0308 	and.w	r3, r3, #8
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d005      	beq.n	8000fa4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000f98:	4b53      	ldr	r3, [pc, #332]	; (80010e8 <HAL_RCC_ClockConfig+0x1bc>)
 8000f9a:	689b      	ldr	r3, [r3, #8]
 8000f9c:	4a52      	ldr	r2, [pc, #328]	; (80010e8 <HAL_RCC_ClockConfig+0x1bc>)
 8000f9e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8000fa2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000fa4:	4b50      	ldr	r3, [pc, #320]	; (80010e8 <HAL_RCC_ClockConfig+0x1bc>)
 8000fa6:	689b      	ldr	r3, [r3, #8]
 8000fa8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	689b      	ldr	r3, [r3, #8]
 8000fb0:	494d      	ldr	r1, [pc, #308]	; (80010e8 <HAL_RCC_ClockConfig+0x1bc>)
 8000fb2:	4313      	orrs	r3, r2
 8000fb4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f003 0301 	and.w	r3, r3, #1
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d044      	beq.n	800104c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	2b01      	cmp	r3, #1
 8000fc8:	d107      	bne.n	8000fda <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fca:	4b47      	ldr	r3, [pc, #284]	; (80010e8 <HAL_RCC_ClockConfig+0x1bc>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d119      	bne.n	800100a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	e07f      	b.n	80010da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	2b02      	cmp	r3, #2
 8000fe0:	d003      	beq.n	8000fea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000fe6:	2b03      	cmp	r3, #3
 8000fe8:	d107      	bne.n	8000ffa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000fea:	4b3f      	ldr	r3, [pc, #252]	; (80010e8 <HAL_RCC_ClockConfig+0x1bc>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d109      	bne.n	800100a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	e06f      	b.n	80010da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ffa:	4b3b      	ldr	r3, [pc, #236]	; (80010e8 <HAL_RCC_ClockConfig+0x1bc>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f003 0302 	and.w	r3, r3, #2
 8001002:	2b00      	cmp	r3, #0
 8001004:	d101      	bne.n	800100a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001006:	2301      	movs	r3, #1
 8001008:	e067      	b.n	80010da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800100a:	4b37      	ldr	r3, [pc, #220]	; (80010e8 <HAL_RCC_ClockConfig+0x1bc>)
 800100c:	689b      	ldr	r3, [r3, #8]
 800100e:	f023 0203 	bic.w	r2, r3, #3
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	4934      	ldr	r1, [pc, #208]	; (80010e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001018:	4313      	orrs	r3, r2
 800101a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800101c:	f7ff fc1c 	bl	8000858 <HAL_GetTick>
 8001020:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001022:	e00a      	b.n	800103a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001024:	f7ff fc18 	bl	8000858 <HAL_GetTick>
 8001028:	4602      	mov	r2, r0
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	1ad3      	subs	r3, r2, r3
 800102e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001032:	4293      	cmp	r3, r2
 8001034:	d901      	bls.n	800103a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001036:	2303      	movs	r3, #3
 8001038:	e04f      	b.n	80010da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800103a:	4b2b      	ldr	r3, [pc, #172]	; (80010e8 <HAL_RCC_ClockConfig+0x1bc>)
 800103c:	689b      	ldr	r3, [r3, #8]
 800103e:	f003 020c 	and.w	r2, r3, #12
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	009b      	lsls	r3, r3, #2
 8001048:	429a      	cmp	r2, r3
 800104a:	d1eb      	bne.n	8001024 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800104c:	4b25      	ldr	r3, [pc, #148]	; (80010e4 <HAL_RCC_ClockConfig+0x1b8>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f003 0307 	and.w	r3, r3, #7
 8001054:	683a      	ldr	r2, [r7, #0]
 8001056:	429a      	cmp	r2, r3
 8001058:	d20c      	bcs.n	8001074 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800105a:	4b22      	ldr	r3, [pc, #136]	; (80010e4 <HAL_RCC_ClockConfig+0x1b8>)
 800105c:	683a      	ldr	r2, [r7, #0]
 800105e:	b2d2      	uxtb	r2, r2
 8001060:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001062:	4b20      	ldr	r3, [pc, #128]	; (80010e4 <HAL_RCC_ClockConfig+0x1b8>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f003 0307 	and.w	r3, r3, #7
 800106a:	683a      	ldr	r2, [r7, #0]
 800106c:	429a      	cmp	r2, r3
 800106e:	d001      	beq.n	8001074 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001070:	2301      	movs	r3, #1
 8001072:	e032      	b.n	80010da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f003 0304 	and.w	r3, r3, #4
 800107c:	2b00      	cmp	r3, #0
 800107e:	d008      	beq.n	8001092 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001080:	4b19      	ldr	r3, [pc, #100]	; (80010e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001082:	689b      	ldr	r3, [r3, #8]
 8001084:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	68db      	ldr	r3, [r3, #12]
 800108c:	4916      	ldr	r1, [pc, #88]	; (80010e8 <HAL_RCC_ClockConfig+0x1bc>)
 800108e:	4313      	orrs	r3, r2
 8001090:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f003 0308 	and.w	r3, r3, #8
 800109a:	2b00      	cmp	r3, #0
 800109c:	d009      	beq.n	80010b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800109e:	4b12      	ldr	r3, [pc, #72]	; (80010e8 <HAL_RCC_ClockConfig+0x1bc>)
 80010a0:	689b      	ldr	r3, [r3, #8]
 80010a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	691b      	ldr	r3, [r3, #16]
 80010aa:	00db      	lsls	r3, r3, #3
 80010ac:	490e      	ldr	r1, [pc, #56]	; (80010e8 <HAL_RCC_ClockConfig+0x1bc>)
 80010ae:	4313      	orrs	r3, r2
 80010b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80010b2:	f000 f821 	bl	80010f8 <HAL_RCC_GetSysClockFreq>
 80010b6:	4602      	mov	r2, r0
 80010b8:	4b0b      	ldr	r3, [pc, #44]	; (80010e8 <HAL_RCC_ClockConfig+0x1bc>)
 80010ba:	689b      	ldr	r3, [r3, #8]
 80010bc:	091b      	lsrs	r3, r3, #4
 80010be:	f003 030f 	and.w	r3, r3, #15
 80010c2:	490a      	ldr	r1, [pc, #40]	; (80010ec <HAL_RCC_ClockConfig+0x1c0>)
 80010c4:	5ccb      	ldrb	r3, [r1, r3]
 80010c6:	fa22 f303 	lsr.w	r3, r2, r3
 80010ca:	4a09      	ldr	r2, [pc, #36]	; (80010f0 <HAL_RCC_ClockConfig+0x1c4>)
 80010cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80010ce:	4b09      	ldr	r3, [pc, #36]	; (80010f4 <HAL_RCC_ClockConfig+0x1c8>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4618      	mov	r0, r3
 80010d4:	f7ff fb7c 	bl	80007d0 <HAL_InitTick>

  return HAL_OK;
 80010d8:	2300      	movs	r3, #0
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3710      	adds	r7, #16
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	40023c00 	.word	0x40023c00
 80010e8:	40023800 	.word	0x40023800
 80010ec:	08005d4c 	.word	0x08005d4c
 80010f0:	20000000 	.word	0x20000000
 80010f4:	20000004 	.word	0x20000004

080010f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80010f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80010fc:	b090      	sub	sp, #64	; 0x40
 80010fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001100:	2300      	movs	r3, #0
 8001102:	637b      	str	r3, [r7, #52]	; 0x34
 8001104:	2300      	movs	r3, #0
 8001106:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001108:	2300      	movs	r3, #0
 800110a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800110c:	2300      	movs	r3, #0
 800110e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001110:	4b59      	ldr	r3, [pc, #356]	; (8001278 <HAL_RCC_GetSysClockFreq+0x180>)
 8001112:	689b      	ldr	r3, [r3, #8]
 8001114:	f003 030c 	and.w	r3, r3, #12
 8001118:	2b08      	cmp	r3, #8
 800111a:	d00d      	beq.n	8001138 <HAL_RCC_GetSysClockFreq+0x40>
 800111c:	2b08      	cmp	r3, #8
 800111e:	f200 80a1 	bhi.w	8001264 <HAL_RCC_GetSysClockFreq+0x16c>
 8001122:	2b00      	cmp	r3, #0
 8001124:	d002      	beq.n	800112c <HAL_RCC_GetSysClockFreq+0x34>
 8001126:	2b04      	cmp	r3, #4
 8001128:	d003      	beq.n	8001132 <HAL_RCC_GetSysClockFreq+0x3a>
 800112a:	e09b      	b.n	8001264 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800112c:	4b53      	ldr	r3, [pc, #332]	; (800127c <HAL_RCC_GetSysClockFreq+0x184>)
 800112e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001130:	e09b      	b.n	800126a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001132:	4b53      	ldr	r3, [pc, #332]	; (8001280 <HAL_RCC_GetSysClockFreq+0x188>)
 8001134:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001136:	e098      	b.n	800126a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001138:	4b4f      	ldr	r3, [pc, #316]	; (8001278 <HAL_RCC_GetSysClockFreq+0x180>)
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001140:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001142:	4b4d      	ldr	r3, [pc, #308]	; (8001278 <HAL_RCC_GetSysClockFreq+0x180>)
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800114a:	2b00      	cmp	r3, #0
 800114c:	d028      	beq.n	80011a0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800114e:	4b4a      	ldr	r3, [pc, #296]	; (8001278 <HAL_RCC_GetSysClockFreq+0x180>)
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	099b      	lsrs	r3, r3, #6
 8001154:	2200      	movs	r2, #0
 8001156:	623b      	str	r3, [r7, #32]
 8001158:	627a      	str	r2, [r7, #36]	; 0x24
 800115a:	6a3b      	ldr	r3, [r7, #32]
 800115c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001160:	2100      	movs	r1, #0
 8001162:	4b47      	ldr	r3, [pc, #284]	; (8001280 <HAL_RCC_GetSysClockFreq+0x188>)
 8001164:	fb03 f201 	mul.w	r2, r3, r1
 8001168:	2300      	movs	r3, #0
 800116a:	fb00 f303 	mul.w	r3, r0, r3
 800116e:	4413      	add	r3, r2
 8001170:	4a43      	ldr	r2, [pc, #268]	; (8001280 <HAL_RCC_GetSysClockFreq+0x188>)
 8001172:	fba0 1202 	umull	r1, r2, r0, r2
 8001176:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001178:	460a      	mov	r2, r1
 800117a:	62ba      	str	r2, [r7, #40]	; 0x28
 800117c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800117e:	4413      	add	r3, r2
 8001180:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001182:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001184:	2200      	movs	r2, #0
 8001186:	61bb      	str	r3, [r7, #24]
 8001188:	61fa      	str	r2, [r7, #28]
 800118a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800118e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001192:	f7ff f81d 	bl	80001d0 <__aeabi_uldivmod>
 8001196:	4602      	mov	r2, r0
 8001198:	460b      	mov	r3, r1
 800119a:	4613      	mov	r3, r2
 800119c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800119e:	e053      	b.n	8001248 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80011a0:	4b35      	ldr	r3, [pc, #212]	; (8001278 <HAL_RCC_GetSysClockFreq+0x180>)
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	099b      	lsrs	r3, r3, #6
 80011a6:	2200      	movs	r2, #0
 80011a8:	613b      	str	r3, [r7, #16]
 80011aa:	617a      	str	r2, [r7, #20]
 80011ac:	693b      	ldr	r3, [r7, #16]
 80011ae:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80011b2:	f04f 0b00 	mov.w	fp, #0
 80011b6:	4652      	mov	r2, sl
 80011b8:	465b      	mov	r3, fp
 80011ba:	f04f 0000 	mov.w	r0, #0
 80011be:	f04f 0100 	mov.w	r1, #0
 80011c2:	0159      	lsls	r1, r3, #5
 80011c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80011c8:	0150      	lsls	r0, r2, #5
 80011ca:	4602      	mov	r2, r0
 80011cc:	460b      	mov	r3, r1
 80011ce:	ebb2 080a 	subs.w	r8, r2, sl
 80011d2:	eb63 090b 	sbc.w	r9, r3, fp
 80011d6:	f04f 0200 	mov.w	r2, #0
 80011da:	f04f 0300 	mov.w	r3, #0
 80011de:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80011e2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80011e6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80011ea:	ebb2 0408 	subs.w	r4, r2, r8
 80011ee:	eb63 0509 	sbc.w	r5, r3, r9
 80011f2:	f04f 0200 	mov.w	r2, #0
 80011f6:	f04f 0300 	mov.w	r3, #0
 80011fa:	00eb      	lsls	r3, r5, #3
 80011fc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001200:	00e2      	lsls	r2, r4, #3
 8001202:	4614      	mov	r4, r2
 8001204:	461d      	mov	r5, r3
 8001206:	eb14 030a 	adds.w	r3, r4, sl
 800120a:	603b      	str	r3, [r7, #0]
 800120c:	eb45 030b 	adc.w	r3, r5, fp
 8001210:	607b      	str	r3, [r7, #4]
 8001212:	f04f 0200 	mov.w	r2, #0
 8001216:	f04f 0300 	mov.w	r3, #0
 800121a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800121e:	4629      	mov	r1, r5
 8001220:	028b      	lsls	r3, r1, #10
 8001222:	4621      	mov	r1, r4
 8001224:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001228:	4621      	mov	r1, r4
 800122a:	028a      	lsls	r2, r1, #10
 800122c:	4610      	mov	r0, r2
 800122e:	4619      	mov	r1, r3
 8001230:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001232:	2200      	movs	r2, #0
 8001234:	60bb      	str	r3, [r7, #8]
 8001236:	60fa      	str	r2, [r7, #12]
 8001238:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800123c:	f7fe ffc8 	bl	80001d0 <__aeabi_uldivmod>
 8001240:	4602      	mov	r2, r0
 8001242:	460b      	mov	r3, r1
 8001244:	4613      	mov	r3, r2
 8001246:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001248:	4b0b      	ldr	r3, [pc, #44]	; (8001278 <HAL_RCC_GetSysClockFreq+0x180>)
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	0c1b      	lsrs	r3, r3, #16
 800124e:	f003 0303 	and.w	r3, r3, #3
 8001252:	3301      	adds	r3, #1
 8001254:	005b      	lsls	r3, r3, #1
 8001256:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001258:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800125a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800125c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001260:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001262:	e002      	b.n	800126a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001264:	4b05      	ldr	r3, [pc, #20]	; (800127c <HAL_RCC_GetSysClockFreq+0x184>)
 8001266:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001268:	bf00      	nop
    }
  }
  return sysclockfreq;
 800126a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800126c:	4618      	mov	r0, r3
 800126e:	3740      	adds	r7, #64	; 0x40
 8001270:	46bd      	mov	sp, r7
 8001272:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001276:	bf00      	nop
 8001278:	40023800 	.word	0x40023800
 800127c:	00f42400 	.word	0x00f42400
 8001280:	017d7840 	.word	0x017d7840

08001284 <__NVIC_SetPriority>:
{
 8001284:	b480      	push	{r7}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0
 800128a:	4603      	mov	r3, r0
 800128c:	6039      	str	r1, [r7, #0]
 800128e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001290:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001294:	2b00      	cmp	r3, #0
 8001296:	db0a      	blt.n	80012ae <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	b2da      	uxtb	r2, r3
 800129c:	490c      	ldr	r1, [pc, #48]	; (80012d0 <__NVIC_SetPriority+0x4c>)
 800129e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a2:	0112      	lsls	r2, r2, #4
 80012a4:	b2d2      	uxtb	r2, r2
 80012a6:	440b      	add	r3, r1
 80012a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80012ac:	e00a      	b.n	80012c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	b2da      	uxtb	r2, r3
 80012b2:	4908      	ldr	r1, [pc, #32]	; (80012d4 <__NVIC_SetPriority+0x50>)
 80012b4:	79fb      	ldrb	r3, [r7, #7]
 80012b6:	f003 030f 	and.w	r3, r3, #15
 80012ba:	3b04      	subs	r3, #4
 80012bc:	0112      	lsls	r2, r2, #4
 80012be:	b2d2      	uxtb	r2, r2
 80012c0:	440b      	add	r3, r1
 80012c2:	761a      	strb	r2, [r3, #24]
}
 80012c4:	bf00      	nop
 80012c6:	370c      	adds	r7, #12
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr
 80012d0:	e000e100 	.word	0xe000e100
 80012d4:	e000ed00 	.word	0xe000ed00

080012d8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80012dc:	2100      	movs	r1, #0
 80012de:	f06f 0004 	mvn.w	r0, #4
 80012e2:	f7ff ffcf 	bl	8001284 <__NVIC_SetPriority>
#endif
}
 80012e6:	bf00      	nop
 80012e8:	bd80      	pop	{r7, pc}
	...

080012ec <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80012f2:	f3ef 8305 	mrs	r3, IPSR
 80012f6:	603b      	str	r3, [r7, #0]
  return(result);
 80012f8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d003      	beq.n	8001306 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80012fe:	f06f 0305 	mvn.w	r3, #5
 8001302:	607b      	str	r3, [r7, #4]
 8001304:	e00c      	b.n	8001320 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8001306:	4b0a      	ldr	r3, [pc, #40]	; (8001330 <osKernelInitialize+0x44>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d105      	bne.n	800131a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800130e:	4b08      	ldr	r3, [pc, #32]	; (8001330 <osKernelInitialize+0x44>)
 8001310:	2201      	movs	r2, #1
 8001312:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8001314:	2300      	movs	r3, #0
 8001316:	607b      	str	r3, [r7, #4]
 8001318:	e002      	b.n	8001320 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800131a:	f04f 33ff 	mov.w	r3, #4294967295
 800131e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8001320:	687b      	ldr	r3, [r7, #4]
}
 8001322:	4618      	mov	r0, r3
 8001324:	370c      	adds	r7, #12
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	20000038 	.word	0x20000038

08001334 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800133a:	f3ef 8305 	mrs	r3, IPSR
 800133e:	603b      	str	r3, [r7, #0]
  return(result);
 8001340:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001342:	2b00      	cmp	r3, #0
 8001344:	d003      	beq.n	800134e <osKernelStart+0x1a>
    stat = osErrorISR;
 8001346:	f06f 0305 	mvn.w	r3, #5
 800134a:	607b      	str	r3, [r7, #4]
 800134c:	e010      	b.n	8001370 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800134e:	4b0b      	ldr	r3, [pc, #44]	; (800137c <osKernelStart+0x48>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	2b01      	cmp	r3, #1
 8001354:	d109      	bne.n	800136a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8001356:	f7ff ffbf 	bl	80012d8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800135a:	4b08      	ldr	r3, [pc, #32]	; (800137c <osKernelStart+0x48>)
 800135c:	2202      	movs	r2, #2
 800135e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8001360:	f001 f902 	bl	8002568 <vTaskStartScheduler>
      stat = osOK;
 8001364:	2300      	movs	r3, #0
 8001366:	607b      	str	r3, [r7, #4]
 8001368:	e002      	b.n	8001370 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800136a:	f04f 33ff 	mov.w	r3, #4294967295
 800136e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8001370:	687b      	ldr	r3, [r7, #4]
}
 8001372:	4618      	mov	r0, r3
 8001374:	3708      	adds	r7, #8
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	20000038 	.word	0x20000038

08001380 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8001380:	b580      	push	{r7, lr}
 8001382:	b08e      	sub	sp, #56	; 0x38
 8001384:	af04      	add	r7, sp, #16
 8001386:	60f8      	str	r0, [r7, #12]
 8001388:	60b9      	str	r1, [r7, #8]
 800138a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800138c:	2300      	movs	r3, #0
 800138e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001390:	f3ef 8305 	mrs	r3, IPSR
 8001394:	617b      	str	r3, [r7, #20]
  return(result);
 8001396:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8001398:	2b00      	cmp	r3, #0
 800139a:	d17e      	bne.n	800149a <osThreadNew+0x11a>
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d07b      	beq.n	800149a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80013a2:	2380      	movs	r3, #128	; 0x80
 80013a4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80013a6:	2318      	movs	r3, #24
 80013a8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80013aa:	2300      	movs	r3, #0
 80013ac:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80013ae:	f04f 33ff 	mov.w	r3, #4294967295
 80013b2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d045      	beq.n	8001446 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d002      	beq.n	80013c8 <osThreadNew+0x48>
        name = attr->name;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	699b      	ldr	r3, [r3, #24]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d002      	beq.n	80013d6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	699b      	ldr	r3, [r3, #24]
 80013d4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80013d6:	69fb      	ldr	r3, [r7, #28]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d008      	beq.n	80013ee <osThreadNew+0x6e>
 80013dc:	69fb      	ldr	r3, [r7, #28]
 80013de:	2b38      	cmp	r3, #56	; 0x38
 80013e0:	d805      	bhi.n	80013ee <osThreadNew+0x6e>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	f003 0301 	and.w	r3, r3, #1
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <osThreadNew+0x72>
        return (NULL);
 80013ee:	2300      	movs	r3, #0
 80013f0:	e054      	b.n	800149c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	695b      	ldr	r3, [r3, #20]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d003      	beq.n	8001402 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	695b      	ldr	r3, [r3, #20]
 80013fe:	089b      	lsrs	r3, r3, #2
 8001400:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	689b      	ldr	r3, [r3, #8]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d00e      	beq.n	8001428 <osThreadNew+0xa8>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	68db      	ldr	r3, [r3, #12]
 800140e:	2b5b      	cmp	r3, #91	; 0x5b
 8001410:	d90a      	bls.n	8001428 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001416:	2b00      	cmp	r3, #0
 8001418:	d006      	beq.n	8001428 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	695b      	ldr	r3, [r3, #20]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d002      	beq.n	8001428 <osThreadNew+0xa8>
        mem = 1;
 8001422:	2301      	movs	r3, #1
 8001424:	61bb      	str	r3, [r7, #24]
 8001426:	e010      	b.n	800144a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	689b      	ldr	r3, [r3, #8]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d10c      	bne.n	800144a <osThreadNew+0xca>
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	68db      	ldr	r3, [r3, #12]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d108      	bne.n	800144a <osThreadNew+0xca>
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	691b      	ldr	r3, [r3, #16]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d104      	bne.n	800144a <osThreadNew+0xca>
          mem = 0;
 8001440:	2300      	movs	r3, #0
 8001442:	61bb      	str	r3, [r7, #24]
 8001444:	e001      	b.n	800144a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8001446:	2300      	movs	r3, #0
 8001448:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800144a:	69bb      	ldr	r3, [r7, #24]
 800144c:	2b01      	cmp	r3, #1
 800144e:	d110      	bne.n	8001472 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8001454:	687a      	ldr	r2, [r7, #4]
 8001456:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001458:	9202      	str	r2, [sp, #8]
 800145a:	9301      	str	r3, [sp, #4]
 800145c:	69fb      	ldr	r3, [r7, #28]
 800145e:	9300      	str	r3, [sp, #0]
 8001460:	68bb      	ldr	r3, [r7, #8]
 8001462:	6a3a      	ldr	r2, [r7, #32]
 8001464:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001466:	68f8      	ldr	r0, [r7, #12]
 8001468:	f000 fe86 	bl	8002178 <xTaskCreateStatic>
 800146c:	4603      	mov	r3, r0
 800146e:	613b      	str	r3, [r7, #16]
 8001470:	e013      	b.n	800149a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8001472:	69bb      	ldr	r3, [r7, #24]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d110      	bne.n	800149a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8001478:	6a3b      	ldr	r3, [r7, #32]
 800147a:	b29a      	uxth	r2, r3
 800147c:	f107 0310 	add.w	r3, r7, #16
 8001480:	9301      	str	r3, [sp, #4]
 8001482:	69fb      	ldr	r3, [r7, #28]
 8001484:	9300      	str	r3, [sp, #0]
 8001486:	68bb      	ldr	r3, [r7, #8]
 8001488:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800148a:	68f8      	ldr	r0, [r7, #12]
 800148c:	f000 fed1 	bl	8002232 <xTaskCreate>
 8001490:	4603      	mov	r3, r0
 8001492:	2b01      	cmp	r3, #1
 8001494:	d001      	beq.n	800149a <osThreadNew+0x11a>
            hTask = NULL;
 8001496:	2300      	movs	r3, #0
 8001498:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800149a:	693b      	ldr	r3, [r7, #16]
}
 800149c:	4618      	mov	r0, r3
 800149e:	3728      	adds	r7, #40	; 0x28
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}

080014a4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b084      	sub	sp, #16
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80014ac:	f3ef 8305 	mrs	r3, IPSR
 80014b0:	60bb      	str	r3, [r7, #8]
  return(result);
 80014b2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d003      	beq.n	80014c0 <osDelay+0x1c>
    stat = osErrorISR;
 80014b8:	f06f 0305 	mvn.w	r3, #5
 80014bc:	60fb      	str	r3, [r7, #12]
 80014be:	e007      	b.n	80014d0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80014c0:	2300      	movs	r3, #0
 80014c2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d002      	beq.n	80014d0 <osDelay+0x2c>
      vTaskDelay(ticks);
 80014ca:	6878      	ldr	r0, [r7, #4]
 80014cc:	f001 f814 	bl	80024f8 <vTaskDelay>
    }
  }

  return (stat);
 80014d0:	68fb      	ldr	r3, [r7, #12]
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	3710      	adds	r7, #16
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
	...

080014dc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80014dc:	b480      	push	{r7}
 80014de:	b085      	sub	sp, #20
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	60f8      	str	r0, [r7, #12]
 80014e4:	60b9      	str	r1, [r7, #8]
 80014e6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	4a07      	ldr	r2, [pc, #28]	; (8001508 <vApplicationGetIdleTaskMemory+0x2c>)
 80014ec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80014ee:	68bb      	ldr	r3, [r7, #8]
 80014f0:	4a06      	ldr	r2, [pc, #24]	; (800150c <vApplicationGetIdleTaskMemory+0x30>)
 80014f2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2280      	movs	r2, #128	; 0x80
 80014f8:	601a      	str	r2, [r3, #0]
}
 80014fa:	bf00      	nop
 80014fc:	3714      	adds	r7, #20
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop
 8001508:	2000003c 	.word	0x2000003c
 800150c:	20000098 	.word	0x20000098

08001510 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8001510:	b480      	push	{r7}
 8001512:	b085      	sub	sp, #20
 8001514:	af00      	add	r7, sp, #0
 8001516:	60f8      	str	r0, [r7, #12]
 8001518:	60b9      	str	r1, [r7, #8]
 800151a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	4a07      	ldr	r2, [pc, #28]	; (800153c <vApplicationGetTimerTaskMemory+0x2c>)
 8001520:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8001522:	68bb      	ldr	r3, [r7, #8]
 8001524:	4a06      	ldr	r2, [pc, #24]	; (8001540 <vApplicationGetTimerTaskMemory+0x30>)
 8001526:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800152e:	601a      	str	r2, [r3, #0]
}
 8001530:	bf00      	nop
 8001532:	3714      	adds	r7, #20
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr
 800153c:	20000298 	.word	0x20000298
 8001540:	200002f4 	.word	0x200002f4

08001544 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001544:	b480      	push	{r7}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	f103 0208 	add.w	r2, r3, #8
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	f04f 32ff 	mov.w	r2, #4294967295
 800155c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	f103 0208 	add.w	r2, r3, #8
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	f103 0208 	add.w	r2, r3, #8
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2200      	movs	r2, #0
 8001576:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001578:	bf00      	nop
 800157a:	370c      	adds	r7, #12
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr

08001584 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001584:	b480      	push	{r7}
 8001586:	b083      	sub	sp, #12
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2200      	movs	r2, #0
 8001590:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001592:	bf00      	nop
 8001594:	370c      	adds	r7, #12
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr

0800159e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800159e:	b480      	push	{r7}
 80015a0:	b085      	sub	sp, #20
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	6078      	str	r0, [r7, #4]
 80015a6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	68fa      	ldr	r2, [r7, #12]
 80015b2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	689a      	ldr	r2, [r3, #8]
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	683a      	ldr	r2, [r7, #0]
 80015c2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	683a      	ldr	r2, [r7, #0]
 80015c8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	687a      	ldr	r2, [r7, #4]
 80015ce:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	1c5a      	adds	r2, r3, #1
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	601a      	str	r2, [r3, #0]
}
 80015da:	bf00      	nop
 80015dc:	3714      	adds	r7, #20
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr

080015e6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80015e6:	b480      	push	{r7}
 80015e8:	b085      	sub	sp, #20
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	6078      	str	r0, [r7, #4]
 80015ee:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80015f6:	68bb      	ldr	r3, [r7, #8]
 80015f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015fc:	d103      	bne.n	8001606 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	691b      	ldr	r3, [r3, #16]
 8001602:	60fb      	str	r3, [r7, #12]
 8001604:	e00c      	b.n	8001620 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	3308      	adds	r3, #8
 800160a:	60fb      	str	r3, [r7, #12]
 800160c:	e002      	b.n	8001614 <vListInsert+0x2e>
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	60fb      	str	r3, [r7, #12]
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	68ba      	ldr	r2, [r7, #8]
 800161c:	429a      	cmp	r2, r3
 800161e:	d2f6      	bcs.n	800160e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	685a      	ldr	r2, [r3, #4]
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	683a      	ldr	r2, [r7, #0]
 800162e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	68fa      	ldr	r2, [r7, #12]
 8001634:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	683a      	ldr	r2, [r7, #0]
 800163a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	687a      	ldr	r2, [r7, #4]
 8001640:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	1c5a      	adds	r2, r3, #1
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	601a      	str	r2, [r3, #0]
}
 800164c:	bf00      	nop
 800164e:	3714      	adds	r7, #20
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr

08001658 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001658:	b480      	push	{r7}
 800165a:	b085      	sub	sp, #20
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	691b      	ldr	r3, [r3, #16]
 8001664:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	687a      	ldr	r2, [r7, #4]
 800166c:	6892      	ldr	r2, [r2, #8]
 800166e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	689b      	ldr	r3, [r3, #8]
 8001674:	687a      	ldr	r2, [r7, #4]
 8001676:	6852      	ldr	r2, [r2, #4]
 8001678:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	687a      	ldr	r2, [r7, #4]
 8001680:	429a      	cmp	r2, r3
 8001682:	d103      	bne.n	800168c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	689a      	ldr	r2, [r3, #8]
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2200      	movs	r2, #0
 8001690:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	1e5a      	subs	r2, r3, #1
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	681b      	ldr	r3, [r3, #0]
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	3714      	adds	r7, #20
 80016a4:	46bd      	mov	sp, r7
 80016a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016aa:	4770      	bx	lr

080016ac <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b084      	sub	sp, #16
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
 80016b4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d10a      	bne.n	80016d6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80016c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80016c4:	f383 8811 	msr	BASEPRI, r3
 80016c8:	f3bf 8f6f 	isb	sy
 80016cc:	f3bf 8f4f 	dsb	sy
 80016d0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80016d2:	bf00      	nop
 80016d4:	e7fe      	b.n	80016d4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80016d6:	f002 f975 	bl	80039c4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	681a      	ldr	r2, [r3, #0]
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016e2:	68f9      	ldr	r1, [r7, #12]
 80016e4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80016e6:	fb01 f303 	mul.w	r3, r1, r3
 80016ea:	441a      	add	r2, r3
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	2200      	movs	r2, #0
 80016f4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	681a      	ldr	r2, [r3, #0]
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001706:	3b01      	subs	r3, #1
 8001708:	68f9      	ldr	r1, [r7, #12]
 800170a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800170c:	fb01 f303 	mul.w	r3, r1, r3
 8001710:	441a      	add	r2, r3
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	22ff      	movs	r2, #255	; 0xff
 800171a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	22ff      	movs	r2, #255	; 0xff
 8001722:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d114      	bne.n	8001756 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	691b      	ldr	r3, [r3, #16]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d01a      	beq.n	800176a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	3310      	adds	r3, #16
 8001738:	4618      	mov	r0, r3
 800173a:	f001 f9d9 	bl	8002af0 <xTaskRemoveFromEventList>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d012      	beq.n	800176a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8001744:	4b0c      	ldr	r3, [pc, #48]	; (8001778 <xQueueGenericReset+0xcc>)
 8001746:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800174a:	601a      	str	r2, [r3, #0]
 800174c:	f3bf 8f4f 	dsb	sy
 8001750:	f3bf 8f6f 	isb	sy
 8001754:	e009      	b.n	800176a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	3310      	adds	r3, #16
 800175a:	4618      	mov	r0, r3
 800175c:	f7ff fef2 	bl	8001544 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	3324      	adds	r3, #36	; 0x24
 8001764:	4618      	mov	r0, r3
 8001766:	f7ff feed 	bl	8001544 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800176a:	f002 f95b 	bl	8003a24 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800176e:	2301      	movs	r3, #1
}
 8001770:	4618      	mov	r0, r3
 8001772:	3710      	adds	r7, #16
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	e000ed04 	.word	0xe000ed04

0800177c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800177c:	b580      	push	{r7, lr}
 800177e:	b08e      	sub	sp, #56	; 0x38
 8001780:	af02      	add	r7, sp, #8
 8001782:	60f8      	str	r0, [r7, #12]
 8001784:	60b9      	str	r1, [r7, #8]
 8001786:	607a      	str	r2, [r7, #4]
 8001788:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d10a      	bne.n	80017a6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8001790:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001794:	f383 8811 	msr	BASEPRI, r3
 8001798:	f3bf 8f6f 	isb	sy
 800179c:	f3bf 8f4f 	dsb	sy
 80017a0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80017a2:	bf00      	nop
 80017a4:	e7fe      	b.n	80017a4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d10a      	bne.n	80017c2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80017ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017b0:	f383 8811 	msr	BASEPRI, r3
 80017b4:	f3bf 8f6f 	isb	sy
 80017b8:	f3bf 8f4f 	dsb	sy
 80017bc:	627b      	str	r3, [r7, #36]	; 0x24
}
 80017be:	bf00      	nop
 80017c0:	e7fe      	b.n	80017c0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d002      	beq.n	80017ce <xQueueGenericCreateStatic+0x52>
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d001      	beq.n	80017d2 <xQueueGenericCreateStatic+0x56>
 80017ce:	2301      	movs	r3, #1
 80017d0:	e000      	b.n	80017d4 <xQueueGenericCreateStatic+0x58>
 80017d2:	2300      	movs	r3, #0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d10a      	bne.n	80017ee <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80017d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017dc:	f383 8811 	msr	BASEPRI, r3
 80017e0:	f3bf 8f6f 	isb	sy
 80017e4:	f3bf 8f4f 	dsb	sy
 80017e8:	623b      	str	r3, [r7, #32]
}
 80017ea:	bf00      	nop
 80017ec:	e7fe      	b.n	80017ec <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d102      	bne.n	80017fa <xQueueGenericCreateStatic+0x7e>
 80017f4:	68bb      	ldr	r3, [r7, #8]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d101      	bne.n	80017fe <xQueueGenericCreateStatic+0x82>
 80017fa:	2301      	movs	r3, #1
 80017fc:	e000      	b.n	8001800 <xQueueGenericCreateStatic+0x84>
 80017fe:	2300      	movs	r3, #0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d10a      	bne.n	800181a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8001804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001808:	f383 8811 	msr	BASEPRI, r3
 800180c:	f3bf 8f6f 	isb	sy
 8001810:	f3bf 8f4f 	dsb	sy
 8001814:	61fb      	str	r3, [r7, #28]
}
 8001816:	bf00      	nop
 8001818:	e7fe      	b.n	8001818 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800181a:	2350      	movs	r3, #80	; 0x50
 800181c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	2b50      	cmp	r3, #80	; 0x50
 8001822:	d00a      	beq.n	800183a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8001824:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001828:	f383 8811 	msr	BASEPRI, r3
 800182c:	f3bf 8f6f 	isb	sy
 8001830:	f3bf 8f4f 	dsb	sy
 8001834:	61bb      	str	r3, [r7, #24]
}
 8001836:	bf00      	nop
 8001838:	e7fe      	b.n	8001838 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800183a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8001840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001842:	2b00      	cmp	r3, #0
 8001844:	d00d      	beq.n	8001862 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8001846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001848:	2201      	movs	r2, #1
 800184a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800184e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8001852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001854:	9300      	str	r3, [sp, #0]
 8001856:	4613      	mov	r3, r2
 8001858:	687a      	ldr	r2, [r7, #4]
 800185a:	68b9      	ldr	r1, [r7, #8]
 800185c:	68f8      	ldr	r0, [r7, #12]
 800185e:	f000 f805 	bl	800186c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8001862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8001864:	4618      	mov	r0, r3
 8001866:	3730      	adds	r7, #48	; 0x30
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}

0800186c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b084      	sub	sp, #16
 8001870:	af00      	add	r7, sp, #0
 8001872:	60f8      	str	r0, [r7, #12]
 8001874:	60b9      	str	r1, [r7, #8]
 8001876:	607a      	str	r2, [r7, #4]
 8001878:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800187a:	68bb      	ldr	r3, [r7, #8]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d103      	bne.n	8001888 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001880:	69bb      	ldr	r3, [r7, #24]
 8001882:	69ba      	ldr	r2, [r7, #24]
 8001884:	601a      	str	r2, [r3, #0]
 8001886:	e002      	b.n	800188e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001888:	69bb      	ldr	r3, [r7, #24]
 800188a:	687a      	ldr	r2, [r7, #4]
 800188c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800188e:	69bb      	ldr	r3, [r7, #24]
 8001890:	68fa      	ldr	r2, [r7, #12]
 8001892:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8001894:	69bb      	ldr	r3, [r7, #24]
 8001896:	68ba      	ldr	r2, [r7, #8]
 8001898:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800189a:	2101      	movs	r1, #1
 800189c:	69b8      	ldr	r0, [r7, #24]
 800189e:	f7ff ff05 	bl	80016ac <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80018a2:	69bb      	ldr	r3, [r7, #24]
 80018a4:	78fa      	ldrb	r2, [r7, #3]
 80018a6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	{
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
 80018aa:	78fb      	ldrb	r3, [r7, #3]
 80018ac:	68ba      	ldr	r2, [r7, #8]
 80018ae:	68f9      	ldr	r1, [r7, #12]
 80018b0:	2073      	movs	r0, #115	; 0x73
 80018b2:	f003 fa7d 	bl	8004db0 <SEGGER_SYSVIEW_RecordU32x3>
}
 80018b6:	bf00      	nop
 80018b8:	3710      	adds	r7, #16
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
	...

080018c0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b090      	sub	sp, #64	; 0x40
 80018c4:	af02      	add	r7, sp, #8
 80018c6:	60f8      	str	r0, [r7, #12]
 80018c8:	60b9      	str	r1, [r7, #8]
 80018ca:	607a      	str	r2, [r7, #4]
 80018cc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80018ce:	2300      	movs	r3, #0
 80018d0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80018d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d10a      	bne.n	80018f2 <xQueueGenericSend+0x32>
	__asm volatile
 80018dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018e0:	f383 8811 	msr	BASEPRI, r3
 80018e4:	f3bf 8f6f 	isb	sy
 80018e8:	f3bf 8f4f 	dsb	sy
 80018ec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80018ee:	bf00      	nop
 80018f0:	e7fe      	b.n	80018f0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80018f2:	68bb      	ldr	r3, [r7, #8]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d103      	bne.n	8001900 <xQueueGenericSend+0x40>
 80018f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d101      	bne.n	8001904 <xQueueGenericSend+0x44>
 8001900:	2301      	movs	r3, #1
 8001902:	e000      	b.n	8001906 <xQueueGenericSend+0x46>
 8001904:	2300      	movs	r3, #0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d10a      	bne.n	8001920 <xQueueGenericSend+0x60>
	__asm volatile
 800190a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800190e:	f383 8811 	msr	BASEPRI, r3
 8001912:	f3bf 8f6f 	isb	sy
 8001916:	f3bf 8f4f 	dsb	sy
 800191a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800191c:	bf00      	nop
 800191e:	e7fe      	b.n	800191e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	2b02      	cmp	r3, #2
 8001924:	d103      	bne.n	800192e <xQueueGenericSend+0x6e>
 8001926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001928:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800192a:	2b01      	cmp	r3, #1
 800192c:	d101      	bne.n	8001932 <xQueueGenericSend+0x72>
 800192e:	2301      	movs	r3, #1
 8001930:	e000      	b.n	8001934 <xQueueGenericSend+0x74>
 8001932:	2300      	movs	r3, #0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d10a      	bne.n	800194e <xQueueGenericSend+0x8e>
	__asm volatile
 8001938:	f04f 0350 	mov.w	r3, #80	; 0x50
 800193c:	f383 8811 	msr	BASEPRI, r3
 8001940:	f3bf 8f6f 	isb	sy
 8001944:	f3bf 8f4f 	dsb	sy
 8001948:	623b      	str	r3, [r7, #32]
}
 800194a:	bf00      	nop
 800194c:	e7fe      	b.n	800194c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800194e:	f001 fac9 	bl	8002ee4 <xTaskGetSchedulerState>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d102      	bne.n	800195e <xQueueGenericSend+0x9e>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d101      	bne.n	8001962 <xQueueGenericSend+0xa2>
 800195e:	2301      	movs	r3, #1
 8001960:	e000      	b.n	8001964 <xQueueGenericSend+0xa4>
 8001962:	2300      	movs	r3, #0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d10a      	bne.n	800197e <xQueueGenericSend+0xbe>
	__asm volatile
 8001968:	f04f 0350 	mov.w	r3, #80	; 0x50
 800196c:	f383 8811 	msr	BASEPRI, r3
 8001970:	f3bf 8f6f 	isb	sy
 8001974:	f3bf 8f4f 	dsb	sy
 8001978:	61fb      	str	r3, [r7, #28]
}
 800197a:	bf00      	nop
 800197c:	e7fe      	b.n	800197c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800197e:	f002 f821 	bl	80039c4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001984:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001988:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800198a:	429a      	cmp	r2, r3
 800198c:	d302      	bcc.n	8001994 <xQueueGenericSend+0xd4>
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	2b02      	cmp	r3, #2
 8001992:	d136      	bne.n	8001a02 <xQueueGenericSend+0x142>
			{
				traceQUEUE_SEND( pxQueue );
 8001994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001996:	4618      	mov	r0, r3
 8001998:	f003 ffa0 	bl	80058dc <SEGGER_SYSVIEW_ShrinkId>
 800199c:	68ba      	ldr	r2, [r7, #8]
 800199e:	6879      	ldr	r1, [r7, #4]
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	9300      	str	r3, [sp, #0]
 80019a4:	460b      	mov	r3, r1
 80019a6:	4601      	mov	r1, r0
 80019a8:	205a      	movs	r0, #90	; 0x5a
 80019aa:	f003 fa77 	bl	8004e9c <SEGGER_SYSVIEW_RecordU32x4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80019ae:	683a      	ldr	r2, [r7, #0]
 80019b0:	68b9      	ldr	r1, [r7, #8]
 80019b2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80019b4:	f000 fa6a 	bl	8001e8c <prvCopyDataToQueue>
 80019b8:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80019ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d010      	beq.n	80019e4 <xQueueGenericSend+0x124>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80019c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019c4:	3324      	adds	r3, #36	; 0x24
 80019c6:	4618      	mov	r0, r3
 80019c8:	f001 f892 	bl	8002af0 <xTaskRemoveFromEventList>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d013      	beq.n	80019fa <xQueueGenericSend+0x13a>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80019d2:	4b4d      	ldr	r3, [pc, #308]	; (8001b08 <xQueueGenericSend+0x248>)
 80019d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80019d8:	601a      	str	r2, [r3, #0]
 80019da:	f3bf 8f4f 	dsb	sy
 80019de:	f3bf 8f6f 	isb	sy
 80019e2:	e00a      	b.n	80019fa <xQueueGenericSend+0x13a>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80019e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d007      	beq.n	80019fa <xQueueGenericSend+0x13a>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80019ea:	4b47      	ldr	r3, [pc, #284]	; (8001b08 <xQueueGenericSend+0x248>)
 80019ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80019f0:	601a      	str	r2, [r3, #0]
 80019f2:	f3bf 8f4f 	dsb	sy
 80019f6:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80019fa:	f002 f813 	bl	8003a24 <vPortExitCritical>
				return pdPASS;
 80019fe:	2301      	movs	r3, #1
 8001a00:	e07d      	b.n	8001afe <xQueueGenericSend+0x23e>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d110      	bne.n	8001a2a <xQueueGenericSend+0x16a>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001a08:	f002 f80c 	bl	8003a24 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
 8001a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f003 ff64 	bl	80058dc <SEGGER_SYSVIEW_ShrinkId>
 8001a14:	68ba      	ldr	r2, [r7, #8]
 8001a16:	6879      	ldr	r1, [r7, #4]
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	9300      	str	r3, [sp, #0]
 8001a1c:	460b      	mov	r3, r1
 8001a1e:	4601      	mov	r1, r0
 8001a20:	205a      	movs	r0, #90	; 0x5a
 8001a22:	f003 fa3b 	bl	8004e9c <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_FULL;
 8001a26:	2300      	movs	r3, #0
 8001a28:	e069      	b.n	8001afe <xQueueGenericSend+0x23e>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001a2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d106      	bne.n	8001a3e <xQueueGenericSend+0x17e>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001a30:	f107 0314 	add.w	r3, r7, #20
 8001a34:	4618      	mov	r0, r3
 8001a36:	f001 f8c3 	bl	8002bc0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001a3e:	f001 fff1 	bl	8003a24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001a42:	f000 fe07 	bl	8002654 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001a46:	f001 ffbd 	bl	80039c4 <vPortEnterCritical>
 8001a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a4c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001a50:	b25b      	sxtb	r3, r3
 8001a52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a56:	d103      	bne.n	8001a60 <xQueueGenericSend+0x1a0>
 8001a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001a60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a62:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001a66:	b25b      	sxtb	r3, r3
 8001a68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a6c:	d103      	bne.n	8001a76 <xQueueGenericSend+0x1b6>
 8001a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a70:	2200      	movs	r2, #0
 8001a72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001a76:	f001 ffd5 	bl	8003a24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001a7a:	1d3a      	adds	r2, r7, #4
 8001a7c:	f107 0314 	add.w	r3, r7, #20
 8001a80:	4611      	mov	r1, r2
 8001a82:	4618      	mov	r0, r3
 8001a84:	f001 f8b2 	bl	8002bec <xTaskCheckForTimeOut>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d124      	bne.n	8001ad8 <xQueueGenericSend+0x218>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8001a8e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001a90:	f000 faf4 	bl	800207c <prvIsQueueFull>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d018      	beq.n	8001acc <xQueueGenericSend+0x20c>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8001a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a9c:	3310      	adds	r3, #16
 8001a9e:	687a      	ldr	r2, [r7, #4]
 8001aa0:	4611      	mov	r1, r2
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f000 ffd2 	bl	8002a4c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8001aa8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001aaa:	f000 fa7f 	bl	8001fac <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8001aae:	f000 fddf 	bl	8002670 <xTaskResumeAll>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	f47f af62 	bne.w	800197e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8001aba:	4b13      	ldr	r3, [pc, #76]	; (8001b08 <xQueueGenericSend+0x248>)
 8001abc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ac0:	601a      	str	r2, [r3, #0]
 8001ac2:	f3bf 8f4f 	dsb	sy
 8001ac6:	f3bf 8f6f 	isb	sy
 8001aca:	e758      	b.n	800197e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8001acc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001ace:	f000 fa6d 	bl	8001fac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001ad2:	f000 fdcd 	bl	8002670 <xTaskResumeAll>
 8001ad6:	e752      	b.n	800197e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8001ad8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001ada:	f000 fa67 	bl	8001fac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001ade:	f000 fdc7 	bl	8002670 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
 8001ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f003 fef9 	bl	80058dc <SEGGER_SYSVIEW_ShrinkId>
 8001aea:	68ba      	ldr	r2, [r7, #8]
 8001aec:	6879      	ldr	r1, [r7, #4]
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	9300      	str	r3, [sp, #0]
 8001af2:	460b      	mov	r3, r1
 8001af4:	4601      	mov	r1, r0
 8001af6:	205a      	movs	r0, #90	; 0x5a
 8001af8:	f003 f9d0 	bl	8004e9c <SEGGER_SYSVIEW_RecordU32x4>
			return errQUEUE_FULL;
 8001afc:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	3738      	adds	r7, #56	; 0x38
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	e000ed04 	.word	0xe000ed04

08001b0c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b090      	sub	sp, #64	; 0x40
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	60f8      	str	r0, [r7, #12]
 8001b14:	60b9      	str	r1, [r7, #8]
 8001b16:	607a      	str	r2, [r7, #4]
 8001b18:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8001b1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d10a      	bne.n	8001b3a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8001b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b28:	f383 8811 	msr	BASEPRI, r3
 8001b2c:	f3bf 8f6f 	isb	sy
 8001b30:	f3bf 8f4f 	dsb	sy
 8001b34:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8001b36:	bf00      	nop
 8001b38:	e7fe      	b.n	8001b38 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001b3a:	68bb      	ldr	r3, [r7, #8]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d103      	bne.n	8001b48 <xQueueGenericSendFromISR+0x3c>
 8001b40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d101      	bne.n	8001b4c <xQueueGenericSendFromISR+0x40>
 8001b48:	2301      	movs	r3, #1
 8001b4a:	e000      	b.n	8001b4e <xQueueGenericSendFromISR+0x42>
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d10a      	bne.n	8001b68 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8001b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b56:	f383 8811 	msr	BASEPRI, r3
 8001b5a:	f3bf 8f6f 	isb	sy
 8001b5e:	f3bf 8f4f 	dsb	sy
 8001b62:	627b      	str	r3, [r7, #36]	; 0x24
}
 8001b64:	bf00      	nop
 8001b66:	e7fe      	b.n	8001b66 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	2b02      	cmp	r3, #2
 8001b6c:	d103      	bne.n	8001b76 <xQueueGenericSendFromISR+0x6a>
 8001b6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b72:	2b01      	cmp	r3, #1
 8001b74:	d101      	bne.n	8001b7a <xQueueGenericSendFromISR+0x6e>
 8001b76:	2301      	movs	r3, #1
 8001b78:	e000      	b.n	8001b7c <xQueueGenericSendFromISR+0x70>
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d10a      	bne.n	8001b96 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8001b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b84:	f383 8811 	msr	BASEPRI, r3
 8001b88:	f3bf 8f6f 	isb	sy
 8001b8c:	f3bf 8f4f 	dsb	sy
 8001b90:	623b      	str	r3, [r7, #32]
}
 8001b92:	bf00      	nop
 8001b94:	e7fe      	b.n	8001b94 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001b96:	f001 ffff 	bl	8003b98 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8001b9a:	f3ef 8211 	mrs	r2, BASEPRI
 8001b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ba2:	f383 8811 	msr	BASEPRI, r3
 8001ba6:	f3bf 8f6f 	isb	sy
 8001baa:	f3bf 8f4f 	dsb	sy
 8001bae:	61fa      	str	r2, [r7, #28]
 8001bb0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8001bb2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8001bb4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001bb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bb8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001bba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bbe:	429a      	cmp	r2, r3
 8001bc0:	d302      	bcc.n	8001bc8 <xQueueGenericSendFromISR+0xbc>
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	2b02      	cmp	r3, #2
 8001bc6:	d139      	bne.n	8001c3c <xQueueGenericSendFromISR+0x130>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8001bc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001bce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001bd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bd6:	62fb      	str	r3, [r7, #44]	; 0x2c

			traceQUEUE_SEND_FROM_ISR( pxQueue );
 8001bd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f003 fe7e 	bl	80058dc <SEGGER_SYSVIEW_ShrinkId>
 8001be0:	4601      	mov	r1, r0
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	461a      	mov	r2, r3
 8001be6:	2060      	movs	r0, #96	; 0x60
 8001be8:	f003 f888 	bl	8004cfc <SEGGER_SYSVIEW_RecordU32x2>
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001bec:	683a      	ldr	r2, [r7, #0]
 8001bee:	68b9      	ldr	r1, [r7, #8]
 8001bf0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001bf2:	f000 f94b 	bl	8001e8c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8001bf6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8001bfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bfe:	d112      	bne.n	8001c26 <xQueueGenericSendFromISR+0x11a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001c00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d016      	beq.n	8001c36 <xQueueGenericSendFromISR+0x12a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001c08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c0a:	3324      	adds	r3, #36	; 0x24
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f000 ff6f 	bl	8002af0 <xTaskRemoveFromEventList>
 8001c12:	4603      	mov	r3, r0
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d00e      	beq.n	8001c36 <xQueueGenericSendFromISR+0x12a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d00b      	beq.n	8001c36 <xQueueGenericSendFromISR+0x12a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2201      	movs	r2, #1
 8001c22:	601a      	str	r2, [r3, #0]
 8001c24:	e007      	b.n	8001c36 <xQueueGenericSendFromISR+0x12a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8001c26:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001c2a:	3301      	adds	r3, #1
 8001c2c:	b2db      	uxtb	r3, r3
 8001c2e:	b25a      	sxtb	r2, r3
 8001c30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8001c36:	2301      	movs	r3, #1
 8001c38:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8001c3a:	e00b      	b.n	8001c54 <xQueueGenericSendFromISR+0x148>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8001c3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f003 fe4c 	bl	80058dc <SEGGER_SYSVIEW_ShrinkId>
 8001c44:	4601      	mov	r1, r0
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	461a      	mov	r2, r3
 8001c4a:	2060      	movs	r0, #96	; 0x60
 8001c4c:	f003 f856 	bl	8004cfc <SEGGER_SYSVIEW_RecordU32x2>
			xReturn = errQUEUE_FULL;
 8001c50:	2300      	movs	r3, #0
 8001c52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c56:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8001c5e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8001c60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	3740      	adds	r7, #64	; 0x40
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
	...

08001c6c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8001c6c:	b590      	push	{r4, r7, lr}
 8001c6e:	b08f      	sub	sp, #60	; 0x3c
 8001c70:	af02      	add	r7, sp, #8
 8001c72:	60f8      	str	r0, [r7, #12]
 8001c74:	60b9      	str	r1, [r7, #8]
 8001c76:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8001c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d10a      	bne.n	8001c9c <xQueueReceive+0x30>
	__asm volatile
 8001c86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c8a:	f383 8811 	msr	BASEPRI, r3
 8001c8e:	f3bf 8f6f 	isb	sy
 8001c92:	f3bf 8f4f 	dsb	sy
 8001c96:	623b      	str	r3, [r7, #32]
}
 8001c98:	bf00      	nop
 8001c9a:	e7fe      	b.n	8001c9a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d103      	bne.n	8001caa <xQueueReceive+0x3e>
 8001ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d101      	bne.n	8001cae <xQueueReceive+0x42>
 8001caa:	2301      	movs	r3, #1
 8001cac:	e000      	b.n	8001cb0 <xQueueReceive+0x44>
 8001cae:	2300      	movs	r3, #0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d10a      	bne.n	8001cca <xQueueReceive+0x5e>
	__asm volatile
 8001cb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cb8:	f383 8811 	msr	BASEPRI, r3
 8001cbc:	f3bf 8f6f 	isb	sy
 8001cc0:	f3bf 8f4f 	dsb	sy
 8001cc4:	61fb      	str	r3, [r7, #28]
}
 8001cc6:	bf00      	nop
 8001cc8:	e7fe      	b.n	8001cc8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001cca:	f001 f90b 	bl	8002ee4 <xTaskGetSchedulerState>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d102      	bne.n	8001cda <xQueueReceive+0x6e>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d101      	bne.n	8001cde <xQueueReceive+0x72>
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e000      	b.n	8001ce0 <xQueueReceive+0x74>
 8001cde:	2300      	movs	r3, #0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d10a      	bne.n	8001cfa <xQueueReceive+0x8e>
	__asm volatile
 8001ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ce8:	f383 8811 	msr	BASEPRI, r3
 8001cec:	f3bf 8f6f 	isb	sy
 8001cf0:	f3bf 8f4f 	dsb	sy
 8001cf4:	61bb      	str	r3, [r7, #24]
}
 8001cf6:	bf00      	nop
 8001cf8:	e7fe      	b.n	8001cf8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8001cfa:	f001 fe63 	bl	80039c4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d02:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d02f      	beq.n	8001d6a <xQueueReceive+0xfe>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001d0a:	68b9      	ldr	r1, [r7, #8]
 8001d0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001d0e:	f000 f927 	bl	8001f60 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
 8001d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d14:	4618      	mov	r0, r3
 8001d16:	f003 fde1 	bl	80058dc <SEGGER_SYSVIEW_ShrinkId>
 8001d1a:	4604      	mov	r4, r0
 8001d1c:	2000      	movs	r0, #0
 8001d1e:	f003 fddd 	bl	80058dc <SEGGER_SYSVIEW_ShrinkId>
 8001d22:	4602      	mov	r2, r0
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2101      	movs	r1, #1
 8001d28:	9100      	str	r1, [sp, #0]
 8001d2a:	4621      	mov	r1, r4
 8001d2c:	205c      	movs	r0, #92	; 0x5c
 8001d2e:	f003 f8b5 	bl	8004e9c <SEGGER_SYSVIEW_RecordU32x4>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8001d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d34:	1e5a      	subs	r2, r3, #1
 8001d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d38:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d3c:	691b      	ldr	r3, [r3, #16]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d00f      	beq.n	8001d62 <xQueueReceive+0xf6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d44:	3310      	adds	r3, #16
 8001d46:	4618      	mov	r0, r3
 8001d48:	f000 fed2 	bl	8002af0 <xTaskRemoveFromEventList>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d007      	beq.n	8001d62 <xQueueReceive+0xf6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8001d52:	4b4d      	ldr	r3, [pc, #308]	; (8001e88 <xQueueReceive+0x21c>)
 8001d54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001d58:	601a      	str	r2, [r3, #0]
 8001d5a:	f3bf 8f4f 	dsb	sy
 8001d5e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8001d62:	f001 fe5f 	bl	8003a24 <vPortExitCritical>
				return pdPASS;
 8001d66:	2301      	movs	r3, #1
 8001d68:	e08a      	b.n	8001e80 <xQueueReceive+0x214>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d113      	bne.n	8001d98 <xQueueReceive+0x12c>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001d70:	f001 fe58 	bl	8003a24 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
 8001d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d76:	4618      	mov	r0, r3
 8001d78:	f003 fdb0 	bl	80058dc <SEGGER_SYSVIEW_ShrinkId>
 8001d7c:	4604      	mov	r4, r0
 8001d7e:	2000      	movs	r0, #0
 8001d80:	f003 fdac 	bl	80058dc <SEGGER_SYSVIEW_ShrinkId>
 8001d84:	4602      	mov	r2, r0
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2101      	movs	r1, #1
 8001d8a:	9100      	str	r1, [sp, #0]
 8001d8c:	4621      	mov	r1, r4
 8001d8e:	205c      	movs	r0, #92	; 0x5c
 8001d90:	f003 f884 	bl	8004e9c <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_EMPTY;
 8001d94:	2300      	movs	r3, #0
 8001d96:	e073      	b.n	8001e80 <xQueueReceive+0x214>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001d98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d106      	bne.n	8001dac <xQueueReceive+0x140>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001d9e:	f107 0310 	add.w	r3, r7, #16
 8001da2:	4618      	mov	r0, r3
 8001da4:	f000 ff0c 	bl	8002bc0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001da8:	2301      	movs	r3, #1
 8001daa:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001dac:	f001 fe3a 	bl	8003a24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001db0:	f000 fc50 	bl	8002654 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001db4:	f001 fe06 	bl	80039c4 <vPortEnterCritical>
 8001db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001dbe:	b25b      	sxtb	r3, r3
 8001dc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dc4:	d103      	bne.n	8001dce <xQueueReceive+0x162>
 8001dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dc8:	2200      	movs	r2, #0
 8001dca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001dce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dd0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001dd4:	b25b      	sxtb	r3, r3
 8001dd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dda:	d103      	bne.n	8001de4 <xQueueReceive+0x178>
 8001ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dde:	2200      	movs	r2, #0
 8001de0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001de4:	f001 fe1e 	bl	8003a24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001de8:	1d3a      	adds	r2, r7, #4
 8001dea:	f107 0310 	add.w	r3, r7, #16
 8001dee:	4611      	mov	r1, r2
 8001df0:	4618      	mov	r0, r3
 8001df2:	f000 fefb 	bl	8002bec <xTaskCheckForTimeOut>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d124      	bne.n	8001e46 <xQueueReceive+0x1da>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001dfc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001dfe:	f000 f927 	bl	8002050 <prvIsQueueEmpty>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d018      	beq.n	8001e3a <xQueueReceive+0x1ce>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e0a:	3324      	adds	r3, #36	; 0x24
 8001e0c:	687a      	ldr	r2, [r7, #4]
 8001e0e:	4611      	mov	r1, r2
 8001e10:	4618      	mov	r0, r3
 8001e12:	f000 fe1b 	bl	8002a4c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8001e16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001e18:	f000 f8c8 	bl	8001fac <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8001e1c:	f000 fc28 	bl	8002670 <xTaskResumeAll>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	f47f af69 	bne.w	8001cfa <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8001e28:	4b17      	ldr	r3, [pc, #92]	; (8001e88 <xQueueReceive+0x21c>)
 8001e2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e2e:	601a      	str	r2, [r3, #0]
 8001e30:	f3bf 8f4f 	dsb	sy
 8001e34:	f3bf 8f6f 	isb	sy
 8001e38:	e75f      	b.n	8001cfa <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8001e3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001e3c:	f000 f8b6 	bl	8001fac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001e40:	f000 fc16 	bl	8002670 <xTaskResumeAll>
 8001e44:	e759      	b.n	8001cfa <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8001e46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001e48:	f000 f8b0 	bl	8001fac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001e4c:	f000 fc10 	bl	8002670 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001e50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001e52:	f000 f8fd 	bl	8002050 <prvIsQueueEmpty>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	f43f af4e 	beq.w	8001cfa <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
 8001e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e60:	4618      	mov	r0, r3
 8001e62:	f003 fd3b 	bl	80058dc <SEGGER_SYSVIEW_ShrinkId>
 8001e66:	4604      	mov	r4, r0
 8001e68:	2000      	movs	r0, #0
 8001e6a:	f003 fd37 	bl	80058dc <SEGGER_SYSVIEW_ShrinkId>
 8001e6e:	4602      	mov	r2, r0
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2101      	movs	r1, #1
 8001e74:	9100      	str	r1, [sp, #0]
 8001e76:	4621      	mov	r1, r4
 8001e78:	205c      	movs	r0, #92	; 0x5c
 8001e7a:	f003 f80f 	bl	8004e9c <SEGGER_SYSVIEW_RecordU32x4>
				return errQUEUE_EMPTY;
 8001e7e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	3734      	adds	r7, #52	; 0x34
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd90      	pop	{r4, r7, pc}
 8001e88:	e000ed04 	.word	0xe000ed04

08001e8c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b086      	sub	sp, #24
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	60f8      	str	r0, [r7, #12]
 8001e94:	60b9      	str	r1, [r7, #8]
 8001e96:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ea0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d10d      	bne.n	8001ec6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d14d      	bne.n	8001f4e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f001 f832 	bl	8002f20 <xTaskPriorityDisinherit>
 8001ebc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	609a      	str	r2, [r3, #8]
 8001ec4:	e043      	b.n	8001f4e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d119      	bne.n	8001f00 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	6858      	ldr	r0, [r3, #4]
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed4:	461a      	mov	r2, r3
 8001ed6:	68b9      	ldr	r1, [r7, #8]
 8001ed8:	f003 fe86 	bl	8005be8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	685a      	ldr	r2, [r3, #4]
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee4:	441a      	add	r2, r3
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	685a      	ldr	r2, [r3, #4]
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	429a      	cmp	r2, r3
 8001ef4:	d32b      	bcc.n	8001f4e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	605a      	str	r2, [r3, #4]
 8001efe:	e026      	b.n	8001f4e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	68d8      	ldr	r0, [r3, #12]
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f08:	461a      	mov	r2, r3
 8001f0a:	68b9      	ldr	r1, [r7, #8]
 8001f0c:	f003 fe6c 	bl	8005be8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	68da      	ldr	r2, [r3, #12]
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f18:	425b      	negs	r3, r3
 8001f1a:	441a      	add	r2, r3
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	68da      	ldr	r2, [r3, #12]
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	d207      	bcs.n	8001f3c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	689a      	ldr	r2, [r3, #8]
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f34:	425b      	negs	r3, r3
 8001f36:	441a      	add	r2, r3
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2b02      	cmp	r3, #2
 8001f40:	d105      	bne.n	8001f4e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d002      	beq.n	8001f4e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	3b01      	subs	r3, #1
 8001f4c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	1c5a      	adds	r2, r3, #1
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8001f56:	697b      	ldr	r3, [r7, #20]
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	3718      	adds	r7, #24
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}

08001f60 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
 8001f68:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d018      	beq.n	8001fa4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	68da      	ldr	r2, [r3, #12]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7a:	441a      	add	r2, r3
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	68da      	ldr	r2, [r3, #12]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	d303      	bcc.n	8001f94 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	68d9      	ldr	r1, [r3, #12]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f9c:	461a      	mov	r2, r3
 8001f9e:	6838      	ldr	r0, [r7, #0]
 8001fa0:	f003 fe22 	bl	8005be8 <memcpy>
	}
}
 8001fa4:	bf00      	nop
 8001fa6:	3708      	adds	r7, #8
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}

08001fac <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b084      	sub	sp, #16
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8001fb4:	f001 fd06 	bl	80039c4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001fbe:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001fc0:	e011      	b.n	8001fe6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d012      	beq.n	8001ff0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	3324      	adds	r3, #36	; 0x24
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f000 fd8e 	bl	8002af0 <xTaskRemoveFromEventList>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d001      	beq.n	8001fde <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8001fda:	f000 fe69 	bl	8002cb0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8001fde:	7bfb      	ldrb	r3, [r7, #15]
 8001fe0:	3b01      	subs	r3, #1
 8001fe2:	b2db      	uxtb	r3, r3
 8001fe4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001fe6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	dce9      	bgt.n	8001fc2 <prvUnlockQueue+0x16>
 8001fee:	e000      	b.n	8001ff2 <prvUnlockQueue+0x46>
					break;
 8001ff0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	22ff      	movs	r2, #255	; 0xff
 8001ff6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8001ffa:	f001 fd13 	bl	8003a24 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8001ffe:	f001 fce1 	bl	80039c4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002008:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800200a:	e011      	b.n	8002030 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	691b      	ldr	r3, [r3, #16]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d012      	beq.n	800203a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	3310      	adds	r3, #16
 8002018:	4618      	mov	r0, r3
 800201a:	f000 fd69 	bl	8002af0 <xTaskRemoveFromEventList>
 800201e:	4603      	mov	r3, r0
 8002020:	2b00      	cmp	r3, #0
 8002022:	d001      	beq.n	8002028 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002024:	f000 fe44 	bl	8002cb0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002028:	7bbb      	ldrb	r3, [r7, #14]
 800202a:	3b01      	subs	r3, #1
 800202c:	b2db      	uxtb	r3, r3
 800202e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002030:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002034:	2b00      	cmp	r3, #0
 8002036:	dce9      	bgt.n	800200c <prvUnlockQueue+0x60>
 8002038:	e000      	b.n	800203c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800203a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	22ff      	movs	r2, #255	; 0xff
 8002040:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002044:	f001 fcee 	bl	8003a24 <vPortExitCritical>
}
 8002048:	bf00      	nop
 800204a:	3710      	adds	r7, #16
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}

08002050 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b084      	sub	sp, #16
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002058:	f001 fcb4 	bl	80039c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002060:	2b00      	cmp	r3, #0
 8002062:	d102      	bne.n	800206a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002064:	2301      	movs	r3, #1
 8002066:	60fb      	str	r3, [r7, #12]
 8002068:	e001      	b.n	800206e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800206a:	2300      	movs	r3, #0
 800206c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800206e:	f001 fcd9 	bl	8003a24 <vPortExitCritical>

	return xReturn;
 8002072:	68fb      	ldr	r3, [r7, #12]
}
 8002074:	4618      	mov	r0, r3
 8002076:	3710      	adds	r7, #16
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}

0800207c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b084      	sub	sp, #16
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002084:	f001 fc9e 	bl	80039c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002090:	429a      	cmp	r2, r3
 8002092:	d102      	bne.n	800209a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002094:	2301      	movs	r3, #1
 8002096:	60fb      	str	r3, [r7, #12]
 8002098:	e001      	b.n	800209e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800209a:	2300      	movs	r3, #0
 800209c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800209e:	f001 fcc1 	bl	8003a24 <vPortExitCritical>

	return xReturn;
 80020a2:	68fb      	ldr	r3, [r7, #12]
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	3710      	adds	r7, #16
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}

080020ac <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b084      	sub	sp, #16
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
 80020b4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80020b6:	2300      	movs	r3, #0
 80020b8:	60fb      	str	r3, [r7, #12]
 80020ba:	e01e      	b.n	80020fa <vQueueAddToRegistry+0x4e>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80020bc:	4a13      	ldr	r2, [pc, #76]	; (800210c <vQueueAddToRegistry+0x60>)
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d115      	bne.n	80020f4 <vQueueAddToRegistry+0x48>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80020c8:	4910      	ldr	r1, [pc, #64]	; (800210c <vQueueAddToRegistry+0x60>)
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	683a      	ldr	r2, [r7, #0]
 80020ce:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80020d2:	4a0e      	ldr	r2, [pc, #56]	; (800210c <vQueueAddToRegistry+0x60>)
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	00db      	lsls	r3, r3, #3
 80020d8:	4413      	add	r3, r2
 80020da:	687a      	ldr	r2, [r7, #4]
 80020dc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	4618      	mov	r0, r3
 80020e2:	f003 fbfb 	bl	80058dc <SEGGER_SYSVIEW_ShrinkId>
 80020e6:	4601      	mov	r1, r0
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	461a      	mov	r2, r3
 80020ec:	2071      	movs	r0, #113	; 0x71
 80020ee:	f002 fe05 	bl	8004cfc <SEGGER_SYSVIEW_RecordU32x2>
				break;
 80020f2:	e006      	b.n	8002102 <vQueueAddToRegistry+0x56>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	3301      	adds	r3, #1
 80020f8:	60fb      	str	r3, [r7, #12]
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	2b07      	cmp	r3, #7
 80020fe:	d9dd      	bls.n	80020bc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002100:	bf00      	nop
 8002102:	bf00      	nop
 8002104:	3710      	adds	r7, #16
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	200006f4 	.word	0x200006f4

08002110 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002110:	b580      	push	{r7, lr}
 8002112:	b086      	sub	sp, #24
 8002114:	af00      	add	r7, sp, #0
 8002116:	60f8      	str	r0, [r7, #12]
 8002118:	60b9      	str	r1, [r7, #8]
 800211a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002120:	f001 fc50 	bl	80039c4 <vPortEnterCritical>
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800212a:	b25b      	sxtb	r3, r3
 800212c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002130:	d103      	bne.n	800213a <vQueueWaitForMessageRestricted+0x2a>
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	2200      	movs	r2, #0
 8002136:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002140:	b25b      	sxtb	r3, r3
 8002142:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002146:	d103      	bne.n	8002150 <vQueueWaitForMessageRestricted+0x40>
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	2200      	movs	r2, #0
 800214c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002150:	f001 fc68 	bl	8003a24 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002158:	2b00      	cmp	r3, #0
 800215a:	d106      	bne.n	800216a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	3324      	adds	r3, #36	; 0x24
 8002160:	687a      	ldr	r2, [r7, #4]
 8002162:	68b9      	ldr	r1, [r7, #8]
 8002164:	4618      	mov	r0, r3
 8002166:	f000 fc95 	bl	8002a94 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800216a:	6978      	ldr	r0, [r7, #20]
 800216c:	f7ff ff1e 	bl	8001fac <prvUnlockQueue>
	}
 8002170:	bf00      	nop
 8002172:	3718      	adds	r7, #24
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}

08002178 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002178:	b580      	push	{r7, lr}
 800217a:	b08e      	sub	sp, #56	; 0x38
 800217c:	af04      	add	r7, sp, #16
 800217e:	60f8      	str	r0, [r7, #12]
 8002180:	60b9      	str	r1, [r7, #8]
 8002182:	607a      	str	r2, [r7, #4]
 8002184:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002186:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002188:	2b00      	cmp	r3, #0
 800218a:	d10a      	bne.n	80021a2 <xTaskCreateStatic+0x2a>
	__asm volatile
 800218c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002190:	f383 8811 	msr	BASEPRI, r3
 8002194:	f3bf 8f6f 	isb	sy
 8002198:	f3bf 8f4f 	dsb	sy
 800219c:	623b      	str	r3, [r7, #32]
}
 800219e:	bf00      	nop
 80021a0:	e7fe      	b.n	80021a0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80021a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d10a      	bne.n	80021be <xTaskCreateStatic+0x46>
	__asm volatile
 80021a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021ac:	f383 8811 	msr	BASEPRI, r3
 80021b0:	f3bf 8f6f 	isb	sy
 80021b4:	f3bf 8f4f 	dsb	sy
 80021b8:	61fb      	str	r3, [r7, #28]
}
 80021ba:	bf00      	nop
 80021bc:	e7fe      	b.n	80021bc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80021be:	235c      	movs	r3, #92	; 0x5c
 80021c0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	2b5c      	cmp	r3, #92	; 0x5c
 80021c6:	d00a      	beq.n	80021de <xTaskCreateStatic+0x66>
	__asm volatile
 80021c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021cc:	f383 8811 	msr	BASEPRI, r3
 80021d0:	f3bf 8f6f 	isb	sy
 80021d4:	f3bf 8f4f 	dsb	sy
 80021d8:	61bb      	str	r3, [r7, #24]
}
 80021da:	bf00      	nop
 80021dc:	e7fe      	b.n	80021dc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80021de:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80021e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d01e      	beq.n	8002224 <xTaskCreateStatic+0xac>
 80021e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d01b      	beq.n	8002224 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80021ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021ee:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80021f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80021f4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80021f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f8:	2202      	movs	r2, #2
 80021fa:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80021fe:	2300      	movs	r3, #0
 8002200:	9303      	str	r3, [sp, #12]
 8002202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002204:	9302      	str	r3, [sp, #8]
 8002206:	f107 0314 	add.w	r3, r7, #20
 800220a:	9301      	str	r3, [sp, #4]
 800220c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800220e:	9300      	str	r3, [sp, #0]
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	687a      	ldr	r2, [r7, #4]
 8002214:	68b9      	ldr	r1, [r7, #8]
 8002216:	68f8      	ldr	r0, [r7, #12]
 8002218:	f000 f850 	bl	80022bc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800221c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800221e:	f000 f8dd 	bl	80023dc <prvAddNewTaskToReadyList>
 8002222:	e001      	b.n	8002228 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8002224:	2300      	movs	r3, #0
 8002226:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002228:	697b      	ldr	r3, [r7, #20]
	}
 800222a:	4618      	mov	r0, r3
 800222c:	3728      	adds	r7, #40	; 0x28
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}

08002232 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002232:	b580      	push	{r7, lr}
 8002234:	b08c      	sub	sp, #48	; 0x30
 8002236:	af04      	add	r7, sp, #16
 8002238:	60f8      	str	r0, [r7, #12]
 800223a:	60b9      	str	r1, [r7, #8]
 800223c:	603b      	str	r3, [r7, #0]
 800223e:	4613      	mov	r3, r2
 8002240:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002242:	88fb      	ldrh	r3, [r7, #6]
 8002244:	009b      	lsls	r3, r3, #2
 8002246:	4618      	mov	r0, r3
 8002248:	f001 fd3e 	bl	8003cc8 <pvPortMalloc>
 800224c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d00e      	beq.n	8002272 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002254:	205c      	movs	r0, #92	; 0x5c
 8002256:	f001 fd37 	bl	8003cc8 <pvPortMalloc>
 800225a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800225c:	69fb      	ldr	r3, [r7, #28]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d003      	beq.n	800226a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	697a      	ldr	r2, [r7, #20]
 8002266:	631a      	str	r2, [r3, #48]	; 0x30
 8002268:	e005      	b.n	8002276 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800226a:	6978      	ldr	r0, [r7, #20]
 800226c:	f001 fdf8 	bl	8003e60 <vPortFree>
 8002270:	e001      	b.n	8002276 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002272:	2300      	movs	r3, #0
 8002274:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d017      	beq.n	80022ac <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800227c:	69fb      	ldr	r3, [r7, #28]
 800227e:	2200      	movs	r2, #0
 8002280:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002284:	88fa      	ldrh	r2, [r7, #6]
 8002286:	2300      	movs	r3, #0
 8002288:	9303      	str	r3, [sp, #12]
 800228a:	69fb      	ldr	r3, [r7, #28]
 800228c:	9302      	str	r3, [sp, #8]
 800228e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002290:	9301      	str	r3, [sp, #4]
 8002292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002294:	9300      	str	r3, [sp, #0]
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	68b9      	ldr	r1, [r7, #8]
 800229a:	68f8      	ldr	r0, [r7, #12]
 800229c:	f000 f80e 	bl	80022bc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80022a0:	69f8      	ldr	r0, [r7, #28]
 80022a2:	f000 f89b 	bl	80023dc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80022a6:	2301      	movs	r3, #1
 80022a8:	61bb      	str	r3, [r7, #24]
 80022aa:	e002      	b.n	80022b2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80022ac:	f04f 33ff 	mov.w	r3, #4294967295
 80022b0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80022b2:	69bb      	ldr	r3, [r7, #24]
	}
 80022b4:	4618      	mov	r0, r3
 80022b6:	3720      	adds	r7, #32
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}

080022bc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b088      	sub	sp, #32
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	60f8      	str	r0, [r7, #12]
 80022c4:	60b9      	str	r1, [r7, #8]
 80022c6:	607a      	str	r2, [r7, #4]
 80022c8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80022ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022cc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	009b      	lsls	r3, r3, #2
 80022d2:	461a      	mov	r2, r3
 80022d4:	21a5      	movs	r1, #165	; 0xa5
 80022d6:	f003 fc5b 	bl	8005b90 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80022da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80022e4:	3b01      	subs	r3, #1
 80022e6:	009b      	lsls	r3, r3, #2
 80022e8:	4413      	add	r3, r2
 80022ea:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80022ec:	69bb      	ldr	r3, [r7, #24]
 80022ee:	f023 0307 	bic.w	r3, r3, #7
 80022f2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80022f4:	69bb      	ldr	r3, [r7, #24]
 80022f6:	f003 0307 	and.w	r3, r3, #7
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d00a      	beq.n	8002314 <prvInitialiseNewTask+0x58>
	__asm volatile
 80022fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002302:	f383 8811 	msr	BASEPRI, r3
 8002306:	f3bf 8f6f 	isb	sy
 800230a:	f3bf 8f4f 	dsb	sy
 800230e:	617b      	str	r3, [r7, #20]
}
 8002310:	bf00      	nop
 8002312:	e7fe      	b.n	8002312 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d01f      	beq.n	800235a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800231a:	2300      	movs	r3, #0
 800231c:	61fb      	str	r3, [r7, #28]
 800231e:	e012      	b.n	8002346 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002320:	68ba      	ldr	r2, [r7, #8]
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	4413      	add	r3, r2
 8002326:	7819      	ldrb	r1, [r3, #0]
 8002328:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	4413      	add	r3, r2
 800232e:	3334      	adds	r3, #52	; 0x34
 8002330:	460a      	mov	r2, r1
 8002332:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002334:	68ba      	ldr	r2, [r7, #8]
 8002336:	69fb      	ldr	r3, [r7, #28]
 8002338:	4413      	add	r3, r2
 800233a:	781b      	ldrb	r3, [r3, #0]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d006      	beq.n	800234e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002340:	69fb      	ldr	r3, [r7, #28]
 8002342:	3301      	adds	r3, #1
 8002344:	61fb      	str	r3, [r7, #28]
 8002346:	69fb      	ldr	r3, [r7, #28]
 8002348:	2b0f      	cmp	r3, #15
 800234a:	d9e9      	bls.n	8002320 <prvInitialiseNewTask+0x64>
 800234c:	e000      	b.n	8002350 <prvInitialiseNewTask+0x94>
			{
				break;
 800234e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002352:	2200      	movs	r2, #0
 8002354:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002358:	e003      	b.n	8002362 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800235a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800235c:	2200      	movs	r2, #0
 800235e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002364:	2b37      	cmp	r3, #55	; 0x37
 8002366:	d901      	bls.n	800236c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002368:	2337      	movs	r3, #55	; 0x37
 800236a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800236c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800236e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002370:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002374:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002376:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8002378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800237a:	2200      	movs	r2, #0
 800237c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800237e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002380:	3304      	adds	r3, #4
 8002382:	4618      	mov	r0, r3
 8002384:	f7ff f8fe 	bl	8001584 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800238a:	3318      	adds	r3, #24
 800238c:	4618      	mov	r0, r3
 800238e:	f7ff f8f9 	bl	8001584 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002394:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002396:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800239a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800239e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023a0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80023a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80023a6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80023a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023aa:	2200      	movs	r2, #0
 80023ac:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80023ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023b0:	2200      	movs	r2, #0
 80023b2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80023b6:	683a      	ldr	r2, [r7, #0]
 80023b8:	68f9      	ldr	r1, [r7, #12]
 80023ba:	69b8      	ldr	r0, [r7, #24]
 80023bc:	f001 f9d6 	bl	800376c <pxPortInitialiseStack>
 80023c0:	4602      	mov	r2, r0
 80023c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023c4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80023c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d002      	beq.n	80023d2 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80023cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80023d0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80023d2:	bf00      	nop
 80023d4:	3720      	adds	r7, #32
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
	...

080023dc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80023dc:	b5b0      	push	{r4, r5, r7, lr}
 80023de:	b084      	sub	sp, #16
 80023e0:	af02      	add	r7, sp, #8
 80023e2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80023e4:	f001 faee 	bl	80039c4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80023e8:	4b3c      	ldr	r3, [pc, #240]	; (80024dc <prvAddNewTaskToReadyList+0x100>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	3301      	adds	r3, #1
 80023ee:	4a3b      	ldr	r2, [pc, #236]	; (80024dc <prvAddNewTaskToReadyList+0x100>)
 80023f0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80023f2:	4b3b      	ldr	r3, [pc, #236]	; (80024e0 <prvAddNewTaskToReadyList+0x104>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d109      	bne.n	800240e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80023fa:	4a39      	ldr	r2, [pc, #228]	; (80024e0 <prvAddNewTaskToReadyList+0x104>)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002400:	4b36      	ldr	r3, [pc, #216]	; (80024dc <prvAddNewTaskToReadyList+0x100>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	2b01      	cmp	r3, #1
 8002406:	d110      	bne.n	800242a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002408:	f000 fc76 	bl	8002cf8 <prvInitialiseTaskLists>
 800240c:	e00d      	b.n	800242a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800240e:	4b35      	ldr	r3, [pc, #212]	; (80024e4 <prvAddNewTaskToReadyList+0x108>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d109      	bne.n	800242a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002416:	4b32      	ldr	r3, [pc, #200]	; (80024e0 <prvAddNewTaskToReadyList+0x104>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002420:	429a      	cmp	r2, r3
 8002422:	d802      	bhi.n	800242a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002424:	4a2e      	ldr	r2, [pc, #184]	; (80024e0 <prvAddNewTaskToReadyList+0x104>)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800242a:	4b2f      	ldr	r3, [pc, #188]	; (80024e8 <prvAddNewTaskToReadyList+0x10c>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	3301      	adds	r3, #1
 8002430:	4a2d      	ldr	r2, [pc, #180]	; (80024e8 <prvAddNewTaskToReadyList+0x10c>)
 8002432:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002434:	4b2c      	ldr	r3, [pc, #176]	; (80024e8 <prvAddNewTaskToReadyList+0x10c>)
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d016      	beq.n	8002470 <prvAddNewTaskToReadyList+0x94>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	4618      	mov	r0, r3
 8002446:	f003 f91d 	bl	8005684 <SEGGER_SYSVIEW_OnTaskCreate>
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245a:	461d      	mov	r5, r3
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	461c      	mov	r4, r3
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002466:	1ae3      	subs	r3, r4, r3
 8002468:	9300      	str	r3, [sp, #0]
 800246a:	462b      	mov	r3, r5
 800246c:	f001 fedc 	bl	8004228 <SYSVIEW_AddTask>

		prvAddTaskToReadyList( pxNewTCB );
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	4618      	mov	r0, r3
 8002474:	f003 f98e 	bl	8005794 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800247c:	4b1b      	ldr	r3, [pc, #108]	; (80024ec <prvAddNewTaskToReadyList+0x110>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	429a      	cmp	r2, r3
 8002482:	d903      	bls.n	800248c <prvAddNewTaskToReadyList+0xb0>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002488:	4a18      	ldr	r2, [pc, #96]	; (80024ec <prvAddNewTaskToReadyList+0x110>)
 800248a:	6013      	str	r3, [r2, #0]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002490:	4613      	mov	r3, r2
 8002492:	009b      	lsls	r3, r3, #2
 8002494:	4413      	add	r3, r2
 8002496:	009b      	lsls	r3, r3, #2
 8002498:	4a15      	ldr	r2, [pc, #84]	; (80024f0 <prvAddNewTaskToReadyList+0x114>)
 800249a:	441a      	add	r2, r3
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	3304      	adds	r3, #4
 80024a0:	4619      	mov	r1, r3
 80024a2:	4610      	mov	r0, r2
 80024a4:	f7ff f87b 	bl	800159e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80024a8:	f001 fabc 	bl	8003a24 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80024ac:	4b0d      	ldr	r3, [pc, #52]	; (80024e4 <prvAddNewTaskToReadyList+0x108>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d00e      	beq.n	80024d2 <prvAddNewTaskToReadyList+0xf6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80024b4:	4b0a      	ldr	r3, [pc, #40]	; (80024e0 <prvAddNewTaskToReadyList+0x104>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024be:	429a      	cmp	r2, r3
 80024c0:	d207      	bcs.n	80024d2 <prvAddNewTaskToReadyList+0xf6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80024c2:	4b0c      	ldr	r3, [pc, #48]	; (80024f4 <prvAddNewTaskToReadyList+0x118>)
 80024c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80024c8:	601a      	str	r2, [r3, #0]
 80024ca:	f3bf 8f4f 	dsb	sy
 80024ce:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80024d2:	bf00      	nop
 80024d4:	3708      	adds	r7, #8
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bdb0      	pop	{r4, r5, r7, pc}
 80024da:	bf00      	nop
 80024dc:	20000c08 	.word	0x20000c08
 80024e0:	20000734 	.word	0x20000734
 80024e4:	20000c14 	.word	0x20000c14
 80024e8:	20000c24 	.word	0x20000c24
 80024ec:	20000c10 	.word	0x20000c10
 80024f0:	20000738 	.word	0x20000738
 80024f4:	e000ed04 	.word	0xe000ed04

080024f8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b084      	sub	sp, #16
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002500:	2300      	movs	r3, #0
 8002502:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d01b      	beq.n	8002542 <vTaskDelay+0x4a>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800250a:	4b15      	ldr	r3, [pc, #84]	; (8002560 <vTaskDelay+0x68>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d00a      	beq.n	8002528 <vTaskDelay+0x30>
	__asm volatile
 8002512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002516:	f383 8811 	msr	BASEPRI, r3
 800251a:	f3bf 8f6f 	isb	sy
 800251e:	f3bf 8f4f 	dsb	sy
 8002522:	60bb      	str	r3, [r7, #8]
}
 8002524:	bf00      	nop
 8002526:	e7fe      	b.n	8002526 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002528:	f000 f894 	bl	8002654 <vTaskSuspendAll>
			{
				traceTASK_DELAY();
 800252c:	6879      	ldr	r1, [r7, #4]
 800252e:	2023      	movs	r0, #35	; 0x23
 8002530:	f002 fba8 	bl	8004c84 <SEGGER_SYSVIEW_RecordU32>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002534:	2100      	movs	r1, #0
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	f000 fd64 	bl	8003004 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800253c:	f000 f898 	bl	8002670 <xTaskResumeAll>
 8002540:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d107      	bne.n	8002558 <vTaskDelay+0x60>
		{
			portYIELD_WITHIN_API();
 8002548:	4b06      	ldr	r3, [pc, #24]	; (8002564 <vTaskDelay+0x6c>)
 800254a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800254e:	601a      	str	r2, [r3, #0]
 8002550:	f3bf 8f4f 	dsb	sy
 8002554:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002558:	bf00      	nop
 800255a:	3710      	adds	r7, #16
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}
 8002560:	20000c30 	.word	0x20000c30
 8002564:	e000ed04 	.word	0xe000ed04

08002568 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b08a      	sub	sp, #40	; 0x28
 800256c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800256e:	2300      	movs	r3, #0
 8002570:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002572:	2300      	movs	r3, #0
 8002574:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002576:	463a      	mov	r2, r7
 8002578:	1d39      	adds	r1, r7, #4
 800257a:	f107 0308 	add.w	r3, r7, #8
 800257e:	4618      	mov	r0, r3
 8002580:	f7fe ffac 	bl	80014dc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002584:	6839      	ldr	r1, [r7, #0]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	68ba      	ldr	r2, [r7, #8]
 800258a:	9202      	str	r2, [sp, #8]
 800258c:	9301      	str	r3, [sp, #4]
 800258e:	2300      	movs	r3, #0
 8002590:	9300      	str	r3, [sp, #0]
 8002592:	2300      	movs	r3, #0
 8002594:	460a      	mov	r2, r1
 8002596:	4928      	ldr	r1, [pc, #160]	; (8002638 <vTaskStartScheduler+0xd0>)
 8002598:	4828      	ldr	r0, [pc, #160]	; (800263c <vTaskStartScheduler+0xd4>)
 800259a:	f7ff fded 	bl	8002178 <xTaskCreateStatic>
 800259e:	4603      	mov	r3, r0
 80025a0:	4a27      	ldr	r2, [pc, #156]	; (8002640 <vTaskStartScheduler+0xd8>)
 80025a2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80025a4:	4b26      	ldr	r3, [pc, #152]	; (8002640 <vTaskStartScheduler+0xd8>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d002      	beq.n	80025b2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80025ac:	2301      	movs	r3, #1
 80025ae:	617b      	str	r3, [r7, #20]
 80025b0:	e001      	b.n	80025b6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80025b2:	2300      	movs	r3, #0
 80025b4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d102      	bne.n	80025c2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80025bc:	f000 fd88 	bl	80030d0 <xTimerCreateTimerTask>
 80025c0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	d124      	bne.n	8002612 <vTaskStartScheduler+0xaa>
	__asm volatile
 80025c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025cc:	f383 8811 	msr	BASEPRI, r3
 80025d0:	f3bf 8f6f 	isb	sy
 80025d4:	f3bf 8f4f 	dsb	sy
 80025d8:	613b      	str	r3, [r7, #16]
}
 80025da:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80025dc:	4b19      	ldr	r3, [pc, #100]	; (8002644 <vTaskStartScheduler+0xdc>)
 80025de:	f04f 32ff 	mov.w	r2, #4294967295
 80025e2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80025e4:	4b18      	ldr	r3, [pc, #96]	; (8002648 <vTaskStartScheduler+0xe0>)
 80025e6:	2201      	movs	r2, #1
 80025e8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80025ea:	4b18      	ldr	r3, [pc, #96]	; (800264c <vTaskStartScheduler+0xe4>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	601a      	str	r2, [r3, #0]
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		traceTASK_SWITCHED_IN();
 80025f0:	4b17      	ldr	r3, [pc, #92]	; (8002650 <vTaskStartScheduler+0xe8>)
 80025f2:	681a      	ldr	r2, [r3, #0]
 80025f4:	4b12      	ldr	r3, [pc, #72]	; (8002640 <vTaskStartScheduler+0xd8>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	429a      	cmp	r2, r3
 80025fa:	d102      	bne.n	8002602 <vTaskStartScheduler+0x9a>
 80025fc:	f003 f826 	bl	800564c <SEGGER_SYSVIEW_OnIdle>
 8002600:	e004      	b.n	800260c <vTaskStartScheduler+0xa4>
 8002602:	4b13      	ldr	r3, [pc, #76]	; (8002650 <vTaskStartScheduler+0xe8>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4618      	mov	r0, r3
 8002608:	f003 f880 	bl	800570c <SEGGER_SYSVIEW_OnTaskStartExec>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800260c:	f001 f938 	bl	8003880 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002610:	e00e      	b.n	8002630 <vTaskStartScheduler+0xc8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002618:	d10a      	bne.n	8002630 <vTaskStartScheduler+0xc8>
	__asm volatile
 800261a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800261e:	f383 8811 	msr	BASEPRI, r3
 8002622:	f3bf 8f6f 	isb	sy
 8002626:	f3bf 8f4f 	dsb	sy
 800262a:	60fb      	str	r3, [r7, #12]
}
 800262c:	bf00      	nop
 800262e:	e7fe      	b.n	800262e <vTaskStartScheduler+0xc6>
}
 8002630:	bf00      	nop
 8002632:	3718      	adds	r7, #24
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}
 8002638:	08005c30 	.word	0x08005c30
 800263c:	08002cc9 	.word	0x08002cc9
 8002640:	20000c2c 	.word	0x20000c2c
 8002644:	20000c28 	.word	0x20000c28
 8002648:	20000c14 	.word	0x20000c14
 800264c:	20000c0c 	.word	0x20000c0c
 8002650:	20000734 	.word	0x20000734

08002654 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002654:	b480      	push	{r7}
 8002656:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8002658:	4b04      	ldr	r3, [pc, #16]	; (800266c <vTaskSuspendAll+0x18>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	3301      	adds	r3, #1
 800265e:	4a03      	ldr	r2, [pc, #12]	; (800266c <vTaskSuspendAll+0x18>)
 8002660:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8002662:	bf00      	nop
 8002664:	46bd      	mov	sp, r7
 8002666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266a:	4770      	bx	lr
 800266c:	20000c30 	.word	0x20000c30

08002670 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b084      	sub	sp, #16
 8002674:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002676:	2300      	movs	r3, #0
 8002678:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800267a:	2300      	movs	r3, #0
 800267c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800267e:	4b44      	ldr	r3, [pc, #272]	; (8002790 <xTaskResumeAll+0x120>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d10a      	bne.n	800269c <xTaskResumeAll+0x2c>
	__asm volatile
 8002686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800268a:	f383 8811 	msr	BASEPRI, r3
 800268e:	f3bf 8f6f 	isb	sy
 8002692:	f3bf 8f4f 	dsb	sy
 8002696:	603b      	str	r3, [r7, #0]
}
 8002698:	bf00      	nop
 800269a:	e7fe      	b.n	800269a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800269c:	f001 f992 	bl	80039c4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80026a0:	4b3b      	ldr	r3, [pc, #236]	; (8002790 <xTaskResumeAll+0x120>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	3b01      	subs	r3, #1
 80026a6:	4a3a      	ldr	r2, [pc, #232]	; (8002790 <xTaskResumeAll+0x120>)
 80026a8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80026aa:	4b39      	ldr	r3, [pc, #228]	; (8002790 <xTaskResumeAll+0x120>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d166      	bne.n	8002780 <xTaskResumeAll+0x110>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80026b2:	4b38      	ldr	r3, [pc, #224]	; (8002794 <xTaskResumeAll+0x124>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d062      	beq.n	8002780 <xTaskResumeAll+0x110>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80026ba:	e033      	b.n	8002724 <xTaskResumeAll+0xb4>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80026bc:	4b36      	ldr	r3, [pc, #216]	; (8002798 <xTaskResumeAll+0x128>)
 80026be:	68db      	ldr	r3, [r3, #12]
 80026c0:	68db      	ldr	r3, [r3, #12]
 80026c2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	3318      	adds	r3, #24
 80026c8:	4618      	mov	r0, r3
 80026ca:	f7fe ffc5 	bl	8001658 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	3304      	adds	r3, #4
 80026d2:	4618      	mov	r0, r3
 80026d4:	f7fe ffc0 	bl	8001658 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	4618      	mov	r0, r3
 80026dc:	f003 f85a 	bl	8005794 <SEGGER_SYSVIEW_OnTaskStartReady>
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026e4:	4b2d      	ldr	r3, [pc, #180]	; (800279c <xTaskResumeAll+0x12c>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	429a      	cmp	r2, r3
 80026ea:	d903      	bls.n	80026f4 <xTaskResumeAll+0x84>
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026f0:	4a2a      	ldr	r2, [pc, #168]	; (800279c <xTaskResumeAll+0x12c>)
 80026f2:	6013      	str	r3, [r2, #0]
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026f8:	4613      	mov	r3, r2
 80026fa:	009b      	lsls	r3, r3, #2
 80026fc:	4413      	add	r3, r2
 80026fe:	009b      	lsls	r3, r3, #2
 8002700:	4a27      	ldr	r2, [pc, #156]	; (80027a0 <xTaskResumeAll+0x130>)
 8002702:	441a      	add	r2, r3
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	3304      	adds	r3, #4
 8002708:	4619      	mov	r1, r3
 800270a:	4610      	mov	r0, r2
 800270c:	f7fe ff47 	bl	800159e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002714:	4b23      	ldr	r3, [pc, #140]	; (80027a4 <xTaskResumeAll+0x134>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800271a:	429a      	cmp	r2, r3
 800271c:	d302      	bcc.n	8002724 <xTaskResumeAll+0xb4>
					{
						xYieldPending = pdTRUE;
 800271e:	4b22      	ldr	r3, [pc, #136]	; (80027a8 <xTaskResumeAll+0x138>)
 8002720:	2201      	movs	r2, #1
 8002722:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002724:	4b1c      	ldr	r3, [pc, #112]	; (8002798 <xTaskResumeAll+0x128>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d1c7      	bne.n	80026bc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d001      	beq.n	8002736 <xTaskResumeAll+0xc6>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002732:	f000 fbb7 	bl	8002ea4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002736:	4b1d      	ldr	r3, [pc, #116]	; (80027ac <xTaskResumeAll+0x13c>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d010      	beq.n	8002764 <xTaskResumeAll+0xf4>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002742:	f000 f859 	bl	80027f8 <xTaskIncrementTick>
 8002746:	4603      	mov	r3, r0
 8002748:	2b00      	cmp	r3, #0
 800274a:	d002      	beq.n	8002752 <xTaskResumeAll+0xe2>
							{
								xYieldPending = pdTRUE;
 800274c:	4b16      	ldr	r3, [pc, #88]	; (80027a8 <xTaskResumeAll+0x138>)
 800274e:	2201      	movs	r2, #1
 8002750:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	3b01      	subs	r3, #1
 8002756:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d1f1      	bne.n	8002742 <xTaskResumeAll+0xd2>

						xPendedTicks = 0;
 800275e:	4b13      	ldr	r3, [pc, #76]	; (80027ac <xTaskResumeAll+0x13c>)
 8002760:	2200      	movs	r2, #0
 8002762:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002764:	4b10      	ldr	r3, [pc, #64]	; (80027a8 <xTaskResumeAll+0x138>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d009      	beq.n	8002780 <xTaskResumeAll+0x110>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800276c:	2301      	movs	r3, #1
 800276e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002770:	4b0f      	ldr	r3, [pc, #60]	; (80027b0 <xTaskResumeAll+0x140>)
 8002772:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002776:	601a      	str	r2, [r3, #0]
 8002778:	f3bf 8f4f 	dsb	sy
 800277c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002780:	f001 f950 	bl	8003a24 <vPortExitCritical>

	return xAlreadyYielded;
 8002784:	68bb      	ldr	r3, [r7, #8]
}
 8002786:	4618      	mov	r0, r3
 8002788:	3710      	adds	r7, #16
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	20000c30 	.word	0x20000c30
 8002794:	20000c08 	.word	0x20000c08
 8002798:	20000bc8 	.word	0x20000bc8
 800279c:	20000c10 	.word	0x20000c10
 80027a0:	20000738 	.word	0x20000738
 80027a4:	20000734 	.word	0x20000734
 80027a8:	20000c1c 	.word	0x20000c1c
 80027ac:	20000c18 	.word	0x20000c18
 80027b0:	e000ed04 	.word	0xe000ed04

080027b4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80027b4:	b480      	push	{r7}
 80027b6:	b083      	sub	sp, #12
 80027b8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80027ba:	4b05      	ldr	r3, [pc, #20]	; (80027d0 <xTaskGetTickCount+0x1c>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80027c0:	687b      	ldr	r3, [r7, #4]
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	370c      	adds	r7, #12
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr
 80027ce:	bf00      	nop
 80027d0:	20000c0c 	.word	0x20000c0c

080027d4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b082      	sub	sp, #8
 80027d8:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80027da:	f001 f9dd 	bl	8003b98 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80027de:	2300      	movs	r3, #0
 80027e0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80027e2:	4b04      	ldr	r3, [pc, #16]	; (80027f4 <xTaskGetTickCountFromISR+0x20>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80027e8:	683b      	ldr	r3, [r7, #0]
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	3708      	adds	r7, #8
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	bf00      	nop
 80027f4:	20000c0c 	.word	0x20000c0c

080027f8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b086      	sub	sp, #24
 80027fc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80027fe:	2300      	movs	r3, #0
 8002800:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002802:	4b51      	ldr	r3, [pc, #324]	; (8002948 <xTaskIncrementTick+0x150>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	2b00      	cmp	r3, #0
 8002808:	f040 8093 	bne.w	8002932 <xTaskIncrementTick+0x13a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800280c:	4b4f      	ldr	r3, [pc, #316]	; (800294c <xTaskIncrementTick+0x154>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	3301      	adds	r3, #1
 8002812:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002814:	4a4d      	ldr	r2, [pc, #308]	; (800294c <xTaskIncrementTick+0x154>)
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d120      	bne.n	8002862 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8002820:	4b4b      	ldr	r3, [pc, #300]	; (8002950 <xTaskIncrementTick+0x158>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d00a      	beq.n	8002840 <xTaskIncrementTick+0x48>
	__asm volatile
 800282a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800282e:	f383 8811 	msr	BASEPRI, r3
 8002832:	f3bf 8f6f 	isb	sy
 8002836:	f3bf 8f4f 	dsb	sy
 800283a:	603b      	str	r3, [r7, #0]
}
 800283c:	bf00      	nop
 800283e:	e7fe      	b.n	800283e <xTaskIncrementTick+0x46>
 8002840:	4b43      	ldr	r3, [pc, #268]	; (8002950 <xTaskIncrementTick+0x158>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	60fb      	str	r3, [r7, #12]
 8002846:	4b43      	ldr	r3, [pc, #268]	; (8002954 <xTaskIncrementTick+0x15c>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a41      	ldr	r2, [pc, #260]	; (8002950 <xTaskIncrementTick+0x158>)
 800284c:	6013      	str	r3, [r2, #0]
 800284e:	4a41      	ldr	r2, [pc, #260]	; (8002954 <xTaskIncrementTick+0x15c>)
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	6013      	str	r3, [r2, #0]
 8002854:	4b40      	ldr	r3, [pc, #256]	; (8002958 <xTaskIncrementTick+0x160>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	3301      	adds	r3, #1
 800285a:	4a3f      	ldr	r2, [pc, #252]	; (8002958 <xTaskIncrementTick+0x160>)
 800285c:	6013      	str	r3, [r2, #0]
 800285e:	f000 fb21 	bl	8002ea4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002862:	4b3e      	ldr	r3, [pc, #248]	; (800295c <xTaskIncrementTick+0x164>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	693a      	ldr	r2, [r7, #16]
 8002868:	429a      	cmp	r2, r3
 800286a:	d34d      	bcc.n	8002908 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800286c:	4b38      	ldr	r3, [pc, #224]	; (8002950 <xTaskIncrementTick+0x158>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d104      	bne.n	8002880 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002876:	4b39      	ldr	r3, [pc, #228]	; (800295c <xTaskIncrementTick+0x164>)
 8002878:	f04f 32ff 	mov.w	r2, #4294967295
 800287c:	601a      	str	r2, [r3, #0]
					break;
 800287e:	e043      	b.n	8002908 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002880:	4b33      	ldr	r3, [pc, #204]	; (8002950 <xTaskIncrementTick+0x158>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	68db      	ldr	r3, [r3, #12]
 8002886:	68db      	ldr	r3, [r3, #12]
 8002888:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002890:	693a      	ldr	r2, [r7, #16]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	429a      	cmp	r2, r3
 8002896:	d203      	bcs.n	80028a0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002898:	4a30      	ldr	r2, [pc, #192]	; (800295c <xTaskIncrementTick+0x164>)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800289e:	e033      	b.n	8002908 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	3304      	adds	r3, #4
 80028a4:	4618      	mov	r0, r3
 80028a6:	f7fe fed7 	bl	8001658 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d004      	beq.n	80028bc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	3318      	adds	r3, #24
 80028b6:	4618      	mov	r0, r3
 80028b8:	f7fe fece 	bl	8001658 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	4618      	mov	r0, r3
 80028c0:	f002 ff68 	bl	8005794 <SEGGER_SYSVIEW_OnTaskStartReady>
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028c8:	4b25      	ldr	r3, [pc, #148]	; (8002960 <xTaskIncrementTick+0x168>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d903      	bls.n	80028d8 <xTaskIncrementTick+0xe0>
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028d4:	4a22      	ldr	r2, [pc, #136]	; (8002960 <xTaskIncrementTick+0x168>)
 80028d6:	6013      	str	r3, [r2, #0]
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028dc:	4613      	mov	r3, r2
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	4413      	add	r3, r2
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	4a1f      	ldr	r2, [pc, #124]	; (8002964 <xTaskIncrementTick+0x16c>)
 80028e6:	441a      	add	r2, r3
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	3304      	adds	r3, #4
 80028ec:	4619      	mov	r1, r3
 80028ee:	4610      	mov	r0, r2
 80028f0:	f7fe fe55 	bl	800159e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028f8:	4b1b      	ldr	r3, [pc, #108]	; (8002968 <xTaskIncrementTick+0x170>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028fe:	429a      	cmp	r2, r3
 8002900:	d3b4      	bcc.n	800286c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8002902:	2301      	movs	r3, #1
 8002904:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002906:	e7b1      	b.n	800286c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002908:	4b17      	ldr	r3, [pc, #92]	; (8002968 <xTaskIncrementTick+0x170>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800290e:	4915      	ldr	r1, [pc, #84]	; (8002964 <xTaskIncrementTick+0x16c>)
 8002910:	4613      	mov	r3, r2
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	4413      	add	r3, r2
 8002916:	009b      	lsls	r3, r3, #2
 8002918:	440b      	add	r3, r1
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	2b01      	cmp	r3, #1
 800291e:	d901      	bls.n	8002924 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8002920:	2301      	movs	r3, #1
 8002922:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8002924:	4b11      	ldr	r3, [pc, #68]	; (800296c <xTaskIncrementTick+0x174>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d007      	beq.n	800293c <xTaskIncrementTick+0x144>
			{
				xSwitchRequired = pdTRUE;
 800292c:	2301      	movs	r3, #1
 800292e:	617b      	str	r3, [r7, #20]
 8002930:	e004      	b.n	800293c <xTaskIncrementTick+0x144>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8002932:	4b0f      	ldr	r3, [pc, #60]	; (8002970 <xTaskIncrementTick+0x178>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	3301      	adds	r3, #1
 8002938:	4a0d      	ldr	r2, [pc, #52]	; (8002970 <xTaskIncrementTick+0x178>)
 800293a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800293c:	697b      	ldr	r3, [r7, #20]
}
 800293e:	4618      	mov	r0, r3
 8002940:	3718      	adds	r7, #24
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	20000c30 	.word	0x20000c30
 800294c:	20000c0c 	.word	0x20000c0c
 8002950:	20000bc0 	.word	0x20000bc0
 8002954:	20000bc4 	.word	0x20000bc4
 8002958:	20000c20 	.word	0x20000c20
 800295c:	20000c28 	.word	0x20000c28
 8002960:	20000c10 	.word	0x20000c10
 8002964:	20000738 	.word	0x20000738
 8002968:	20000734 	.word	0x20000734
 800296c:	20000c1c 	.word	0x20000c1c
 8002970:	20000c18 	.word	0x20000c18

08002974 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b084      	sub	sp, #16
 8002978:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800297a:	4b2e      	ldr	r3, [pc, #184]	; (8002a34 <vTaskSwitchContext+0xc0>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d003      	beq.n	800298a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002982:	4b2d      	ldr	r3, [pc, #180]	; (8002a38 <vTaskSwitchContext+0xc4>)
 8002984:	2201      	movs	r2, #1
 8002986:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002988:	e04f      	b.n	8002a2a <vTaskSwitchContext+0xb6>
		xYieldPending = pdFALSE;
 800298a:	4b2b      	ldr	r3, [pc, #172]	; (8002a38 <vTaskSwitchContext+0xc4>)
 800298c:	2200      	movs	r2, #0
 800298e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002990:	4b2a      	ldr	r3, [pc, #168]	; (8002a3c <vTaskSwitchContext+0xc8>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	60fb      	str	r3, [r7, #12]
 8002996:	e010      	b.n	80029ba <vTaskSwitchContext+0x46>
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d10a      	bne.n	80029b4 <vTaskSwitchContext+0x40>
	__asm volatile
 800299e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029a2:	f383 8811 	msr	BASEPRI, r3
 80029a6:	f3bf 8f6f 	isb	sy
 80029aa:	f3bf 8f4f 	dsb	sy
 80029ae:	607b      	str	r3, [r7, #4]
}
 80029b0:	bf00      	nop
 80029b2:	e7fe      	b.n	80029b2 <vTaskSwitchContext+0x3e>
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	3b01      	subs	r3, #1
 80029b8:	60fb      	str	r3, [r7, #12]
 80029ba:	4921      	ldr	r1, [pc, #132]	; (8002a40 <vTaskSwitchContext+0xcc>)
 80029bc:	68fa      	ldr	r2, [r7, #12]
 80029be:	4613      	mov	r3, r2
 80029c0:	009b      	lsls	r3, r3, #2
 80029c2:	4413      	add	r3, r2
 80029c4:	009b      	lsls	r3, r3, #2
 80029c6:	440b      	add	r3, r1
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d0e4      	beq.n	8002998 <vTaskSwitchContext+0x24>
 80029ce:	68fa      	ldr	r2, [r7, #12]
 80029d0:	4613      	mov	r3, r2
 80029d2:	009b      	lsls	r3, r3, #2
 80029d4:	4413      	add	r3, r2
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	4a19      	ldr	r2, [pc, #100]	; (8002a40 <vTaskSwitchContext+0xcc>)
 80029da:	4413      	add	r3, r2
 80029dc:	60bb      	str	r3, [r7, #8]
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	685a      	ldr	r2, [r3, #4]
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	605a      	str	r2, [r3, #4]
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	685a      	ldr	r2, [r3, #4]
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	3308      	adds	r3, #8
 80029f0:	429a      	cmp	r2, r3
 80029f2:	d104      	bne.n	80029fe <vTaskSwitchContext+0x8a>
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	685a      	ldr	r2, [r3, #4]
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	605a      	str	r2, [r3, #4]
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	4a0f      	ldr	r2, [pc, #60]	; (8002a44 <vTaskSwitchContext+0xd0>)
 8002a06:	6013      	str	r3, [r2, #0]
 8002a08:	4a0c      	ldr	r2, [pc, #48]	; (8002a3c <vTaskSwitchContext+0xc8>)
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 8002a0e:	4b0d      	ldr	r3, [pc, #52]	; (8002a44 <vTaskSwitchContext+0xd0>)
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	4b0d      	ldr	r3, [pc, #52]	; (8002a48 <vTaskSwitchContext+0xd4>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	429a      	cmp	r2, r3
 8002a18:	d102      	bne.n	8002a20 <vTaskSwitchContext+0xac>
 8002a1a:	f002 fe17 	bl	800564c <SEGGER_SYSVIEW_OnIdle>
}
 8002a1e:	e004      	b.n	8002a2a <vTaskSwitchContext+0xb6>
		traceTASK_SWITCHED_IN();
 8002a20:	4b08      	ldr	r3, [pc, #32]	; (8002a44 <vTaskSwitchContext+0xd0>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4618      	mov	r0, r3
 8002a26:	f002 fe71 	bl	800570c <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8002a2a:	bf00      	nop
 8002a2c:	3710      	adds	r7, #16
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop
 8002a34:	20000c30 	.word	0x20000c30
 8002a38:	20000c1c 	.word	0x20000c1c
 8002a3c:	20000c10 	.word	0x20000c10
 8002a40:	20000738 	.word	0x20000738
 8002a44:	20000734 	.word	0x20000734
 8002a48:	20000c2c 	.word	0x20000c2c

08002a4c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b084      	sub	sp, #16
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
 8002a54:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d10a      	bne.n	8002a72 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8002a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a60:	f383 8811 	msr	BASEPRI, r3
 8002a64:	f3bf 8f6f 	isb	sy
 8002a68:	f3bf 8f4f 	dsb	sy
 8002a6c:	60fb      	str	r3, [r7, #12]
}
 8002a6e:	bf00      	nop
 8002a70:	e7fe      	b.n	8002a70 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002a72:	4b07      	ldr	r3, [pc, #28]	; (8002a90 <vTaskPlaceOnEventList+0x44>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	3318      	adds	r3, #24
 8002a78:	4619      	mov	r1, r3
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	f7fe fdb3 	bl	80015e6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002a80:	2101      	movs	r1, #1
 8002a82:	6838      	ldr	r0, [r7, #0]
 8002a84:	f000 fabe 	bl	8003004 <prvAddCurrentTaskToDelayedList>
}
 8002a88:	bf00      	nop
 8002a8a:	3710      	adds	r7, #16
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}
 8002a90:	20000734 	.word	0x20000734

08002a94 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b086      	sub	sp, #24
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	60f8      	str	r0, [r7, #12]
 8002a9c:	60b9      	str	r1, [r7, #8]
 8002a9e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d10a      	bne.n	8002abc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8002aa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002aaa:	f383 8811 	msr	BASEPRI, r3
 8002aae:	f3bf 8f6f 	isb	sy
 8002ab2:	f3bf 8f4f 	dsb	sy
 8002ab6:	617b      	str	r3, [r7, #20]
}
 8002ab8:	bf00      	nop
 8002aba:	e7fe      	b.n	8002aba <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002abc:	4b0b      	ldr	r3, [pc, #44]	; (8002aec <vTaskPlaceOnEventListRestricted+0x58>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	3318      	adds	r3, #24
 8002ac2:	4619      	mov	r1, r3
 8002ac4:	68f8      	ldr	r0, [r7, #12]
 8002ac6:	f7fe fd6a 	bl	800159e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d002      	beq.n	8002ad6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8002ad0:	f04f 33ff 	mov.w	r3, #4294967295
 8002ad4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8002ad6:	2024      	movs	r0, #36	; 0x24
 8002ad8:	f002 f8b6 	bl	8004c48 <SEGGER_SYSVIEW_RecordVoid>
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8002adc:	6879      	ldr	r1, [r7, #4]
 8002ade:	68b8      	ldr	r0, [r7, #8]
 8002ae0:	f000 fa90 	bl	8003004 <prvAddCurrentTaskToDelayedList>
	}
 8002ae4:	bf00      	nop
 8002ae6:	3718      	adds	r7, #24
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	20000734 	.word	0x20000734

08002af0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b086      	sub	sp, #24
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	68db      	ldr	r3, [r3, #12]
 8002afe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d10a      	bne.n	8002b1c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8002b06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b0a:	f383 8811 	msr	BASEPRI, r3
 8002b0e:	f3bf 8f6f 	isb	sy
 8002b12:	f3bf 8f4f 	dsb	sy
 8002b16:	60fb      	str	r3, [r7, #12]
}
 8002b18:	bf00      	nop
 8002b1a:	e7fe      	b.n	8002b1a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	3318      	adds	r3, #24
 8002b20:	4618      	mov	r0, r3
 8002b22:	f7fe fd99 	bl	8001658 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002b26:	4b20      	ldr	r3, [pc, #128]	; (8002ba8 <xTaskRemoveFromEventList+0xb8>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d121      	bne.n	8002b72 <xTaskRemoveFromEventList+0x82>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	3304      	adds	r3, #4
 8002b32:	4618      	mov	r0, r3
 8002b34:	f7fe fd90 	bl	8001658 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f002 fe2a 	bl	8005794 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b44:	4b19      	ldr	r3, [pc, #100]	; (8002bac <xTaskRemoveFromEventList+0xbc>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	d903      	bls.n	8002b54 <xTaskRemoveFromEventList+0x64>
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b50:	4a16      	ldr	r2, [pc, #88]	; (8002bac <xTaskRemoveFromEventList+0xbc>)
 8002b52:	6013      	str	r3, [r2, #0]
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b58:	4613      	mov	r3, r2
 8002b5a:	009b      	lsls	r3, r3, #2
 8002b5c:	4413      	add	r3, r2
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	4a13      	ldr	r2, [pc, #76]	; (8002bb0 <xTaskRemoveFromEventList+0xc0>)
 8002b62:	441a      	add	r2, r3
 8002b64:	693b      	ldr	r3, [r7, #16]
 8002b66:	3304      	adds	r3, #4
 8002b68:	4619      	mov	r1, r3
 8002b6a:	4610      	mov	r0, r2
 8002b6c:	f7fe fd17 	bl	800159e <vListInsertEnd>
 8002b70:	e005      	b.n	8002b7e <xTaskRemoveFromEventList+0x8e>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	3318      	adds	r3, #24
 8002b76:	4619      	mov	r1, r3
 8002b78:	480e      	ldr	r0, [pc, #56]	; (8002bb4 <xTaskRemoveFromEventList+0xc4>)
 8002b7a:	f7fe fd10 	bl	800159e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b82:	4b0d      	ldr	r3, [pc, #52]	; (8002bb8 <xTaskRemoveFromEventList+0xc8>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b88:	429a      	cmp	r2, r3
 8002b8a:	d905      	bls.n	8002b98 <xTaskRemoveFromEventList+0xa8>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8002b90:	4b0a      	ldr	r3, [pc, #40]	; (8002bbc <xTaskRemoveFromEventList+0xcc>)
 8002b92:	2201      	movs	r2, #1
 8002b94:	601a      	str	r2, [r3, #0]
 8002b96:	e001      	b.n	8002b9c <xTaskRemoveFromEventList+0xac>
	}
	else
	{
		xReturn = pdFALSE;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8002b9c:	697b      	ldr	r3, [r7, #20]
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	3718      	adds	r7, #24
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}
 8002ba6:	bf00      	nop
 8002ba8:	20000c30 	.word	0x20000c30
 8002bac:	20000c10 	.word	0x20000c10
 8002bb0:	20000738 	.word	0x20000738
 8002bb4:	20000bc8 	.word	0x20000bc8
 8002bb8:	20000734 	.word	0x20000734
 8002bbc:	20000c1c 	.word	0x20000c1c

08002bc0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b083      	sub	sp, #12
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002bc8:	4b06      	ldr	r3, [pc, #24]	; (8002be4 <vTaskInternalSetTimeOutState+0x24>)
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8002bd0:	4b05      	ldr	r3, [pc, #20]	; (8002be8 <vTaskInternalSetTimeOutState+0x28>)
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	605a      	str	r2, [r3, #4]
}
 8002bd8:	bf00      	nop
 8002bda:	370c      	adds	r7, #12
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be2:	4770      	bx	lr
 8002be4:	20000c20 	.word	0x20000c20
 8002be8:	20000c0c 	.word	0x20000c0c

08002bec <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b088      	sub	sp, #32
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
 8002bf4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d10a      	bne.n	8002c12 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8002bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c00:	f383 8811 	msr	BASEPRI, r3
 8002c04:	f3bf 8f6f 	isb	sy
 8002c08:	f3bf 8f4f 	dsb	sy
 8002c0c:	613b      	str	r3, [r7, #16]
}
 8002c0e:	bf00      	nop
 8002c10:	e7fe      	b.n	8002c10 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d10a      	bne.n	8002c2e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8002c18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c1c:	f383 8811 	msr	BASEPRI, r3
 8002c20:	f3bf 8f6f 	isb	sy
 8002c24:	f3bf 8f4f 	dsb	sy
 8002c28:	60fb      	str	r3, [r7, #12]
}
 8002c2a:	bf00      	nop
 8002c2c:	e7fe      	b.n	8002c2c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8002c2e:	f000 fec9 	bl	80039c4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8002c32:	4b1d      	ldr	r3, [pc, #116]	; (8002ca8 <xTaskCheckForTimeOut+0xbc>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	69ba      	ldr	r2, [r7, #24]
 8002c3e:	1ad3      	subs	r3, r2, r3
 8002c40:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c4a:	d102      	bne.n	8002c52 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	61fb      	str	r3, [r7, #28]
 8002c50:	e023      	b.n	8002c9a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681a      	ldr	r2, [r3, #0]
 8002c56:	4b15      	ldr	r3, [pc, #84]	; (8002cac <xTaskCheckForTimeOut+0xc0>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d007      	beq.n	8002c6e <xTaskCheckForTimeOut+0x82>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	69ba      	ldr	r2, [r7, #24]
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d302      	bcc.n	8002c6e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	61fb      	str	r3, [r7, #28]
 8002c6c:	e015      	b.n	8002c9a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	697a      	ldr	r2, [r7, #20]
 8002c74:	429a      	cmp	r2, r3
 8002c76:	d20b      	bcs.n	8002c90 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	1ad2      	subs	r2, r2, r3
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8002c84:	6878      	ldr	r0, [r7, #4]
 8002c86:	f7ff ff9b 	bl	8002bc0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	61fb      	str	r3, [r7, #28]
 8002c8e:	e004      	b.n	8002c9a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	2200      	movs	r2, #0
 8002c94:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8002c96:	2301      	movs	r3, #1
 8002c98:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8002c9a:	f000 fec3 	bl	8003a24 <vPortExitCritical>

	return xReturn;
 8002c9e:	69fb      	ldr	r3, [r7, #28]
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	3720      	adds	r7, #32
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}
 8002ca8:	20000c0c 	.word	0x20000c0c
 8002cac:	20000c20 	.word	0x20000c20

08002cb0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8002cb4:	4b03      	ldr	r3, [pc, #12]	; (8002cc4 <vTaskMissedYield+0x14>)
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	601a      	str	r2, [r3, #0]
}
 8002cba:	bf00      	nop
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc2:	4770      	bx	lr
 8002cc4:	20000c1c 	.word	0x20000c1c

08002cc8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b082      	sub	sp, #8
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002cd0:	f000 f852 	bl	8002d78 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002cd4:	4b06      	ldr	r3, [pc, #24]	; (8002cf0 <prvIdleTask+0x28>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d9f9      	bls.n	8002cd0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8002cdc:	4b05      	ldr	r3, [pc, #20]	; (8002cf4 <prvIdleTask+0x2c>)
 8002cde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ce2:	601a      	str	r2, [r3, #0]
 8002ce4:	f3bf 8f4f 	dsb	sy
 8002ce8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8002cec:	e7f0      	b.n	8002cd0 <prvIdleTask+0x8>
 8002cee:	bf00      	nop
 8002cf0:	20000738 	.word	0x20000738
 8002cf4:	e000ed04 	.word	0xe000ed04

08002cf8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b082      	sub	sp, #8
 8002cfc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002cfe:	2300      	movs	r3, #0
 8002d00:	607b      	str	r3, [r7, #4]
 8002d02:	e00c      	b.n	8002d1e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002d04:	687a      	ldr	r2, [r7, #4]
 8002d06:	4613      	mov	r3, r2
 8002d08:	009b      	lsls	r3, r3, #2
 8002d0a:	4413      	add	r3, r2
 8002d0c:	009b      	lsls	r3, r3, #2
 8002d0e:	4a12      	ldr	r2, [pc, #72]	; (8002d58 <prvInitialiseTaskLists+0x60>)
 8002d10:	4413      	add	r3, r2
 8002d12:	4618      	mov	r0, r3
 8002d14:	f7fe fc16 	bl	8001544 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	3301      	adds	r3, #1
 8002d1c:	607b      	str	r3, [r7, #4]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2b37      	cmp	r3, #55	; 0x37
 8002d22:	d9ef      	bls.n	8002d04 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002d24:	480d      	ldr	r0, [pc, #52]	; (8002d5c <prvInitialiseTaskLists+0x64>)
 8002d26:	f7fe fc0d 	bl	8001544 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002d2a:	480d      	ldr	r0, [pc, #52]	; (8002d60 <prvInitialiseTaskLists+0x68>)
 8002d2c:	f7fe fc0a 	bl	8001544 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002d30:	480c      	ldr	r0, [pc, #48]	; (8002d64 <prvInitialiseTaskLists+0x6c>)
 8002d32:	f7fe fc07 	bl	8001544 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002d36:	480c      	ldr	r0, [pc, #48]	; (8002d68 <prvInitialiseTaskLists+0x70>)
 8002d38:	f7fe fc04 	bl	8001544 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002d3c:	480b      	ldr	r0, [pc, #44]	; (8002d6c <prvInitialiseTaskLists+0x74>)
 8002d3e:	f7fe fc01 	bl	8001544 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002d42:	4b0b      	ldr	r3, [pc, #44]	; (8002d70 <prvInitialiseTaskLists+0x78>)
 8002d44:	4a05      	ldr	r2, [pc, #20]	; (8002d5c <prvInitialiseTaskLists+0x64>)
 8002d46:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002d48:	4b0a      	ldr	r3, [pc, #40]	; (8002d74 <prvInitialiseTaskLists+0x7c>)
 8002d4a:	4a05      	ldr	r2, [pc, #20]	; (8002d60 <prvInitialiseTaskLists+0x68>)
 8002d4c:	601a      	str	r2, [r3, #0]
}
 8002d4e:	bf00      	nop
 8002d50:	3708      	adds	r7, #8
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	bf00      	nop
 8002d58:	20000738 	.word	0x20000738
 8002d5c:	20000b98 	.word	0x20000b98
 8002d60:	20000bac 	.word	0x20000bac
 8002d64:	20000bc8 	.word	0x20000bc8
 8002d68:	20000bdc 	.word	0x20000bdc
 8002d6c:	20000bf4 	.word	0x20000bf4
 8002d70:	20000bc0 	.word	0x20000bc0
 8002d74:	20000bc4 	.word	0x20000bc4

08002d78 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b082      	sub	sp, #8
 8002d7c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002d7e:	e019      	b.n	8002db4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8002d80:	f000 fe20 	bl	80039c4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002d84:	4b10      	ldr	r3, [pc, #64]	; (8002dc8 <prvCheckTasksWaitingTermination+0x50>)
 8002d86:	68db      	ldr	r3, [r3, #12]
 8002d88:	68db      	ldr	r3, [r3, #12]
 8002d8a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	3304      	adds	r3, #4
 8002d90:	4618      	mov	r0, r3
 8002d92:	f7fe fc61 	bl	8001658 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002d96:	4b0d      	ldr	r3, [pc, #52]	; (8002dcc <prvCheckTasksWaitingTermination+0x54>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	3b01      	subs	r3, #1
 8002d9c:	4a0b      	ldr	r2, [pc, #44]	; (8002dcc <prvCheckTasksWaitingTermination+0x54>)
 8002d9e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002da0:	4b0b      	ldr	r3, [pc, #44]	; (8002dd0 <prvCheckTasksWaitingTermination+0x58>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	3b01      	subs	r3, #1
 8002da6:	4a0a      	ldr	r2, [pc, #40]	; (8002dd0 <prvCheckTasksWaitingTermination+0x58>)
 8002da8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8002daa:	f000 fe3b 	bl	8003a24 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f000 f848 	bl	8002e44 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002db4:	4b06      	ldr	r3, [pc, #24]	; (8002dd0 <prvCheckTasksWaitingTermination+0x58>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d1e1      	bne.n	8002d80 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8002dbc:	bf00      	nop
 8002dbe:	bf00      	nop
 8002dc0:	3708      	adds	r7, #8
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	bf00      	nop
 8002dc8:	20000bdc 	.word	0x20000bdc
 8002dcc:	20000c08 	.word	0x20000c08
 8002dd0:	20000bf0 	.word	0x20000bf0

08002dd4 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b085      	sub	sp, #20
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8002de0:	e005      	b.n	8002dee <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	3301      	adds	r3, #1
 8002de6:	607b      	str	r3, [r7, #4]
			ulCount++;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	3301      	adds	r3, #1
 8002dec:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	781b      	ldrb	r3, [r3, #0]
 8002df2:	2ba5      	cmp	r3, #165	; 0xa5
 8002df4:	d0f5      	beq.n	8002de2 <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	089b      	lsrs	r3, r3, #2
 8002dfa:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	b29b      	uxth	r3, r3
	}
 8002e00:	4618      	mov	r0, r3
 8002e02:	3714      	adds	r7, #20
 8002e04:	46bd      	mov	sp, r7
 8002e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0a:	4770      	bx	lr

08002e0c <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b086      	sub	sp, #24
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d102      	bne.n	8002e20 <uxTaskGetStackHighWaterMark+0x14>
 8002e1a:	4b09      	ldr	r3, [pc, #36]	; (8002e40 <uxTaskGetStackHighWaterMark+0x34>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	e000      	b.n	8002e22 <uxTaskGetStackHighWaterMark+0x16>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e28:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 8002e2a:	6938      	ldr	r0, [r7, #16]
 8002e2c:	f7ff ffd2 	bl	8002dd4 <prvTaskCheckFreeStackSpace>
 8002e30:	4603      	mov	r3, r0
 8002e32:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 8002e34:	68fb      	ldr	r3, [r7, #12]
	}
 8002e36:	4618      	mov	r0, r3
 8002e38:	3718      	adds	r7, #24
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	20000734 	.word	0x20000734

08002e44 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b084      	sub	sp, #16
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d108      	bne.n	8002e68 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f001 f800 	bl	8003e60 <vPortFree>
				vPortFree( pxTCB );
 8002e60:	6878      	ldr	r0, [r7, #4]
 8002e62:	f000 fffd 	bl	8003e60 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8002e66:	e018      	b.n	8002e9a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d103      	bne.n	8002e7a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8002e72:	6878      	ldr	r0, [r7, #4]
 8002e74:	f000 fff4 	bl	8003e60 <vPortFree>
	}
 8002e78:	e00f      	b.n	8002e9a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8002e80:	2b02      	cmp	r3, #2
 8002e82:	d00a      	beq.n	8002e9a <prvDeleteTCB+0x56>
	__asm volatile
 8002e84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e88:	f383 8811 	msr	BASEPRI, r3
 8002e8c:	f3bf 8f6f 	isb	sy
 8002e90:	f3bf 8f4f 	dsb	sy
 8002e94:	60fb      	str	r3, [r7, #12]
}
 8002e96:	bf00      	nop
 8002e98:	e7fe      	b.n	8002e98 <prvDeleteTCB+0x54>
	}
 8002e9a:	bf00      	nop
 8002e9c:	3710      	adds	r7, #16
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}
	...

08002ea4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b083      	sub	sp, #12
 8002ea8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002eaa:	4b0c      	ldr	r3, [pc, #48]	; (8002edc <prvResetNextTaskUnblockTime+0x38>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d104      	bne.n	8002ebe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002eb4:	4b0a      	ldr	r3, [pc, #40]	; (8002ee0 <prvResetNextTaskUnblockTime+0x3c>)
 8002eb6:	f04f 32ff 	mov.w	r2, #4294967295
 8002eba:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002ebc:	e008      	b.n	8002ed0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002ebe:	4b07      	ldr	r3, [pc, #28]	; (8002edc <prvResetNextTaskUnblockTime+0x38>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	68db      	ldr	r3, [r3, #12]
 8002ec4:	68db      	ldr	r3, [r3, #12]
 8002ec6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	4a04      	ldr	r2, [pc, #16]	; (8002ee0 <prvResetNextTaskUnblockTime+0x3c>)
 8002ece:	6013      	str	r3, [r2, #0]
}
 8002ed0:	bf00      	nop
 8002ed2:	370c      	adds	r7, #12
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eda:	4770      	bx	lr
 8002edc:	20000bc0 	.word	0x20000bc0
 8002ee0:	20000c28 	.word	0x20000c28

08002ee4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b083      	sub	sp, #12
 8002ee8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8002eea:	4b0b      	ldr	r3, [pc, #44]	; (8002f18 <xTaskGetSchedulerState+0x34>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d102      	bne.n	8002ef8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	607b      	str	r3, [r7, #4]
 8002ef6:	e008      	b.n	8002f0a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002ef8:	4b08      	ldr	r3, [pc, #32]	; (8002f1c <xTaskGetSchedulerState+0x38>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d102      	bne.n	8002f06 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8002f00:	2302      	movs	r3, #2
 8002f02:	607b      	str	r3, [r7, #4]
 8002f04:	e001      	b.n	8002f0a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8002f06:	2300      	movs	r3, #0
 8002f08:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8002f0a:	687b      	ldr	r3, [r7, #4]
	}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	370c      	adds	r7, #12
 8002f10:	46bd      	mov	sp, r7
 8002f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f16:	4770      	bx	lr
 8002f18:	20000c14 	.word	0x20000c14
 8002f1c:	20000c30 	.word	0x20000c30

08002f20 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b086      	sub	sp, #24
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d05b      	beq.n	8002fee <xTaskPriorityDisinherit+0xce>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8002f36:	4b30      	ldr	r3, [pc, #192]	; (8002ff8 <xTaskPriorityDisinherit+0xd8>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	693a      	ldr	r2, [r7, #16]
 8002f3c:	429a      	cmp	r2, r3
 8002f3e:	d00a      	beq.n	8002f56 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8002f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f44:	f383 8811 	msr	BASEPRI, r3
 8002f48:	f3bf 8f6f 	isb	sy
 8002f4c:	f3bf 8f4f 	dsb	sy
 8002f50:	60fb      	str	r3, [r7, #12]
}
 8002f52:	bf00      	nop
 8002f54:	e7fe      	b.n	8002f54 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d10a      	bne.n	8002f74 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8002f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f62:	f383 8811 	msr	BASEPRI, r3
 8002f66:	f3bf 8f6f 	isb	sy
 8002f6a:	f3bf 8f4f 	dsb	sy
 8002f6e:	60bb      	str	r3, [r7, #8]
}
 8002f70:	bf00      	nop
 8002f72:	e7fe      	b.n	8002f72 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f78:	1e5a      	subs	r2, r3, #1
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f86:	429a      	cmp	r2, r3
 8002f88:	d031      	beq.n	8002fee <xTaskPriorityDisinherit+0xce>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d12d      	bne.n	8002fee <xTaskPriorityDisinherit+0xce>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	3304      	adds	r3, #4
 8002f96:	4618      	mov	r0, r3
 8002f98:	f7fe fb5e 	bl	8001658 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	4619      	mov	r1, r3
 8002fa0:	204a      	movs	r0, #74	; 0x4a
 8002fa2:	f001 fe6f 	bl	8004c84 <SEGGER_SYSVIEW_RecordU32>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fb2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	619a      	str	r2, [r3, #24]
					prvReaddTaskToReadyList( pxTCB );
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fbe:	4b0f      	ldr	r3, [pc, #60]	; (8002ffc <xTaskPriorityDisinherit+0xdc>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	429a      	cmp	r2, r3
 8002fc4:	d903      	bls.n	8002fce <xTaskPriorityDisinherit+0xae>
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fca:	4a0c      	ldr	r2, [pc, #48]	; (8002ffc <xTaskPriorityDisinherit+0xdc>)
 8002fcc:	6013      	str	r3, [r2, #0]
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fd2:	4613      	mov	r3, r2
 8002fd4:	009b      	lsls	r3, r3, #2
 8002fd6:	4413      	add	r3, r2
 8002fd8:	009b      	lsls	r3, r3, #2
 8002fda:	4a09      	ldr	r2, [pc, #36]	; (8003000 <xTaskPriorityDisinherit+0xe0>)
 8002fdc:	441a      	add	r2, r3
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	3304      	adds	r3, #4
 8002fe2:	4619      	mov	r1, r3
 8002fe4:	4610      	mov	r0, r2
 8002fe6:	f7fe fada 	bl	800159e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8002fea:	2301      	movs	r3, #1
 8002fec:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8002fee:	697b      	ldr	r3, [r7, #20]
	}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	3718      	adds	r7, #24
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}
 8002ff8:	20000734 	.word	0x20000734
 8002ffc:	20000c10 	.word	0x20000c10
 8003000:	20000738 	.word	0x20000738

08003004 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b084      	sub	sp, #16
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
 800300c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800300e:	4b2a      	ldr	r3, [pc, #168]	; (80030b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003014:	4b29      	ldr	r3, [pc, #164]	; (80030bc <prvAddCurrentTaskToDelayedList+0xb8>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	3304      	adds	r3, #4
 800301a:	4618      	mov	r0, r3
 800301c:	f7fe fb1c 	bl	8001658 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003026:	d110      	bne.n	800304a <prvAddCurrentTaskToDelayedList+0x46>
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d00d      	beq.n	800304a <prvAddCurrentTaskToDelayedList+0x46>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
      traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 800302e:	4b23      	ldr	r3, [pc, #140]	; (80030bc <prvAddCurrentTaskToDelayedList+0xb8>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	211b      	movs	r1, #27
 8003034:	4618      	mov	r0, r3
 8003036:	f002 fbf1 	bl	800581c <SEGGER_SYSVIEW_OnTaskStopReady>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800303a:	4b20      	ldr	r3, [pc, #128]	; (80030bc <prvAddCurrentTaskToDelayedList+0xb8>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	3304      	adds	r3, #4
 8003040:	4619      	mov	r1, r3
 8003042:	481f      	ldr	r0, [pc, #124]	; (80030c0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003044:	f7fe faab 	bl	800159e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003048:	e032      	b.n	80030b0 <prvAddCurrentTaskToDelayedList+0xac>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800304a:	68fa      	ldr	r2, [r7, #12]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	4413      	add	r3, r2
 8003050:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003052:	4b1a      	ldr	r3, [pc, #104]	; (80030bc <prvAddCurrentTaskToDelayedList+0xb8>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	68ba      	ldr	r2, [r7, #8]
 8003058:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800305a:	68ba      	ldr	r2, [r7, #8]
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	429a      	cmp	r2, r3
 8003060:	d20f      	bcs.n	8003082 <prvAddCurrentTaskToDelayedList+0x7e>
        traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8003062:	4b16      	ldr	r3, [pc, #88]	; (80030bc <prvAddCurrentTaskToDelayedList+0xb8>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	2104      	movs	r1, #4
 8003068:	4618      	mov	r0, r3
 800306a:	f002 fbd7 	bl	800581c <SEGGER_SYSVIEW_OnTaskStopReady>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800306e:	4b15      	ldr	r3, [pc, #84]	; (80030c4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	4b12      	ldr	r3, [pc, #72]	; (80030bc <prvAddCurrentTaskToDelayedList+0xb8>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	3304      	adds	r3, #4
 8003078:	4619      	mov	r1, r3
 800307a:	4610      	mov	r0, r2
 800307c:	f7fe fab3 	bl	80015e6 <vListInsert>
}
 8003080:	e016      	b.n	80030b0 <prvAddCurrentTaskToDelayedList+0xac>
        traceMOVED_TASK_TO_DELAYED_LIST();
 8003082:	4b0e      	ldr	r3, [pc, #56]	; (80030bc <prvAddCurrentTaskToDelayedList+0xb8>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	2104      	movs	r1, #4
 8003088:	4618      	mov	r0, r3
 800308a:	f002 fbc7 	bl	800581c <SEGGER_SYSVIEW_OnTaskStopReady>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800308e:	4b0e      	ldr	r3, [pc, #56]	; (80030c8 <prvAddCurrentTaskToDelayedList+0xc4>)
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	4b0a      	ldr	r3, [pc, #40]	; (80030bc <prvAddCurrentTaskToDelayedList+0xb8>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	3304      	adds	r3, #4
 8003098:	4619      	mov	r1, r3
 800309a:	4610      	mov	r0, r2
 800309c:	f7fe faa3 	bl	80015e6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80030a0:	4b0a      	ldr	r3, [pc, #40]	; (80030cc <prvAddCurrentTaskToDelayedList+0xc8>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	68ba      	ldr	r2, [r7, #8]
 80030a6:	429a      	cmp	r2, r3
 80030a8:	d202      	bcs.n	80030b0 <prvAddCurrentTaskToDelayedList+0xac>
					xNextTaskUnblockTime = xTimeToWake;
 80030aa:	4a08      	ldr	r2, [pc, #32]	; (80030cc <prvAddCurrentTaskToDelayedList+0xc8>)
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	6013      	str	r3, [r2, #0]
}
 80030b0:	bf00      	nop
 80030b2:	3710      	adds	r7, #16
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd80      	pop	{r7, pc}
 80030b8:	20000c0c 	.word	0x20000c0c
 80030bc:	20000734 	.word	0x20000734
 80030c0:	20000bf4 	.word	0x20000bf4
 80030c4:	20000bc4 	.word	0x20000bc4
 80030c8:	20000bc0 	.word	0x20000bc0
 80030cc:	20000c28 	.word	0x20000c28

080030d0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b08a      	sub	sp, #40	; 0x28
 80030d4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80030d6:	2300      	movs	r3, #0
 80030d8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80030da:	f000 fb07 	bl	80036ec <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80030de:	4b1c      	ldr	r3, [pc, #112]	; (8003150 <xTimerCreateTimerTask+0x80>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d021      	beq.n	800312a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80030e6:	2300      	movs	r3, #0
 80030e8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80030ea:	2300      	movs	r3, #0
 80030ec:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80030ee:	1d3a      	adds	r2, r7, #4
 80030f0:	f107 0108 	add.w	r1, r7, #8
 80030f4:	f107 030c 	add.w	r3, r7, #12
 80030f8:	4618      	mov	r0, r3
 80030fa:	f7fe fa09 	bl	8001510 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80030fe:	6879      	ldr	r1, [r7, #4]
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	68fa      	ldr	r2, [r7, #12]
 8003104:	9202      	str	r2, [sp, #8]
 8003106:	9301      	str	r3, [sp, #4]
 8003108:	2302      	movs	r3, #2
 800310a:	9300      	str	r3, [sp, #0]
 800310c:	2300      	movs	r3, #0
 800310e:	460a      	mov	r2, r1
 8003110:	4910      	ldr	r1, [pc, #64]	; (8003154 <xTimerCreateTimerTask+0x84>)
 8003112:	4811      	ldr	r0, [pc, #68]	; (8003158 <xTimerCreateTimerTask+0x88>)
 8003114:	f7ff f830 	bl	8002178 <xTaskCreateStatic>
 8003118:	4603      	mov	r3, r0
 800311a:	4a10      	ldr	r2, [pc, #64]	; (800315c <xTimerCreateTimerTask+0x8c>)
 800311c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800311e:	4b0f      	ldr	r3, [pc, #60]	; (800315c <xTimerCreateTimerTask+0x8c>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d001      	beq.n	800312a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003126:	2301      	movs	r3, #1
 8003128:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d10a      	bne.n	8003146 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8003130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003134:	f383 8811 	msr	BASEPRI, r3
 8003138:	f3bf 8f6f 	isb	sy
 800313c:	f3bf 8f4f 	dsb	sy
 8003140:	613b      	str	r3, [r7, #16]
}
 8003142:	bf00      	nop
 8003144:	e7fe      	b.n	8003144 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8003146:	697b      	ldr	r3, [r7, #20]
}
 8003148:	4618      	mov	r0, r3
 800314a:	3718      	adds	r7, #24
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}
 8003150:	20000c64 	.word	0x20000c64
 8003154:	08005c38 	.word	0x08005c38
 8003158:	08003295 	.word	0x08003295
 800315c:	20000c68 	.word	0x20000c68

08003160 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b08a      	sub	sp, #40	; 0x28
 8003164:	af00      	add	r7, sp, #0
 8003166:	60f8      	str	r0, [r7, #12]
 8003168:	60b9      	str	r1, [r7, #8]
 800316a:	607a      	str	r2, [r7, #4]
 800316c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800316e:	2300      	movs	r3, #0
 8003170:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d10a      	bne.n	800318e <xTimerGenericCommand+0x2e>
	__asm volatile
 8003178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800317c:	f383 8811 	msr	BASEPRI, r3
 8003180:	f3bf 8f6f 	isb	sy
 8003184:	f3bf 8f4f 	dsb	sy
 8003188:	623b      	str	r3, [r7, #32]
}
 800318a:	bf00      	nop
 800318c:	e7fe      	b.n	800318c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800318e:	4b1a      	ldr	r3, [pc, #104]	; (80031f8 <xTimerGenericCommand+0x98>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d02a      	beq.n	80031ec <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	2b05      	cmp	r3, #5
 80031a6:	dc18      	bgt.n	80031da <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80031a8:	f7ff fe9c 	bl	8002ee4 <xTaskGetSchedulerState>
 80031ac:	4603      	mov	r3, r0
 80031ae:	2b02      	cmp	r3, #2
 80031b0:	d109      	bne.n	80031c6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80031b2:	4b11      	ldr	r3, [pc, #68]	; (80031f8 <xTimerGenericCommand+0x98>)
 80031b4:	6818      	ldr	r0, [r3, #0]
 80031b6:	f107 0110 	add.w	r1, r7, #16
 80031ba:	2300      	movs	r3, #0
 80031bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031be:	f7fe fb7f 	bl	80018c0 <xQueueGenericSend>
 80031c2:	6278      	str	r0, [r7, #36]	; 0x24
 80031c4:	e012      	b.n	80031ec <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80031c6:	4b0c      	ldr	r3, [pc, #48]	; (80031f8 <xTimerGenericCommand+0x98>)
 80031c8:	6818      	ldr	r0, [r3, #0]
 80031ca:	f107 0110 	add.w	r1, r7, #16
 80031ce:	2300      	movs	r3, #0
 80031d0:	2200      	movs	r2, #0
 80031d2:	f7fe fb75 	bl	80018c0 <xQueueGenericSend>
 80031d6:	6278      	str	r0, [r7, #36]	; 0x24
 80031d8:	e008      	b.n	80031ec <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80031da:	4b07      	ldr	r3, [pc, #28]	; (80031f8 <xTimerGenericCommand+0x98>)
 80031dc:	6818      	ldr	r0, [r3, #0]
 80031de:	f107 0110 	add.w	r1, r7, #16
 80031e2:	2300      	movs	r3, #0
 80031e4:	683a      	ldr	r2, [r7, #0]
 80031e6:	f7fe fc91 	bl	8001b0c <xQueueGenericSendFromISR>
 80031ea:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80031ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	3728      	adds	r7, #40	; 0x28
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}
 80031f6:	bf00      	nop
 80031f8:	20000c64 	.word	0x20000c64

080031fc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b088      	sub	sp, #32
 8003200:	af02      	add	r7, sp, #8
 8003202:	6078      	str	r0, [r7, #4]
 8003204:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003206:	4b22      	ldr	r3, [pc, #136]	; (8003290 <prvProcessExpiredTimer+0x94>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	68db      	ldr	r3, [r3, #12]
 800320c:	68db      	ldr	r3, [r3, #12]
 800320e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	3304      	adds	r3, #4
 8003214:	4618      	mov	r0, r3
 8003216:	f7fe fa1f 	bl	8001658 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003220:	f003 0304 	and.w	r3, r3, #4
 8003224:	2b00      	cmp	r3, #0
 8003226:	d022      	beq.n	800326e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	699a      	ldr	r2, [r3, #24]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	18d1      	adds	r1, r2, r3
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	683a      	ldr	r2, [r7, #0]
 8003234:	6978      	ldr	r0, [r7, #20]
 8003236:	f000 f8d1 	bl	80033dc <prvInsertTimerInActiveList>
 800323a:	4603      	mov	r3, r0
 800323c:	2b00      	cmp	r3, #0
 800323e:	d01f      	beq.n	8003280 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003240:	2300      	movs	r3, #0
 8003242:	9300      	str	r3, [sp, #0]
 8003244:	2300      	movs	r3, #0
 8003246:	687a      	ldr	r2, [r7, #4]
 8003248:	2100      	movs	r1, #0
 800324a:	6978      	ldr	r0, [r7, #20]
 800324c:	f7ff ff88 	bl	8003160 <xTimerGenericCommand>
 8003250:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d113      	bne.n	8003280 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8003258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800325c:	f383 8811 	msr	BASEPRI, r3
 8003260:	f3bf 8f6f 	isb	sy
 8003264:	f3bf 8f4f 	dsb	sy
 8003268:	60fb      	str	r3, [r7, #12]
}
 800326a:	bf00      	nop
 800326c:	e7fe      	b.n	800326c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003274:	f023 0301 	bic.w	r3, r3, #1
 8003278:	b2da      	uxtb	r2, r3
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	6a1b      	ldr	r3, [r3, #32]
 8003284:	6978      	ldr	r0, [r7, #20]
 8003286:	4798      	blx	r3
}
 8003288:	bf00      	nop
 800328a:	3718      	adds	r7, #24
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}
 8003290:	20000c5c 	.word	0x20000c5c

08003294 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b084      	sub	sp, #16
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800329c:	f107 0308 	add.w	r3, r7, #8
 80032a0:	4618      	mov	r0, r3
 80032a2:	f000 f857 	bl	8003354 <prvGetNextExpireTime>
 80032a6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	4619      	mov	r1, r3
 80032ac:	68f8      	ldr	r0, [r7, #12]
 80032ae:	f000 f803 	bl	80032b8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80032b2:	f000 f8d5 	bl	8003460 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80032b6:	e7f1      	b.n	800329c <prvTimerTask+0x8>

080032b8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b084      	sub	sp, #16
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
 80032c0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80032c2:	f7ff f9c7 	bl	8002654 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80032c6:	f107 0308 	add.w	r3, r7, #8
 80032ca:	4618      	mov	r0, r3
 80032cc:	f000 f866 	bl	800339c <prvSampleTimeNow>
 80032d0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d130      	bne.n	800333a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d10a      	bne.n	80032f4 <prvProcessTimerOrBlockTask+0x3c>
 80032de:	687a      	ldr	r2, [r7, #4]
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	429a      	cmp	r2, r3
 80032e4:	d806      	bhi.n	80032f4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80032e6:	f7ff f9c3 	bl	8002670 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80032ea:	68f9      	ldr	r1, [r7, #12]
 80032ec:	6878      	ldr	r0, [r7, #4]
 80032ee:	f7ff ff85 	bl	80031fc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80032f2:	e024      	b.n	800333e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d008      	beq.n	800330c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80032fa:	4b13      	ldr	r3, [pc, #76]	; (8003348 <prvProcessTimerOrBlockTask+0x90>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d101      	bne.n	8003308 <prvProcessTimerOrBlockTask+0x50>
 8003304:	2301      	movs	r3, #1
 8003306:	e000      	b.n	800330a <prvProcessTimerOrBlockTask+0x52>
 8003308:	2300      	movs	r3, #0
 800330a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800330c:	4b0f      	ldr	r3, [pc, #60]	; (800334c <prvProcessTimerOrBlockTask+0x94>)
 800330e:	6818      	ldr	r0, [r3, #0]
 8003310:	687a      	ldr	r2, [r7, #4]
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	1ad3      	subs	r3, r2, r3
 8003316:	683a      	ldr	r2, [r7, #0]
 8003318:	4619      	mov	r1, r3
 800331a:	f7fe fef9 	bl	8002110 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800331e:	f7ff f9a7 	bl	8002670 <xTaskResumeAll>
 8003322:	4603      	mov	r3, r0
 8003324:	2b00      	cmp	r3, #0
 8003326:	d10a      	bne.n	800333e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003328:	4b09      	ldr	r3, [pc, #36]	; (8003350 <prvProcessTimerOrBlockTask+0x98>)
 800332a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800332e:	601a      	str	r2, [r3, #0]
 8003330:	f3bf 8f4f 	dsb	sy
 8003334:	f3bf 8f6f 	isb	sy
}
 8003338:	e001      	b.n	800333e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800333a:	f7ff f999 	bl	8002670 <xTaskResumeAll>
}
 800333e:	bf00      	nop
 8003340:	3710      	adds	r7, #16
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}
 8003346:	bf00      	nop
 8003348:	20000c60 	.word	0x20000c60
 800334c:	20000c64 	.word	0x20000c64
 8003350:	e000ed04 	.word	0xe000ed04

08003354 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003354:	b480      	push	{r7}
 8003356:	b085      	sub	sp, #20
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800335c:	4b0e      	ldr	r3, [pc, #56]	; (8003398 <prvGetNextExpireTime+0x44>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d101      	bne.n	800336a <prvGetNextExpireTime+0x16>
 8003366:	2201      	movs	r2, #1
 8003368:	e000      	b.n	800336c <prvGetNextExpireTime+0x18>
 800336a:	2200      	movs	r2, #0
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d105      	bne.n	8003384 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003378:	4b07      	ldr	r3, [pc, #28]	; (8003398 <prvGetNextExpireTime+0x44>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	68db      	ldr	r3, [r3, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	60fb      	str	r3, [r7, #12]
 8003382:	e001      	b.n	8003388 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003384:	2300      	movs	r3, #0
 8003386:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003388:	68fb      	ldr	r3, [r7, #12]
}
 800338a:	4618      	mov	r0, r3
 800338c:	3714      	adds	r7, #20
 800338e:	46bd      	mov	sp, r7
 8003390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003394:	4770      	bx	lr
 8003396:	bf00      	nop
 8003398:	20000c5c 	.word	0x20000c5c

0800339c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b084      	sub	sp, #16
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80033a4:	f7ff fa06 	bl	80027b4 <xTaskGetTickCount>
 80033a8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80033aa:	4b0b      	ldr	r3, [pc, #44]	; (80033d8 <prvSampleTimeNow+0x3c>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	68fa      	ldr	r2, [r7, #12]
 80033b0:	429a      	cmp	r2, r3
 80033b2:	d205      	bcs.n	80033c0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80033b4:	f000 f936 	bl	8003624 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2201      	movs	r2, #1
 80033bc:	601a      	str	r2, [r3, #0]
 80033be:	e002      	b.n	80033c6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2200      	movs	r2, #0
 80033c4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80033c6:	4a04      	ldr	r2, [pc, #16]	; (80033d8 <prvSampleTimeNow+0x3c>)
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80033cc:	68fb      	ldr	r3, [r7, #12]
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	3710      	adds	r7, #16
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}
 80033d6:	bf00      	nop
 80033d8:	20000c6c 	.word	0x20000c6c

080033dc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b086      	sub	sp, #24
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	60f8      	str	r0, [r7, #12]
 80033e4:	60b9      	str	r1, [r7, #8]
 80033e6:	607a      	str	r2, [r7, #4]
 80033e8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80033ea:	2300      	movs	r3, #0
 80033ec:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	68ba      	ldr	r2, [r7, #8]
 80033f2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	68fa      	ldr	r2, [r7, #12]
 80033f8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80033fa:	68ba      	ldr	r2, [r7, #8]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	429a      	cmp	r2, r3
 8003400:	d812      	bhi.n	8003428 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003402:	687a      	ldr	r2, [r7, #4]
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	1ad2      	subs	r2, r2, r3
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	699b      	ldr	r3, [r3, #24]
 800340c:	429a      	cmp	r2, r3
 800340e:	d302      	bcc.n	8003416 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003410:	2301      	movs	r3, #1
 8003412:	617b      	str	r3, [r7, #20]
 8003414:	e01b      	b.n	800344e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003416:	4b10      	ldr	r3, [pc, #64]	; (8003458 <prvInsertTimerInActiveList+0x7c>)
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	3304      	adds	r3, #4
 800341e:	4619      	mov	r1, r3
 8003420:	4610      	mov	r0, r2
 8003422:	f7fe f8e0 	bl	80015e6 <vListInsert>
 8003426:	e012      	b.n	800344e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003428:	687a      	ldr	r2, [r7, #4]
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	429a      	cmp	r2, r3
 800342e:	d206      	bcs.n	800343e <prvInsertTimerInActiveList+0x62>
 8003430:	68ba      	ldr	r2, [r7, #8]
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	429a      	cmp	r2, r3
 8003436:	d302      	bcc.n	800343e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8003438:	2301      	movs	r3, #1
 800343a:	617b      	str	r3, [r7, #20]
 800343c:	e007      	b.n	800344e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800343e:	4b07      	ldr	r3, [pc, #28]	; (800345c <prvInsertTimerInActiveList+0x80>)
 8003440:	681a      	ldr	r2, [r3, #0]
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	3304      	adds	r3, #4
 8003446:	4619      	mov	r1, r3
 8003448:	4610      	mov	r0, r2
 800344a:	f7fe f8cc 	bl	80015e6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800344e:	697b      	ldr	r3, [r7, #20]
}
 8003450:	4618      	mov	r0, r3
 8003452:	3718      	adds	r7, #24
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}
 8003458:	20000c60 	.word	0x20000c60
 800345c:	20000c5c 	.word	0x20000c5c

08003460 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b08e      	sub	sp, #56	; 0x38
 8003464:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003466:	e0ca      	b.n	80035fe <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2b00      	cmp	r3, #0
 800346c:	da18      	bge.n	80034a0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800346e:	1d3b      	adds	r3, r7, #4
 8003470:	3304      	adds	r3, #4
 8003472:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8003474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003476:	2b00      	cmp	r3, #0
 8003478:	d10a      	bne.n	8003490 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800347a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800347e:	f383 8811 	msr	BASEPRI, r3
 8003482:	f3bf 8f6f 	isb	sy
 8003486:	f3bf 8f4f 	dsb	sy
 800348a:	61fb      	str	r3, [r7, #28]
}
 800348c:	bf00      	nop
 800348e:	e7fe      	b.n	800348e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8003490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003496:	6850      	ldr	r0, [r2, #4]
 8003498:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800349a:	6892      	ldr	r2, [r2, #8]
 800349c:	4611      	mov	r1, r2
 800349e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	f2c0 80ab 	blt.w	80035fe <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80034ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034ae:	695b      	ldr	r3, [r3, #20]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d004      	beq.n	80034be <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80034b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034b6:	3304      	adds	r3, #4
 80034b8:	4618      	mov	r0, r3
 80034ba:	f7fe f8cd 	bl	8001658 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80034be:	463b      	mov	r3, r7
 80034c0:	4618      	mov	r0, r3
 80034c2:	f7ff ff6b 	bl	800339c <prvSampleTimeNow>
 80034c6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2b09      	cmp	r3, #9
 80034cc:	f200 8096 	bhi.w	80035fc <prvProcessReceivedCommands+0x19c>
 80034d0:	a201      	add	r2, pc, #4	; (adr r2, 80034d8 <prvProcessReceivedCommands+0x78>)
 80034d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034d6:	bf00      	nop
 80034d8:	08003501 	.word	0x08003501
 80034dc:	08003501 	.word	0x08003501
 80034e0:	08003501 	.word	0x08003501
 80034e4:	08003575 	.word	0x08003575
 80034e8:	08003589 	.word	0x08003589
 80034ec:	080035d3 	.word	0x080035d3
 80034f0:	08003501 	.word	0x08003501
 80034f4:	08003501 	.word	0x08003501
 80034f8:	08003575 	.word	0x08003575
 80034fc:	08003589 	.word	0x08003589
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003502:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003506:	f043 0301 	orr.w	r3, r3, #1
 800350a:	b2da      	uxtb	r2, r3
 800350c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800350e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003512:	68ba      	ldr	r2, [r7, #8]
 8003514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003516:	699b      	ldr	r3, [r3, #24]
 8003518:	18d1      	adds	r1, r2, r3
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800351e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003520:	f7ff ff5c 	bl	80033dc <prvInsertTimerInActiveList>
 8003524:	4603      	mov	r3, r0
 8003526:	2b00      	cmp	r3, #0
 8003528:	d069      	beq.n	80035fe <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800352a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800352c:	6a1b      	ldr	r3, [r3, #32]
 800352e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003530:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003534:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003538:	f003 0304 	and.w	r3, r3, #4
 800353c:	2b00      	cmp	r3, #0
 800353e:	d05e      	beq.n	80035fe <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003540:	68ba      	ldr	r2, [r7, #8]
 8003542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003544:	699b      	ldr	r3, [r3, #24]
 8003546:	441a      	add	r2, r3
 8003548:	2300      	movs	r3, #0
 800354a:	9300      	str	r3, [sp, #0]
 800354c:	2300      	movs	r3, #0
 800354e:	2100      	movs	r1, #0
 8003550:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003552:	f7ff fe05 	bl	8003160 <xTimerGenericCommand>
 8003556:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8003558:	6a3b      	ldr	r3, [r7, #32]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d14f      	bne.n	80035fe <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800355e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003562:	f383 8811 	msr	BASEPRI, r3
 8003566:	f3bf 8f6f 	isb	sy
 800356a:	f3bf 8f4f 	dsb	sy
 800356e:	61bb      	str	r3, [r7, #24]
}
 8003570:	bf00      	nop
 8003572:	e7fe      	b.n	8003572 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003576:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800357a:	f023 0301 	bic.w	r3, r3, #1
 800357e:	b2da      	uxtb	r2, r3
 8003580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003582:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8003586:	e03a      	b.n	80035fe <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800358a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800358e:	f043 0301 	orr.w	r3, r3, #1
 8003592:	b2da      	uxtb	r2, r3
 8003594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003596:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800359a:	68ba      	ldr	r2, [r7, #8]
 800359c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800359e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80035a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035a2:	699b      	ldr	r3, [r3, #24]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d10a      	bne.n	80035be <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80035a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035ac:	f383 8811 	msr	BASEPRI, r3
 80035b0:	f3bf 8f6f 	isb	sy
 80035b4:	f3bf 8f4f 	dsb	sy
 80035b8:	617b      	str	r3, [r7, #20]
}
 80035ba:	bf00      	nop
 80035bc:	e7fe      	b.n	80035bc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80035be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035c0:	699a      	ldr	r2, [r3, #24]
 80035c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c4:	18d1      	adds	r1, r2, r3
 80035c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80035cc:	f7ff ff06 	bl	80033dc <prvInsertTimerInActiveList>
					break;
 80035d0:	e015      	b.n	80035fe <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80035d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80035d8:	f003 0302 	and.w	r3, r3, #2
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d103      	bne.n	80035e8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80035e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80035e2:	f000 fc3d 	bl	8003e60 <vPortFree>
 80035e6:	e00a      	b.n	80035fe <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80035e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80035ee:	f023 0301 	bic.w	r3, r3, #1
 80035f2:	b2da      	uxtb	r2, r3
 80035f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80035fa:	e000      	b.n	80035fe <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 80035fc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80035fe:	4b08      	ldr	r3, [pc, #32]	; (8003620 <prvProcessReceivedCommands+0x1c0>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	1d39      	adds	r1, r7, #4
 8003604:	2200      	movs	r2, #0
 8003606:	4618      	mov	r0, r3
 8003608:	f7fe fb30 	bl	8001c6c <xQueueReceive>
 800360c:	4603      	mov	r3, r0
 800360e:	2b00      	cmp	r3, #0
 8003610:	f47f af2a 	bne.w	8003468 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8003614:	bf00      	nop
 8003616:	bf00      	nop
 8003618:	3730      	adds	r7, #48	; 0x30
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}
 800361e:	bf00      	nop
 8003620:	20000c64 	.word	0x20000c64

08003624 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b088      	sub	sp, #32
 8003628:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800362a:	e048      	b.n	80036be <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800362c:	4b2d      	ldr	r3, [pc, #180]	; (80036e4 <prvSwitchTimerLists+0xc0>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	68db      	ldr	r3, [r3, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003636:	4b2b      	ldr	r3, [pc, #172]	; (80036e4 <prvSwitchTimerLists+0xc0>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	68db      	ldr	r3, [r3, #12]
 800363c:	68db      	ldr	r3, [r3, #12]
 800363e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	3304      	adds	r3, #4
 8003644:	4618      	mov	r0, r3
 8003646:	f7fe f807 	bl	8001658 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	6a1b      	ldr	r3, [r3, #32]
 800364e:	68f8      	ldr	r0, [r7, #12]
 8003650:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003658:	f003 0304 	and.w	r3, r3, #4
 800365c:	2b00      	cmp	r3, #0
 800365e:	d02e      	beq.n	80036be <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	699b      	ldr	r3, [r3, #24]
 8003664:	693a      	ldr	r2, [r7, #16]
 8003666:	4413      	add	r3, r2
 8003668:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800366a:	68ba      	ldr	r2, [r7, #8]
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	429a      	cmp	r2, r3
 8003670:	d90e      	bls.n	8003690 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	68ba      	ldr	r2, [r7, #8]
 8003676:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	68fa      	ldr	r2, [r7, #12]
 800367c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800367e:	4b19      	ldr	r3, [pc, #100]	; (80036e4 <prvSwitchTimerLists+0xc0>)
 8003680:	681a      	ldr	r2, [r3, #0]
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	3304      	adds	r3, #4
 8003686:	4619      	mov	r1, r3
 8003688:	4610      	mov	r0, r2
 800368a:	f7fd ffac 	bl	80015e6 <vListInsert>
 800368e:	e016      	b.n	80036be <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003690:	2300      	movs	r3, #0
 8003692:	9300      	str	r3, [sp, #0]
 8003694:	2300      	movs	r3, #0
 8003696:	693a      	ldr	r2, [r7, #16]
 8003698:	2100      	movs	r1, #0
 800369a:	68f8      	ldr	r0, [r7, #12]
 800369c:	f7ff fd60 	bl	8003160 <xTimerGenericCommand>
 80036a0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d10a      	bne.n	80036be <prvSwitchTimerLists+0x9a>
	__asm volatile
 80036a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036ac:	f383 8811 	msr	BASEPRI, r3
 80036b0:	f3bf 8f6f 	isb	sy
 80036b4:	f3bf 8f4f 	dsb	sy
 80036b8:	603b      	str	r3, [r7, #0]
}
 80036ba:	bf00      	nop
 80036bc:	e7fe      	b.n	80036bc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80036be:	4b09      	ldr	r3, [pc, #36]	; (80036e4 <prvSwitchTimerLists+0xc0>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d1b1      	bne.n	800362c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80036c8:	4b06      	ldr	r3, [pc, #24]	; (80036e4 <prvSwitchTimerLists+0xc0>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80036ce:	4b06      	ldr	r3, [pc, #24]	; (80036e8 <prvSwitchTimerLists+0xc4>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a04      	ldr	r2, [pc, #16]	; (80036e4 <prvSwitchTimerLists+0xc0>)
 80036d4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80036d6:	4a04      	ldr	r2, [pc, #16]	; (80036e8 <prvSwitchTimerLists+0xc4>)
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	6013      	str	r3, [r2, #0]
}
 80036dc:	bf00      	nop
 80036de:	3718      	adds	r7, #24
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}
 80036e4:	20000c5c 	.word	0x20000c5c
 80036e8:	20000c60 	.word	0x20000c60

080036ec <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b082      	sub	sp, #8
 80036f0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80036f2:	f000 f967 	bl	80039c4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80036f6:	4b15      	ldr	r3, [pc, #84]	; (800374c <prvCheckForValidListAndQueue+0x60>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d120      	bne.n	8003740 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80036fe:	4814      	ldr	r0, [pc, #80]	; (8003750 <prvCheckForValidListAndQueue+0x64>)
 8003700:	f7fd ff20 	bl	8001544 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8003704:	4813      	ldr	r0, [pc, #76]	; (8003754 <prvCheckForValidListAndQueue+0x68>)
 8003706:	f7fd ff1d 	bl	8001544 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800370a:	4b13      	ldr	r3, [pc, #76]	; (8003758 <prvCheckForValidListAndQueue+0x6c>)
 800370c:	4a10      	ldr	r2, [pc, #64]	; (8003750 <prvCheckForValidListAndQueue+0x64>)
 800370e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8003710:	4b12      	ldr	r3, [pc, #72]	; (800375c <prvCheckForValidListAndQueue+0x70>)
 8003712:	4a10      	ldr	r2, [pc, #64]	; (8003754 <prvCheckForValidListAndQueue+0x68>)
 8003714:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8003716:	2300      	movs	r3, #0
 8003718:	9300      	str	r3, [sp, #0]
 800371a:	4b11      	ldr	r3, [pc, #68]	; (8003760 <prvCheckForValidListAndQueue+0x74>)
 800371c:	4a11      	ldr	r2, [pc, #68]	; (8003764 <prvCheckForValidListAndQueue+0x78>)
 800371e:	2110      	movs	r1, #16
 8003720:	200a      	movs	r0, #10
 8003722:	f7fe f82b 	bl	800177c <xQueueGenericCreateStatic>
 8003726:	4603      	mov	r3, r0
 8003728:	4a08      	ldr	r2, [pc, #32]	; (800374c <prvCheckForValidListAndQueue+0x60>)
 800372a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800372c:	4b07      	ldr	r3, [pc, #28]	; (800374c <prvCheckForValidListAndQueue+0x60>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d005      	beq.n	8003740 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003734:	4b05      	ldr	r3, [pc, #20]	; (800374c <prvCheckForValidListAndQueue+0x60>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	490b      	ldr	r1, [pc, #44]	; (8003768 <prvCheckForValidListAndQueue+0x7c>)
 800373a:	4618      	mov	r0, r3
 800373c:	f7fe fcb6 	bl	80020ac <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003740:	f000 f970 	bl	8003a24 <vPortExitCritical>
}
 8003744:	bf00      	nop
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}
 800374a:	bf00      	nop
 800374c:	20000c64 	.word	0x20000c64
 8003750:	20000c34 	.word	0x20000c34
 8003754:	20000c48 	.word	0x20000c48
 8003758:	20000c5c 	.word	0x20000c5c
 800375c:	20000c60 	.word	0x20000c60
 8003760:	20000d10 	.word	0x20000d10
 8003764:	20000c70 	.word	0x20000c70
 8003768:	08005c40 	.word	0x08005c40

0800376c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800376c:	b480      	push	{r7}
 800376e:	b085      	sub	sp, #20
 8003770:	af00      	add	r7, sp, #0
 8003772:	60f8      	str	r0, [r7, #12]
 8003774:	60b9      	str	r1, [r7, #8]
 8003776:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	3b04      	subs	r3, #4
 800377c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003784:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	3b04      	subs	r3, #4
 800378a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	f023 0201 	bic.w	r2, r3, #1
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	3b04      	subs	r3, #4
 800379a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800379c:	4a0c      	ldr	r2, [pc, #48]	; (80037d0 <pxPortInitialiseStack+0x64>)
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	3b14      	subs	r3, #20
 80037a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80037a8:	687a      	ldr	r2, [r7, #4]
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	3b04      	subs	r3, #4
 80037b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	f06f 0202 	mvn.w	r2, #2
 80037ba:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	3b20      	subs	r3, #32
 80037c0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80037c2:	68fb      	ldr	r3, [r7, #12]
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	3714      	adds	r7, #20
 80037c8:	46bd      	mov	sp, r7
 80037ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ce:	4770      	bx	lr
 80037d0:	080037d5 	.word	0x080037d5

080037d4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80037d4:	b480      	push	{r7}
 80037d6:	b085      	sub	sp, #20
 80037d8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80037da:	2300      	movs	r3, #0
 80037dc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80037de:	4b12      	ldr	r3, [pc, #72]	; (8003828 <prvTaskExitError+0x54>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037e6:	d00a      	beq.n	80037fe <prvTaskExitError+0x2a>
	__asm volatile
 80037e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037ec:	f383 8811 	msr	BASEPRI, r3
 80037f0:	f3bf 8f6f 	isb	sy
 80037f4:	f3bf 8f4f 	dsb	sy
 80037f8:	60fb      	str	r3, [r7, #12]
}
 80037fa:	bf00      	nop
 80037fc:	e7fe      	b.n	80037fc <prvTaskExitError+0x28>
	__asm volatile
 80037fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003802:	f383 8811 	msr	BASEPRI, r3
 8003806:	f3bf 8f6f 	isb	sy
 800380a:	f3bf 8f4f 	dsb	sy
 800380e:	60bb      	str	r3, [r7, #8]
}
 8003810:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003812:	bf00      	nop
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d0fc      	beq.n	8003814 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800381a:	bf00      	nop
 800381c:	bf00      	nop
 800381e:	3714      	adds	r7, #20
 8003820:	46bd      	mov	sp, r7
 8003822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003826:	4770      	bx	lr
 8003828:	2000000c 	.word	0x2000000c
 800382c:	00000000 	.word	0x00000000

08003830 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003830:	4b07      	ldr	r3, [pc, #28]	; (8003850 <pxCurrentTCBConst2>)
 8003832:	6819      	ldr	r1, [r3, #0]
 8003834:	6808      	ldr	r0, [r1, #0]
 8003836:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800383a:	f380 8809 	msr	PSP, r0
 800383e:	f3bf 8f6f 	isb	sy
 8003842:	f04f 0000 	mov.w	r0, #0
 8003846:	f380 8811 	msr	BASEPRI, r0
 800384a:	4770      	bx	lr
 800384c:	f3af 8000 	nop.w

08003850 <pxCurrentTCBConst2>:
 8003850:	20000734 	.word	0x20000734
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003854:	bf00      	nop
 8003856:	bf00      	nop

08003858 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003858:	4808      	ldr	r0, [pc, #32]	; (800387c <prvPortStartFirstTask+0x24>)
 800385a:	6800      	ldr	r0, [r0, #0]
 800385c:	6800      	ldr	r0, [r0, #0]
 800385e:	f380 8808 	msr	MSP, r0
 8003862:	f04f 0000 	mov.w	r0, #0
 8003866:	f380 8814 	msr	CONTROL, r0
 800386a:	b662      	cpsie	i
 800386c:	b661      	cpsie	f
 800386e:	f3bf 8f4f 	dsb	sy
 8003872:	f3bf 8f6f 	isb	sy
 8003876:	df00      	svc	0
 8003878:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800387a:	bf00      	nop
 800387c:	e000ed08 	.word	0xe000ed08

08003880 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b086      	sub	sp, #24
 8003884:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003886:	4b46      	ldr	r3, [pc, #280]	; (80039a0 <xPortStartScheduler+0x120>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a46      	ldr	r2, [pc, #280]	; (80039a4 <xPortStartScheduler+0x124>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d10a      	bne.n	80038a6 <xPortStartScheduler+0x26>
	__asm volatile
 8003890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003894:	f383 8811 	msr	BASEPRI, r3
 8003898:	f3bf 8f6f 	isb	sy
 800389c:	f3bf 8f4f 	dsb	sy
 80038a0:	613b      	str	r3, [r7, #16]
}
 80038a2:	bf00      	nop
 80038a4:	e7fe      	b.n	80038a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80038a6:	4b3e      	ldr	r3, [pc, #248]	; (80039a0 <xPortStartScheduler+0x120>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a3f      	ldr	r2, [pc, #252]	; (80039a8 <xPortStartScheduler+0x128>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d10a      	bne.n	80038c6 <xPortStartScheduler+0x46>
	__asm volatile
 80038b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038b4:	f383 8811 	msr	BASEPRI, r3
 80038b8:	f3bf 8f6f 	isb	sy
 80038bc:	f3bf 8f4f 	dsb	sy
 80038c0:	60fb      	str	r3, [r7, #12]
}
 80038c2:	bf00      	nop
 80038c4:	e7fe      	b.n	80038c4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80038c6:	4b39      	ldr	r3, [pc, #228]	; (80039ac <xPortStartScheduler+0x12c>)
 80038c8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	781b      	ldrb	r3, [r3, #0]
 80038ce:	b2db      	uxtb	r3, r3
 80038d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	22ff      	movs	r2, #255	; 0xff
 80038d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	781b      	ldrb	r3, [r3, #0]
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80038e0:	78fb      	ldrb	r3, [r7, #3]
 80038e2:	b2db      	uxtb	r3, r3
 80038e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80038e8:	b2da      	uxtb	r2, r3
 80038ea:	4b31      	ldr	r3, [pc, #196]	; (80039b0 <xPortStartScheduler+0x130>)
 80038ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80038ee:	4b31      	ldr	r3, [pc, #196]	; (80039b4 <xPortStartScheduler+0x134>)
 80038f0:	2207      	movs	r2, #7
 80038f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80038f4:	e009      	b.n	800390a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80038f6:	4b2f      	ldr	r3, [pc, #188]	; (80039b4 <xPortStartScheduler+0x134>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	3b01      	subs	r3, #1
 80038fc:	4a2d      	ldr	r2, [pc, #180]	; (80039b4 <xPortStartScheduler+0x134>)
 80038fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003900:	78fb      	ldrb	r3, [r7, #3]
 8003902:	b2db      	uxtb	r3, r3
 8003904:	005b      	lsls	r3, r3, #1
 8003906:	b2db      	uxtb	r3, r3
 8003908:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800390a:	78fb      	ldrb	r3, [r7, #3]
 800390c:	b2db      	uxtb	r3, r3
 800390e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003912:	2b80      	cmp	r3, #128	; 0x80
 8003914:	d0ef      	beq.n	80038f6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003916:	4b27      	ldr	r3, [pc, #156]	; (80039b4 <xPortStartScheduler+0x134>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f1c3 0307 	rsb	r3, r3, #7
 800391e:	2b04      	cmp	r3, #4
 8003920:	d00a      	beq.n	8003938 <xPortStartScheduler+0xb8>
	__asm volatile
 8003922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003926:	f383 8811 	msr	BASEPRI, r3
 800392a:	f3bf 8f6f 	isb	sy
 800392e:	f3bf 8f4f 	dsb	sy
 8003932:	60bb      	str	r3, [r7, #8]
}
 8003934:	bf00      	nop
 8003936:	e7fe      	b.n	8003936 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003938:	4b1e      	ldr	r3, [pc, #120]	; (80039b4 <xPortStartScheduler+0x134>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	021b      	lsls	r3, r3, #8
 800393e:	4a1d      	ldr	r2, [pc, #116]	; (80039b4 <xPortStartScheduler+0x134>)
 8003940:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003942:	4b1c      	ldr	r3, [pc, #112]	; (80039b4 <xPortStartScheduler+0x134>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800394a:	4a1a      	ldr	r2, [pc, #104]	; (80039b4 <xPortStartScheduler+0x134>)
 800394c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	b2da      	uxtb	r2, r3
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003956:	4b18      	ldr	r3, [pc, #96]	; (80039b8 <xPortStartScheduler+0x138>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a17      	ldr	r2, [pc, #92]	; (80039b8 <xPortStartScheduler+0x138>)
 800395c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003960:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003962:	4b15      	ldr	r3, [pc, #84]	; (80039b8 <xPortStartScheduler+0x138>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a14      	ldr	r2, [pc, #80]	; (80039b8 <xPortStartScheduler+0x138>)
 8003968:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800396c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800396e:	f000 f8e5 	bl	8003b3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003972:	4b12      	ldr	r3, [pc, #72]	; (80039bc <xPortStartScheduler+0x13c>)
 8003974:	2200      	movs	r2, #0
 8003976:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003978:	f000 f904 	bl	8003b84 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800397c:	4b10      	ldr	r3, [pc, #64]	; (80039c0 <xPortStartScheduler+0x140>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a0f      	ldr	r2, [pc, #60]	; (80039c0 <xPortStartScheduler+0x140>)
 8003982:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003986:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003988:	f7ff ff66 	bl	8003858 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800398c:	f7fe fff2 	bl	8002974 <vTaskSwitchContext>
	prvTaskExitError();
 8003990:	f7ff ff20 	bl	80037d4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003994:	2300      	movs	r3, #0
}
 8003996:	4618      	mov	r0, r3
 8003998:	3718      	adds	r7, #24
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}
 800399e:	bf00      	nop
 80039a0:	e000ed00 	.word	0xe000ed00
 80039a4:	410fc271 	.word	0x410fc271
 80039a8:	410fc270 	.word	0x410fc270
 80039ac:	e000e400 	.word	0xe000e400
 80039b0:	20000d60 	.word	0x20000d60
 80039b4:	20000d64 	.word	0x20000d64
 80039b8:	e000ed20 	.word	0xe000ed20
 80039bc:	2000000c 	.word	0x2000000c
 80039c0:	e000ef34 	.word	0xe000ef34

080039c4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80039c4:	b480      	push	{r7}
 80039c6:	b083      	sub	sp, #12
 80039c8:	af00      	add	r7, sp, #0
	__asm volatile
 80039ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039ce:	f383 8811 	msr	BASEPRI, r3
 80039d2:	f3bf 8f6f 	isb	sy
 80039d6:	f3bf 8f4f 	dsb	sy
 80039da:	607b      	str	r3, [r7, #4]
}
 80039dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80039de:	4b0f      	ldr	r3, [pc, #60]	; (8003a1c <vPortEnterCritical+0x58>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	3301      	adds	r3, #1
 80039e4:	4a0d      	ldr	r2, [pc, #52]	; (8003a1c <vPortEnterCritical+0x58>)
 80039e6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80039e8:	4b0c      	ldr	r3, [pc, #48]	; (8003a1c <vPortEnterCritical+0x58>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	2b01      	cmp	r3, #1
 80039ee:	d10f      	bne.n	8003a10 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80039f0:	4b0b      	ldr	r3, [pc, #44]	; (8003a20 <vPortEnterCritical+0x5c>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d00a      	beq.n	8003a10 <vPortEnterCritical+0x4c>
	__asm volatile
 80039fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039fe:	f383 8811 	msr	BASEPRI, r3
 8003a02:	f3bf 8f6f 	isb	sy
 8003a06:	f3bf 8f4f 	dsb	sy
 8003a0a:	603b      	str	r3, [r7, #0]
}
 8003a0c:	bf00      	nop
 8003a0e:	e7fe      	b.n	8003a0e <vPortEnterCritical+0x4a>
	}
}
 8003a10:	bf00      	nop
 8003a12:	370c      	adds	r7, #12
 8003a14:	46bd      	mov	sp, r7
 8003a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1a:	4770      	bx	lr
 8003a1c:	2000000c 	.word	0x2000000c
 8003a20:	e000ed04 	.word	0xe000ed04

08003a24 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003a24:	b480      	push	{r7}
 8003a26:	b083      	sub	sp, #12
 8003a28:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003a2a:	4b12      	ldr	r3, [pc, #72]	; (8003a74 <vPortExitCritical+0x50>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d10a      	bne.n	8003a48 <vPortExitCritical+0x24>
	__asm volatile
 8003a32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a36:	f383 8811 	msr	BASEPRI, r3
 8003a3a:	f3bf 8f6f 	isb	sy
 8003a3e:	f3bf 8f4f 	dsb	sy
 8003a42:	607b      	str	r3, [r7, #4]
}
 8003a44:	bf00      	nop
 8003a46:	e7fe      	b.n	8003a46 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003a48:	4b0a      	ldr	r3, [pc, #40]	; (8003a74 <vPortExitCritical+0x50>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	3b01      	subs	r3, #1
 8003a4e:	4a09      	ldr	r2, [pc, #36]	; (8003a74 <vPortExitCritical+0x50>)
 8003a50:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003a52:	4b08      	ldr	r3, [pc, #32]	; (8003a74 <vPortExitCritical+0x50>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d105      	bne.n	8003a66 <vPortExitCritical+0x42>
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	f383 8811 	msr	BASEPRI, r3
}
 8003a64:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003a66:	bf00      	nop
 8003a68:	370c      	adds	r7, #12
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a70:	4770      	bx	lr
 8003a72:	bf00      	nop
 8003a74:	2000000c 	.word	0x2000000c
	...

08003a80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003a80:	f3ef 8009 	mrs	r0, PSP
 8003a84:	f3bf 8f6f 	isb	sy
 8003a88:	4b15      	ldr	r3, [pc, #84]	; (8003ae0 <pxCurrentTCBConst>)
 8003a8a:	681a      	ldr	r2, [r3, #0]
 8003a8c:	f01e 0f10 	tst.w	lr, #16
 8003a90:	bf08      	it	eq
 8003a92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003a96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a9a:	6010      	str	r0, [r2, #0]
 8003a9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003aa0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003aa4:	f380 8811 	msr	BASEPRI, r0
 8003aa8:	f3bf 8f4f 	dsb	sy
 8003aac:	f3bf 8f6f 	isb	sy
 8003ab0:	f7fe ff60 	bl	8002974 <vTaskSwitchContext>
 8003ab4:	f04f 0000 	mov.w	r0, #0
 8003ab8:	f380 8811 	msr	BASEPRI, r0
 8003abc:	bc09      	pop	{r0, r3}
 8003abe:	6819      	ldr	r1, [r3, #0]
 8003ac0:	6808      	ldr	r0, [r1, #0]
 8003ac2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ac6:	f01e 0f10 	tst.w	lr, #16
 8003aca:	bf08      	it	eq
 8003acc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003ad0:	f380 8809 	msr	PSP, r0
 8003ad4:	f3bf 8f6f 	isb	sy
 8003ad8:	4770      	bx	lr
 8003ada:	bf00      	nop
 8003adc:	f3af 8000 	nop.w

08003ae0 <pxCurrentTCBConst>:
 8003ae0:	20000734 	.word	0x20000734
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003ae4:	bf00      	nop
 8003ae6:	bf00      	nop

08003ae8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b082      	sub	sp, #8
 8003aec:	af00      	add	r7, sp, #0
	__asm volatile
 8003aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003af2:	f383 8811 	msr	BASEPRI, r3
 8003af6:	f3bf 8f6f 	isb	sy
 8003afa:	f3bf 8f4f 	dsb	sy
 8003afe:	607b      	str	r3, [r7, #4]
}
 8003b00:	bf00      	nop
	/* The SysTick runs at the lowest interrupt priority, so when this interrupt
	executes all interrupts must be unmasked.  There is therefore no need to
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
  traceISR_ENTER();
 8003b02:	f001 fd29 	bl	8005558 <SEGGER_SYSVIEW_RecordEnterISR>
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003b06:	f7fe fe77 	bl	80027f8 <xTaskIncrementTick>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d006      	beq.n	8003b1e <xPortSysTickHandler+0x36>
		{
			traceISR_EXIT_TO_SCHEDULER();
 8003b10:	f001 fd80 	bl	8005614 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003b14:	4b08      	ldr	r3, [pc, #32]	; (8003b38 <xPortSysTickHandler+0x50>)
 8003b16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b1a:	601a      	str	r2, [r3, #0]
 8003b1c:	e001      	b.n	8003b22 <xPortSysTickHandler+0x3a>
		}
		else
		{
			traceISR_EXIT();
 8003b1e:	f001 fd5d 	bl	80055dc <SEGGER_SYSVIEW_RecordExitISR>
 8003b22:	2300      	movs	r3, #0
 8003b24:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	f383 8811 	msr	BASEPRI, r3
}
 8003b2c:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003b2e:	bf00      	nop
 8003b30:	3708      	adds	r7, #8
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}
 8003b36:	bf00      	nop
 8003b38:	e000ed04 	.word	0xe000ed04

08003b3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003b40:	4b0b      	ldr	r3, [pc, #44]	; (8003b70 <vPortSetupTimerInterrupt+0x34>)
 8003b42:	2200      	movs	r2, #0
 8003b44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003b46:	4b0b      	ldr	r3, [pc, #44]	; (8003b74 <vPortSetupTimerInterrupt+0x38>)
 8003b48:	2200      	movs	r2, #0
 8003b4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003b4c:	4b0a      	ldr	r3, [pc, #40]	; (8003b78 <vPortSetupTimerInterrupt+0x3c>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a0a      	ldr	r2, [pc, #40]	; (8003b7c <vPortSetupTimerInterrupt+0x40>)
 8003b52:	fba2 2303 	umull	r2, r3, r2, r3
 8003b56:	099b      	lsrs	r3, r3, #6
 8003b58:	4a09      	ldr	r2, [pc, #36]	; (8003b80 <vPortSetupTimerInterrupt+0x44>)
 8003b5a:	3b01      	subs	r3, #1
 8003b5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003b5e:	4b04      	ldr	r3, [pc, #16]	; (8003b70 <vPortSetupTimerInterrupt+0x34>)
 8003b60:	2207      	movs	r2, #7
 8003b62:	601a      	str	r2, [r3, #0]
}
 8003b64:	bf00      	nop
 8003b66:	46bd      	mov	sp, r7
 8003b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6c:	4770      	bx	lr
 8003b6e:	bf00      	nop
 8003b70:	e000e010 	.word	0xe000e010
 8003b74:	e000e018 	.word	0xe000e018
 8003b78:	20000000 	.word	0x20000000
 8003b7c:	10624dd3 	.word	0x10624dd3
 8003b80:	e000e014 	.word	0xe000e014

08003b84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003b84:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003b94 <vPortEnableVFP+0x10>
 8003b88:	6801      	ldr	r1, [r0, #0]
 8003b8a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003b8e:	6001      	str	r1, [r0, #0]
 8003b90:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003b92:	bf00      	nop
 8003b94:	e000ed88 	.word	0xe000ed88

08003b98 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8003b98:	b480      	push	{r7}
 8003b9a:	b085      	sub	sp, #20
 8003b9c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8003b9e:	f3ef 8305 	mrs	r3, IPSR
 8003ba2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	2b0f      	cmp	r3, #15
 8003ba8:	d914      	bls.n	8003bd4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003baa:	4a17      	ldr	r2, [pc, #92]	; (8003c08 <vPortValidateInterruptPriority+0x70>)
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	4413      	add	r3, r2
 8003bb0:	781b      	ldrb	r3, [r3, #0]
 8003bb2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003bb4:	4b15      	ldr	r3, [pc, #84]	; (8003c0c <vPortValidateInterruptPriority+0x74>)
 8003bb6:	781b      	ldrb	r3, [r3, #0]
 8003bb8:	7afa      	ldrb	r2, [r7, #11]
 8003bba:	429a      	cmp	r2, r3
 8003bbc:	d20a      	bcs.n	8003bd4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8003bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bc2:	f383 8811 	msr	BASEPRI, r3
 8003bc6:	f3bf 8f6f 	isb	sy
 8003bca:	f3bf 8f4f 	dsb	sy
 8003bce:	607b      	str	r3, [r7, #4]
}
 8003bd0:	bf00      	nop
 8003bd2:	e7fe      	b.n	8003bd2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003bd4:	4b0e      	ldr	r3, [pc, #56]	; (8003c10 <vPortValidateInterruptPriority+0x78>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003bdc:	4b0d      	ldr	r3, [pc, #52]	; (8003c14 <vPortValidateInterruptPriority+0x7c>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	429a      	cmp	r2, r3
 8003be2:	d90a      	bls.n	8003bfa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8003be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003be8:	f383 8811 	msr	BASEPRI, r3
 8003bec:	f3bf 8f6f 	isb	sy
 8003bf0:	f3bf 8f4f 	dsb	sy
 8003bf4:	603b      	str	r3, [r7, #0]
}
 8003bf6:	bf00      	nop
 8003bf8:	e7fe      	b.n	8003bf8 <vPortValidateInterruptPriority+0x60>
	}
 8003bfa:	bf00      	nop
 8003bfc:	3714      	adds	r7, #20
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c04:	4770      	bx	lr
 8003c06:	bf00      	nop
 8003c08:	e000e3f0 	.word	0xe000e3f0
 8003c0c:	20000d60 	.word	0x20000d60
 8003c10:	e000ed0c 	.word	0xe000ed0c
 8003c14:	20000d64 	.word	0x20000d64

08003c18 <vSetVarulMaxPRIGROUPValue>:
#if( configASSERT_DEFINED == 1 )

void vSetVarulMaxPRIGROUPValue( void )
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b085      	sub	sp, #20
 8003c1c:	af00      	add	r7, sp, #0
#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003c1e:	4b27      	ldr	r3, [pc, #156]	; (8003cbc <vSetVarulMaxPRIGROUPValue+0xa4>)
 8003c20:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	781b      	ldrb	r3, [r3, #0]
 8003c26:	b2db      	uxtb	r3, r3
 8003c28:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	22ff      	movs	r2, #255	; 0xff
 8003c2e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	781b      	ldrb	r3, [r3, #0]
 8003c34:	b2db      	uxtb	r3, r3
 8003c36:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003c38:	78fb      	ldrb	r3, [r7, #3]
 8003c3a:	b2db      	uxtb	r3, r3
 8003c3c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003c40:	b2da      	uxtb	r2, r3
 8003c42:	4b1f      	ldr	r3, [pc, #124]	; (8003cc0 <vSetVarulMaxPRIGROUPValue+0xa8>)
 8003c44:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003c46:	4b1f      	ldr	r3, [pc, #124]	; (8003cc4 <vSetVarulMaxPRIGROUPValue+0xac>)
 8003c48:	2207      	movs	r2, #7
 8003c4a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003c4c:	e009      	b.n	8003c62 <vSetVarulMaxPRIGROUPValue+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8003c4e:	4b1d      	ldr	r3, [pc, #116]	; (8003cc4 <vSetVarulMaxPRIGROUPValue+0xac>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	3b01      	subs	r3, #1
 8003c54:	4a1b      	ldr	r2, [pc, #108]	; (8003cc4 <vSetVarulMaxPRIGROUPValue+0xac>)
 8003c56:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003c58:	78fb      	ldrb	r3, [r7, #3]
 8003c5a:	b2db      	uxtb	r3, r3
 8003c5c:	005b      	lsls	r3, r3, #1
 8003c5e:	b2db      	uxtb	r3, r3
 8003c60:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003c62:	78fb      	ldrb	r3, [r7, #3]
 8003c64:	b2db      	uxtb	r3, r3
 8003c66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c6a:	2b80      	cmp	r3, #128	; 0x80
 8003c6c:	d0ef      	beq.n	8003c4e <vSetVarulMaxPRIGROUPValue+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003c6e:	4b15      	ldr	r3, [pc, #84]	; (8003cc4 <vSetVarulMaxPRIGROUPValue+0xac>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f1c3 0307 	rsb	r3, r3, #7
 8003c76:	2b04      	cmp	r3, #4
 8003c78:	d00a      	beq.n	8003c90 <vSetVarulMaxPRIGROUPValue+0x78>
	__asm volatile
 8003c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c7e:	f383 8811 	msr	BASEPRI, r3
 8003c82:	f3bf 8f6f 	isb	sy
 8003c86:	f3bf 8f4f 	dsb	sy
 8003c8a:	60bb      	str	r3, [r7, #8]
}
 8003c8c:	bf00      	nop
 8003c8e:	e7fe      	b.n	8003c8e <vSetVarulMaxPRIGROUPValue+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003c90:	4b0c      	ldr	r3, [pc, #48]	; (8003cc4 <vSetVarulMaxPRIGROUPValue+0xac>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	021b      	lsls	r3, r3, #8
 8003c96:	4a0b      	ldr	r2, [pc, #44]	; (8003cc4 <vSetVarulMaxPRIGROUPValue+0xac>)
 8003c98:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003c9a:	4b0a      	ldr	r3, [pc, #40]	; (8003cc4 <vSetVarulMaxPRIGROUPValue+0xac>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003ca2:	4a08      	ldr	r2, [pc, #32]	; (8003cc4 <vSetVarulMaxPRIGROUPValue+0xac>)
 8003ca4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	b2da      	uxtb	r2, r3
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */
// copy code from “port.c” line number 299 to 359 and paste it here

}
 8003cae:	bf00      	nop
 8003cb0:	3714      	adds	r7, #20
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb8:	4770      	bx	lr
 8003cba:	bf00      	nop
 8003cbc:	e000e400 	.word	0xe000e400
 8003cc0:	20000d60 	.word	0x20000d60
 8003cc4:	20000d64 	.word	0x20000d64

08003cc8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b08a      	sub	sp, #40	; 0x28
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003cd4:	f7fe fcbe 	bl	8002654 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003cd8:	4b5b      	ldr	r3, [pc, #364]	; (8003e48 <pvPortMalloc+0x180>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d101      	bne.n	8003ce4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003ce0:	f000 f920 	bl	8003f24 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003ce4:	4b59      	ldr	r3, [pc, #356]	; (8003e4c <pvPortMalloc+0x184>)
 8003ce6:	681a      	ldr	r2, [r3, #0]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	4013      	ands	r3, r2
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	f040 8093 	bne.w	8003e18 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d01d      	beq.n	8003d34 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8003cf8:	2208      	movs	r2, #8
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	4413      	add	r3, r2
 8003cfe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	f003 0307 	and.w	r3, r3, #7
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d014      	beq.n	8003d34 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	f023 0307 	bic.w	r3, r3, #7
 8003d10:	3308      	adds	r3, #8
 8003d12:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	f003 0307 	and.w	r3, r3, #7
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d00a      	beq.n	8003d34 <pvPortMalloc+0x6c>
	__asm volatile
 8003d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d22:	f383 8811 	msr	BASEPRI, r3
 8003d26:	f3bf 8f6f 	isb	sy
 8003d2a:	f3bf 8f4f 	dsb	sy
 8003d2e:	617b      	str	r3, [r7, #20]
}
 8003d30:	bf00      	nop
 8003d32:	e7fe      	b.n	8003d32 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d06e      	beq.n	8003e18 <pvPortMalloc+0x150>
 8003d3a:	4b45      	ldr	r3, [pc, #276]	; (8003e50 <pvPortMalloc+0x188>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	687a      	ldr	r2, [r7, #4]
 8003d40:	429a      	cmp	r2, r3
 8003d42:	d869      	bhi.n	8003e18 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003d44:	4b43      	ldr	r3, [pc, #268]	; (8003e54 <pvPortMalloc+0x18c>)
 8003d46:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003d48:	4b42      	ldr	r3, [pc, #264]	; (8003e54 <pvPortMalloc+0x18c>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003d4e:	e004      	b.n	8003d5a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8003d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d52:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	687a      	ldr	r2, [r7, #4]
 8003d60:	429a      	cmp	r2, r3
 8003d62:	d903      	bls.n	8003d6c <pvPortMalloc+0xa4>
 8003d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d1f1      	bne.n	8003d50 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003d6c:	4b36      	ldr	r3, [pc, #216]	; (8003e48 <pvPortMalloc+0x180>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d72:	429a      	cmp	r2, r3
 8003d74:	d050      	beq.n	8003e18 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003d76:	6a3b      	ldr	r3, [r7, #32]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	2208      	movs	r2, #8
 8003d7c:	4413      	add	r3, r2
 8003d7e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d82:	681a      	ldr	r2, [r3, #0]
 8003d84:	6a3b      	ldr	r3, [r7, #32]
 8003d86:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d8a:	685a      	ldr	r2, [r3, #4]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	1ad2      	subs	r2, r2, r3
 8003d90:	2308      	movs	r3, #8
 8003d92:	005b      	lsls	r3, r3, #1
 8003d94:	429a      	cmp	r2, r3
 8003d96:	d91f      	bls.n	8003dd8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003d98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	4413      	add	r3, r2
 8003d9e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003da0:	69bb      	ldr	r3, [r7, #24]
 8003da2:	f003 0307 	and.w	r3, r3, #7
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d00a      	beq.n	8003dc0 <pvPortMalloc+0xf8>
	__asm volatile
 8003daa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dae:	f383 8811 	msr	BASEPRI, r3
 8003db2:	f3bf 8f6f 	isb	sy
 8003db6:	f3bf 8f4f 	dsb	sy
 8003dba:	613b      	str	r3, [r7, #16]
}
 8003dbc:	bf00      	nop
 8003dbe:	e7fe      	b.n	8003dbe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc2:	685a      	ldr	r2, [r3, #4]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	1ad2      	subs	r2, r2, r3
 8003dc8:	69bb      	ldr	r3, [r7, #24]
 8003dca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dce:	687a      	ldr	r2, [r7, #4]
 8003dd0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003dd2:	69b8      	ldr	r0, [r7, #24]
 8003dd4:	f000 f908 	bl	8003fe8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003dd8:	4b1d      	ldr	r3, [pc, #116]	; (8003e50 <pvPortMalloc+0x188>)
 8003dda:	681a      	ldr	r2, [r3, #0]
 8003ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	1ad3      	subs	r3, r2, r3
 8003de2:	4a1b      	ldr	r2, [pc, #108]	; (8003e50 <pvPortMalloc+0x188>)
 8003de4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003de6:	4b1a      	ldr	r3, [pc, #104]	; (8003e50 <pvPortMalloc+0x188>)
 8003de8:	681a      	ldr	r2, [r3, #0]
 8003dea:	4b1b      	ldr	r3, [pc, #108]	; (8003e58 <pvPortMalloc+0x190>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	429a      	cmp	r2, r3
 8003df0:	d203      	bcs.n	8003dfa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003df2:	4b17      	ldr	r3, [pc, #92]	; (8003e50 <pvPortMalloc+0x188>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a18      	ldr	r2, [pc, #96]	; (8003e58 <pvPortMalloc+0x190>)
 8003df8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dfc:	685a      	ldr	r2, [r3, #4]
 8003dfe:	4b13      	ldr	r3, [pc, #76]	; (8003e4c <pvPortMalloc+0x184>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	431a      	orrs	r2, r3
 8003e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e06:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8003e0e:	4b13      	ldr	r3, [pc, #76]	; (8003e5c <pvPortMalloc+0x194>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	3301      	adds	r3, #1
 8003e14:	4a11      	ldr	r2, [pc, #68]	; (8003e5c <pvPortMalloc+0x194>)
 8003e16:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003e18:	f7fe fc2a 	bl	8002670 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003e1c:	69fb      	ldr	r3, [r7, #28]
 8003e1e:	f003 0307 	and.w	r3, r3, #7
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d00a      	beq.n	8003e3c <pvPortMalloc+0x174>
	__asm volatile
 8003e26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e2a:	f383 8811 	msr	BASEPRI, r3
 8003e2e:	f3bf 8f6f 	isb	sy
 8003e32:	f3bf 8f4f 	dsb	sy
 8003e36:	60fb      	str	r3, [r7, #12]
}
 8003e38:	bf00      	nop
 8003e3a:	e7fe      	b.n	8003e3a <pvPortMalloc+0x172>
	return pvReturn;
 8003e3c:	69fb      	ldr	r3, [r7, #28]
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	3728      	adds	r7, #40	; 0x28
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}
 8003e46:	bf00      	nop
 8003e48:	20004970 	.word	0x20004970
 8003e4c:	20004984 	.word	0x20004984
 8003e50:	20004974 	.word	0x20004974
 8003e54:	20004968 	.word	0x20004968
 8003e58:	20004978 	.word	0x20004978
 8003e5c:	2000497c 	.word	0x2000497c

08003e60 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b086      	sub	sp, #24
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d04d      	beq.n	8003f0e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003e72:	2308      	movs	r3, #8
 8003e74:	425b      	negs	r3, r3
 8003e76:	697a      	ldr	r2, [r7, #20]
 8003e78:	4413      	add	r3, r2
 8003e7a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	685a      	ldr	r2, [r3, #4]
 8003e84:	4b24      	ldr	r3, [pc, #144]	; (8003f18 <vPortFree+0xb8>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4013      	ands	r3, r2
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d10a      	bne.n	8003ea4 <vPortFree+0x44>
	__asm volatile
 8003e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e92:	f383 8811 	msr	BASEPRI, r3
 8003e96:	f3bf 8f6f 	isb	sy
 8003e9a:	f3bf 8f4f 	dsb	sy
 8003e9e:	60fb      	str	r3, [r7, #12]
}
 8003ea0:	bf00      	nop
 8003ea2:	e7fe      	b.n	8003ea2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d00a      	beq.n	8003ec2 <vPortFree+0x62>
	__asm volatile
 8003eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eb0:	f383 8811 	msr	BASEPRI, r3
 8003eb4:	f3bf 8f6f 	isb	sy
 8003eb8:	f3bf 8f4f 	dsb	sy
 8003ebc:	60bb      	str	r3, [r7, #8]
}
 8003ebe:	bf00      	nop
 8003ec0:	e7fe      	b.n	8003ec0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	685a      	ldr	r2, [r3, #4]
 8003ec6:	4b14      	ldr	r3, [pc, #80]	; (8003f18 <vPortFree+0xb8>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4013      	ands	r3, r2
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d01e      	beq.n	8003f0e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003ed0:	693b      	ldr	r3, [r7, #16]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d11a      	bne.n	8003f0e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	685a      	ldr	r2, [r3, #4]
 8003edc:	4b0e      	ldr	r3, [pc, #56]	; (8003f18 <vPortFree+0xb8>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	43db      	mvns	r3, r3
 8003ee2:	401a      	ands	r2, r3
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003ee8:	f7fe fbb4 	bl	8002654 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	685a      	ldr	r2, [r3, #4]
 8003ef0:	4b0a      	ldr	r3, [pc, #40]	; (8003f1c <vPortFree+0xbc>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4413      	add	r3, r2
 8003ef6:	4a09      	ldr	r2, [pc, #36]	; (8003f1c <vPortFree+0xbc>)
 8003ef8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003efa:	6938      	ldr	r0, [r7, #16]
 8003efc:	f000 f874 	bl	8003fe8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8003f00:	4b07      	ldr	r3, [pc, #28]	; (8003f20 <vPortFree+0xc0>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	3301      	adds	r3, #1
 8003f06:	4a06      	ldr	r2, [pc, #24]	; (8003f20 <vPortFree+0xc0>)
 8003f08:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8003f0a:	f7fe fbb1 	bl	8002670 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003f0e:	bf00      	nop
 8003f10:	3718      	adds	r7, #24
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}
 8003f16:	bf00      	nop
 8003f18:	20004984 	.word	0x20004984
 8003f1c:	20004974 	.word	0x20004974
 8003f20:	20004980 	.word	0x20004980

08003f24 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003f24:	b480      	push	{r7}
 8003f26:	b085      	sub	sp, #20
 8003f28:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003f2a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8003f2e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003f30:	4b27      	ldr	r3, [pc, #156]	; (8003fd0 <prvHeapInit+0xac>)
 8003f32:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	f003 0307 	and.w	r3, r3, #7
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d00c      	beq.n	8003f58 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	3307      	adds	r3, #7
 8003f42:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	f023 0307 	bic.w	r3, r3, #7
 8003f4a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003f4c:	68ba      	ldr	r2, [r7, #8]
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	1ad3      	subs	r3, r2, r3
 8003f52:	4a1f      	ldr	r2, [pc, #124]	; (8003fd0 <prvHeapInit+0xac>)
 8003f54:	4413      	add	r3, r2
 8003f56:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003f5c:	4a1d      	ldr	r2, [pc, #116]	; (8003fd4 <prvHeapInit+0xb0>)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003f62:	4b1c      	ldr	r3, [pc, #112]	; (8003fd4 <prvHeapInit+0xb0>)
 8003f64:	2200      	movs	r2, #0
 8003f66:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	68ba      	ldr	r2, [r7, #8]
 8003f6c:	4413      	add	r3, r2
 8003f6e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003f70:	2208      	movs	r2, #8
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	1a9b      	subs	r3, r3, r2
 8003f76:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	f023 0307 	bic.w	r3, r3, #7
 8003f7e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	4a15      	ldr	r2, [pc, #84]	; (8003fd8 <prvHeapInit+0xb4>)
 8003f84:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003f86:	4b14      	ldr	r3, [pc, #80]	; (8003fd8 <prvHeapInit+0xb4>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003f8e:	4b12      	ldr	r3, [pc, #72]	; (8003fd8 <prvHeapInit+0xb4>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	2200      	movs	r2, #0
 8003f94:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	68fa      	ldr	r2, [r7, #12]
 8003f9e:	1ad2      	subs	r2, r2, r3
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003fa4:	4b0c      	ldr	r3, [pc, #48]	; (8003fd8 <prvHeapInit+0xb4>)
 8003fa6:	681a      	ldr	r2, [r3, #0]
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	4a0a      	ldr	r2, [pc, #40]	; (8003fdc <prvHeapInit+0xb8>)
 8003fb2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	4a09      	ldr	r2, [pc, #36]	; (8003fe0 <prvHeapInit+0xbc>)
 8003fba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003fbc:	4b09      	ldr	r3, [pc, #36]	; (8003fe4 <prvHeapInit+0xc0>)
 8003fbe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003fc2:	601a      	str	r2, [r3, #0]
}
 8003fc4:	bf00      	nop
 8003fc6:	3714      	adds	r7, #20
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fce:	4770      	bx	lr
 8003fd0:	20000d68 	.word	0x20000d68
 8003fd4:	20004968 	.word	0x20004968
 8003fd8:	20004970 	.word	0x20004970
 8003fdc:	20004978 	.word	0x20004978
 8003fe0:	20004974 	.word	0x20004974
 8003fe4:	20004984 	.word	0x20004984

08003fe8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b085      	sub	sp, #20
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003ff0:	4b28      	ldr	r3, [pc, #160]	; (8004094 <prvInsertBlockIntoFreeList+0xac>)
 8003ff2:	60fb      	str	r3, [r7, #12]
 8003ff4:	e002      	b.n	8003ffc <prvInsertBlockIntoFreeList+0x14>
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	60fb      	str	r3, [r7, #12]
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	687a      	ldr	r2, [r7, #4]
 8004002:	429a      	cmp	r2, r3
 8004004:	d8f7      	bhi.n	8003ff6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	68ba      	ldr	r2, [r7, #8]
 8004010:	4413      	add	r3, r2
 8004012:	687a      	ldr	r2, [r7, #4]
 8004014:	429a      	cmp	r2, r3
 8004016:	d108      	bne.n	800402a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	685a      	ldr	r2, [r3, #4]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	441a      	add	r2, r3
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	68ba      	ldr	r2, [r7, #8]
 8004034:	441a      	add	r2, r3
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	429a      	cmp	r2, r3
 800403c:	d118      	bne.n	8004070 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681a      	ldr	r2, [r3, #0]
 8004042:	4b15      	ldr	r3, [pc, #84]	; (8004098 <prvInsertBlockIntoFreeList+0xb0>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	429a      	cmp	r2, r3
 8004048:	d00d      	beq.n	8004066 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	685a      	ldr	r2, [r3, #4]
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	441a      	add	r2, r3
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	601a      	str	r2, [r3, #0]
 8004064:	e008      	b.n	8004078 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004066:	4b0c      	ldr	r3, [pc, #48]	; (8004098 <prvInsertBlockIntoFreeList+0xb0>)
 8004068:	681a      	ldr	r2, [r3, #0]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	601a      	str	r2, [r3, #0]
 800406e:	e003      	b.n	8004078 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004078:	68fa      	ldr	r2, [r7, #12]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	429a      	cmp	r2, r3
 800407e:	d002      	beq.n	8004086 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	687a      	ldr	r2, [r7, #4]
 8004084:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004086:	bf00      	nop
 8004088:	3714      	adds	r7, #20
 800408a:	46bd      	mov	sp, r7
 800408c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004090:	4770      	bx	lr
 8004092:	bf00      	nop
 8004094:	20004968 	.word	0x20004968
 8004098:	20004970 	.word	0x20004970

0800409c <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 800409c:	b580      	push	{r7, lr}
 800409e:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 80040a0:	4803      	ldr	r0, [pc, #12]	; (80040b0 <_cbSendSystemDesc+0x14>)
 80040a2:	f001 fa03 	bl	80054ac <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 80040a6:	4803      	ldr	r0, [pc, #12]	; (80040b4 <_cbSendSystemDesc+0x18>)
 80040a8:	f001 fa00 	bl	80054ac <SEGGER_SYSVIEW_SendSysDesc>
}
 80040ac:	bf00      	nop
 80040ae:	bd80      	pop	{r7, pc}
 80040b0:	08005c48 	.word	0x08005c48
 80040b4:	08005c7c 	.word	0x08005c7c

080040b8 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 80040b8:	b580      	push	{r7, lr}
 80040ba:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 80040bc:	4b06      	ldr	r3, [pc, #24]	; (80040d8 <SEGGER_SYSVIEW_Conf+0x20>)
 80040be:	6818      	ldr	r0, [r3, #0]
 80040c0:	4b05      	ldr	r3, [pc, #20]	; (80040d8 <SEGGER_SYSVIEW_Conf+0x20>)
 80040c2:	6819      	ldr	r1, [r3, #0]
 80040c4:	4b05      	ldr	r3, [pc, #20]	; (80040dc <SEGGER_SYSVIEW_Conf+0x24>)
 80040c6:	4a06      	ldr	r2, [pc, #24]	; (80040e0 <SEGGER_SYSVIEW_Conf+0x28>)
 80040c8:	f000 fd70 	bl	8004bac <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 80040cc:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 80040d0:	f000 fdaa 	bl	8004c28 <SEGGER_SYSVIEW_SetRAMBase>
}
 80040d4:	bf00      	nop
 80040d6:	bd80      	pop	{r7, pc}
 80040d8:	20000000 	.word	0x20000000
 80040dc:	0800409d 	.word	0x0800409d
 80040e0:	08005d5c 	.word	0x08005d5c

080040e4 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 80040e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040e6:	b085      	sub	sp, #20
 80040e8:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 80040ea:	2300      	movs	r3, #0
 80040ec:	607b      	str	r3, [r7, #4]
 80040ee:	e048      	b.n	8004182 <_cbSendTaskList+0x9e>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
 80040f0:	4929      	ldr	r1, [pc, #164]	; (8004198 <_cbSendTaskList+0xb4>)
 80040f2:	687a      	ldr	r2, [r7, #4]
 80040f4:	4613      	mov	r3, r2
 80040f6:	009b      	lsls	r3, r3, #2
 80040f8:	4413      	add	r3, r2
 80040fa:	009b      	lsls	r3, r3, #2
 80040fc:	440b      	add	r3, r1
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4618      	mov	r0, r3
 8004102:	f7fe fe83 	bl	8002e0c <uxTaskGetStackHighWaterMark>
 8004106:	4601      	mov	r1, r0
 8004108:	4823      	ldr	r0, [pc, #140]	; (8004198 <_cbSendTaskList+0xb4>)
 800410a:	687a      	ldr	r2, [r7, #4]
 800410c:	4613      	mov	r3, r2
 800410e:	009b      	lsls	r3, r3, #2
 8004110:	4413      	add	r3, r2
 8004112:	009b      	lsls	r3, r3, #2
 8004114:	4403      	add	r3, r0
 8004116:	3310      	adds	r3, #16
 8004118:	6019      	str	r1, [r3, #0]
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 800411a:	491f      	ldr	r1, [pc, #124]	; (8004198 <_cbSendTaskList+0xb4>)
 800411c:	687a      	ldr	r2, [r7, #4]
 800411e:	4613      	mov	r3, r2
 8004120:	009b      	lsls	r3, r3, #2
 8004122:	4413      	add	r3, r2
 8004124:	009b      	lsls	r3, r3, #2
 8004126:	440b      	add	r3, r1
 8004128:	6818      	ldr	r0, [r3, #0]
 800412a:	491b      	ldr	r1, [pc, #108]	; (8004198 <_cbSendTaskList+0xb4>)
 800412c:	687a      	ldr	r2, [r7, #4]
 800412e:	4613      	mov	r3, r2
 8004130:	009b      	lsls	r3, r3, #2
 8004132:	4413      	add	r3, r2
 8004134:	009b      	lsls	r3, r3, #2
 8004136:	440b      	add	r3, r1
 8004138:	3304      	adds	r3, #4
 800413a:	6819      	ldr	r1, [r3, #0]
 800413c:	4c16      	ldr	r4, [pc, #88]	; (8004198 <_cbSendTaskList+0xb4>)
 800413e:	687a      	ldr	r2, [r7, #4]
 8004140:	4613      	mov	r3, r2
 8004142:	009b      	lsls	r3, r3, #2
 8004144:	4413      	add	r3, r2
 8004146:	009b      	lsls	r3, r3, #2
 8004148:	4423      	add	r3, r4
 800414a:	3308      	adds	r3, #8
 800414c:	681c      	ldr	r4, [r3, #0]
 800414e:	4d12      	ldr	r5, [pc, #72]	; (8004198 <_cbSendTaskList+0xb4>)
 8004150:	687a      	ldr	r2, [r7, #4]
 8004152:	4613      	mov	r3, r2
 8004154:	009b      	lsls	r3, r3, #2
 8004156:	4413      	add	r3, r2
 8004158:	009b      	lsls	r3, r3, #2
 800415a:	442b      	add	r3, r5
 800415c:	330c      	adds	r3, #12
 800415e:	681d      	ldr	r5, [r3, #0]
 8004160:	4e0d      	ldr	r6, [pc, #52]	; (8004198 <_cbSendTaskList+0xb4>)
 8004162:	687a      	ldr	r2, [r7, #4]
 8004164:	4613      	mov	r3, r2
 8004166:	009b      	lsls	r3, r3, #2
 8004168:	4413      	add	r3, r2
 800416a:	009b      	lsls	r3, r3, #2
 800416c:	4433      	add	r3, r6
 800416e:	3310      	adds	r3, #16
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	9300      	str	r3, [sp, #0]
 8004174:	462b      	mov	r3, r5
 8004176:	4622      	mov	r2, r4
 8004178:	f000 f8be 	bl	80042f8 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	3301      	adds	r3, #1
 8004180:	607b      	str	r3, [r7, #4]
 8004182:	4b06      	ldr	r3, [pc, #24]	; (800419c <_cbSendTaskList+0xb8>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	687a      	ldr	r2, [r7, #4]
 8004188:	429a      	cmp	r2, r3
 800418a:	d3b1      	bcc.n	80040f0 <_cbSendTaskList+0xc>
  }
}
 800418c:	bf00      	nop
 800418e:	bf00      	nop
 8004190:	370c      	adds	r7, #12
 8004192:	46bd      	mov	sp, r7
 8004194:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004196:	bf00      	nop
 8004198:	20004988 	.word	0x20004988
 800419c:	20004a28 	.word	0x20004a28

080041a0 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 80041a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80041a4:	b082      	sub	sp, #8
 80041a6:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 80041a8:	f7fe fb14 	bl	80027d4 <xTaskGetTickCountFromISR>
 80041ac:	4603      	mov	r3, r0
 80041ae:	2200      	movs	r2, #0
 80041b0:	469a      	mov	sl, r3
 80041b2:	4693      	mov	fp, r2
 80041b4:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 80041b8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80041bc:	4602      	mov	r2, r0
 80041be:	460b      	mov	r3, r1
 80041c0:	f04f 0a00 	mov.w	sl, #0
 80041c4:	f04f 0b00 	mov.w	fp, #0
 80041c8:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 80041cc:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 80041d0:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 80041d4:	4652      	mov	r2, sl
 80041d6:	465b      	mov	r3, fp
 80041d8:	1a14      	subs	r4, r2, r0
 80041da:	eb63 0501 	sbc.w	r5, r3, r1
 80041de:	f04f 0200 	mov.w	r2, #0
 80041e2:	f04f 0300 	mov.w	r3, #0
 80041e6:	00ab      	lsls	r3, r5, #2
 80041e8:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 80041ec:	00a2      	lsls	r2, r4, #2
 80041ee:	4614      	mov	r4, r2
 80041f0:	461d      	mov	r5, r3
 80041f2:	eb14 0800 	adds.w	r8, r4, r0
 80041f6:	eb45 0901 	adc.w	r9, r5, r1
 80041fa:	f04f 0200 	mov.w	r2, #0
 80041fe:	f04f 0300 	mov.w	r3, #0
 8004202:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004206:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800420a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800420e:	4690      	mov	r8, r2
 8004210:	4699      	mov	r9, r3
 8004212:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8004216:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 800421a:	4610      	mov	r0, r2
 800421c:	4619      	mov	r1, r3
 800421e:	3708      	adds	r7, #8
 8004220:	46bd      	mov	sp, r7
 8004222:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08004228 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8004228:	b580      	push	{r7, lr}
 800422a:	b086      	sub	sp, #24
 800422c:	af02      	add	r7, sp, #8
 800422e:	60f8      	str	r0, [r7, #12]
 8004230:	60b9      	str	r1, [r7, #8]
 8004232:	607a      	str	r2, [r7, #4]
 8004234:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8004236:	2205      	movs	r2, #5
 8004238:	492b      	ldr	r1, [pc, #172]	; (80042e8 <SYSVIEW_AddTask+0xc0>)
 800423a:	68b8      	ldr	r0, [r7, #8]
 800423c:	f001 fc98 	bl	8005b70 <memcmp>
 8004240:	4603      	mov	r3, r0
 8004242:	2b00      	cmp	r3, #0
 8004244:	d04b      	beq.n	80042de <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8004246:	4b29      	ldr	r3, [pc, #164]	; (80042ec <SYSVIEW_AddTask+0xc4>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	2b07      	cmp	r3, #7
 800424c:	d903      	bls.n	8004256 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800424e:	4828      	ldr	r0, [pc, #160]	; (80042f0 <SYSVIEW_AddTask+0xc8>)
 8004250:	f001 fc32 	bl	8005ab8 <SEGGER_SYSVIEW_Warn>
    return;
 8004254:	e044      	b.n	80042e0 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8004256:	4b25      	ldr	r3, [pc, #148]	; (80042ec <SYSVIEW_AddTask+0xc4>)
 8004258:	681a      	ldr	r2, [r3, #0]
 800425a:	4926      	ldr	r1, [pc, #152]	; (80042f4 <SYSVIEW_AddTask+0xcc>)
 800425c:	4613      	mov	r3, r2
 800425e:	009b      	lsls	r3, r3, #2
 8004260:	4413      	add	r3, r2
 8004262:	009b      	lsls	r3, r3, #2
 8004264:	440b      	add	r3, r1
 8004266:	68fa      	ldr	r2, [r7, #12]
 8004268:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800426a:	4b20      	ldr	r3, [pc, #128]	; (80042ec <SYSVIEW_AddTask+0xc4>)
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	4921      	ldr	r1, [pc, #132]	; (80042f4 <SYSVIEW_AddTask+0xcc>)
 8004270:	4613      	mov	r3, r2
 8004272:	009b      	lsls	r3, r3, #2
 8004274:	4413      	add	r3, r2
 8004276:	009b      	lsls	r3, r3, #2
 8004278:	440b      	add	r3, r1
 800427a:	3304      	adds	r3, #4
 800427c:	68ba      	ldr	r2, [r7, #8]
 800427e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8004280:	4b1a      	ldr	r3, [pc, #104]	; (80042ec <SYSVIEW_AddTask+0xc4>)
 8004282:	681a      	ldr	r2, [r3, #0]
 8004284:	491b      	ldr	r1, [pc, #108]	; (80042f4 <SYSVIEW_AddTask+0xcc>)
 8004286:	4613      	mov	r3, r2
 8004288:	009b      	lsls	r3, r3, #2
 800428a:	4413      	add	r3, r2
 800428c:	009b      	lsls	r3, r3, #2
 800428e:	440b      	add	r3, r1
 8004290:	3308      	adds	r3, #8
 8004292:	687a      	ldr	r2, [r7, #4]
 8004294:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8004296:	4b15      	ldr	r3, [pc, #84]	; (80042ec <SYSVIEW_AddTask+0xc4>)
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	4916      	ldr	r1, [pc, #88]	; (80042f4 <SYSVIEW_AddTask+0xcc>)
 800429c:	4613      	mov	r3, r2
 800429e:	009b      	lsls	r3, r3, #2
 80042a0:	4413      	add	r3, r2
 80042a2:	009b      	lsls	r3, r3, #2
 80042a4:	440b      	add	r3, r1
 80042a6:	330c      	adds	r3, #12
 80042a8:	683a      	ldr	r2, [r7, #0]
 80042aa:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 80042ac:	4b0f      	ldr	r3, [pc, #60]	; (80042ec <SYSVIEW_AddTask+0xc4>)
 80042ae:	681a      	ldr	r2, [r3, #0]
 80042b0:	4910      	ldr	r1, [pc, #64]	; (80042f4 <SYSVIEW_AddTask+0xcc>)
 80042b2:	4613      	mov	r3, r2
 80042b4:	009b      	lsls	r3, r3, #2
 80042b6:	4413      	add	r3, r2
 80042b8:	009b      	lsls	r3, r3, #2
 80042ba:	440b      	add	r3, r1
 80042bc:	3310      	adds	r3, #16
 80042be:	69ba      	ldr	r2, [r7, #24]
 80042c0:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 80042c2:	4b0a      	ldr	r3, [pc, #40]	; (80042ec <SYSVIEW_AddTask+0xc4>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	3301      	adds	r3, #1
 80042c8:	4a08      	ldr	r2, [pc, #32]	; (80042ec <SYSVIEW_AddTask+0xc4>)
 80042ca:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 80042cc:	69bb      	ldr	r3, [r7, #24]
 80042ce:	9300      	str	r3, [sp, #0]
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	687a      	ldr	r2, [r7, #4]
 80042d4:	68b9      	ldr	r1, [r7, #8]
 80042d6:	68f8      	ldr	r0, [r7, #12]
 80042d8:	f000 f80e 	bl	80042f8 <SYSVIEW_SendTaskInfo>
 80042dc:	e000      	b.n	80042e0 <SYSVIEW_AddTask+0xb8>
    return;
 80042de:	bf00      	nop

}
 80042e0:	3710      	adds	r7, #16
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}
 80042e6:	bf00      	nop
 80042e8:	08005c8c 	.word	0x08005c8c
 80042ec:	20004a28 	.word	0x20004a28
 80042f0:	08005c94 	.word	0x08005c94
 80042f4:	20004988 	.word	0x20004988

080042f8 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b08a      	sub	sp, #40	; 0x28
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	60f8      	str	r0, [r7, #12]
 8004300:	60b9      	str	r1, [r7, #8]
 8004302:	607a      	str	r2, [r7, #4]
 8004304:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8004306:	f107 0314 	add.w	r3, r7, #20
 800430a:	2214      	movs	r2, #20
 800430c:	2100      	movs	r1, #0
 800430e:	4618      	mov	r0, r3
 8004310:	f001 fc3e 	bl	8005b90 <memset>
  TaskInfo.TaskID     = TaskID;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8004324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004326:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8004328:	f107 0314 	add.w	r3, r7, #20
 800432c:	4618      	mov	r0, r3
 800432e:	f000 ffc3 	bl	80052b8 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8004332:	bf00      	nop
 8004334:	3728      	adds	r7, #40	; 0x28
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}
	...

0800433c <_DoInit>:
*
*/
#define INIT()  do {                                            \
                  if (_SEGGER_RTT.acID[0] == '\0') { _DoInit(); }  \
                } while (0)
static void _DoInit(void) {
 800433c:	b480      	push	{r7}
 800433e:	b083      	sub	sp, #12
 8004340:	af00      	add	r7, sp, #0
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
 8004342:	4b21      	ldr	r3, [pc, #132]	; (80043c8 <_DoInit+0x8c>)
 8004344:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2203      	movs	r2, #3
 800434a:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2203      	movs	r2, #3
 8004350:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	4a1d      	ldr	r2, [pc, #116]	; (80043cc <_DoInit+0x90>)
 8004356:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	4a1d      	ldr	r2, [pc, #116]	; (80043d0 <_DoInit+0x94>)
 800435c:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004364:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2200      	movs	r2, #0
 800436a:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2200      	movs	r2, #0
 8004370:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2200      	movs	r2, #0
 8004376:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	4a14      	ldr	r2, [pc, #80]	; (80043cc <_DoInit+0x90>)
 800437c:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	4a14      	ldr	r2, [pc, #80]	; (80043d4 <_DoInit+0x98>)
 8004382:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2210      	movs	r2, #16
 8004388:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2200      	movs	r2, #0
 800438e:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2200      	movs	r2, #0
 8004394:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2200      	movs	r2, #0
 800439a:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  strcpy(&p->acID[7], "RTT");
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	3307      	adds	r3, #7
 80043a0:	4a0d      	ldr	r2, [pc, #52]	; (80043d8 <_DoInit+0x9c>)
 80043a2:	6810      	ldr	r0, [r2, #0]
 80043a4:	6018      	str	r0, [r3, #0]
  strcpy(&p->acID[0], "SEGGER");
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	4a0c      	ldr	r2, [pc, #48]	; (80043dc <_DoInit+0xa0>)
 80043aa:	6810      	ldr	r0, [r2, #0]
 80043ac:	6018      	str	r0, [r3, #0]
 80043ae:	8891      	ldrh	r1, [r2, #4]
 80043b0:	7992      	ldrb	r2, [r2, #6]
 80043b2:	8099      	strh	r1, [r3, #4]
 80043b4:	719a      	strb	r2, [r3, #6]
  p->acID[6] = ' ';
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2220      	movs	r2, #32
 80043ba:	719a      	strb	r2, [r3, #6]
}
 80043bc:	bf00      	nop
 80043be:	370c      	adds	r7, #12
 80043c0:	46bd      	mov	sp, r7
 80043c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c6:	4770      	bx	lr
 80043c8:	20004a2c 	.word	0x20004a2c
 80043cc:	08005ce4 	.word	0x08005ce4
 80043d0:	20004ad4 	.word	0x20004ad4
 80043d4:	20004ed4 	.word	0x20004ed4
 80043d8:	08005cf0 	.word	0x08005cf0
 80043dc:	08005cf4 	.word	0x08005cf4

080043e0 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b08a      	sub	sp, #40	; 0x28
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	60f8      	str	r0, [r7, #12]
 80043e8:	60b9      	str	r1, [r7, #8]
 80043ea:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_DOWN* pRing;
#if SEGGER_RTT_MEMCPY_USE_BYTELOOP
  const char*             pSrc;
#endif
  //
  INIT();
 80043ec:	4b3c      	ldr	r3, [pc, #240]	; (80044e0 <SEGGER_RTT_ReadNoLock+0x100>)
 80043ee:	781b      	ldrb	r3, [r3, #0]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d101      	bne.n	80043f8 <SEGGER_RTT_ReadNoLock+0x18>
 80043f4:	f7ff ffa2 	bl	800433c <_DoInit>
  pRing = &_SEGGER_RTT.aDown[BufferIndex];
 80043f8:	68fa      	ldr	r2, [r7, #12]
 80043fa:	4613      	mov	r3, r2
 80043fc:	005b      	lsls	r3, r3, #1
 80043fe:	4413      	add	r3, r2
 8004400:	00db      	lsls	r3, r3, #3
 8004402:	3360      	adds	r3, #96	; 0x60
 8004404:	4a36      	ldr	r2, [pc, #216]	; (80044e0 <SEGGER_RTT_ReadNoLock+0x100>)
 8004406:	4413      	add	r3, r2
 8004408:	61bb      	str	r3, [r7, #24]
  pBuffer = (unsigned char*)pData;
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	61fb      	str	r3, [r7, #28]
  RdOff = pRing->RdOff;
 800440e:	69bb      	ldr	r3, [r7, #24]
 8004410:	691b      	ldr	r3, [r3, #16]
 8004412:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8004414:	69bb      	ldr	r3, [r7, #24]
 8004416:	68db      	ldr	r3, [r3, #12]
 8004418:	617b      	str	r3, [r7, #20]
  NumBytesRead = 0u;
 800441a:	2300      	movs	r3, #0
 800441c:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 800441e:	6a3a      	ldr	r2, [r7, #32]
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	429a      	cmp	r2, r3
 8004424:	d92a      	bls.n	800447c <SEGGER_RTT_ReadNoLock+0x9c>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8004426:	69bb      	ldr	r3, [r7, #24]
 8004428:	689a      	ldr	r2, [r3, #8]
 800442a:	6a3b      	ldr	r3, [r7, #32]
 800442c:	1ad3      	subs	r3, r2, r3
 800442e:	613b      	str	r3, [r7, #16]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004430:	693a      	ldr	r2, [r7, #16]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	4293      	cmp	r3, r2
 8004436:	bf28      	it	cs
 8004438:	4613      	movcs	r3, r2
 800443a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 800443c:	69bb      	ldr	r3, [r7, #24]
 800443e:	685a      	ldr	r2, [r3, #4]
 8004440:	6a3b      	ldr	r3, [r7, #32]
 8004442:	4413      	add	r3, r2
 8004444:	693a      	ldr	r2, [r7, #16]
 8004446:	4619      	mov	r1, r3
 8004448:	69f8      	ldr	r0, [r7, #28]
 800444a:	f001 fbcd 	bl	8005be8 <memcpy>
    NumBytesRead += NumBytesRem;
 800444e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004450:	693b      	ldr	r3, [r7, #16]
 8004452:	4413      	add	r3, r2
 8004454:	627b      	str	r3, [r7, #36]	; 0x24
    pBuffer      += NumBytesRem;
 8004456:	69fa      	ldr	r2, [r7, #28]
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	4413      	add	r3, r2
 800445c:	61fb      	str	r3, [r7, #28]
    BufferSize   -= NumBytesRem;
 800445e:	687a      	ldr	r2, [r7, #4]
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	1ad3      	subs	r3, r2, r3
 8004464:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004466:	6a3a      	ldr	r2, [r7, #32]
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	4413      	add	r3, r2
 800446c:	623b      	str	r3, [r7, #32]
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800446e:	69bb      	ldr	r3, [r7, #24]
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	6a3a      	ldr	r2, [r7, #32]
 8004474:	429a      	cmp	r2, r3
 8004476:	d101      	bne.n	800447c <SEGGER_RTT_ReadNoLock+0x9c>
      RdOff = 0u;
 8004478:	2300      	movs	r3, #0
 800447a:	623b      	str	r3, [r7, #32]
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 800447c:	697a      	ldr	r2, [r7, #20]
 800447e:	6a3b      	ldr	r3, [r7, #32]
 8004480:	1ad3      	subs	r3, r2, r3
 8004482:	613b      	str	r3, [r7, #16]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004484:	693a      	ldr	r2, [r7, #16]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	4293      	cmp	r3, r2
 800448a:	bf28      	it	cs
 800448c:	4613      	movcs	r3, r2
 800448e:	613b      	str	r3, [r7, #16]
  if (NumBytesRem > 0u) {
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d018      	beq.n	80044c8 <SEGGER_RTT_ReadNoLock+0xe8>
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 8004496:	69bb      	ldr	r3, [r7, #24]
 8004498:	685a      	ldr	r2, [r3, #4]
 800449a:	6a3b      	ldr	r3, [r7, #32]
 800449c:	4413      	add	r3, r2
 800449e:	693a      	ldr	r2, [r7, #16]
 80044a0:	4619      	mov	r1, r3
 80044a2:	69f8      	ldr	r0, [r7, #28]
 80044a4:	f001 fba0 	bl	8005be8 <memcpy>
    NumBytesRead += NumBytesRem;
 80044a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044aa:	693b      	ldr	r3, [r7, #16]
 80044ac:	4413      	add	r3, r2
 80044ae:	627b      	str	r3, [r7, #36]	; 0x24
    pBuffer      += NumBytesRem;
 80044b0:	69fa      	ldr	r2, [r7, #28]
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	4413      	add	r3, r2
 80044b6:	61fb      	str	r3, [r7, #28]
    BufferSize   -= NumBytesRem;
 80044b8:	687a      	ldr	r2, [r7, #4]
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	1ad3      	subs	r3, r2, r3
 80044be:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80044c0:	6a3a      	ldr	r2, [r7, #32]
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	4413      	add	r3, r2
 80044c6:	623b      	str	r3, [r7, #32]
#endif
  }
  if (NumBytesRead) {
 80044c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d002      	beq.n	80044d4 <SEGGER_RTT_ReadNoLock+0xf4>
    pRing->RdOff = RdOff;
 80044ce:	69bb      	ldr	r3, [r7, #24]
 80044d0:	6a3a      	ldr	r2, [r7, #32]
 80044d2:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80044d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	3728      	adds	r7, #40	; 0x28
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}
 80044de:	bf00      	nop
 80044e0:	20004a2c 	.word	0x20004a2c

080044e4 <SEGGER_RTT_WriteSkipNoLock>:
*    (1) If there is not enough space in the "Up"-buffer, all data is dropped.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b08a      	sub	sp, #40	; 0x28
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	60f8      	str	r0, [r7, #12]
 80044ec:	60b9      	str	r1, [r7, #8]
 80044ee:	607a      	str	r2, [r7, #4]
  unsigned              Rem;
#if SEGGER_RTT_MEMCPY_USE_BYTELOOP
  char*                 pDst;
#endif

  pData = (const char *)pBuffer;
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get "to-host" ring buffer and copy some elements into local variables.
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	1c5a      	adds	r2, r3, #1
 80044f8:	4613      	mov	r3, r2
 80044fa:	005b      	lsls	r3, r3, #1
 80044fc:	4413      	add	r3, r2
 80044fe:	00db      	lsls	r3, r3, #3
 8004500:	4a3f      	ldr	r2, [pc, #252]	; (8004600 <SEGGER_RTT_WriteSkipNoLock+0x11c>)
 8004502:	4413      	add	r3, r2
 8004504:	623b      	str	r3, [r7, #32]
  RdOff = pRing->RdOff;
 8004506:	6a3b      	ldr	r3, [r7, #32]
 8004508:	691b      	ldr	r3, [r3, #16]
 800450a:	61fb      	str	r3, [r7, #28]
  WrOff = pRing->WrOff;
 800450c:	6a3b      	ldr	r3, [r7, #32]
 800450e:	68db      	ldr	r3, [r3, #12]
 8004510:	61bb      	str	r3, [r7, #24]
  //
  //    RdOff > WrOff -> Space until RdOff - 1 is free.
  //  AND
  //    WrOff + NumBytes < RdOff -> Data fits into buffer
  //
  if (RdOff <= WrOff) {
 8004512:	69fa      	ldr	r2, [r7, #28]
 8004514:	69bb      	ldr	r3, [r7, #24]
 8004516:	429a      	cmp	r2, r3
 8004518:	d854      	bhi.n	80045c4 <SEGGER_RTT_WriteSkipNoLock+0xe0>
    //
    // Get space until WrOff will be at wrap around.
    //
    Avail = pRing->SizeOfBuffer - 1u - WrOff ;
 800451a:	6a3b      	ldr	r3, [r7, #32]
 800451c:	689a      	ldr	r2, [r3, #8]
 800451e:	69bb      	ldr	r3, [r7, #24]
 8004520:	1ad3      	subs	r3, r2, r3
 8004522:	3b01      	subs	r3, #1
 8004524:	617b      	str	r3, [r7, #20]
    if (Avail >= NumBytes) {
 8004526:	697a      	ldr	r2, [r7, #20]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	429a      	cmp	r2, r3
 800452c:	d30f      	bcc.n	800454e <SEGGER_RTT_WriteSkipNoLock+0x6a>
      while (NumBytes--) {
        *pDst++ = *pData++;
      };
      pRing->WrOff = WrOff;
#else
      SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 800452e:	6a3b      	ldr	r3, [r7, #32]
 8004530:	685a      	ldr	r2, [r3, #4]
 8004532:	69bb      	ldr	r3, [r7, #24]
 8004534:	4413      	add	r3, r2
 8004536:	687a      	ldr	r2, [r7, #4]
 8004538:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800453a:	4618      	mov	r0, r3
 800453c:	f001 fb54 	bl	8005be8 <memcpy>
      pRing->WrOff = WrOff + NumBytes;
 8004540:	69ba      	ldr	r2, [r7, #24]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	441a      	add	r2, r3
 8004546:	6a3b      	ldr	r3, [r7, #32]
 8004548:	60da      	str	r2, [r3, #12]
#endif
      return 1;
 800454a:	2301      	movs	r3, #1
 800454c:	e054      	b.n	80045f8 <SEGGER_RTT_WriteSkipNoLock+0x114>
    }
    //
    // If data did not fit into space until wrap around calculate complete space in buffer.
    //
    Avail += RdOff;
 800454e:	697a      	ldr	r2, [r7, #20]
 8004550:	69fb      	ldr	r3, [r7, #28]
 8004552:	4413      	add	r3, r2
 8004554:	617b      	str	r3, [r7, #20]
    //
    // If there is still no space for the whole of this output, don't bother.
    //
    if (Avail >= NumBytes) {
 8004556:	697a      	ldr	r2, [r7, #20]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	429a      	cmp	r2, r3
 800455c:	d34b      	bcc.n	80045f6 <SEGGER_RTT_WriteSkipNoLock+0x112>
      //
      //  OK, we have enough space in buffer. Copy in one or 2 chunks
      //
      Rem = pRing->SizeOfBuffer - WrOff;      // Space until end of buffer
 800455e:	6a3b      	ldr	r3, [r7, #32]
 8004560:	689a      	ldr	r2, [r3, #8]
 8004562:	69bb      	ldr	r3, [r7, #24]
 8004564:	1ad3      	subs	r3, r2, r3
 8004566:	613b      	str	r3, [r7, #16]
      if (Rem > NumBytes) {
 8004568:	693a      	ldr	r2, [r7, #16]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	429a      	cmp	r2, r3
 800456e:	d90e      	bls.n	800458e <SEGGER_RTT_WriteSkipNoLock+0xaa>
        while (NumBytes--) {
          *pDst++ = *pData++;
        };
        pRing->WrOff = WrOff;
#else
        SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 8004570:	6a3b      	ldr	r3, [r7, #32]
 8004572:	685a      	ldr	r2, [r3, #4]
 8004574:	69bb      	ldr	r3, [r7, #24]
 8004576:	4413      	add	r3, r2
 8004578:	687a      	ldr	r2, [r7, #4]
 800457a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800457c:	4618      	mov	r0, r3
 800457e:	f001 fb33 	bl	8005be8 <memcpy>
        pRing->WrOff = WrOff + NumBytes;
 8004582:	69ba      	ldr	r2, [r7, #24]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	441a      	add	r2, r3
 8004588:	6a3b      	ldr	r3, [r7, #32]
 800458a:	60da      	str	r2, [r3, #12]
 800458c:	e018      	b.n	80045c0 <SEGGER_RTT_WriteSkipNoLock+0xdc>
        while (NumBytes--) {
          *pDst++ = *pData++;
        };
        pRing->WrOff = WrOff;
#else
        SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, Rem);
 800458e:	6a3b      	ldr	r3, [r7, #32]
 8004590:	685a      	ldr	r2, [r3, #4]
 8004592:	69bb      	ldr	r3, [r7, #24]
 8004594:	4413      	add	r3, r2
 8004596:	693a      	ldr	r2, [r7, #16]
 8004598:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800459a:	4618      	mov	r0, r3
 800459c:	f001 fb24 	bl	8005be8 <memcpy>
        SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytes - Rem);
 80045a0:	6a3b      	ldr	r3, [r7, #32]
 80045a2:	6858      	ldr	r0, [r3, #4]
 80045a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	18d1      	adds	r1, r2, r3
 80045aa:	687a      	ldr	r2, [r7, #4]
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	1ad3      	subs	r3, r2, r3
 80045b0:	461a      	mov	r2, r3
 80045b2:	f001 fb19 	bl	8005be8 <memcpy>
        pRing->WrOff = NumBytes - Rem;
 80045b6:	687a      	ldr	r2, [r7, #4]
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	1ad2      	subs	r2, r2, r3
 80045bc:	6a3b      	ldr	r3, [r7, #32]
 80045be:	60da      	str	r2, [r3, #12]
#endif
      }
      return 1;
 80045c0:	2301      	movs	r3, #1
 80045c2:	e019      	b.n	80045f8 <SEGGER_RTT_WriteSkipNoLock+0x114>
    }
  } else {
    Avail = RdOff - WrOff - 1u;
 80045c4:	69fa      	ldr	r2, [r7, #28]
 80045c6:	69bb      	ldr	r3, [r7, #24]
 80045c8:	1ad3      	subs	r3, r2, r3
 80045ca:	3b01      	subs	r3, #1
 80045cc:	617b      	str	r3, [r7, #20]
    if (Avail >= NumBytes) {
 80045ce:	697a      	ldr	r2, [r7, #20]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	429a      	cmp	r2, r3
 80045d4:	d30f      	bcc.n	80045f6 <SEGGER_RTT_WriteSkipNoLock+0x112>
      while (NumBytes--) {
        *pDst++ = *pData++;
      };
      pRing->WrOff = WrOff;
#else
      SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 80045d6:	6a3b      	ldr	r3, [r7, #32]
 80045d8:	685a      	ldr	r2, [r3, #4]
 80045da:	69bb      	ldr	r3, [r7, #24]
 80045dc:	4413      	add	r3, r2
 80045de:	687a      	ldr	r2, [r7, #4]
 80045e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80045e2:	4618      	mov	r0, r3
 80045e4:	f001 fb00 	bl	8005be8 <memcpy>
      pRing->WrOff = WrOff + NumBytes;
 80045e8:	69ba      	ldr	r2, [r7, #24]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	441a      	add	r2, r3
 80045ee:	6a3b      	ldr	r3, [r7, #32]
 80045f0:	60da      	str	r2, [r3, #12]
#endif
      return 1;
 80045f2:	2301      	movs	r3, #1
 80045f4:	e000      	b.n	80045f8 <SEGGER_RTT_WriteSkipNoLock+0x114>
    }
  }
  //
  // If we reach this point no data has been written
  //
  return 0;
 80045f6:	2300      	movs	r3, #0
}
 80045f8:	4618      	mov	r0, r3
 80045fa:	3728      	adds	r7, #40	; 0x28
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd80      	pop	{r7, pc}
 8004600:	20004a2c 	.word	0x20004a2c

08004604 <SEGGER_RTT_ConfigUpBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigUpBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004604:	b580      	push	{r7, lr}
 8004606:	b086      	sub	sp, #24
 8004608:	af00      	add	r7, sp, #0
 800460a:	60f8      	str	r0, [r7, #12]
 800460c:	60b9      	str	r1, [r7, #8]
 800460e:	607a      	str	r2, [r7, #4]
 8004610:	603b      	str	r3, [r7, #0]
  int r;

  INIT();
 8004612:	4b30      	ldr	r3, [pc, #192]	; (80046d4 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8004614:	781b      	ldrb	r3, [r3, #0]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d101      	bne.n	800461e <SEGGER_RTT_ConfigUpBuffer+0x1a>
 800461a:	f7ff fe8f 	bl	800433c <_DoInit>
  if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumUpBuffers) {
 800461e:	4b2d      	ldr	r3, [pc, #180]	; (80046d4 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8004620:	691b      	ldr	r3, [r3, #16]
 8004622:	461a      	mov	r2, r3
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	4293      	cmp	r3, r2
 8004628:	d24c      	bcs.n	80046c4 <SEGGER_RTT_ConfigUpBuffer+0xc0>
    SEGGER_RTT_LOCK();
 800462a:	f3ef 8311 	mrs	r3, BASEPRI
 800462e:	f04f 0120 	mov.w	r1, #32
 8004632:	f381 8811 	msr	BASEPRI, r1
 8004636:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d032      	beq.n	80046a4 <SEGGER_RTT_ConfigUpBuffer+0xa0>
      _SEGGER_RTT.aUp[BufferIndex].sName        = sName;
 800463e:	4925      	ldr	r1, [pc, #148]	; (80046d4 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	1c5a      	adds	r2, r3, #1
 8004644:	4613      	mov	r3, r2
 8004646:	005b      	lsls	r3, r3, #1
 8004648:	4413      	add	r3, r2
 800464a:	00db      	lsls	r3, r3, #3
 800464c:	440b      	add	r3, r1
 800464e:	68ba      	ldr	r2, [r7, #8]
 8004650:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8004652:	4920      	ldr	r1, [pc, #128]	; (80046d4 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	1c5a      	adds	r2, r3, #1
 8004658:	4613      	mov	r3, r2
 800465a:	005b      	lsls	r3, r3, #1
 800465c:	4413      	add	r3, r2
 800465e:	00db      	lsls	r3, r3, #3
 8004660:	440b      	add	r3, r1
 8004662:	3304      	adds	r3, #4
 8004664:	687a      	ldr	r2, [r7, #4]
 8004666:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8004668:	491a      	ldr	r1, [pc, #104]	; (80046d4 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 800466a:	68fa      	ldr	r2, [r7, #12]
 800466c:	4613      	mov	r3, r2
 800466e:	005b      	lsls	r3, r3, #1
 8004670:	4413      	add	r3, r2
 8004672:	00db      	lsls	r3, r3, #3
 8004674:	440b      	add	r3, r1
 8004676:	3320      	adds	r3, #32
 8004678:	683a      	ldr	r2, [r7, #0]
 800467a:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].RdOff        = 0u;
 800467c:	4915      	ldr	r1, [pc, #84]	; (80046d4 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 800467e:	68fa      	ldr	r2, [r7, #12]
 8004680:	4613      	mov	r3, r2
 8004682:	005b      	lsls	r3, r3, #1
 8004684:	4413      	add	r3, r2
 8004686:	00db      	lsls	r3, r3, #3
 8004688:	440b      	add	r3, r1
 800468a:	3328      	adds	r3, #40	; 0x28
 800468c:	2200      	movs	r2, #0
 800468e:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].WrOff        = 0u;
 8004690:	4910      	ldr	r1, [pc, #64]	; (80046d4 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8004692:	68fa      	ldr	r2, [r7, #12]
 8004694:	4613      	mov	r3, r2
 8004696:	005b      	lsls	r3, r3, #1
 8004698:	4413      	add	r3, r2
 800469a:	00db      	lsls	r3, r3, #3
 800469c:	440b      	add	r3, r1
 800469e:	3324      	adds	r3, #36	; 0x24
 80046a0:	2200      	movs	r2, #0
 80046a2:	601a      	str	r2, [r3, #0]
    }
    _SEGGER_RTT.aUp[BufferIndex].Flags          = Flags;
 80046a4:	490b      	ldr	r1, [pc, #44]	; (80046d4 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 80046a6:	68fa      	ldr	r2, [r7, #12]
 80046a8:	4613      	mov	r3, r2
 80046aa:	005b      	lsls	r3, r3, #1
 80046ac:	4413      	add	r3, r2
 80046ae:	00db      	lsls	r3, r3, #3
 80046b0:	440b      	add	r3, r1
 80046b2:	332c      	adds	r3, #44	; 0x2c
 80046b4:	6a3a      	ldr	r2, [r7, #32]
 80046b6:	601a      	str	r2, [r3, #0]
    SEGGER_RTT_UNLOCK();
 80046b8:	693b      	ldr	r3, [r7, #16]
 80046ba:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 80046be:	2300      	movs	r3, #0
 80046c0:	617b      	str	r3, [r7, #20]
 80046c2:	e002      	b.n	80046ca <SEGGER_RTT_ConfigUpBuffer+0xc6>
  } else {
    r = -1;
 80046c4:	f04f 33ff 	mov.w	r3, #4294967295
 80046c8:	617b      	str	r3, [r7, #20]
  }
  return r;
 80046ca:	697b      	ldr	r3, [r7, #20]
}
 80046cc:	4618      	mov	r0, r3
 80046ce:	3718      	adds	r7, #24
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bd80      	pop	{r7, pc}
 80046d4:	20004a2c 	.word	0x20004a2c

080046d8 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80046d8:	b580      	push	{r7, lr}
 80046da:	b086      	sub	sp, #24
 80046dc:	af00      	add	r7, sp, #0
 80046de:	60f8      	str	r0, [r7, #12]
 80046e0:	60b9      	str	r1, [r7, #8]
 80046e2:	607a      	str	r2, [r7, #4]
 80046e4:	603b      	str	r3, [r7, #0]
  int r;

  INIT();
 80046e6:	4b30      	ldr	r3, [pc, #192]	; (80047a8 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 80046e8:	781b      	ldrb	r3, [r3, #0]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d101      	bne.n	80046f2 <SEGGER_RTT_ConfigDownBuffer+0x1a>
 80046ee:	f7ff fe25 	bl	800433c <_DoInit>
  if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumDownBuffers) {
 80046f2:	4b2d      	ldr	r3, [pc, #180]	; (80047a8 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 80046f4:	695b      	ldr	r3, [r3, #20]
 80046f6:	461a      	mov	r2, r3
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d24b      	bcs.n	8004796 <SEGGER_RTT_ConfigDownBuffer+0xbe>
    SEGGER_RTT_LOCK();
 80046fe:	f3ef 8311 	mrs	r3, BASEPRI
 8004702:	f04f 0120 	mov.w	r1, #32
 8004706:	f381 8811 	msr	BASEPRI, r1
 800470a:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d031      	beq.n	8004776 <SEGGER_RTT_ConfigDownBuffer+0x9e>
      _SEGGER_RTT.aDown[BufferIndex].sName        = sName;
 8004712:	4925      	ldr	r1, [pc, #148]	; (80047a8 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8004714:	68fa      	ldr	r2, [r7, #12]
 8004716:	4613      	mov	r3, r2
 8004718:	005b      	lsls	r3, r3, #1
 800471a:	4413      	add	r3, r2
 800471c:	00db      	lsls	r3, r3, #3
 800471e:	440b      	add	r3, r1
 8004720:	3360      	adds	r3, #96	; 0x60
 8004722:	68ba      	ldr	r2, [r7, #8]
 8004724:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8004726:	4920      	ldr	r1, [pc, #128]	; (80047a8 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8004728:	68fa      	ldr	r2, [r7, #12]
 800472a:	4613      	mov	r3, r2
 800472c:	005b      	lsls	r3, r3, #1
 800472e:	4413      	add	r3, r2
 8004730:	00db      	lsls	r3, r3, #3
 8004732:	440b      	add	r3, r1
 8004734:	3364      	adds	r3, #100	; 0x64
 8004736:	687a      	ldr	r2, [r7, #4]
 8004738:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].SizeOfBuffer = BufferSize;
 800473a:	491b      	ldr	r1, [pc, #108]	; (80047a8 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 800473c:	68fa      	ldr	r2, [r7, #12]
 800473e:	4613      	mov	r3, r2
 8004740:	005b      	lsls	r3, r3, #1
 8004742:	4413      	add	r3, r2
 8004744:	00db      	lsls	r3, r3, #3
 8004746:	440b      	add	r3, r1
 8004748:	3368      	adds	r3, #104	; 0x68
 800474a:	683a      	ldr	r2, [r7, #0]
 800474c:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].RdOff        = 0u;
 800474e:	4916      	ldr	r1, [pc, #88]	; (80047a8 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8004750:	68fa      	ldr	r2, [r7, #12]
 8004752:	4613      	mov	r3, r2
 8004754:	005b      	lsls	r3, r3, #1
 8004756:	4413      	add	r3, r2
 8004758:	00db      	lsls	r3, r3, #3
 800475a:	440b      	add	r3, r1
 800475c:	3370      	adds	r3, #112	; 0x70
 800475e:	2200      	movs	r2, #0
 8004760:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].WrOff        = 0u;
 8004762:	4911      	ldr	r1, [pc, #68]	; (80047a8 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8004764:	68fa      	ldr	r2, [r7, #12]
 8004766:	4613      	mov	r3, r2
 8004768:	005b      	lsls	r3, r3, #1
 800476a:	4413      	add	r3, r2
 800476c:	00db      	lsls	r3, r3, #3
 800476e:	440b      	add	r3, r1
 8004770:	336c      	adds	r3, #108	; 0x6c
 8004772:	2200      	movs	r2, #0
 8004774:	601a      	str	r2, [r3, #0]
    }
    _SEGGER_RTT.aDown[BufferIndex].Flags          = Flags;
 8004776:	490c      	ldr	r1, [pc, #48]	; (80047a8 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8004778:	68fa      	ldr	r2, [r7, #12]
 800477a:	4613      	mov	r3, r2
 800477c:	005b      	lsls	r3, r3, #1
 800477e:	4413      	add	r3, r2
 8004780:	00db      	lsls	r3, r3, #3
 8004782:	440b      	add	r3, r1
 8004784:	3374      	adds	r3, #116	; 0x74
 8004786:	6a3a      	ldr	r2, [r7, #32]
 8004788:	601a      	str	r2, [r3, #0]
    SEGGER_RTT_UNLOCK();
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8004790:	2300      	movs	r3, #0
 8004792:	617b      	str	r3, [r7, #20]
 8004794:	e002      	b.n	800479c <SEGGER_RTT_ConfigDownBuffer+0xc4>
  } else {
    r = -1;
 8004796:	f04f 33ff 	mov.w	r3, #4294967295
 800479a:	617b      	str	r3, [r7, #20]
  }
  return r;
 800479c:	697b      	ldr	r3, [r7, #20]
}
 800479e:	4618      	mov	r0, r3
 80047a0:	3718      	adds	r7, #24
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}
 80047a6:	bf00      	nop
 80047a8:	20004a2c 	.word	0x20004a2c

080047ac <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 80047ac:	b480      	push	{r7}
 80047ae:	b087      	sub	sp, #28
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	60f8      	str	r0, [r7, #12]
 80047b4:	60b9      	str	r1, [r7, #8]
 80047b6:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 80047b8:	2300      	movs	r3, #0
 80047ba:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 80047bc:	e002      	b.n	80047c4 <_EncodeStr+0x18>
    Len++;
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	3301      	adds	r3, #1
 80047c2:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 80047c4:	68ba      	ldr	r2, [r7, #8]
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	4413      	add	r3, r2
 80047ca:	781b      	ldrb	r3, [r3, #0]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d1f6      	bne.n	80047be <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 80047d0:	693a      	ldr	r2, [r7, #16]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	429a      	cmp	r2, r3
 80047d6:	d901      	bls.n	80047dc <_EncodeStr+0x30>
    Len = Limit;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 80047dc:	693b      	ldr	r3, [r7, #16]
 80047de:	2bfe      	cmp	r3, #254	; 0xfe
 80047e0:	d806      	bhi.n	80047f0 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	1c5a      	adds	r2, r3, #1
 80047e6:	60fa      	str	r2, [r7, #12]
 80047e8:	693a      	ldr	r2, [r7, #16]
 80047ea:	b2d2      	uxtb	r2, r2
 80047ec:	701a      	strb	r2, [r3, #0]
 80047ee:	e011      	b.n	8004814 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	1c5a      	adds	r2, r3, #1
 80047f4:	60fa      	str	r2, [r7, #12]
 80047f6:	22ff      	movs	r2, #255	; 0xff
 80047f8:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	1c5a      	adds	r2, r3, #1
 80047fe:	60fa      	str	r2, [r7, #12]
 8004800:	693a      	ldr	r2, [r7, #16]
 8004802:	b2d2      	uxtb	r2, r2
 8004804:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	0a19      	lsrs	r1, r3, #8
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	1c5a      	adds	r2, r3, #1
 800480e:	60fa      	str	r2, [r7, #12]
 8004810:	b2ca      	uxtb	r2, r1
 8004812:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8004814:	2300      	movs	r3, #0
 8004816:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8004818:	e00a      	b.n	8004830 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 800481a:	68ba      	ldr	r2, [r7, #8]
 800481c:	1c53      	adds	r3, r2, #1
 800481e:	60bb      	str	r3, [r7, #8]
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	1c59      	adds	r1, r3, #1
 8004824:	60f9      	str	r1, [r7, #12]
 8004826:	7812      	ldrb	r2, [r2, #0]
 8004828:	701a      	strb	r2, [r3, #0]
    n++;
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	3301      	adds	r3, #1
 800482e:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8004830:	697a      	ldr	r2, [r7, #20]
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	429a      	cmp	r2, r3
 8004836:	d3f0      	bcc.n	800481a <_EncodeStr+0x6e>
  }
  return pPayload;
 8004838:	68fb      	ldr	r3, [r7, #12]
}
 800483a:	4618      	mov	r0, r3
 800483c:	371c      	adds	r7, #28
 800483e:	46bd      	mov	sp, r7
 8004840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004844:	4770      	bx	lr

08004846 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8004846:	b480      	push	{r7}
 8004848:	b083      	sub	sp, #12
 800484a:	af00      	add	r7, sp, #0
 800484c:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	3304      	adds	r3, #4
}
 8004852:	4618      	mov	r0, r3
 8004854:	370c      	adds	r7, #12
 8004856:	46bd      	mov	sp, r7
 8004858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485c:	4770      	bx	lr
	...

08004860 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8004860:	b580      	push	{r7, lr}
 8004862:	b082      	sub	sp, #8
 8004864:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004866:	1cfb      	adds	r3, r7, #3
 8004868:	2201      	movs	r2, #1
 800486a:	4619      	mov	r1, r3
 800486c:	2001      	movs	r0, #1
 800486e:	f7ff fdb7 	bl	80043e0 <SEGGER_RTT_ReadNoLock>
 8004872:	4603      	mov	r3, r0
 8004874:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2b00      	cmp	r3, #0
 800487a:	dd4f      	ble.n	800491c <_HandleIncomingPacket+0xbc>
    switch (Cmd) {
 800487c:	78fb      	ldrb	r3, [r7, #3]
 800487e:	2b07      	cmp	r3, #7
 8004880:	dc16      	bgt.n	80048b0 <_HandleIncomingPacket+0x50>
 8004882:	2b00      	cmp	r3, #0
 8004884:	dd3c      	ble.n	8004900 <_HandleIncomingPacket+0xa0>
 8004886:	3b01      	subs	r3, #1
 8004888:	2b06      	cmp	r3, #6
 800488a:	d839      	bhi.n	8004900 <_HandleIncomingPacket+0xa0>
 800488c:	a201      	add	r2, pc, #4	; (adr r2, 8004894 <_HandleIncomingPacket+0x34>)
 800488e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004892:	bf00      	nop
 8004894:	080048b7 	.word	0x080048b7
 8004898:	080048bd 	.word	0x080048bd
 800489c:	080048c3 	.word	0x080048c3
 80048a0:	080048c9 	.word	0x080048c9
 80048a4:	080048cf 	.word	0x080048cf
 80048a8:	080048d5 	.word	0x080048d5
 80048ac:	080048db 	.word	0x080048db
 80048b0:	2b80      	cmp	r3, #128	; 0x80
 80048b2:	d015      	beq.n	80048e0 <_HandleIncomingPacket+0x80>
 80048b4:	e024      	b.n	8004900 <_HandleIncomingPacket+0xa0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80048b6:	f000 fb83 	bl	8004fc0 <SEGGER_SYSVIEW_Start>
      break;
 80048ba:	e02f      	b.n	800491c <_HandleIncomingPacket+0xbc>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 80048bc:	f000 fc3c 	bl	8005138 <SEGGER_SYSVIEW_Stop>
      break;
 80048c0:	e02c      	b.n	800491c <_HandleIncomingPacket+0xbc>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 80048c2:	f000 fe17 	bl	80054f4 <SEGGER_SYSVIEW_RecordSystime>
      break;
 80048c6:	e029      	b.n	800491c <_HandleIncomingPacket+0xbc>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 80048c8:	f000 fddc 	bl	8005484 <SEGGER_SYSVIEW_SendTaskList>
      break;
 80048cc:	e026      	b.n	800491c <_HandleIncomingPacket+0xbc>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 80048ce:	f000 fc59 	bl	8005184 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 80048d2:	e023      	b.n	800491c <_HandleIncomingPacket+0xbc>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 80048d4:	f001 f8b2 	bl	8005a3c <SEGGER_SYSVIEW_SendNumModules>
      break;
 80048d8:	e020      	b.n	800491c <_HandleIncomingPacket+0xbc>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 80048da:	f001 f891 	bl	8005a00 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 80048de:	e01d      	b.n	800491c <_HandleIncomingPacket+0xbc>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80048e0:	1cfb      	adds	r3, r7, #3
 80048e2:	2201      	movs	r2, #1
 80048e4:	4619      	mov	r1, r3
 80048e6:	2001      	movs	r0, #1
 80048e8:	f7ff fd7a 	bl	80043e0 <SEGGER_RTT_ReadNoLock>
 80048ec:	4603      	mov	r3, r0
 80048ee:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	dd0f      	ble.n	8004916 <_HandleIncomingPacket+0xb6>
        SEGGER_SYSVIEW_SendModule(Cmd);
 80048f6:	78fb      	ldrb	r3, [r7, #3]
 80048f8:	4618      	mov	r0, r3
 80048fa:	f001 f801 	bl	8005900 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 80048fe:	e00a      	b.n	8004916 <_HandleIncomingPacket+0xb6>
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8004900:	78fb      	ldrb	r3, [r7, #3]
 8004902:	b25b      	sxtb	r3, r3
 8004904:	2b00      	cmp	r3, #0
 8004906:	da08      	bge.n	800491a <_HandleIncomingPacket+0xba>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004908:	1cfb      	adds	r3, r7, #3
 800490a:	2201      	movs	r2, #1
 800490c:	4619      	mov	r1, r3
 800490e:	2001      	movs	r0, #1
 8004910:	f7ff fd66 	bl	80043e0 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8004914:	e001      	b.n	800491a <_HandleIncomingPacket+0xba>
      break;
 8004916:	bf00      	nop
 8004918:	e000      	b.n	800491c <_HandleIncomingPacket+0xbc>
      break;
 800491a:	bf00      	nop
    }
  }
}
 800491c:	bf00      	nop
 800491e:	3708      	adds	r7, #8
 8004920:	46bd      	mov	sp, r7
 8004922:	bd80      	pop	{r7, pc}

08004924 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8004924:	b580      	push	{r7, lr}
 8004926:	b08c      	sub	sp, #48	; 0x30
 8004928:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800492a:	2301      	movs	r3, #1
 800492c:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800492e:	1d3b      	adds	r3, r7, #4
 8004930:	3301      	adds	r3, #1
 8004932:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8004934:	69fb      	ldr	r3, [r7, #28]
 8004936:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004938:	4b30      	ldr	r3, [pc, #192]	; (80049fc <_TrySendOverflowPacket+0xd8>)
 800493a:	695b      	ldr	r3, [r3, #20]
 800493c:	62bb      	str	r3, [r7, #40]	; 0x28
 800493e:	e00b      	b.n	8004958 <_TrySendOverflowPacket+0x34>
 8004940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004942:	b2da      	uxtb	r2, r3
 8004944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004946:	1c59      	adds	r1, r3, #1
 8004948:	62f9      	str	r1, [r7, #44]	; 0x2c
 800494a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800494e:	b2d2      	uxtb	r2, r2
 8004950:	701a      	strb	r2, [r3, #0]
 8004952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004954:	09db      	lsrs	r3, r3, #7
 8004956:	62bb      	str	r3, [r7, #40]	; 0x28
 8004958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800495a:	2b7f      	cmp	r3, #127	; 0x7f
 800495c:	d8f0      	bhi.n	8004940 <_TrySendOverflowPacket+0x1c>
 800495e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004960:	1c5a      	adds	r2, r3, #1
 8004962:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004964:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004966:	b2d2      	uxtb	r2, r2
 8004968:	701a      	strb	r2, [r3, #0]
 800496a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800496c:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800496e:	4b24      	ldr	r3, [pc, #144]	; (8004a00 <_TrySendOverflowPacket+0xdc>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004974:	4b21      	ldr	r3, [pc, #132]	; (80049fc <_TrySendOverflowPacket+0xd8>)
 8004976:	68db      	ldr	r3, [r3, #12]
 8004978:	69ba      	ldr	r2, [r7, #24]
 800497a:	1ad3      	subs	r3, r2, r3
 800497c:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800497e:	69fb      	ldr	r3, [r7, #28]
 8004980:	627b      	str	r3, [r7, #36]	; 0x24
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	623b      	str	r3, [r7, #32]
 8004986:	e00b      	b.n	80049a0 <_TrySendOverflowPacket+0x7c>
 8004988:	6a3b      	ldr	r3, [r7, #32]
 800498a:	b2da      	uxtb	r2, r3
 800498c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800498e:	1c59      	adds	r1, r3, #1
 8004990:	6279      	str	r1, [r7, #36]	; 0x24
 8004992:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004996:	b2d2      	uxtb	r2, r2
 8004998:	701a      	strb	r2, [r3, #0]
 800499a:	6a3b      	ldr	r3, [r7, #32]
 800499c:	09db      	lsrs	r3, r3, #7
 800499e:	623b      	str	r3, [r7, #32]
 80049a0:	6a3b      	ldr	r3, [r7, #32]
 80049a2:	2b7f      	cmp	r3, #127	; 0x7f
 80049a4:	d8f0      	bhi.n	8004988 <_TrySendOverflowPacket+0x64>
 80049a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a8:	1c5a      	adds	r2, r3, #1
 80049aa:	627a      	str	r2, [r7, #36]	; 0x24
 80049ac:	6a3a      	ldr	r2, [r7, #32]
 80049ae:	b2d2      	uxtb	r2, r2
 80049b0:	701a      	strb	r2, [r3, #0]
 80049b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b4:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 80049b6:	1d3b      	adds	r3, r7, #4
 80049b8:	69fa      	ldr	r2, [r7, #28]
 80049ba:	1ad3      	subs	r3, r2, r3
 80049bc:	461a      	mov	r2, r3
 80049be:	1d3b      	adds	r3, r7, #4
 80049c0:	4619      	mov	r1, r3
 80049c2:	2001      	movs	r0, #1
 80049c4:	f7ff fd8e 	bl	80044e4 <SEGGER_RTT_WriteSkipNoLock>
 80049c8:	4603      	mov	r3, r0
 80049ca:	613b      	str	r3, [r7, #16]
  if (Status) {
 80049cc:	693b      	ldr	r3, [r7, #16]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d009      	beq.n	80049e6 <_TrySendOverflowPacket+0xc2>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80049d2:	4a0a      	ldr	r2, [pc, #40]	; (80049fc <_TrySendOverflowPacket+0xd8>)
 80049d4:	69bb      	ldr	r3, [r7, #24]
 80049d6:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 80049d8:	4b08      	ldr	r3, [pc, #32]	; (80049fc <_TrySendOverflowPacket+0xd8>)
 80049da:	781b      	ldrb	r3, [r3, #0]
 80049dc:	3b01      	subs	r3, #1
 80049de:	b2da      	uxtb	r2, r3
 80049e0:	4b06      	ldr	r3, [pc, #24]	; (80049fc <_TrySendOverflowPacket+0xd8>)
 80049e2:	701a      	strb	r2, [r3, #0]
 80049e4:	e004      	b.n	80049f0 <_TrySendOverflowPacket+0xcc>
  } else {
    _SYSVIEW_Globals.DropCount++;
 80049e6:	4b05      	ldr	r3, [pc, #20]	; (80049fc <_TrySendOverflowPacket+0xd8>)
 80049e8:	695b      	ldr	r3, [r3, #20]
 80049ea:	3301      	adds	r3, #1
 80049ec:	4a03      	ldr	r2, [pc, #12]	; (80049fc <_TrySendOverflowPacket+0xd8>)
 80049ee:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 80049f0:	693b      	ldr	r3, [r7, #16]
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	3730      	adds	r7, #48	; 0x30
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}
 80049fa:	bf00      	nop
 80049fc:	20006eec 	.word	0x20006eec
 8004a00:	e0001004 	.word	0xe0001004

08004a04 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b08a      	sub	sp, #40	; 0x28
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	60f8      	str	r0, [r7, #12]
 8004a0c:	60b9      	str	r1, [r7, #8]
 8004a0e:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8004a10:	4b63      	ldr	r3, [pc, #396]	; (8004ba0 <_SendPacket+0x19c>)
 8004a12:	781b      	ldrb	r3, [r3, #0]
 8004a14:	2b01      	cmp	r3, #1
 8004a16:	d010      	beq.n	8004a3a <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8004a18:	4b61      	ldr	r3, [pc, #388]	; (8004ba0 <_SendPacket+0x19c>)
 8004a1a:	781b      	ldrb	r3, [r3, #0]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	f000 80a1 	beq.w	8004b64 <_SendPacket+0x160>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8004a22:	4b5f      	ldr	r3, [pc, #380]	; (8004ba0 <_SendPacket+0x19c>)
 8004a24:	781b      	ldrb	r3, [r3, #0]
 8004a26:	2b02      	cmp	r3, #2
 8004a28:	d109      	bne.n	8004a3e <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8004a2a:	f7ff ff7b 	bl	8004924 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8004a2e:	4b5c      	ldr	r3, [pc, #368]	; (8004ba0 <_SendPacket+0x19c>)
 8004a30:	781b      	ldrb	r3, [r3, #0]
 8004a32:	2b01      	cmp	r3, #1
 8004a34:	f040 8098 	bne.w	8004b68 <_SendPacket+0x164>
      goto SendDone;
    }
  }
Send:
 8004a38:	e001      	b.n	8004a3e <_SendPacket+0x3a>
    goto Send;
 8004a3a:	bf00      	nop
 8004a3c:	e000      	b.n	8004a40 <_SendPacket+0x3c>
Send:
 8004a3e:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2b1f      	cmp	r3, #31
 8004a44:	d809      	bhi.n	8004a5a <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8004a46:	4b56      	ldr	r3, [pc, #344]	; (8004ba0 <_SendPacket+0x19c>)
 8004a48:	69da      	ldr	r2, [r3, #28]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	fa22 f303 	lsr.w	r3, r2, r3
 8004a50:	f003 0301 	and.w	r3, r3, #1
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	f040 8089 	bne.w	8004b6c <_SendPacket+0x168>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2b17      	cmp	r3, #23
 8004a5e:	d807      	bhi.n	8004a70 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	3b01      	subs	r3, #1
 8004a64:	60fb      	str	r3, [r7, #12]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	b2da      	uxtb	r2, r3
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	701a      	strb	r2, [r3, #0]
 8004a6e:	e03d      	b.n	8004aec <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8004a70:	68ba      	ldr	r2, [r7, #8]
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	1ad3      	subs	r3, r2, r3
 8004a76:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8004a78:	69fb      	ldr	r3, [r7, #28]
 8004a7a:	2b7f      	cmp	r3, #127	; 0x7f
 8004a7c:	d912      	bls.n	8004aa4 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8004a7e:	69fb      	ldr	r3, [r7, #28]
 8004a80:	09da      	lsrs	r2, r3, #7
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	3b01      	subs	r3, #1
 8004a86:	60fb      	str	r3, [r7, #12]
 8004a88:	b2d2      	uxtb	r2, r2
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8004a8e:	69fb      	ldr	r3, [r7, #28]
 8004a90:	b2db      	uxtb	r3, r3
 8004a92:	68fa      	ldr	r2, [r7, #12]
 8004a94:	3a01      	subs	r2, #1
 8004a96:	60fa      	str	r2, [r7, #12]
 8004a98:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004a9c:	b2da      	uxtb	r2, r3
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	701a      	strb	r2, [r3, #0]
 8004aa2:	e006      	b.n	8004ab2 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	3b01      	subs	r3, #1
 8004aa8:	60fb      	str	r3, [r7, #12]
 8004aaa:	69fb      	ldr	r3, [r7, #28]
 8004aac:	b2da      	uxtb	r2, r3
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2b7f      	cmp	r3, #127	; 0x7f
 8004ab6:	d912      	bls.n	8004ade <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	09da      	lsrs	r2, r3, #7
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	3b01      	subs	r3, #1
 8004ac0:	60fb      	str	r3, [r7, #12]
 8004ac2:	b2d2      	uxtb	r2, r2
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	b2db      	uxtb	r3, r3
 8004acc:	68fa      	ldr	r2, [r7, #12]
 8004ace:	3a01      	subs	r2, #1
 8004ad0:	60fa      	str	r2, [r7, #12]
 8004ad2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004ad6:	b2da      	uxtb	r2, r3
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	701a      	strb	r2, [r3, #0]
 8004adc:	e006      	b.n	8004aec <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	3b01      	subs	r3, #1
 8004ae2:	60fb      	str	r3, [r7, #12]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	b2da      	uxtb	r2, r3
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004aec:	4b2d      	ldr	r3, [pc, #180]	; (8004ba4 <_SendPacket+0x1a0>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004af2:	4b2b      	ldr	r3, [pc, #172]	; (8004ba0 <_SendPacket+0x19c>)
 8004af4:	68db      	ldr	r3, [r3, #12]
 8004af6:	69ba      	ldr	r2, [r7, #24]
 8004af8:	1ad3      	subs	r3, r2, r3
 8004afa:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	627b      	str	r3, [r7, #36]	; 0x24
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	623b      	str	r3, [r7, #32]
 8004b04:	e00b      	b.n	8004b1e <_SendPacket+0x11a>
 8004b06:	6a3b      	ldr	r3, [r7, #32]
 8004b08:	b2da      	uxtb	r2, r3
 8004b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b0c:	1c59      	adds	r1, r3, #1
 8004b0e:	6279      	str	r1, [r7, #36]	; 0x24
 8004b10:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004b14:	b2d2      	uxtb	r2, r2
 8004b16:	701a      	strb	r2, [r3, #0]
 8004b18:	6a3b      	ldr	r3, [r7, #32]
 8004b1a:	09db      	lsrs	r3, r3, #7
 8004b1c:	623b      	str	r3, [r7, #32]
 8004b1e:	6a3b      	ldr	r3, [r7, #32]
 8004b20:	2b7f      	cmp	r3, #127	; 0x7f
 8004b22:	d8f0      	bhi.n	8004b06 <_SendPacket+0x102>
 8004b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b26:	1c5a      	adds	r2, r3, #1
 8004b28:	627a      	str	r2, [r7, #36]	; 0x24
 8004b2a:	6a3a      	ldr	r2, [r7, #32]
 8004b2c:	b2d2      	uxtb	r2, r2
 8004b2e:	701a      	strb	r2, [r3, #0]
 8004b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b32:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8004b34:	68ba      	ldr	r2, [r7, #8]
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	1ad3      	subs	r3, r2, r3
 8004b3a:	461a      	mov	r2, r3
 8004b3c:	68f9      	ldr	r1, [r7, #12]
 8004b3e:	2001      	movs	r0, #1
 8004b40:	f7ff fcd0 	bl	80044e4 <SEGGER_RTT_WriteSkipNoLock>
 8004b44:	4603      	mov	r3, r0
 8004b46:	613b      	str	r3, [r7, #16]
  if (Status) {
 8004b48:	693b      	ldr	r3, [r7, #16]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d003      	beq.n	8004b56 <_SendPacket+0x152>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004b4e:	4a14      	ldr	r2, [pc, #80]	; (8004ba0 <_SendPacket+0x19c>)
 8004b50:	69bb      	ldr	r3, [r7, #24]
 8004b52:	60d3      	str	r3, [r2, #12]
 8004b54:	e00b      	b.n	8004b6e <_SendPacket+0x16a>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8004b56:	4b12      	ldr	r3, [pc, #72]	; (8004ba0 <_SendPacket+0x19c>)
 8004b58:	781b      	ldrb	r3, [r3, #0]
 8004b5a:	3301      	adds	r3, #1
 8004b5c:	b2da      	uxtb	r2, r3
 8004b5e:	4b10      	ldr	r3, [pc, #64]	; (8004ba0 <_SendPacket+0x19c>)
 8004b60:	701a      	strb	r2, [r3, #0]
 8004b62:	e004      	b.n	8004b6e <_SendPacket+0x16a>
    goto SendDone;
 8004b64:	bf00      	nop
 8004b66:	e002      	b.n	8004b6e <_SendPacket+0x16a>
      goto SendDone;
 8004b68:	bf00      	nop
 8004b6a:	e000      	b.n	8004b6e <_SendPacket+0x16a>
      goto SendDone;
 8004b6c:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8004b6e:	4b0e      	ldr	r3, [pc, #56]	; (8004ba8 <_SendPacket+0x1a4>)
 8004b70:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8004b74:	4b0c      	ldr	r3, [pc, #48]	; (8004ba8 <_SendPacket+0x1a4>)
 8004b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b7a:	429a      	cmp	r2, r3
 8004b7c:	d00b      	beq.n	8004b96 <_SendPacket+0x192>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8004b7e:	4b08      	ldr	r3, [pc, #32]	; (8004ba0 <_SendPacket+0x19c>)
 8004b80:	789b      	ldrb	r3, [r3, #2]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d107      	bne.n	8004b96 <_SendPacket+0x192>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8004b86:	4b06      	ldr	r3, [pc, #24]	; (8004ba0 <_SendPacket+0x19c>)
 8004b88:	2201      	movs	r2, #1
 8004b8a:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8004b8c:	f7ff fe68 	bl	8004860 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8004b90:	4b03      	ldr	r3, [pc, #12]	; (8004ba0 <_SendPacket+0x19c>)
 8004b92:	2200      	movs	r2, #0
 8004b94:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8004b96:	bf00      	nop
 8004b98:	3728      	adds	r7, #40	; 0x28
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd80      	pop	{r7, pc}
 8004b9e:	bf00      	nop
 8004ba0:	20006eec 	.word	0x20006eec
 8004ba4:	e0001004 	.word	0xe0001004
 8004ba8:	20004a2c 	.word	0x20004a2c

08004bac <SEGGER_SYSVIEW_Init>:
*    to identify the SystemView channel.
*
*  Notes
*    The channel is configured by the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b086      	sub	sp, #24
 8004bb0:	af02      	add	r7, sp, #8
 8004bb2:	60f8      	str	r0, [r7, #12]
 8004bb4:	60b9      	str	r1, [r7, #8]
 8004bb6:	607a      	str	r2, [r7, #4]
 8004bb8:	603b      	str	r3, [r7, #0]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
  _SYSVIEW_Globals.EnableState      = 0;
  _SYSVIEW_Globals.PacketCount      = 0;
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004bba:	2300      	movs	r3, #0
 8004bbc:	9300      	str	r3, [sp, #0]
 8004bbe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004bc2:	4a14      	ldr	r2, [pc, #80]	; (8004c14 <SEGGER_SYSVIEW_Init+0x68>)
 8004bc4:	4914      	ldr	r1, [pc, #80]	; (8004c18 <SEGGER_SYSVIEW_Init+0x6c>)
 8004bc6:	2001      	movs	r0, #1
 8004bc8:	f7ff fd1c 	bl	8004604 <SEGGER_RTT_ConfigUpBuffer>
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004bcc:	2300      	movs	r3, #0
 8004bce:	9300      	str	r3, [sp, #0]
 8004bd0:	2308      	movs	r3, #8
 8004bd2:	4a12      	ldr	r2, [pc, #72]	; (8004c1c <SEGGER_SYSVIEW_Init+0x70>)
 8004bd4:	4910      	ldr	r1, [pc, #64]	; (8004c18 <SEGGER_SYSVIEW_Init+0x6c>)
 8004bd6:	2001      	movs	r0, #1
 8004bd8:	f7ff fd7e 	bl	80046d8 <SEGGER_RTT_ConfigDownBuffer>
  // TODO: Use SEGGER_RTT_AllocDownBuffer when SystemViewer is able to handle another Down Channel than Up Channel.
  //
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8004bdc:	4b10      	ldr	r3, [pc, #64]	; (8004c20 <SEGGER_SYSVIEW_Init+0x74>)
 8004bde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004be2:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004be4:	4b0f      	ldr	r3, [pc, #60]	; (8004c24 <SEGGER_SYSVIEW_Init+0x78>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a0d      	ldr	r2, [pc, #52]	; (8004c20 <SEGGER_SYSVIEW_Init+0x74>)
 8004bea:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8004bec:	4a0c      	ldr	r2, [pc, #48]	; (8004c20 <SEGGER_SYSVIEW_Init+0x74>)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8004bf2:	4a0b      	ldr	r2, [pc, #44]	; (8004c20 <SEGGER_SYSVIEW_Init+0x74>)
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8004bf8:	4a09      	ldr	r2, [pc, #36]	; (8004c20 <SEGGER_SYSVIEW_Init+0x74>)
 8004bfa:	68bb      	ldr	r3, [r7, #8]
 8004bfc:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8004bfe:	4a08      	ldr	r2, [pc, #32]	; (8004c20 <SEGGER_SYSVIEW_Init+0x74>)
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8004c04:	4b06      	ldr	r3, [pc, #24]	; (8004c20 <SEGGER_SYSVIEW_Init+0x74>)
 8004c06:	2200      	movs	r2, #0
 8004c08:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8004c0a:	bf00      	nop
 8004c0c:	3710      	adds	r7, #16
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}
 8004c12:	bf00      	nop
 8004c14:	20004ee4 	.word	0x20004ee4
 8004c18:	08005cfc 	.word	0x08005cfc
 8004c1c:	20006ee4 	.word	0x20006ee4
 8004c20:	20006eec 	.word	0x20006eec
 8004c24:	e0001004 	.word	0xe0001004

08004c28 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8004c28:	b480      	push	{r7}
 8004c2a:	b083      	sub	sp, #12
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8004c30:	4a04      	ldr	r2, [pc, #16]	; (8004c44 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6113      	str	r3, [r2, #16]
}
 8004c36:	bf00      	nop
 8004c38:	370c      	adds	r7, #12
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c40:	4770      	bx	lr
 8004c42:	bf00      	nop
 8004c44:	20006eec 	.word	0x20006eec

08004c48 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b084      	sub	sp, #16
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004c50:	f3ef 8311 	mrs	r3, BASEPRI
 8004c54:	f04f 0120 	mov.w	r1, #32
 8004c58:	f381 8811 	msr	BASEPRI, r1
 8004c5c:	60fb      	str	r3, [r7, #12]
 8004c5e:	4808      	ldr	r0, [pc, #32]	; (8004c80 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8004c60:	f7ff fdf1 	bl	8004846 <_PreparePacket>
 8004c64:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8004c66:	687a      	ldr	r2, [r7, #4]
 8004c68:	68b9      	ldr	r1, [r7, #8]
 8004c6a:	68b8      	ldr	r0, [r7, #8]
 8004c6c:	f7ff feca 	bl	8004a04 <_SendPacket>
  RECORD_END();
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	f383 8811 	msr	BASEPRI, r3
}
 8004c76:	bf00      	nop
 8004c78:	3710      	adds	r7, #16
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bd80      	pop	{r7, pc}
 8004c7e:	bf00      	nop
 8004c80:	20006f1c 	.word	0x20006f1c

08004c84 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b088      	sub	sp, #32
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
 8004c8c:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004c8e:	f3ef 8311 	mrs	r3, BASEPRI
 8004c92:	f04f 0120 	mov.w	r1, #32
 8004c96:	f381 8811 	msr	BASEPRI, r1
 8004c9a:	617b      	str	r3, [r7, #20]
 8004c9c:	4816      	ldr	r0, [pc, #88]	; (8004cf8 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8004c9e:	f7ff fdd2 	bl	8004846 <_PreparePacket>
 8004ca2:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004ca4:	693b      	ldr	r3, [r7, #16]
 8004ca6:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	61fb      	str	r3, [r7, #28]
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	61bb      	str	r3, [r7, #24]
 8004cb0:	e00b      	b.n	8004cca <SEGGER_SYSVIEW_RecordU32+0x46>
 8004cb2:	69bb      	ldr	r3, [r7, #24]
 8004cb4:	b2da      	uxtb	r2, r3
 8004cb6:	69fb      	ldr	r3, [r7, #28]
 8004cb8:	1c59      	adds	r1, r3, #1
 8004cba:	61f9      	str	r1, [r7, #28]
 8004cbc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004cc0:	b2d2      	uxtb	r2, r2
 8004cc2:	701a      	strb	r2, [r3, #0]
 8004cc4:	69bb      	ldr	r3, [r7, #24]
 8004cc6:	09db      	lsrs	r3, r3, #7
 8004cc8:	61bb      	str	r3, [r7, #24]
 8004cca:	69bb      	ldr	r3, [r7, #24]
 8004ccc:	2b7f      	cmp	r3, #127	; 0x7f
 8004cce:	d8f0      	bhi.n	8004cb2 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8004cd0:	69fb      	ldr	r3, [r7, #28]
 8004cd2:	1c5a      	adds	r2, r3, #1
 8004cd4:	61fa      	str	r2, [r7, #28]
 8004cd6:	69ba      	ldr	r2, [r7, #24]
 8004cd8:	b2d2      	uxtb	r2, r2
 8004cda:	701a      	strb	r2, [r3, #0]
 8004cdc:	69fb      	ldr	r3, [r7, #28]
 8004cde:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004ce0:	687a      	ldr	r2, [r7, #4]
 8004ce2:	68f9      	ldr	r1, [r7, #12]
 8004ce4:	6938      	ldr	r0, [r7, #16]
 8004ce6:	f7ff fe8d 	bl	8004a04 <_SendPacket>
  RECORD_END();
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	f383 8811 	msr	BASEPRI, r3
}
 8004cf0:	bf00      	nop
 8004cf2:	3720      	adds	r7, #32
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bd80      	pop	{r7, pc}
 8004cf8:	20006f1c 	.word	0x20006f1c

08004cfc <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b08c      	sub	sp, #48	; 0x30
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	60f8      	str	r0, [r7, #12]
 8004d04:	60b9      	str	r1, [r7, #8]
 8004d06:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004d08:	f3ef 8311 	mrs	r3, BASEPRI
 8004d0c:	f04f 0120 	mov.w	r1, #32
 8004d10:	f381 8811 	msr	BASEPRI, r1
 8004d14:	61fb      	str	r3, [r7, #28]
 8004d16:	4825      	ldr	r0, [pc, #148]	; (8004dac <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8004d18:	f7ff fd95 	bl	8004846 <_PreparePacket>
 8004d1c:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004d1e:	69bb      	ldr	r3, [r7, #24]
 8004d20:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d2a:	e00b      	b.n	8004d44 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8004d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d2e:	b2da      	uxtb	r2, r3
 8004d30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d32:	1c59      	adds	r1, r3, #1
 8004d34:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004d36:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004d3a:	b2d2      	uxtb	r2, r2
 8004d3c:	701a      	strb	r2, [r3, #0]
 8004d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d40:	09db      	lsrs	r3, r3, #7
 8004d42:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d46:	2b7f      	cmp	r3, #127	; 0x7f
 8004d48:	d8f0      	bhi.n	8004d2c <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8004d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d4c:	1c5a      	adds	r2, r3, #1
 8004d4e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004d50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d52:	b2d2      	uxtb	r2, r2
 8004d54:	701a      	strb	r2, [r3, #0]
 8004d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d58:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	627b      	str	r3, [r7, #36]	; 0x24
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	623b      	str	r3, [r7, #32]
 8004d62:	e00b      	b.n	8004d7c <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8004d64:	6a3b      	ldr	r3, [r7, #32]
 8004d66:	b2da      	uxtb	r2, r3
 8004d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d6a:	1c59      	adds	r1, r3, #1
 8004d6c:	6279      	str	r1, [r7, #36]	; 0x24
 8004d6e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004d72:	b2d2      	uxtb	r2, r2
 8004d74:	701a      	strb	r2, [r3, #0]
 8004d76:	6a3b      	ldr	r3, [r7, #32]
 8004d78:	09db      	lsrs	r3, r3, #7
 8004d7a:	623b      	str	r3, [r7, #32]
 8004d7c:	6a3b      	ldr	r3, [r7, #32]
 8004d7e:	2b7f      	cmp	r3, #127	; 0x7f
 8004d80:	d8f0      	bhi.n	8004d64 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8004d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d84:	1c5a      	adds	r2, r3, #1
 8004d86:	627a      	str	r2, [r7, #36]	; 0x24
 8004d88:	6a3a      	ldr	r2, [r7, #32]
 8004d8a:	b2d2      	uxtb	r2, r2
 8004d8c:	701a      	strb	r2, [r3, #0]
 8004d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d90:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004d92:	68fa      	ldr	r2, [r7, #12]
 8004d94:	6979      	ldr	r1, [r7, #20]
 8004d96:	69b8      	ldr	r0, [r7, #24]
 8004d98:	f7ff fe34 	bl	8004a04 <_SendPacket>
  RECORD_END();
 8004d9c:	69fb      	ldr	r3, [r7, #28]
 8004d9e:	f383 8811 	msr	BASEPRI, r3
}
 8004da2:	bf00      	nop
 8004da4:	3730      	adds	r7, #48	; 0x30
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bd80      	pop	{r7, pc}
 8004daa:	bf00      	nop
 8004dac:	20006f1c 	.word	0x20006f1c

08004db0 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b08e      	sub	sp, #56	; 0x38
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	60f8      	str	r0, [r7, #12]
 8004db8:	60b9      	str	r1, [r7, #8]
 8004dba:	607a      	str	r2, [r7, #4]
 8004dbc:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8004dbe:	f3ef 8311 	mrs	r3, BASEPRI
 8004dc2:	f04f 0120 	mov.w	r1, #32
 8004dc6:	f381 8811 	msr	BASEPRI, r1
 8004dca:	61fb      	str	r3, [r7, #28]
 8004dcc:	4832      	ldr	r0, [pc, #200]	; (8004e98 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8004dce:	f7ff fd3a 	bl	8004846 <_PreparePacket>
 8004dd2:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004dd4:	69bb      	ldr	r3, [r7, #24]
 8004dd6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	637b      	str	r3, [r7, #52]	; 0x34
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	633b      	str	r3, [r7, #48]	; 0x30
 8004de0:	e00b      	b.n	8004dfa <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8004de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004de4:	b2da      	uxtb	r2, r3
 8004de6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004de8:	1c59      	adds	r1, r3, #1
 8004dea:	6379      	str	r1, [r7, #52]	; 0x34
 8004dec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004df0:	b2d2      	uxtb	r2, r2
 8004df2:	701a      	strb	r2, [r3, #0]
 8004df4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004df6:	09db      	lsrs	r3, r3, #7
 8004df8:	633b      	str	r3, [r7, #48]	; 0x30
 8004dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dfc:	2b7f      	cmp	r3, #127	; 0x7f
 8004dfe:	d8f0      	bhi.n	8004de2 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8004e00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e02:	1c5a      	adds	r2, r3, #1
 8004e04:	637a      	str	r2, [r7, #52]	; 0x34
 8004e06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e08:	b2d2      	uxtb	r2, r2
 8004e0a:	701a      	strb	r2, [r3, #0]
 8004e0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e0e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e18:	e00b      	b.n	8004e32 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8004e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e1c:	b2da      	uxtb	r2, r3
 8004e1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e20:	1c59      	adds	r1, r3, #1
 8004e22:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004e24:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004e28:	b2d2      	uxtb	r2, r2
 8004e2a:	701a      	strb	r2, [r3, #0]
 8004e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e2e:	09db      	lsrs	r3, r3, #7
 8004e30:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e34:	2b7f      	cmp	r3, #127	; 0x7f
 8004e36:	d8f0      	bhi.n	8004e1a <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8004e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e3a:	1c5a      	adds	r2, r3, #1
 8004e3c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004e3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e40:	b2d2      	uxtb	r2, r2
 8004e42:	701a      	strb	r2, [r3, #0]
 8004e44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e46:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8004e48:	697b      	ldr	r3, [r7, #20]
 8004e4a:	627b      	str	r3, [r7, #36]	; 0x24
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	623b      	str	r3, [r7, #32]
 8004e50:	e00b      	b.n	8004e6a <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8004e52:	6a3b      	ldr	r3, [r7, #32]
 8004e54:	b2da      	uxtb	r2, r3
 8004e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e58:	1c59      	adds	r1, r3, #1
 8004e5a:	6279      	str	r1, [r7, #36]	; 0x24
 8004e5c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004e60:	b2d2      	uxtb	r2, r2
 8004e62:	701a      	strb	r2, [r3, #0]
 8004e64:	6a3b      	ldr	r3, [r7, #32]
 8004e66:	09db      	lsrs	r3, r3, #7
 8004e68:	623b      	str	r3, [r7, #32]
 8004e6a:	6a3b      	ldr	r3, [r7, #32]
 8004e6c:	2b7f      	cmp	r3, #127	; 0x7f
 8004e6e:	d8f0      	bhi.n	8004e52 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8004e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e72:	1c5a      	adds	r2, r3, #1
 8004e74:	627a      	str	r2, [r7, #36]	; 0x24
 8004e76:	6a3a      	ldr	r2, [r7, #32]
 8004e78:	b2d2      	uxtb	r2, r2
 8004e7a:	701a      	strb	r2, [r3, #0]
 8004e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e7e:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004e80:	68fa      	ldr	r2, [r7, #12]
 8004e82:	6979      	ldr	r1, [r7, #20]
 8004e84:	69b8      	ldr	r0, [r7, #24]
 8004e86:	f7ff fdbd 	bl	8004a04 <_SendPacket>
  RECORD_END();
 8004e8a:	69fb      	ldr	r3, [r7, #28]
 8004e8c:	f383 8811 	msr	BASEPRI, r3
}
 8004e90:	bf00      	nop
 8004e92:	3738      	adds	r7, #56	; 0x38
 8004e94:	46bd      	mov	sp, r7
 8004e96:	bd80      	pop	{r7, pc}
 8004e98:	20006f1c 	.word	0x20006f1c

08004e9c <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b090      	sub	sp, #64	; 0x40
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	60f8      	str	r0, [r7, #12]
 8004ea4:	60b9      	str	r1, [r7, #8]
 8004ea6:	607a      	str	r2, [r7, #4]
 8004ea8:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004eaa:	f3ef 8311 	mrs	r3, BASEPRI
 8004eae:	f04f 0120 	mov.w	r1, #32
 8004eb2:	f381 8811 	msr	BASEPRI, r1
 8004eb6:	61fb      	str	r3, [r7, #28]
 8004eb8:	4840      	ldr	r0, [pc, #256]	; (8004fbc <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8004eba:	f7ff fcc4 	bl	8004846 <_PreparePacket>
 8004ebe:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004ec0:	69bb      	ldr	r3, [r7, #24]
 8004ec2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	63bb      	str	r3, [r7, #56]	; 0x38
 8004ecc:	e00b      	b.n	8004ee6 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8004ece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ed0:	b2da      	uxtb	r2, r3
 8004ed2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ed4:	1c59      	adds	r1, r3, #1
 8004ed6:	63f9      	str	r1, [r7, #60]	; 0x3c
 8004ed8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004edc:	b2d2      	uxtb	r2, r2
 8004ede:	701a      	strb	r2, [r3, #0]
 8004ee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ee2:	09db      	lsrs	r3, r3, #7
 8004ee4:	63bb      	str	r3, [r7, #56]	; 0x38
 8004ee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ee8:	2b7f      	cmp	r3, #127	; 0x7f
 8004eea:	d8f0      	bhi.n	8004ece <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8004eec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004eee:	1c5a      	adds	r2, r3, #1
 8004ef0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004ef2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004ef4:	b2d2      	uxtb	r2, r2
 8004ef6:	701a      	strb	r2, [r3, #0]
 8004ef8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004efa:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	637b      	str	r3, [r7, #52]	; 0x34
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	633b      	str	r3, [r7, #48]	; 0x30
 8004f04:	e00b      	b.n	8004f1e <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8004f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f08:	b2da      	uxtb	r2, r3
 8004f0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f0c:	1c59      	adds	r1, r3, #1
 8004f0e:	6379      	str	r1, [r7, #52]	; 0x34
 8004f10:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004f14:	b2d2      	uxtb	r2, r2
 8004f16:	701a      	strb	r2, [r3, #0]
 8004f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f1a:	09db      	lsrs	r3, r3, #7
 8004f1c:	633b      	str	r3, [r7, #48]	; 0x30
 8004f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f20:	2b7f      	cmp	r3, #127	; 0x7f
 8004f22:	d8f0      	bhi.n	8004f06 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8004f24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f26:	1c5a      	adds	r2, r3, #1
 8004f28:	637a      	str	r2, [r7, #52]	; 0x34
 8004f2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f2c:	b2d2      	uxtb	r2, r2
 8004f2e:	701a      	strb	r2, [r3, #0]
 8004f30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f32:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f3c:	e00b      	b.n	8004f56 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8004f3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f40:	b2da      	uxtb	r2, r3
 8004f42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f44:	1c59      	adds	r1, r3, #1
 8004f46:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004f48:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004f4c:	b2d2      	uxtb	r2, r2
 8004f4e:	701a      	strb	r2, [r3, #0]
 8004f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f52:	09db      	lsrs	r3, r3, #7
 8004f54:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f58:	2b7f      	cmp	r3, #127	; 0x7f
 8004f5a:	d8f0      	bhi.n	8004f3e <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8004f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f5e:	1c5a      	adds	r2, r3, #1
 8004f60:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004f62:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f64:	b2d2      	uxtb	r2, r2
 8004f66:	701a      	strb	r2, [r3, #0]
 8004f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f6a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	627b      	str	r3, [r7, #36]	; 0x24
 8004f70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f72:	623b      	str	r3, [r7, #32]
 8004f74:	e00b      	b.n	8004f8e <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8004f76:	6a3b      	ldr	r3, [r7, #32]
 8004f78:	b2da      	uxtb	r2, r3
 8004f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f7c:	1c59      	adds	r1, r3, #1
 8004f7e:	6279      	str	r1, [r7, #36]	; 0x24
 8004f80:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004f84:	b2d2      	uxtb	r2, r2
 8004f86:	701a      	strb	r2, [r3, #0]
 8004f88:	6a3b      	ldr	r3, [r7, #32]
 8004f8a:	09db      	lsrs	r3, r3, #7
 8004f8c:	623b      	str	r3, [r7, #32]
 8004f8e:	6a3b      	ldr	r3, [r7, #32]
 8004f90:	2b7f      	cmp	r3, #127	; 0x7f
 8004f92:	d8f0      	bhi.n	8004f76 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8004f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f96:	1c5a      	adds	r2, r3, #1
 8004f98:	627a      	str	r2, [r7, #36]	; 0x24
 8004f9a:	6a3a      	ldr	r2, [r7, #32]
 8004f9c:	b2d2      	uxtb	r2, r2
 8004f9e:	701a      	strb	r2, [r3, #0]
 8004fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa2:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004fa4:	68fa      	ldr	r2, [r7, #12]
 8004fa6:	6979      	ldr	r1, [r7, #20]
 8004fa8:	69b8      	ldr	r0, [r7, #24]
 8004faa:	f7ff fd2b 	bl	8004a04 <_SendPacket>
  RECORD_END();
 8004fae:	69fb      	ldr	r3, [r7, #28]
 8004fb0:	f383 8811 	msr	BASEPRI, r3
}
 8004fb4:	bf00      	nop
 8004fb6:	3740      	adds	r7, #64	; 0x40
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	bd80      	pop	{r7, pc}
 8004fbc:	20006f1c 	.word	0x20006f1c

08004fc0 <SEGGER_SYSVIEW_Start>:
*    system description string is sent, too.
*
*  Notes
*    SEGGER_SYSVIEW_Start and SEGGER_SYSVIEW_Stop do not nest.
*/
void SEGGER_SYSVIEW_Start(void) {
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b08c      	sub	sp, #48	; 0x30
 8004fc4:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.EnableState == 0) {
 8004fc6:	4b59      	ldr	r3, [pc, #356]	; (800512c <SEGGER_SYSVIEW_Start+0x16c>)
 8004fc8:	781b      	ldrb	r3, [r3, #0]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	f040 80aa 	bne.w	8005124 <SEGGER_SYSVIEW_Start+0x164>
    _SYSVIEW_Globals.EnableState = 1;
 8004fd0:	4b56      	ldr	r3, [pc, #344]	; (800512c <SEGGER_SYSVIEW_Start+0x16c>)
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8004fd6:	f3ef 8311 	mrs	r3, BASEPRI
 8004fda:	f04f 0120 	mov.w	r1, #32
 8004fde:	f381 8811 	msr	BASEPRI, r1
 8004fe2:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8004fe4:	220a      	movs	r2, #10
 8004fe6:	4952      	ldr	r1, [pc, #328]	; (8005130 <SEGGER_SYSVIEW_Start+0x170>)
 8004fe8:	2001      	movs	r0, #1
 8004fea:	f7ff fa7b 	bl	80044e4 <SEGGER_RTT_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8004ff4:	200a      	movs	r0, #10
 8004ff6:	f7ff fe27 	bl	8004c48 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004ffa:	f3ef 8311 	mrs	r3, BASEPRI
 8004ffe:	f04f 0120 	mov.w	r1, #32
 8005002:	f381 8811 	msr	BASEPRI, r1
 8005006:	60bb      	str	r3, [r7, #8]
 8005008:	484a      	ldr	r0, [pc, #296]	; (8005134 <SEGGER_SYSVIEW_Start+0x174>)
 800500a:	f7ff fc1c 	bl	8004846 <_PreparePacket>
 800500e:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005018:	4b44      	ldr	r3, [pc, #272]	; (800512c <SEGGER_SYSVIEW_Start+0x16c>)
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	62bb      	str	r3, [r7, #40]	; 0x28
 800501e:	e00b      	b.n	8005038 <SEGGER_SYSVIEW_Start+0x78>
 8005020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005022:	b2da      	uxtb	r2, r3
 8005024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005026:	1c59      	adds	r1, r3, #1
 8005028:	62f9      	str	r1, [r7, #44]	; 0x2c
 800502a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800502e:	b2d2      	uxtb	r2, r2
 8005030:	701a      	strb	r2, [r3, #0]
 8005032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005034:	09db      	lsrs	r3, r3, #7
 8005036:	62bb      	str	r3, [r7, #40]	; 0x28
 8005038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800503a:	2b7f      	cmp	r3, #127	; 0x7f
 800503c:	d8f0      	bhi.n	8005020 <SEGGER_SYSVIEW_Start+0x60>
 800503e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005040:	1c5a      	adds	r2, r3, #1
 8005042:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005044:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005046:	b2d2      	uxtb	r2, r2
 8005048:	701a      	strb	r2, [r3, #0]
 800504a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800504c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	627b      	str	r3, [r7, #36]	; 0x24
 8005052:	4b36      	ldr	r3, [pc, #216]	; (800512c <SEGGER_SYSVIEW_Start+0x16c>)
 8005054:	689b      	ldr	r3, [r3, #8]
 8005056:	623b      	str	r3, [r7, #32]
 8005058:	e00b      	b.n	8005072 <SEGGER_SYSVIEW_Start+0xb2>
 800505a:	6a3b      	ldr	r3, [r7, #32]
 800505c:	b2da      	uxtb	r2, r3
 800505e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005060:	1c59      	adds	r1, r3, #1
 8005062:	6279      	str	r1, [r7, #36]	; 0x24
 8005064:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005068:	b2d2      	uxtb	r2, r2
 800506a:	701a      	strb	r2, [r3, #0]
 800506c:	6a3b      	ldr	r3, [r7, #32]
 800506e:	09db      	lsrs	r3, r3, #7
 8005070:	623b      	str	r3, [r7, #32]
 8005072:	6a3b      	ldr	r3, [r7, #32]
 8005074:	2b7f      	cmp	r3, #127	; 0x7f
 8005076:	d8f0      	bhi.n	800505a <SEGGER_SYSVIEW_Start+0x9a>
 8005078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800507a:	1c5a      	adds	r2, r3, #1
 800507c:	627a      	str	r2, [r7, #36]	; 0x24
 800507e:	6a3a      	ldr	r2, [r7, #32]
 8005080:	b2d2      	uxtb	r2, r2
 8005082:	701a      	strb	r2, [r3, #0]
 8005084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005086:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	61fb      	str	r3, [r7, #28]
 800508c:	4b27      	ldr	r3, [pc, #156]	; (800512c <SEGGER_SYSVIEW_Start+0x16c>)
 800508e:	691b      	ldr	r3, [r3, #16]
 8005090:	61bb      	str	r3, [r7, #24]
 8005092:	e00b      	b.n	80050ac <SEGGER_SYSVIEW_Start+0xec>
 8005094:	69bb      	ldr	r3, [r7, #24]
 8005096:	b2da      	uxtb	r2, r3
 8005098:	69fb      	ldr	r3, [r7, #28]
 800509a:	1c59      	adds	r1, r3, #1
 800509c:	61f9      	str	r1, [r7, #28]
 800509e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80050a2:	b2d2      	uxtb	r2, r2
 80050a4:	701a      	strb	r2, [r3, #0]
 80050a6:	69bb      	ldr	r3, [r7, #24]
 80050a8:	09db      	lsrs	r3, r3, #7
 80050aa:	61bb      	str	r3, [r7, #24]
 80050ac:	69bb      	ldr	r3, [r7, #24]
 80050ae:	2b7f      	cmp	r3, #127	; 0x7f
 80050b0:	d8f0      	bhi.n	8005094 <SEGGER_SYSVIEW_Start+0xd4>
 80050b2:	69fb      	ldr	r3, [r7, #28]
 80050b4:	1c5a      	adds	r2, r3, #1
 80050b6:	61fa      	str	r2, [r7, #28]
 80050b8:	69ba      	ldr	r2, [r7, #24]
 80050ba:	b2d2      	uxtb	r2, r2
 80050bc:	701a      	strb	r2, [r3, #0]
 80050be:	69fb      	ldr	r3, [r7, #28]
 80050c0:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	617b      	str	r3, [r7, #20]
 80050c6:	2302      	movs	r3, #2
 80050c8:	613b      	str	r3, [r7, #16]
 80050ca:	e00b      	b.n	80050e4 <SEGGER_SYSVIEW_Start+0x124>
 80050cc:	693b      	ldr	r3, [r7, #16]
 80050ce:	b2da      	uxtb	r2, r3
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	1c59      	adds	r1, r3, #1
 80050d4:	6179      	str	r1, [r7, #20]
 80050d6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80050da:	b2d2      	uxtb	r2, r2
 80050dc:	701a      	strb	r2, [r3, #0]
 80050de:	693b      	ldr	r3, [r7, #16]
 80050e0:	09db      	lsrs	r3, r3, #7
 80050e2:	613b      	str	r3, [r7, #16]
 80050e4:	693b      	ldr	r3, [r7, #16]
 80050e6:	2b7f      	cmp	r3, #127	; 0x7f
 80050e8:	d8f0      	bhi.n	80050cc <SEGGER_SYSVIEW_Start+0x10c>
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	1c5a      	adds	r2, r3, #1
 80050ee:	617a      	str	r2, [r7, #20]
 80050f0:	693a      	ldr	r2, [r7, #16]
 80050f2:	b2d2      	uxtb	r2, r2
 80050f4:	701a      	strb	r2, [r3, #0]
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80050fa:	2218      	movs	r2, #24
 80050fc:	6839      	ldr	r1, [r7, #0]
 80050fe:	6878      	ldr	r0, [r7, #4]
 8005100:	f7ff fc80 	bl	8004a04 <_SendPacket>
      RECORD_END();
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 800510a:	4b08      	ldr	r3, [pc, #32]	; (800512c <SEGGER_SYSVIEW_Start+0x16c>)
 800510c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800510e:	2b00      	cmp	r3, #0
 8005110:	d002      	beq.n	8005118 <SEGGER_SYSVIEW_Start+0x158>
      _SYSVIEW_Globals.pfSendSysDesc();
 8005112:	4b06      	ldr	r3, [pc, #24]	; (800512c <SEGGER_SYSVIEW_Start+0x16c>)
 8005114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005116:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8005118:	f000 f9ec 	bl	80054f4 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800511c:	f000 f9b2 	bl	8005484 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8005120:	f000 fc8c 	bl	8005a3c <SEGGER_SYSVIEW_SendNumModules>
#endif
  }
}
 8005124:	bf00      	nop
 8005126:	3730      	adds	r7, #48	; 0x30
 8005128:	46bd      	mov	sp, r7
 800512a:	bd80      	pop	{r7, pc}
 800512c:	20006eec 	.word	0x20006eec
 8005130:	08005d64 	.word	0x08005d64
 8005134:	20006f1c 	.word	0x20006f1c

08005138 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8005138:	b580      	push	{r7, lr}
 800513a:	b082      	sub	sp, #8
 800513c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800513e:	f3ef 8311 	mrs	r3, BASEPRI
 8005142:	f04f 0120 	mov.w	r1, #32
 8005146:	f381 8811 	msr	BASEPRI, r1
 800514a:	607b      	str	r3, [r7, #4]
 800514c:	480b      	ldr	r0, [pc, #44]	; (800517c <SEGGER_SYSVIEW_Stop+0x44>)
 800514e:	f7ff fb7a 	bl	8004846 <_PreparePacket>
 8005152:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8005154:	4b0a      	ldr	r3, [pc, #40]	; (8005180 <SEGGER_SYSVIEW_Stop+0x48>)
 8005156:	781b      	ldrb	r3, [r3, #0]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d007      	beq.n	800516c <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 800515c:	220b      	movs	r2, #11
 800515e:	6839      	ldr	r1, [r7, #0]
 8005160:	6838      	ldr	r0, [r7, #0]
 8005162:	f7ff fc4f 	bl	8004a04 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8005166:	4b06      	ldr	r3, [pc, #24]	; (8005180 <SEGGER_SYSVIEW_Stop+0x48>)
 8005168:	2200      	movs	r2, #0
 800516a:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	f383 8811 	msr	BASEPRI, r3
}
 8005172:	bf00      	nop
 8005174:	3708      	adds	r7, #8
 8005176:	46bd      	mov	sp, r7
 8005178:	bd80      	pop	{r7, pc}
 800517a:	bf00      	nop
 800517c:	20006f1c 	.word	0x20006f1c
 8005180:	20006eec 	.word	0x20006eec

08005184 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8005184:	b580      	push	{r7, lr}
 8005186:	b08c      	sub	sp, #48	; 0x30
 8005188:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800518a:	f3ef 8311 	mrs	r3, BASEPRI
 800518e:	f04f 0120 	mov.w	r1, #32
 8005192:	f381 8811 	msr	BASEPRI, r1
 8005196:	60fb      	str	r3, [r7, #12]
 8005198:	4845      	ldr	r0, [pc, #276]	; (80052b0 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800519a:	f7ff fb54 	bl	8004846 <_PreparePacket>
 800519e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051a8:	4b42      	ldr	r3, [pc, #264]	; (80052b4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80051aa:	685b      	ldr	r3, [r3, #4]
 80051ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80051ae:	e00b      	b.n	80051c8 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80051b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051b2:	b2da      	uxtb	r2, r3
 80051b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051b6:	1c59      	adds	r1, r3, #1
 80051b8:	62f9      	str	r1, [r7, #44]	; 0x2c
 80051ba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80051be:	b2d2      	uxtb	r2, r2
 80051c0:	701a      	strb	r2, [r3, #0]
 80051c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051c4:	09db      	lsrs	r3, r3, #7
 80051c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80051c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ca:	2b7f      	cmp	r3, #127	; 0x7f
 80051cc:	d8f0      	bhi.n	80051b0 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 80051ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051d0:	1c5a      	adds	r2, r3, #1
 80051d2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80051d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80051d6:	b2d2      	uxtb	r2, r2
 80051d8:	701a      	strb	r2, [r3, #0]
 80051da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051dc:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	627b      	str	r3, [r7, #36]	; 0x24
 80051e2:	4b34      	ldr	r3, [pc, #208]	; (80052b4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80051e4:	689b      	ldr	r3, [r3, #8]
 80051e6:	623b      	str	r3, [r7, #32]
 80051e8:	e00b      	b.n	8005202 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 80051ea:	6a3b      	ldr	r3, [r7, #32]
 80051ec:	b2da      	uxtb	r2, r3
 80051ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f0:	1c59      	adds	r1, r3, #1
 80051f2:	6279      	str	r1, [r7, #36]	; 0x24
 80051f4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80051f8:	b2d2      	uxtb	r2, r2
 80051fa:	701a      	strb	r2, [r3, #0]
 80051fc:	6a3b      	ldr	r3, [r7, #32]
 80051fe:	09db      	lsrs	r3, r3, #7
 8005200:	623b      	str	r3, [r7, #32]
 8005202:	6a3b      	ldr	r3, [r7, #32]
 8005204:	2b7f      	cmp	r3, #127	; 0x7f
 8005206:	d8f0      	bhi.n	80051ea <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8005208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800520a:	1c5a      	adds	r2, r3, #1
 800520c:	627a      	str	r2, [r7, #36]	; 0x24
 800520e:	6a3a      	ldr	r2, [r7, #32]
 8005210:	b2d2      	uxtb	r2, r2
 8005212:	701a      	strb	r2, [r3, #0]
 8005214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005216:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	61fb      	str	r3, [r7, #28]
 800521c:	4b25      	ldr	r3, [pc, #148]	; (80052b4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800521e:	691b      	ldr	r3, [r3, #16]
 8005220:	61bb      	str	r3, [r7, #24]
 8005222:	e00b      	b.n	800523c <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8005224:	69bb      	ldr	r3, [r7, #24]
 8005226:	b2da      	uxtb	r2, r3
 8005228:	69fb      	ldr	r3, [r7, #28]
 800522a:	1c59      	adds	r1, r3, #1
 800522c:	61f9      	str	r1, [r7, #28]
 800522e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005232:	b2d2      	uxtb	r2, r2
 8005234:	701a      	strb	r2, [r3, #0]
 8005236:	69bb      	ldr	r3, [r7, #24]
 8005238:	09db      	lsrs	r3, r3, #7
 800523a:	61bb      	str	r3, [r7, #24]
 800523c:	69bb      	ldr	r3, [r7, #24]
 800523e:	2b7f      	cmp	r3, #127	; 0x7f
 8005240:	d8f0      	bhi.n	8005224 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8005242:	69fb      	ldr	r3, [r7, #28]
 8005244:	1c5a      	adds	r2, r3, #1
 8005246:	61fa      	str	r2, [r7, #28]
 8005248:	69ba      	ldr	r2, [r7, #24]
 800524a:	b2d2      	uxtb	r2, r2
 800524c:	701a      	strb	r2, [r3, #0]
 800524e:	69fb      	ldr	r3, [r7, #28]
 8005250:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	617b      	str	r3, [r7, #20]
 8005256:	2302      	movs	r3, #2
 8005258:	613b      	str	r3, [r7, #16]
 800525a:	e00b      	b.n	8005274 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 800525c:	693b      	ldr	r3, [r7, #16]
 800525e:	b2da      	uxtb	r2, r3
 8005260:	697b      	ldr	r3, [r7, #20]
 8005262:	1c59      	adds	r1, r3, #1
 8005264:	6179      	str	r1, [r7, #20]
 8005266:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800526a:	b2d2      	uxtb	r2, r2
 800526c:	701a      	strb	r2, [r3, #0]
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	09db      	lsrs	r3, r3, #7
 8005272:	613b      	str	r3, [r7, #16]
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	2b7f      	cmp	r3, #127	; 0x7f
 8005278:	d8f0      	bhi.n	800525c <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 800527a:	697b      	ldr	r3, [r7, #20]
 800527c:	1c5a      	adds	r2, r3, #1
 800527e:	617a      	str	r2, [r7, #20]
 8005280:	693a      	ldr	r2, [r7, #16]
 8005282:	b2d2      	uxtb	r2, r2
 8005284:	701a      	strb	r2, [r3, #0]
 8005286:	697b      	ldr	r3, [r7, #20]
 8005288:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800528a:	2218      	movs	r2, #24
 800528c:	6879      	ldr	r1, [r7, #4]
 800528e:	68b8      	ldr	r0, [r7, #8]
 8005290:	f7ff fbb8 	bl	8004a04 <_SendPacket>
  RECORD_END();
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800529a:	4b06      	ldr	r3, [pc, #24]	; (80052b4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800529c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d002      	beq.n	80052a8 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80052a2:	4b04      	ldr	r3, [pc, #16]	; (80052b4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80052a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052a6:	4798      	blx	r3
  }
}
 80052a8:	bf00      	nop
 80052aa:	3730      	adds	r7, #48	; 0x30
 80052ac:	46bd      	mov	sp, r7
 80052ae:	bd80      	pop	{r7, pc}
 80052b0:	20006f1c 	.word	0x20006f1c
 80052b4:	20006eec 	.word	0x20006eec

080052b8 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b092      	sub	sp, #72	; 0x48
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 80052c0:	f3ef 8311 	mrs	r3, BASEPRI
 80052c4:	f04f 0120 	mov.w	r1, #32
 80052c8:	f381 8811 	msr	BASEPRI, r1
 80052cc:	617b      	str	r3, [r7, #20]
 80052ce:	486b      	ldr	r0, [pc, #428]	; (800547c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80052d0:	f7ff fab9 	bl	8004846 <_PreparePacket>
 80052d4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80052d6:	693b      	ldr	r3, [r7, #16]
 80052d8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	647b      	str	r3, [r7, #68]	; 0x44
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681a      	ldr	r2, [r3, #0]
 80052e2:	4b67      	ldr	r3, [pc, #412]	; (8005480 <SEGGER_SYSVIEW_SendTaskInfo+0x1c8>)
 80052e4:	691b      	ldr	r3, [r3, #16]
 80052e6:	1ad3      	subs	r3, r2, r3
 80052e8:	089b      	lsrs	r3, r3, #2
 80052ea:	643b      	str	r3, [r7, #64]	; 0x40
 80052ec:	e00b      	b.n	8005306 <SEGGER_SYSVIEW_SendTaskInfo+0x4e>
 80052ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052f0:	b2da      	uxtb	r2, r3
 80052f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052f4:	1c59      	adds	r1, r3, #1
 80052f6:	6479      	str	r1, [r7, #68]	; 0x44
 80052f8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80052fc:	b2d2      	uxtb	r2, r2
 80052fe:	701a      	strb	r2, [r3, #0]
 8005300:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005302:	09db      	lsrs	r3, r3, #7
 8005304:	643b      	str	r3, [r7, #64]	; 0x40
 8005306:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005308:	2b7f      	cmp	r3, #127	; 0x7f
 800530a:	d8f0      	bhi.n	80052ee <SEGGER_SYSVIEW_SendTaskInfo+0x36>
 800530c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800530e:	1c5a      	adds	r2, r3, #1
 8005310:	647a      	str	r2, [r7, #68]	; 0x44
 8005312:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005314:	b2d2      	uxtb	r2, r2
 8005316:	701a      	strb	r2, [r3, #0]
 8005318:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800531a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	689b      	ldr	r3, [r3, #8]
 8005324:	63bb      	str	r3, [r7, #56]	; 0x38
 8005326:	e00b      	b.n	8005340 <SEGGER_SYSVIEW_SendTaskInfo+0x88>
 8005328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800532a:	b2da      	uxtb	r2, r3
 800532c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800532e:	1c59      	adds	r1, r3, #1
 8005330:	63f9      	str	r1, [r7, #60]	; 0x3c
 8005332:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005336:	b2d2      	uxtb	r2, r2
 8005338:	701a      	strb	r2, [r3, #0]
 800533a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800533c:	09db      	lsrs	r3, r3, #7
 800533e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005342:	2b7f      	cmp	r3, #127	; 0x7f
 8005344:	d8f0      	bhi.n	8005328 <SEGGER_SYSVIEW_SendTaskInfo+0x70>
 8005346:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005348:	1c5a      	adds	r2, r3, #1
 800534a:	63fa      	str	r2, [r7, #60]	; 0x3c
 800534c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800534e:	b2d2      	uxtb	r2, r2
 8005350:	701a      	strb	r2, [r3, #0]
 8005352:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005354:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	685b      	ldr	r3, [r3, #4]
 800535a:	2220      	movs	r2, #32
 800535c:	4619      	mov	r1, r3
 800535e:	68f8      	ldr	r0, [r7, #12]
 8005360:	f7ff fa24 	bl	80047ac <_EncodeStr>
 8005364:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8005366:	2209      	movs	r2, #9
 8005368:	68f9      	ldr	r1, [r7, #12]
 800536a:	6938      	ldr	r0, [r7, #16]
 800536c:	f7ff fb4a 	bl	8004a04 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8005370:	693b      	ldr	r3, [r7, #16]
 8005372:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	637b      	str	r3, [r7, #52]	; 0x34
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681a      	ldr	r2, [r3, #0]
 800537c:	4b40      	ldr	r3, [pc, #256]	; (8005480 <SEGGER_SYSVIEW_SendTaskInfo+0x1c8>)
 800537e:	691b      	ldr	r3, [r3, #16]
 8005380:	1ad3      	subs	r3, r2, r3
 8005382:	089b      	lsrs	r3, r3, #2
 8005384:	633b      	str	r3, [r7, #48]	; 0x30
 8005386:	e00b      	b.n	80053a0 <SEGGER_SYSVIEW_SendTaskInfo+0xe8>
 8005388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800538a:	b2da      	uxtb	r2, r3
 800538c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800538e:	1c59      	adds	r1, r3, #1
 8005390:	6379      	str	r1, [r7, #52]	; 0x34
 8005392:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005396:	b2d2      	uxtb	r2, r2
 8005398:	701a      	strb	r2, [r3, #0]
 800539a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800539c:	09db      	lsrs	r3, r3, #7
 800539e:	633b      	str	r3, [r7, #48]	; 0x30
 80053a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053a2:	2b7f      	cmp	r3, #127	; 0x7f
 80053a4:	d8f0      	bhi.n	8005388 <SEGGER_SYSVIEW_SendTaskInfo+0xd0>
 80053a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053a8:	1c5a      	adds	r2, r3, #1
 80053aa:	637a      	str	r2, [r7, #52]	; 0x34
 80053ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053ae:	b2d2      	uxtb	r2, r2
 80053b0:	701a      	strb	r2, [r3, #0]
 80053b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053b4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	68db      	ldr	r3, [r3, #12]
 80053be:	62bb      	str	r3, [r7, #40]	; 0x28
 80053c0:	e00b      	b.n	80053da <SEGGER_SYSVIEW_SendTaskInfo+0x122>
 80053c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053c4:	b2da      	uxtb	r2, r3
 80053c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053c8:	1c59      	adds	r1, r3, #1
 80053ca:	62f9      	str	r1, [r7, #44]	; 0x2c
 80053cc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80053d0:	b2d2      	uxtb	r2, r2
 80053d2:	701a      	strb	r2, [r3, #0]
 80053d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053d6:	09db      	lsrs	r3, r3, #7
 80053d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80053da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053dc:	2b7f      	cmp	r3, #127	; 0x7f
 80053de:	d8f0      	bhi.n	80053c2 <SEGGER_SYSVIEW_SendTaskInfo+0x10a>
 80053e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053e2:	1c5a      	adds	r2, r3, #1
 80053e4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80053e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80053e8:	b2d2      	uxtb	r2, r2
 80053ea:	701a      	strb	r2, [r3, #0]
 80053ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053ee:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	627b      	str	r3, [r7, #36]	; 0x24
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	691b      	ldr	r3, [r3, #16]
 80053f8:	623b      	str	r3, [r7, #32]
 80053fa:	e00b      	b.n	8005414 <SEGGER_SYSVIEW_SendTaskInfo+0x15c>
 80053fc:	6a3b      	ldr	r3, [r7, #32]
 80053fe:	b2da      	uxtb	r2, r3
 8005400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005402:	1c59      	adds	r1, r3, #1
 8005404:	6279      	str	r1, [r7, #36]	; 0x24
 8005406:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800540a:	b2d2      	uxtb	r2, r2
 800540c:	701a      	strb	r2, [r3, #0]
 800540e:	6a3b      	ldr	r3, [r7, #32]
 8005410:	09db      	lsrs	r3, r3, #7
 8005412:	623b      	str	r3, [r7, #32]
 8005414:	6a3b      	ldr	r3, [r7, #32]
 8005416:	2b7f      	cmp	r3, #127	; 0x7f
 8005418:	d8f0      	bhi.n	80053fc <SEGGER_SYSVIEW_SendTaskInfo+0x144>
 800541a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800541c:	1c5a      	adds	r2, r3, #1
 800541e:	627a      	str	r2, [r7, #36]	; 0x24
 8005420:	6a3a      	ldr	r2, [r7, #32]
 8005422:	b2d2      	uxtb	r2, r2
 8005424:	701a      	strb	r2, [r3, #0]
 8005426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005428:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	61fb      	str	r3, [r7, #28]
 800542e:	2300      	movs	r3, #0
 8005430:	61bb      	str	r3, [r7, #24]
 8005432:	e00b      	b.n	800544c <SEGGER_SYSVIEW_SendTaskInfo+0x194>
 8005434:	69bb      	ldr	r3, [r7, #24]
 8005436:	b2da      	uxtb	r2, r3
 8005438:	69fb      	ldr	r3, [r7, #28]
 800543a:	1c59      	adds	r1, r3, #1
 800543c:	61f9      	str	r1, [r7, #28]
 800543e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005442:	b2d2      	uxtb	r2, r2
 8005444:	701a      	strb	r2, [r3, #0]
 8005446:	69bb      	ldr	r3, [r7, #24]
 8005448:	09db      	lsrs	r3, r3, #7
 800544a:	61bb      	str	r3, [r7, #24]
 800544c:	69bb      	ldr	r3, [r7, #24]
 800544e:	2b7f      	cmp	r3, #127	; 0x7f
 8005450:	d8f0      	bhi.n	8005434 <SEGGER_SYSVIEW_SendTaskInfo+0x17c>
 8005452:	69fb      	ldr	r3, [r7, #28]
 8005454:	1c5a      	adds	r2, r3, #1
 8005456:	61fa      	str	r2, [r7, #28]
 8005458:	69ba      	ldr	r2, [r7, #24]
 800545a:	b2d2      	uxtb	r2, r2
 800545c:	701a      	strb	r2, [r3, #0]
 800545e:	69fb      	ldr	r3, [r7, #28]
 8005460:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8005462:	2215      	movs	r2, #21
 8005464:	68f9      	ldr	r1, [r7, #12]
 8005466:	6938      	ldr	r0, [r7, #16]
 8005468:	f7ff facc 	bl	8004a04 <_SendPacket>
  RECORD_END();
 800546c:	697b      	ldr	r3, [r7, #20]
 800546e:	f383 8811 	msr	BASEPRI, r3
}
 8005472:	bf00      	nop
 8005474:	3748      	adds	r7, #72	; 0x48
 8005476:	46bd      	mov	sp, r7
 8005478:	bd80      	pop	{r7, pc}
 800547a:	bf00      	nop
 800547c:	20006f1c 	.word	0x20006f1c
 8005480:	20006eec 	.word	0x20006eec

08005484 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8005484:	b580      	push	{r7, lr}
 8005486:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8005488:	4b07      	ldr	r3, [pc, #28]	; (80054a8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800548a:	6a1b      	ldr	r3, [r3, #32]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d008      	beq.n	80054a2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8005490:	4b05      	ldr	r3, [pc, #20]	; (80054a8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005492:	6a1b      	ldr	r3, [r3, #32]
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d003      	beq.n	80054a2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800549a:	4b03      	ldr	r3, [pc, #12]	; (80054a8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800549c:	6a1b      	ldr	r3, [r3, #32]
 800549e:	685b      	ldr	r3, [r3, #4]
 80054a0:	4798      	blx	r3
  }
}
 80054a2:	bf00      	nop
 80054a4:	bd80      	pop	{r7, pc}
 80054a6:	bf00      	nop
 80054a8:	20006eec 	.word	0x20006eec

080054ac <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b086      	sub	sp, #24
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80054b4:	f3ef 8311 	mrs	r3, BASEPRI
 80054b8:	f04f 0120 	mov.w	r1, #32
 80054bc:	f381 8811 	msr	BASEPRI, r1
 80054c0:	617b      	str	r3, [r7, #20]
 80054c2:	480b      	ldr	r0, [pc, #44]	; (80054f0 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 80054c4:	f7ff f9bf 	bl	8004846 <_PreparePacket>
 80054c8:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80054ca:	2280      	movs	r2, #128	; 0x80
 80054cc:	6879      	ldr	r1, [r7, #4]
 80054ce:	6938      	ldr	r0, [r7, #16]
 80054d0:	f7ff f96c 	bl	80047ac <_EncodeStr>
 80054d4:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 80054d6:	220e      	movs	r2, #14
 80054d8:	68f9      	ldr	r1, [r7, #12]
 80054da:	6938      	ldr	r0, [r7, #16]
 80054dc:	f7ff fa92 	bl	8004a04 <_SendPacket>
  RECORD_END();
 80054e0:	697b      	ldr	r3, [r7, #20]
 80054e2:	f383 8811 	msr	BASEPRI, r3
}
 80054e6:	bf00      	nop
 80054e8:	3718      	adds	r7, #24
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bd80      	pop	{r7, pc}
 80054ee:	bf00      	nop
 80054f0:	20006f1c 	.word	0x20006f1c

080054f4 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 80054f4:	b590      	push	{r4, r7, lr}
 80054f6:	b083      	sub	sp, #12
 80054f8:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 80054fa:	4b15      	ldr	r3, [pc, #84]	; (8005550 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80054fc:	6a1b      	ldr	r3, [r3, #32]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d01a      	beq.n	8005538 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8005502:	4b13      	ldr	r3, [pc, #76]	; (8005550 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005504:	6a1b      	ldr	r3, [r3, #32]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d015      	beq.n	8005538 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 800550c:	4b10      	ldr	r3, [pc, #64]	; (8005550 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800550e:	6a1b      	ldr	r3, [r3, #32]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4798      	blx	r3
 8005514:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8005518:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800551a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800551e:	f04f 0200 	mov.w	r2, #0
 8005522:	f04f 0300 	mov.w	r3, #0
 8005526:	000a      	movs	r2, r1
 8005528:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800552a:	4613      	mov	r3, r2
 800552c:	461a      	mov	r2, r3
 800552e:	4621      	mov	r1, r4
 8005530:	200d      	movs	r0, #13
 8005532:	f7ff fbe3 	bl	8004cfc <SEGGER_SYSVIEW_RecordU32x2>
 8005536:	e006      	b.n	8005546 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8005538:	4b06      	ldr	r3, [pc, #24]	; (8005554 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4619      	mov	r1, r3
 800553e:	200c      	movs	r0, #12
 8005540:	f7ff fba0 	bl	8004c84 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8005544:	bf00      	nop
 8005546:	bf00      	nop
 8005548:	370c      	adds	r7, #12
 800554a:	46bd      	mov	sp, r7
 800554c:	bd90      	pop	{r4, r7, pc}
 800554e:	bf00      	nop
 8005550:	20006eec 	.word	0x20006eec
 8005554:	e0001004 	.word	0xe0001004

08005558 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8005558:	b580      	push	{r7, lr}
 800555a:	b086      	sub	sp, #24
 800555c:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800555e:	f3ef 8311 	mrs	r3, BASEPRI
 8005562:	f04f 0120 	mov.w	r1, #32
 8005566:	f381 8811 	msr	BASEPRI, r1
 800556a:	60fb      	str	r3, [r7, #12]
 800556c:	4819      	ldr	r0, [pc, #100]	; (80055d4 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 800556e:	f7ff f96a 	bl	8004846 <_PreparePacket>
 8005572:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8005578:	4b17      	ldr	r3, [pc, #92]	; (80055d8 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005580:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	617b      	str	r3, [r7, #20]
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	613b      	str	r3, [r7, #16]
 800558a:	e00b      	b.n	80055a4 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 800558c:	693b      	ldr	r3, [r7, #16]
 800558e:	b2da      	uxtb	r2, r3
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	1c59      	adds	r1, r3, #1
 8005594:	6179      	str	r1, [r7, #20]
 8005596:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800559a:	b2d2      	uxtb	r2, r2
 800559c:	701a      	strb	r2, [r3, #0]
 800559e:	693b      	ldr	r3, [r7, #16]
 80055a0:	09db      	lsrs	r3, r3, #7
 80055a2:	613b      	str	r3, [r7, #16]
 80055a4:	693b      	ldr	r3, [r7, #16]
 80055a6:	2b7f      	cmp	r3, #127	; 0x7f
 80055a8:	d8f0      	bhi.n	800558c <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	1c5a      	adds	r2, r3, #1
 80055ae:	617a      	str	r2, [r7, #20]
 80055b0:	693a      	ldr	r2, [r7, #16]
 80055b2:	b2d2      	uxtb	r2, r2
 80055b4:	701a      	strb	r2, [r3, #0]
 80055b6:	697b      	ldr	r3, [r7, #20]
 80055b8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 80055ba:	2202      	movs	r2, #2
 80055bc:	6879      	ldr	r1, [r7, #4]
 80055be:	68b8      	ldr	r0, [r7, #8]
 80055c0:	f7ff fa20 	bl	8004a04 <_SendPacket>
  RECORD_END();
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	f383 8811 	msr	BASEPRI, r3
}
 80055ca:	bf00      	nop
 80055cc:	3718      	adds	r7, #24
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd80      	pop	{r7, pc}
 80055d2:	bf00      	nop
 80055d4:	20006f1c 	.word	0x20006f1c
 80055d8:	e000ed04 	.word	0xe000ed04

080055dc <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 80055dc:	b580      	push	{r7, lr}
 80055de:	b082      	sub	sp, #8
 80055e0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80055e2:	f3ef 8311 	mrs	r3, BASEPRI
 80055e6:	f04f 0120 	mov.w	r1, #32
 80055ea:	f381 8811 	msr	BASEPRI, r1
 80055ee:	607b      	str	r3, [r7, #4]
 80055f0:	4807      	ldr	r0, [pc, #28]	; (8005610 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 80055f2:	f7ff f928 	bl	8004846 <_PreparePacket>
 80055f6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 80055f8:	2203      	movs	r2, #3
 80055fa:	6839      	ldr	r1, [r7, #0]
 80055fc:	6838      	ldr	r0, [r7, #0]
 80055fe:	f7ff fa01 	bl	8004a04 <_SendPacket>
  RECORD_END();
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	f383 8811 	msr	BASEPRI, r3
}
 8005608:	bf00      	nop
 800560a:	3708      	adds	r7, #8
 800560c:	46bd      	mov	sp, r7
 800560e:	bd80      	pop	{r7, pc}
 8005610:	20006f1c 	.word	0x20006f1c

08005614 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8005614:	b580      	push	{r7, lr}
 8005616:	b082      	sub	sp, #8
 8005618:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800561a:	f3ef 8311 	mrs	r3, BASEPRI
 800561e:	f04f 0120 	mov.w	r1, #32
 8005622:	f381 8811 	msr	BASEPRI, r1
 8005626:	607b      	str	r3, [r7, #4]
 8005628:	4807      	ldr	r0, [pc, #28]	; (8005648 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 800562a:	f7ff f90c 	bl	8004846 <_PreparePacket>
 800562e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8005630:	2212      	movs	r2, #18
 8005632:	6839      	ldr	r1, [r7, #0]
 8005634:	6838      	ldr	r0, [r7, #0]
 8005636:	f7ff f9e5 	bl	8004a04 <_SendPacket>
  RECORD_END();
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	f383 8811 	msr	BASEPRI, r3
}
 8005640:	bf00      	nop
 8005642:	3708      	adds	r7, #8
 8005644:	46bd      	mov	sp, r7
 8005646:	bd80      	pop	{r7, pc}
 8005648:	20006f1c 	.word	0x20006f1c

0800564c <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 800564c:	b580      	push	{r7, lr}
 800564e:	b082      	sub	sp, #8
 8005650:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005652:	f3ef 8311 	mrs	r3, BASEPRI
 8005656:	f04f 0120 	mov.w	r1, #32
 800565a:	f381 8811 	msr	BASEPRI, r1
 800565e:	607b      	str	r3, [r7, #4]
 8005660:	4807      	ldr	r0, [pc, #28]	; (8005680 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8005662:	f7ff f8f0 	bl	8004846 <_PreparePacket>
 8005666:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8005668:	2211      	movs	r2, #17
 800566a:	6839      	ldr	r1, [r7, #0]
 800566c:	6838      	ldr	r0, [r7, #0]
 800566e:	f7ff f9c9 	bl	8004a04 <_SendPacket>
  RECORD_END();
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	f383 8811 	msr	BASEPRI, r3
}
 8005678:	bf00      	nop
 800567a:	3708      	adds	r7, #8
 800567c:	46bd      	mov	sp, r7
 800567e:	bd80      	pop	{r7, pc}
 8005680:	20006f1c 	.word	0x20006f1c

08005684 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8005684:	b580      	push	{r7, lr}
 8005686:	b088      	sub	sp, #32
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800568c:	f3ef 8311 	mrs	r3, BASEPRI
 8005690:	f04f 0120 	mov.w	r1, #32
 8005694:	f381 8811 	msr	BASEPRI, r1
 8005698:	617b      	str	r3, [r7, #20]
 800569a:	481a      	ldr	r0, [pc, #104]	; (8005704 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 800569c:	f7ff f8d3 	bl	8004846 <_PreparePacket>
 80056a0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80056a2:	693b      	ldr	r3, [r7, #16]
 80056a4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80056a6:	4b18      	ldr	r3, [pc, #96]	; (8005708 <SEGGER_SYSVIEW_OnTaskCreate+0x84>)
 80056a8:	691b      	ldr	r3, [r3, #16]
 80056aa:	687a      	ldr	r2, [r7, #4]
 80056ac:	1ad3      	subs	r3, r2, r3
 80056ae:	089b      	lsrs	r3, r3, #2
 80056b0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	61fb      	str	r3, [r7, #28]
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	61bb      	str	r3, [r7, #24]
 80056ba:	e00b      	b.n	80056d4 <SEGGER_SYSVIEW_OnTaskCreate+0x50>
 80056bc:	69bb      	ldr	r3, [r7, #24]
 80056be:	b2da      	uxtb	r2, r3
 80056c0:	69fb      	ldr	r3, [r7, #28]
 80056c2:	1c59      	adds	r1, r3, #1
 80056c4:	61f9      	str	r1, [r7, #28]
 80056c6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80056ca:	b2d2      	uxtb	r2, r2
 80056cc:	701a      	strb	r2, [r3, #0]
 80056ce:	69bb      	ldr	r3, [r7, #24]
 80056d0:	09db      	lsrs	r3, r3, #7
 80056d2:	61bb      	str	r3, [r7, #24]
 80056d4:	69bb      	ldr	r3, [r7, #24]
 80056d6:	2b7f      	cmp	r3, #127	; 0x7f
 80056d8:	d8f0      	bhi.n	80056bc <SEGGER_SYSVIEW_OnTaskCreate+0x38>
 80056da:	69fb      	ldr	r3, [r7, #28]
 80056dc:	1c5a      	adds	r2, r3, #1
 80056de:	61fa      	str	r2, [r7, #28]
 80056e0:	69ba      	ldr	r2, [r7, #24]
 80056e2:	b2d2      	uxtb	r2, r2
 80056e4:	701a      	strb	r2, [r3, #0]
 80056e6:	69fb      	ldr	r3, [r7, #28]
 80056e8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 80056ea:	2208      	movs	r2, #8
 80056ec:	68f9      	ldr	r1, [r7, #12]
 80056ee:	6938      	ldr	r0, [r7, #16]
 80056f0:	f7ff f988 	bl	8004a04 <_SendPacket>
  RECORD_END();
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	f383 8811 	msr	BASEPRI, r3
}
 80056fa:	bf00      	nop
 80056fc:	3720      	adds	r7, #32
 80056fe:	46bd      	mov	sp, r7
 8005700:	bd80      	pop	{r7, pc}
 8005702:	bf00      	nop
 8005704:	20006f1c 	.word	0x20006f1c
 8005708:	20006eec 	.word	0x20006eec

0800570c <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 800570c:	b580      	push	{r7, lr}
 800570e:	b088      	sub	sp, #32
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005714:	f3ef 8311 	mrs	r3, BASEPRI
 8005718:	f04f 0120 	mov.w	r1, #32
 800571c:	f381 8811 	msr	BASEPRI, r1
 8005720:	617b      	str	r3, [r7, #20]
 8005722:	481a      	ldr	r0, [pc, #104]	; (800578c <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8005724:	f7ff f88f 	bl	8004846 <_PreparePacket>
 8005728:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800572a:	693b      	ldr	r3, [r7, #16]
 800572c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800572e:	4b18      	ldr	r3, [pc, #96]	; (8005790 <SEGGER_SYSVIEW_OnTaskStartExec+0x84>)
 8005730:	691b      	ldr	r3, [r3, #16]
 8005732:	687a      	ldr	r2, [r7, #4]
 8005734:	1ad3      	subs	r3, r2, r3
 8005736:	089b      	lsrs	r3, r3, #2
 8005738:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	61fb      	str	r3, [r7, #28]
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	61bb      	str	r3, [r7, #24]
 8005742:	e00b      	b.n	800575c <SEGGER_SYSVIEW_OnTaskStartExec+0x50>
 8005744:	69bb      	ldr	r3, [r7, #24]
 8005746:	b2da      	uxtb	r2, r3
 8005748:	69fb      	ldr	r3, [r7, #28]
 800574a:	1c59      	adds	r1, r3, #1
 800574c:	61f9      	str	r1, [r7, #28]
 800574e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005752:	b2d2      	uxtb	r2, r2
 8005754:	701a      	strb	r2, [r3, #0]
 8005756:	69bb      	ldr	r3, [r7, #24]
 8005758:	09db      	lsrs	r3, r3, #7
 800575a:	61bb      	str	r3, [r7, #24]
 800575c:	69bb      	ldr	r3, [r7, #24]
 800575e:	2b7f      	cmp	r3, #127	; 0x7f
 8005760:	d8f0      	bhi.n	8005744 <SEGGER_SYSVIEW_OnTaskStartExec+0x38>
 8005762:	69fb      	ldr	r3, [r7, #28]
 8005764:	1c5a      	adds	r2, r3, #1
 8005766:	61fa      	str	r2, [r7, #28]
 8005768:	69ba      	ldr	r2, [r7, #24]
 800576a:	b2d2      	uxtb	r2, r2
 800576c:	701a      	strb	r2, [r3, #0]
 800576e:	69fb      	ldr	r3, [r7, #28]
 8005770:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8005772:	2204      	movs	r2, #4
 8005774:	68f9      	ldr	r1, [r7, #12]
 8005776:	6938      	ldr	r0, [r7, #16]
 8005778:	f7ff f944 	bl	8004a04 <_SendPacket>
  RECORD_END();
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	f383 8811 	msr	BASEPRI, r3
}
 8005782:	bf00      	nop
 8005784:	3720      	adds	r7, #32
 8005786:	46bd      	mov	sp, r7
 8005788:	bd80      	pop	{r7, pc}
 800578a:	bf00      	nop
 800578c:	20006f1c 	.word	0x20006f1c
 8005790:	20006eec 	.word	0x20006eec

08005794 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8005794:	b580      	push	{r7, lr}
 8005796:	b088      	sub	sp, #32
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800579c:	f3ef 8311 	mrs	r3, BASEPRI
 80057a0:	f04f 0120 	mov.w	r1, #32
 80057a4:	f381 8811 	msr	BASEPRI, r1
 80057a8:	617b      	str	r3, [r7, #20]
 80057aa:	481a      	ldr	r0, [pc, #104]	; (8005814 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 80057ac:	f7ff f84b 	bl	8004846 <_PreparePacket>
 80057b0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80057b2:	693b      	ldr	r3, [r7, #16]
 80057b4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80057b6:	4b18      	ldr	r3, [pc, #96]	; (8005818 <SEGGER_SYSVIEW_OnTaskStartReady+0x84>)
 80057b8:	691b      	ldr	r3, [r3, #16]
 80057ba:	687a      	ldr	r2, [r7, #4]
 80057bc:	1ad3      	subs	r3, r2, r3
 80057be:	089b      	lsrs	r3, r3, #2
 80057c0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	61fb      	str	r3, [r7, #28]
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	61bb      	str	r3, [r7, #24]
 80057ca:	e00b      	b.n	80057e4 <SEGGER_SYSVIEW_OnTaskStartReady+0x50>
 80057cc:	69bb      	ldr	r3, [r7, #24]
 80057ce:	b2da      	uxtb	r2, r3
 80057d0:	69fb      	ldr	r3, [r7, #28]
 80057d2:	1c59      	adds	r1, r3, #1
 80057d4:	61f9      	str	r1, [r7, #28]
 80057d6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80057da:	b2d2      	uxtb	r2, r2
 80057dc:	701a      	strb	r2, [r3, #0]
 80057de:	69bb      	ldr	r3, [r7, #24]
 80057e0:	09db      	lsrs	r3, r3, #7
 80057e2:	61bb      	str	r3, [r7, #24]
 80057e4:	69bb      	ldr	r3, [r7, #24]
 80057e6:	2b7f      	cmp	r3, #127	; 0x7f
 80057e8:	d8f0      	bhi.n	80057cc <SEGGER_SYSVIEW_OnTaskStartReady+0x38>
 80057ea:	69fb      	ldr	r3, [r7, #28]
 80057ec:	1c5a      	adds	r2, r3, #1
 80057ee:	61fa      	str	r2, [r7, #28]
 80057f0:	69ba      	ldr	r2, [r7, #24]
 80057f2:	b2d2      	uxtb	r2, r2
 80057f4:	701a      	strb	r2, [r3, #0]
 80057f6:	69fb      	ldr	r3, [r7, #28]
 80057f8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 80057fa:	2206      	movs	r2, #6
 80057fc:	68f9      	ldr	r1, [r7, #12]
 80057fe:	6938      	ldr	r0, [r7, #16]
 8005800:	f7ff f900 	bl	8004a04 <_SendPacket>
  RECORD_END();
 8005804:	697b      	ldr	r3, [r7, #20]
 8005806:	f383 8811 	msr	BASEPRI, r3
}
 800580a:	bf00      	nop
 800580c:	3720      	adds	r7, #32
 800580e:	46bd      	mov	sp, r7
 8005810:	bd80      	pop	{r7, pc}
 8005812:	bf00      	nop
 8005814:	20006f1c 	.word	0x20006f1c
 8005818:	20006eec 	.word	0x20006eec

0800581c <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 800581c:	b580      	push	{r7, lr}
 800581e:	b08a      	sub	sp, #40	; 0x28
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
 8005824:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005826:	f3ef 8311 	mrs	r3, BASEPRI
 800582a:	f04f 0120 	mov.w	r1, #32
 800582e:	f381 8811 	msr	BASEPRI, r1
 8005832:	617b      	str	r3, [r7, #20]
 8005834:	4827      	ldr	r0, [pc, #156]	; (80058d4 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8005836:	f7ff f806 	bl	8004846 <_PreparePacket>
 800583a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800583c:	693b      	ldr	r3, [r7, #16]
 800583e:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005840:	4b25      	ldr	r3, [pc, #148]	; (80058d8 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8005842:	691b      	ldr	r3, [r3, #16]
 8005844:	687a      	ldr	r2, [r7, #4]
 8005846:	1ad3      	subs	r3, r2, r3
 8005848:	089b      	lsrs	r3, r3, #2
 800584a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	627b      	str	r3, [r7, #36]	; 0x24
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	623b      	str	r3, [r7, #32]
 8005854:	e00b      	b.n	800586e <SEGGER_SYSVIEW_OnTaskStopReady+0x52>
 8005856:	6a3b      	ldr	r3, [r7, #32]
 8005858:	b2da      	uxtb	r2, r3
 800585a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800585c:	1c59      	adds	r1, r3, #1
 800585e:	6279      	str	r1, [r7, #36]	; 0x24
 8005860:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005864:	b2d2      	uxtb	r2, r2
 8005866:	701a      	strb	r2, [r3, #0]
 8005868:	6a3b      	ldr	r3, [r7, #32]
 800586a:	09db      	lsrs	r3, r3, #7
 800586c:	623b      	str	r3, [r7, #32]
 800586e:	6a3b      	ldr	r3, [r7, #32]
 8005870:	2b7f      	cmp	r3, #127	; 0x7f
 8005872:	d8f0      	bhi.n	8005856 <SEGGER_SYSVIEW_OnTaskStopReady+0x3a>
 8005874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005876:	1c5a      	adds	r2, r3, #1
 8005878:	627a      	str	r2, [r7, #36]	; 0x24
 800587a:	6a3a      	ldr	r2, [r7, #32]
 800587c:	b2d2      	uxtb	r2, r2
 800587e:	701a      	strb	r2, [r3, #0]
 8005880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005882:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	61fb      	str	r3, [r7, #28]
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	61bb      	str	r3, [r7, #24]
 800588c:	e00b      	b.n	80058a6 <SEGGER_SYSVIEW_OnTaskStopReady+0x8a>
 800588e:	69bb      	ldr	r3, [r7, #24]
 8005890:	b2da      	uxtb	r2, r3
 8005892:	69fb      	ldr	r3, [r7, #28]
 8005894:	1c59      	adds	r1, r3, #1
 8005896:	61f9      	str	r1, [r7, #28]
 8005898:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800589c:	b2d2      	uxtb	r2, r2
 800589e:	701a      	strb	r2, [r3, #0]
 80058a0:	69bb      	ldr	r3, [r7, #24]
 80058a2:	09db      	lsrs	r3, r3, #7
 80058a4:	61bb      	str	r3, [r7, #24]
 80058a6:	69bb      	ldr	r3, [r7, #24]
 80058a8:	2b7f      	cmp	r3, #127	; 0x7f
 80058aa:	d8f0      	bhi.n	800588e <SEGGER_SYSVIEW_OnTaskStopReady+0x72>
 80058ac:	69fb      	ldr	r3, [r7, #28]
 80058ae:	1c5a      	adds	r2, r3, #1
 80058b0:	61fa      	str	r2, [r7, #28]
 80058b2:	69ba      	ldr	r2, [r7, #24]
 80058b4:	b2d2      	uxtb	r2, r2
 80058b6:	701a      	strb	r2, [r3, #0]
 80058b8:	69fb      	ldr	r3, [r7, #28]
 80058ba:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 80058bc:	2207      	movs	r2, #7
 80058be:	68f9      	ldr	r1, [r7, #12]
 80058c0:	6938      	ldr	r0, [r7, #16]
 80058c2:	f7ff f89f 	bl	8004a04 <_SendPacket>
  RECORD_END();
 80058c6:	697b      	ldr	r3, [r7, #20]
 80058c8:	f383 8811 	msr	BASEPRI, r3
}
 80058cc:	bf00      	nop
 80058ce:	3728      	adds	r7, #40	; 0x28
 80058d0:	46bd      	mov	sp, r7
 80058d2:	bd80      	pop	{r7, pc}
 80058d4:	20006f1c 	.word	0x20006f1c
 80058d8:	20006eec 	.word	0x20006eec

080058dc <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 80058dc:	b480      	push	{r7}
 80058de:	b083      	sub	sp, #12
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 80058e4:	4b05      	ldr	r3, [pc, #20]	; (80058fc <SEGGER_SYSVIEW_ShrinkId+0x20>)
 80058e6:	691b      	ldr	r3, [r3, #16]
 80058e8:	687a      	ldr	r2, [r7, #4]
 80058ea:	1ad3      	subs	r3, r2, r3
 80058ec:	089b      	lsrs	r3, r3, #2
}
 80058ee:	4618      	mov	r0, r3
 80058f0:	370c      	adds	r7, #12
 80058f2:	46bd      	mov	sp, r7
 80058f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f8:	4770      	bx	lr
 80058fa:	bf00      	nop
 80058fc:	20006eec 	.word	0x20006eec

08005900 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8005900:	b580      	push	{r7, lr}
 8005902:	b08c      	sub	sp, #48	; 0x30
 8005904:	af00      	add	r7, sp, #0
 8005906:	4603      	mov	r3, r0
 8005908:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800590a:	4b3b      	ldr	r3, [pc, #236]	; (80059f8 <SEGGER_SYSVIEW_SendModule+0xf8>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d06d      	beq.n	80059ee <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8005912:	4b39      	ldr	r3, [pc, #228]	; (80059f8 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8005918:	2300      	movs	r3, #0
 800591a:	62bb      	str	r3, [r7, #40]	; 0x28
 800591c:	e008      	b.n	8005930 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800591e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005920:	691b      	ldr	r3, [r3, #16]
 8005922:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8005924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005926:	2b00      	cmp	r3, #0
 8005928:	d007      	beq.n	800593a <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800592a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800592c:	3301      	adds	r3, #1
 800592e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005930:	79fb      	ldrb	r3, [r7, #7]
 8005932:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005934:	429a      	cmp	r2, r3
 8005936:	d3f2      	bcc.n	800591e <SEGGER_SYSVIEW_SendModule+0x1e>
 8005938:	e000      	b.n	800593c <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800593a:	bf00      	nop
      }
    }
    if (pModule != 0) {
 800593c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800593e:	2b00      	cmp	r3, #0
 8005940:	d055      	beq.n	80059ee <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005942:	f3ef 8311 	mrs	r3, BASEPRI
 8005946:	f04f 0120 	mov.w	r1, #32
 800594a:	f381 8811 	msr	BASEPRI, r1
 800594e:	617b      	str	r3, [r7, #20]
 8005950:	482a      	ldr	r0, [pc, #168]	; (80059fc <SEGGER_SYSVIEW_SendModule+0xfc>)
 8005952:	f7fe ff78 	bl	8004846 <_PreparePacket>
 8005956:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8005958:	693b      	ldr	r3, [r7, #16]
 800595a:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	627b      	str	r3, [r7, #36]	; 0x24
 8005960:	79fb      	ldrb	r3, [r7, #7]
 8005962:	623b      	str	r3, [r7, #32]
 8005964:	e00b      	b.n	800597e <SEGGER_SYSVIEW_SendModule+0x7e>
 8005966:	6a3b      	ldr	r3, [r7, #32]
 8005968:	b2da      	uxtb	r2, r3
 800596a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800596c:	1c59      	adds	r1, r3, #1
 800596e:	6279      	str	r1, [r7, #36]	; 0x24
 8005970:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005974:	b2d2      	uxtb	r2, r2
 8005976:	701a      	strb	r2, [r3, #0]
 8005978:	6a3b      	ldr	r3, [r7, #32]
 800597a:	09db      	lsrs	r3, r3, #7
 800597c:	623b      	str	r3, [r7, #32]
 800597e:	6a3b      	ldr	r3, [r7, #32]
 8005980:	2b7f      	cmp	r3, #127	; 0x7f
 8005982:	d8f0      	bhi.n	8005966 <SEGGER_SYSVIEW_SendModule+0x66>
 8005984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005986:	1c5a      	adds	r2, r3, #1
 8005988:	627a      	str	r2, [r7, #36]	; 0x24
 800598a:	6a3a      	ldr	r2, [r7, #32]
 800598c:	b2d2      	uxtb	r2, r2
 800598e:	701a      	strb	r2, [r3, #0]
 8005990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005992:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	61fb      	str	r3, [r7, #28]
 8005998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800599a:	689b      	ldr	r3, [r3, #8]
 800599c:	61bb      	str	r3, [r7, #24]
 800599e:	e00b      	b.n	80059b8 <SEGGER_SYSVIEW_SendModule+0xb8>
 80059a0:	69bb      	ldr	r3, [r7, #24]
 80059a2:	b2da      	uxtb	r2, r3
 80059a4:	69fb      	ldr	r3, [r7, #28]
 80059a6:	1c59      	adds	r1, r3, #1
 80059a8:	61f9      	str	r1, [r7, #28]
 80059aa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80059ae:	b2d2      	uxtb	r2, r2
 80059b0:	701a      	strb	r2, [r3, #0]
 80059b2:	69bb      	ldr	r3, [r7, #24]
 80059b4:	09db      	lsrs	r3, r3, #7
 80059b6:	61bb      	str	r3, [r7, #24]
 80059b8:	69bb      	ldr	r3, [r7, #24]
 80059ba:	2b7f      	cmp	r3, #127	; 0x7f
 80059bc:	d8f0      	bhi.n	80059a0 <SEGGER_SYSVIEW_SendModule+0xa0>
 80059be:	69fb      	ldr	r3, [r7, #28]
 80059c0:	1c5a      	adds	r2, r3, #1
 80059c2:	61fa      	str	r2, [r7, #28]
 80059c4:	69ba      	ldr	r2, [r7, #24]
 80059c6:	b2d2      	uxtb	r2, r2
 80059c8:	701a      	strb	r2, [r3, #0]
 80059ca:	69fb      	ldr	r3, [r7, #28]
 80059cc:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80059ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	2280      	movs	r2, #128	; 0x80
 80059d4:	4619      	mov	r1, r3
 80059d6:	68f8      	ldr	r0, [r7, #12]
 80059d8:	f7fe fee8 	bl	80047ac <_EncodeStr>
 80059dc:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80059de:	2216      	movs	r2, #22
 80059e0:	68f9      	ldr	r1, [r7, #12]
 80059e2:	6938      	ldr	r0, [r7, #16]
 80059e4:	f7ff f80e 	bl	8004a04 <_SendPacket>
      RECORD_END();
 80059e8:	697b      	ldr	r3, [r7, #20]
 80059ea:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 80059ee:	bf00      	nop
 80059f0:	3730      	adds	r7, #48	; 0x30
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bd80      	pop	{r7, pc}
 80059f6:	bf00      	nop
 80059f8:	20006f14 	.word	0x20006f14
 80059fc:	20006f1c 	.word	0x20006f1c

08005a00 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b082      	sub	sp, #8
 8005a04:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8005a06:	4b0c      	ldr	r3, [pc, #48]	; (8005a38 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d00f      	beq.n	8005a2e <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8005a0e:	4b0a      	ldr	r3, [pc, #40]	; (8005a38 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	68db      	ldr	r3, [r3, #12]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d002      	beq.n	8005a22 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	68db      	ldr	r3, [r3, #12]
 8005a20:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	691b      	ldr	r3, [r3, #16]
 8005a26:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d1f2      	bne.n	8005a14 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8005a2e:	bf00      	nop
 8005a30:	3708      	adds	r7, #8
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bd80      	pop	{r7, pc}
 8005a36:	bf00      	nop
 8005a38:	20006f14 	.word	0x20006f14

08005a3c <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b086      	sub	sp, #24
 8005a40:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8005a42:	f3ef 8311 	mrs	r3, BASEPRI
 8005a46:	f04f 0120 	mov.w	r1, #32
 8005a4a:	f381 8811 	msr	BASEPRI, r1
 8005a4e:	60fb      	str	r3, [r7, #12]
 8005a50:	4817      	ldr	r0, [pc, #92]	; (8005ab0 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8005a52:	f7fe fef8 	bl	8004846 <_PreparePacket>
 8005a56:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	617b      	str	r3, [r7, #20]
 8005a60:	4b14      	ldr	r3, [pc, #80]	; (8005ab4 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8005a62:	781b      	ldrb	r3, [r3, #0]
 8005a64:	613b      	str	r3, [r7, #16]
 8005a66:	e00b      	b.n	8005a80 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8005a68:	693b      	ldr	r3, [r7, #16]
 8005a6a:	b2da      	uxtb	r2, r3
 8005a6c:	697b      	ldr	r3, [r7, #20]
 8005a6e:	1c59      	adds	r1, r3, #1
 8005a70:	6179      	str	r1, [r7, #20]
 8005a72:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a76:	b2d2      	uxtb	r2, r2
 8005a78:	701a      	strb	r2, [r3, #0]
 8005a7a:	693b      	ldr	r3, [r7, #16]
 8005a7c:	09db      	lsrs	r3, r3, #7
 8005a7e:	613b      	str	r3, [r7, #16]
 8005a80:	693b      	ldr	r3, [r7, #16]
 8005a82:	2b7f      	cmp	r3, #127	; 0x7f
 8005a84:	d8f0      	bhi.n	8005a68 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8005a86:	697b      	ldr	r3, [r7, #20]
 8005a88:	1c5a      	adds	r2, r3, #1
 8005a8a:	617a      	str	r2, [r7, #20]
 8005a8c:	693a      	ldr	r2, [r7, #16]
 8005a8e:	b2d2      	uxtb	r2, r2
 8005a90:	701a      	strb	r2, [r3, #0]
 8005a92:	697b      	ldr	r3, [r7, #20]
 8005a94:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8005a96:	221b      	movs	r2, #27
 8005a98:	6879      	ldr	r1, [r7, #4]
 8005a9a:	68b8      	ldr	r0, [r7, #8]
 8005a9c:	f7fe ffb2 	bl	8004a04 <_SendPacket>
  RECORD_END();
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	f383 8811 	msr	BASEPRI, r3
}
 8005aa6:	bf00      	nop
 8005aa8:	3718      	adds	r7, #24
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bd80      	pop	{r7, pc}
 8005aae:	bf00      	nop
 8005ab0:	20006f1c 	.word	0x20006f1c
 8005ab4:	20006f18 	.word	0x20006f18

08005ab8 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b08a      	sub	sp, #40	; 0x28
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005ac0:	f3ef 8311 	mrs	r3, BASEPRI
 8005ac4:	f04f 0120 	mov.w	r1, #32
 8005ac8:	f381 8811 	msr	BASEPRI, r1
 8005acc:	617b      	str	r3, [r7, #20]
 8005ace:	4827      	ldr	r0, [pc, #156]	; (8005b6c <SEGGER_SYSVIEW_Warn+0xb4>)
 8005ad0:	f7fe feb9 	bl	8004846 <_PreparePacket>
 8005ad4:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005ad6:	2280      	movs	r2, #128	; 0x80
 8005ad8:	6879      	ldr	r1, [r7, #4]
 8005ada:	6938      	ldr	r0, [r7, #16]
 8005adc:	f7fe fe66 	bl	80047ac <_EncodeStr>
 8005ae0:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	627b      	str	r3, [r7, #36]	; 0x24
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	623b      	str	r3, [r7, #32]
 8005aea:	e00b      	b.n	8005b04 <SEGGER_SYSVIEW_Warn+0x4c>
 8005aec:	6a3b      	ldr	r3, [r7, #32]
 8005aee:	b2da      	uxtb	r2, r3
 8005af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af2:	1c59      	adds	r1, r3, #1
 8005af4:	6279      	str	r1, [r7, #36]	; 0x24
 8005af6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005afa:	b2d2      	uxtb	r2, r2
 8005afc:	701a      	strb	r2, [r3, #0]
 8005afe:	6a3b      	ldr	r3, [r7, #32]
 8005b00:	09db      	lsrs	r3, r3, #7
 8005b02:	623b      	str	r3, [r7, #32]
 8005b04:	6a3b      	ldr	r3, [r7, #32]
 8005b06:	2b7f      	cmp	r3, #127	; 0x7f
 8005b08:	d8f0      	bhi.n	8005aec <SEGGER_SYSVIEW_Warn+0x34>
 8005b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b0c:	1c5a      	adds	r2, r3, #1
 8005b0e:	627a      	str	r2, [r7, #36]	; 0x24
 8005b10:	6a3a      	ldr	r2, [r7, #32]
 8005b12:	b2d2      	uxtb	r2, r2
 8005b14:	701a      	strb	r2, [r3, #0]
 8005b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b18:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	61fb      	str	r3, [r7, #28]
 8005b1e:	2300      	movs	r3, #0
 8005b20:	61bb      	str	r3, [r7, #24]
 8005b22:	e00b      	b.n	8005b3c <SEGGER_SYSVIEW_Warn+0x84>
 8005b24:	69bb      	ldr	r3, [r7, #24]
 8005b26:	b2da      	uxtb	r2, r3
 8005b28:	69fb      	ldr	r3, [r7, #28]
 8005b2a:	1c59      	adds	r1, r3, #1
 8005b2c:	61f9      	str	r1, [r7, #28]
 8005b2e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b32:	b2d2      	uxtb	r2, r2
 8005b34:	701a      	strb	r2, [r3, #0]
 8005b36:	69bb      	ldr	r3, [r7, #24]
 8005b38:	09db      	lsrs	r3, r3, #7
 8005b3a:	61bb      	str	r3, [r7, #24]
 8005b3c:	69bb      	ldr	r3, [r7, #24]
 8005b3e:	2b7f      	cmp	r3, #127	; 0x7f
 8005b40:	d8f0      	bhi.n	8005b24 <SEGGER_SYSVIEW_Warn+0x6c>
 8005b42:	69fb      	ldr	r3, [r7, #28]
 8005b44:	1c5a      	adds	r2, r3, #1
 8005b46:	61fa      	str	r2, [r7, #28]
 8005b48:	69ba      	ldr	r2, [r7, #24]
 8005b4a:	b2d2      	uxtb	r2, r2
 8005b4c:	701a      	strb	r2, [r3, #0]
 8005b4e:	69fb      	ldr	r3, [r7, #28]
 8005b50:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005b52:	221a      	movs	r2, #26
 8005b54:	68f9      	ldr	r1, [r7, #12]
 8005b56:	6938      	ldr	r0, [r7, #16]
 8005b58:	f7fe ff54 	bl	8004a04 <_SendPacket>
  RECORD_END();
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	f383 8811 	msr	BASEPRI, r3
}
 8005b62:	bf00      	nop
 8005b64:	3728      	adds	r7, #40	; 0x28
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bd80      	pop	{r7, pc}
 8005b6a:	bf00      	nop
 8005b6c:	20006f1c 	.word	0x20006f1c

08005b70 <memcmp>:
 8005b70:	b510      	push	{r4, lr}
 8005b72:	3901      	subs	r1, #1
 8005b74:	4402      	add	r2, r0
 8005b76:	4290      	cmp	r0, r2
 8005b78:	d101      	bne.n	8005b7e <memcmp+0xe>
 8005b7a:	2000      	movs	r0, #0
 8005b7c:	e005      	b.n	8005b8a <memcmp+0x1a>
 8005b7e:	7803      	ldrb	r3, [r0, #0]
 8005b80:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8005b84:	42a3      	cmp	r3, r4
 8005b86:	d001      	beq.n	8005b8c <memcmp+0x1c>
 8005b88:	1b18      	subs	r0, r3, r4
 8005b8a:	bd10      	pop	{r4, pc}
 8005b8c:	3001      	adds	r0, #1
 8005b8e:	e7f2      	b.n	8005b76 <memcmp+0x6>

08005b90 <memset>:
 8005b90:	4402      	add	r2, r0
 8005b92:	4603      	mov	r3, r0
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d100      	bne.n	8005b9a <memset+0xa>
 8005b98:	4770      	bx	lr
 8005b9a:	f803 1b01 	strb.w	r1, [r3], #1
 8005b9e:	e7f9      	b.n	8005b94 <memset+0x4>

08005ba0 <__libc_init_array>:
 8005ba0:	b570      	push	{r4, r5, r6, lr}
 8005ba2:	4d0d      	ldr	r5, [pc, #52]	; (8005bd8 <__libc_init_array+0x38>)
 8005ba4:	4c0d      	ldr	r4, [pc, #52]	; (8005bdc <__libc_init_array+0x3c>)
 8005ba6:	1b64      	subs	r4, r4, r5
 8005ba8:	10a4      	asrs	r4, r4, #2
 8005baa:	2600      	movs	r6, #0
 8005bac:	42a6      	cmp	r6, r4
 8005bae:	d109      	bne.n	8005bc4 <__libc_init_array+0x24>
 8005bb0:	4d0b      	ldr	r5, [pc, #44]	; (8005be0 <__libc_init_array+0x40>)
 8005bb2:	4c0c      	ldr	r4, [pc, #48]	; (8005be4 <__libc_init_array+0x44>)
 8005bb4:	f000 f826 	bl	8005c04 <_init>
 8005bb8:	1b64      	subs	r4, r4, r5
 8005bba:	10a4      	asrs	r4, r4, #2
 8005bbc:	2600      	movs	r6, #0
 8005bbe:	42a6      	cmp	r6, r4
 8005bc0:	d105      	bne.n	8005bce <__libc_init_array+0x2e>
 8005bc2:	bd70      	pop	{r4, r5, r6, pc}
 8005bc4:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bc8:	4798      	blx	r3
 8005bca:	3601      	adds	r6, #1
 8005bcc:	e7ee      	b.n	8005bac <__libc_init_array+0xc>
 8005bce:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bd2:	4798      	blx	r3
 8005bd4:	3601      	adds	r6, #1
 8005bd6:	e7f2      	b.n	8005bbe <__libc_init_array+0x1e>
 8005bd8:	08005d78 	.word	0x08005d78
 8005bdc:	08005d78 	.word	0x08005d78
 8005be0:	08005d78 	.word	0x08005d78
 8005be4:	08005d7c 	.word	0x08005d7c

08005be8 <memcpy>:
 8005be8:	440a      	add	r2, r1
 8005bea:	4291      	cmp	r1, r2
 8005bec:	f100 33ff 	add.w	r3, r0, #4294967295
 8005bf0:	d100      	bne.n	8005bf4 <memcpy+0xc>
 8005bf2:	4770      	bx	lr
 8005bf4:	b510      	push	{r4, lr}
 8005bf6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005bfa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005bfe:	4291      	cmp	r1, r2
 8005c00:	d1f9      	bne.n	8005bf6 <memcpy+0xe>
 8005c02:	bd10      	pop	{r4, pc}

08005c04 <_init>:
 8005c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c06:	bf00      	nop
 8005c08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c0a:	bc08      	pop	{r3}
 8005c0c:	469e      	mov	lr, r3
 8005c0e:	4770      	bx	lr

08005c10 <_fini>:
 8005c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c12:	bf00      	nop
 8005c14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c16:	bc08      	pop	{r3}
 8005c18:	469e      	mov	lr, r3
 8005c1a:	4770      	bx	lr
