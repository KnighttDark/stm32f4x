
project_rtos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009190  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000280  08009320  08009320  00019320  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080095a0  080095a0  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  080095a0  080095a0  000195a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080095a8  080095a8  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080095a8  080095a8  000195a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080095ac  080095ac  000195ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  080095b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020060  2**0
                  CONTENTS
 10 .bss          0000723c  20000060  20000060  00020060  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000729c  2000729c  00020060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001c1f6  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003ae7  00000000  00000000  0003c2c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000018c8  00000000  00000000  0003fdb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001355  00000000  00000000  00041678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00024827  00000000  00000000  000429cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001c247  00000000  00000000  000671f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e7777  00000000  00000000  0008343b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00006fec  00000000  00000000  0016abb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000057  00000000  00000000  00171ba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009308 	.word	0x08009308

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	08009308 	.word	0x08009308

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2uiz>:
 8000a1c:	004a      	lsls	r2, r1, #1
 8000a1e:	d211      	bcs.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a24:	d211      	bcs.n	8000a4a <__aeabi_d2uiz+0x2e>
 8000a26:	d50d      	bpl.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d40e      	bmi.n	8000a50 <__aeabi_d2uiz+0x34>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a4e:	d102      	bne.n	8000a56 <__aeabi_d2uiz+0x3a>
 8000a50:	f04f 30ff 	mov.w	r0, #4294967295
 8000a54:	4770      	bx	lr
 8000a56:	f04f 0000 	mov.w	r0, #0
 8000a5a:	4770      	bx	lr

08000a5c <__aeabi_uldivmod>:
 8000a5c:	b953      	cbnz	r3, 8000a74 <__aeabi_uldivmod+0x18>
 8000a5e:	b94a      	cbnz	r2, 8000a74 <__aeabi_uldivmod+0x18>
 8000a60:	2900      	cmp	r1, #0
 8000a62:	bf08      	it	eq
 8000a64:	2800      	cmpeq	r0, #0
 8000a66:	bf1c      	itt	ne
 8000a68:	f04f 31ff 	movne.w	r1, #4294967295
 8000a6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a70:	f000 b970 	b.w	8000d54 <__aeabi_idiv0>
 8000a74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a7c:	f000 f806 	bl	8000a8c <__udivmoddi4>
 8000a80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a88:	b004      	add	sp, #16
 8000a8a:	4770      	bx	lr

08000a8c <__udivmoddi4>:
 8000a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a90:	9e08      	ldr	r6, [sp, #32]
 8000a92:	460d      	mov	r5, r1
 8000a94:	4604      	mov	r4, r0
 8000a96:	460f      	mov	r7, r1
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d14a      	bne.n	8000b32 <__udivmoddi4+0xa6>
 8000a9c:	428a      	cmp	r2, r1
 8000a9e:	4694      	mov	ip, r2
 8000aa0:	d965      	bls.n	8000b6e <__udivmoddi4+0xe2>
 8000aa2:	fab2 f382 	clz	r3, r2
 8000aa6:	b143      	cbz	r3, 8000aba <__udivmoddi4+0x2e>
 8000aa8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000aac:	f1c3 0220 	rsb	r2, r3, #32
 8000ab0:	409f      	lsls	r7, r3
 8000ab2:	fa20 f202 	lsr.w	r2, r0, r2
 8000ab6:	4317      	orrs	r7, r2
 8000ab8:	409c      	lsls	r4, r3
 8000aba:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000abe:	fa1f f58c 	uxth.w	r5, ip
 8000ac2:	fbb7 f1fe 	udiv	r1, r7, lr
 8000ac6:	0c22      	lsrs	r2, r4, #16
 8000ac8:	fb0e 7711 	mls	r7, lr, r1, r7
 8000acc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000ad0:	fb01 f005 	mul.w	r0, r1, r5
 8000ad4:	4290      	cmp	r0, r2
 8000ad6:	d90a      	bls.n	8000aee <__udivmoddi4+0x62>
 8000ad8:	eb1c 0202 	adds.w	r2, ip, r2
 8000adc:	f101 37ff 	add.w	r7, r1, #4294967295
 8000ae0:	f080 811c 	bcs.w	8000d1c <__udivmoddi4+0x290>
 8000ae4:	4290      	cmp	r0, r2
 8000ae6:	f240 8119 	bls.w	8000d1c <__udivmoddi4+0x290>
 8000aea:	3902      	subs	r1, #2
 8000aec:	4462      	add	r2, ip
 8000aee:	1a12      	subs	r2, r2, r0
 8000af0:	b2a4      	uxth	r4, r4
 8000af2:	fbb2 f0fe 	udiv	r0, r2, lr
 8000af6:	fb0e 2210 	mls	r2, lr, r0, r2
 8000afa:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000afe:	fb00 f505 	mul.w	r5, r0, r5
 8000b02:	42a5      	cmp	r5, r4
 8000b04:	d90a      	bls.n	8000b1c <__udivmoddi4+0x90>
 8000b06:	eb1c 0404 	adds.w	r4, ip, r4
 8000b0a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b0e:	f080 8107 	bcs.w	8000d20 <__udivmoddi4+0x294>
 8000b12:	42a5      	cmp	r5, r4
 8000b14:	f240 8104 	bls.w	8000d20 <__udivmoddi4+0x294>
 8000b18:	4464      	add	r4, ip
 8000b1a:	3802      	subs	r0, #2
 8000b1c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b20:	1b64      	subs	r4, r4, r5
 8000b22:	2100      	movs	r1, #0
 8000b24:	b11e      	cbz	r6, 8000b2e <__udivmoddi4+0xa2>
 8000b26:	40dc      	lsrs	r4, r3
 8000b28:	2300      	movs	r3, #0
 8000b2a:	e9c6 4300 	strd	r4, r3, [r6]
 8000b2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b32:	428b      	cmp	r3, r1
 8000b34:	d908      	bls.n	8000b48 <__udivmoddi4+0xbc>
 8000b36:	2e00      	cmp	r6, #0
 8000b38:	f000 80ed 	beq.w	8000d16 <__udivmoddi4+0x28a>
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	e9c6 0500 	strd	r0, r5, [r6]
 8000b42:	4608      	mov	r0, r1
 8000b44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b48:	fab3 f183 	clz	r1, r3
 8000b4c:	2900      	cmp	r1, #0
 8000b4e:	d149      	bne.n	8000be4 <__udivmoddi4+0x158>
 8000b50:	42ab      	cmp	r3, r5
 8000b52:	d302      	bcc.n	8000b5a <__udivmoddi4+0xce>
 8000b54:	4282      	cmp	r2, r0
 8000b56:	f200 80f8 	bhi.w	8000d4a <__udivmoddi4+0x2be>
 8000b5a:	1a84      	subs	r4, r0, r2
 8000b5c:	eb65 0203 	sbc.w	r2, r5, r3
 8000b60:	2001      	movs	r0, #1
 8000b62:	4617      	mov	r7, r2
 8000b64:	2e00      	cmp	r6, #0
 8000b66:	d0e2      	beq.n	8000b2e <__udivmoddi4+0xa2>
 8000b68:	e9c6 4700 	strd	r4, r7, [r6]
 8000b6c:	e7df      	b.n	8000b2e <__udivmoddi4+0xa2>
 8000b6e:	b902      	cbnz	r2, 8000b72 <__udivmoddi4+0xe6>
 8000b70:	deff      	udf	#255	; 0xff
 8000b72:	fab2 f382 	clz	r3, r2
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	f040 8090 	bne.w	8000c9c <__udivmoddi4+0x210>
 8000b7c:	1a8a      	subs	r2, r1, r2
 8000b7e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b82:	fa1f fe8c 	uxth.w	lr, ip
 8000b86:	2101      	movs	r1, #1
 8000b88:	fbb2 f5f7 	udiv	r5, r2, r7
 8000b8c:	fb07 2015 	mls	r0, r7, r5, r2
 8000b90:	0c22      	lsrs	r2, r4, #16
 8000b92:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000b96:	fb0e f005 	mul.w	r0, lr, r5
 8000b9a:	4290      	cmp	r0, r2
 8000b9c:	d908      	bls.n	8000bb0 <__udivmoddi4+0x124>
 8000b9e:	eb1c 0202 	adds.w	r2, ip, r2
 8000ba2:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ba6:	d202      	bcs.n	8000bae <__udivmoddi4+0x122>
 8000ba8:	4290      	cmp	r0, r2
 8000baa:	f200 80cb 	bhi.w	8000d44 <__udivmoddi4+0x2b8>
 8000bae:	4645      	mov	r5, r8
 8000bb0:	1a12      	subs	r2, r2, r0
 8000bb2:	b2a4      	uxth	r4, r4
 8000bb4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000bb8:	fb07 2210 	mls	r2, r7, r0, r2
 8000bbc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000bc0:	fb0e fe00 	mul.w	lr, lr, r0
 8000bc4:	45a6      	cmp	lr, r4
 8000bc6:	d908      	bls.n	8000bda <__udivmoddi4+0x14e>
 8000bc8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bcc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bd0:	d202      	bcs.n	8000bd8 <__udivmoddi4+0x14c>
 8000bd2:	45a6      	cmp	lr, r4
 8000bd4:	f200 80bb 	bhi.w	8000d4e <__udivmoddi4+0x2c2>
 8000bd8:	4610      	mov	r0, r2
 8000bda:	eba4 040e 	sub.w	r4, r4, lr
 8000bde:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000be2:	e79f      	b.n	8000b24 <__udivmoddi4+0x98>
 8000be4:	f1c1 0720 	rsb	r7, r1, #32
 8000be8:	408b      	lsls	r3, r1
 8000bea:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bee:	ea4c 0c03 	orr.w	ip, ip, r3
 8000bf2:	fa05 f401 	lsl.w	r4, r5, r1
 8000bf6:	fa20 f307 	lsr.w	r3, r0, r7
 8000bfa:	40fd      	lsrs	r5, r7
 8000bfc:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c00:	4323      	orrs	r3, r4
 8000c02:	fbb5 f8f9 	udiv	r8, r5, r9
 8000c06:	fa1f fe8c 	uxth.w	lr, ip
 8000c0a:	fb09 5518 	mls	r5, r9, r8, r5
 8000c0e:	0c1c      	lsrs	r4, r3, #16
 8000c10:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c14:	fb08 f50e 	mul.w	r5, r8, lr
 8000c18:	42a5      	cmp	r5, r4
 8000c1a:	fa02 f201 	lsl.w	r2, r2, r1
 8000c1e:	fa00 f001 	lsl.w	r0, r0, r1
 8000c22:	d90b      	bls.n	8000c3c <__udivmoddi4+0x1b0>
 8000c24:	eb1c 0404 	adds.w	r4, ip, r4
 8000c28:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c2c:	f080 8088 	bcs.w	8000d40 <__udivmoddi4+0x2b4>
 8000c30:	42a5      	cmp	r5, r4
 8000c32:	f240 8085 	bls.w	8000d40 <__udivmoddi4+0x2b4>
 8000c36:	f1a8 0802 	sub.w	r8, r8, #2
 8000c3a:	4464      	add	r4, ip
 8000c3c:	1b64      	subs	r4, r4, r5
 8000c3e:	b29d      	uxth	r5, r3
 8000c40:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c44:	fb09 4413 	mls	r4, r9, r3, r4
 8000c48:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000c4c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000c50:	45a6      	cmp	lr, r4
 8000c52:	d908      	bls.n	8000c66 <__udivmoddi4+0x1da>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f103 35ff 	add.w	r5, r3, #4294967295
 8000c5c:	d26c      	bcs.n	8000d38 <__udivmoddi4+0x2ac>
 8000c5e:	45a6      	cmp	lr, r4
 8000c60:	d96a      	bls.n	8000d38 <__udivmoddi4+0x2ac>
 8000c62:	3b02      	subs	r3, #2
 8000c64:	4464      	add	r4, ip
 8000c66:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c6a:	fba3 9502 	umull	r9, r5, r3, r2
 8000c6e:	eba4 040e 	sub.w	r4, r4, lr
 8000c72:	42ac      	cmp	r4, r5
 8000c74:	46c8      	mov	r8, r9
 8000c76:	46ae      	mov	lr, r5
 8000c78:	d356      	bcc.n	8000d28 <__udivmoddi4+0x29c>
 8000c7a:	d053      	beq.n	8000d24 <__udivmoddi4+0x298>
 8000c7c:	b156      	cbz	r6, 8000c94 <__udivmoddi4+0x208>
 8000c7e:	ebb0 0208 	subs.w	r2, r0, r8
 8000c82:	eb64 040e 	sbc.w	r4, r4, lr
 8000c86:	fa04 f707 	lsl.w	r7, r4, r7
 8000c8a:	40ca      	lsrs	r2, r1
 8000c8c:	40cc      	lsrs	r4, r1
 8000c8e:	4317      	orrs	r7, r2
 8000c90:	e9c6 7400 	strd	r7, r4, [r6]
 8000c94:	4618      	mov	r0, r3
 8000c96:	2100      	movs	r1, #0
 8000c98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9c:	f1c3 0120 	rsb	r1, r3, #32
 8000ca0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ca4:	fa20 f201 	lsr.w	r2, r0, r1
 8000ca8:	fa25 f101 	lsr.w	r1, r5, r1
 8000cac:	409d      	lsls	r5, r3
 8000cae:	432a      	orrs	r2, r5
 8000cb0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cb4:	fa1f fe8c 	uxth.w	lr, ip
 8000cb8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cbc:	fb07 1510 	mls	r5, r7, r0, r1
 8000cc0:	0c11      	lsrs	r1, r2, #16
 8000cc2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000cc6:	fb00 f50e 	mul.w	r5, r0, lr
 8000cca:	428d      	cmp	r5, r1
 8000ccc:	fa04 f403 	lsl.w	r4, r4, r3
 8000cd0:	d908      	bls.n	8000ce4 <__udivmoddi4+0x258>
 8000cd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cd6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cda:	d22f      	bcs.n	8000d3c <__udivmoddi4+0x2b0>
 8000cdc:	428d      	cmp	r5, r1
 8000cde:	d92d      	bls.n	8000d3c <__udivmoddi4+0x2b0>
 8000ce0:	3802      	subs	r0, #2
 8000ce2:	4461      	add	r1, ip
 8000ce4:	1b49      	subs	r1, r1, r5
 8000ce6:	b292      	uxth	r2, r2
 8000ce8:	fbb1 f5f7 	udiv	r5, r1, r7
 8000cec:	fb07 1115 	mls	r1, r7, r5, r1
 8000cf0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000cf4:	fb05 f10e 	mul.w	r1, r5, lr
 8000cf8:	4291      	cmp	r1, r2
 8000cfa:	d908      	bls.n	8000d0e <__udivmoddi4+0x282>
 8000cfc:	eb1c 0202 	adds.w	r2, ip, r2
 8000d00:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d04:	d216      	bcs.n	8000d34 <__udivmoddi4+0x2a8>
 8000d06:	4291      	cmp	r1, r2
 8000d08:	d914      	bls.n	8000d34 <__udivmoddi4+0x2a8>
 8000d0a:	3d02      	subs	r5, #2
 8000d0c:	4462      	add	r2, ip
 8000d0e:	1a52      	subs	r2, r2, r1
 8000d10:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000d14:	e738      	b.n	8000b88 <__udivmoddi4+0xfc>
 8000d16:	4631      	mov	r1, r6
 8000d18:	4630      	mov	r0, r6
 8000d1a:	e708      	b.n	8000b2e <__udivmoddi4+0xa2>
 8000d1c:	4639      	mov	r1, r7
 8000d1e:	e6e6      	b.n	8000aee <__udivmoddi4+0x62>
 8000d20:	4610      	mov	r0, r2
 8000d22:	e6fb      	b.n	8000b1c <__udivmoddi4+0x90>
 8000d24:	4548      	cmp	r0, r9
 8000d26:	d2a9      	bcs.n	8000c7c <__udivmoddi4+0x1f0>
 8000d28:	ebb9 0802 	subs.w	r8, r9, r2
 8000d2c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000d30:	3b01      	subs	r3, #1
 8000d32:	e7a3      	b.n	8000c7c <__udivmoddi4+0x1f0>
 8000d34:	4645      	mov	r5, r8
 8000d36:	e7ea      	b.n	8000d0e <__udivmoddi4+0x282>
 8000d38:	462b      	mov	r3, r5
 8000d3a:	e794      	b.n	8000c66 <__udivmoddi4+0x1da>
 8000d3c:	4640      	mov	r0, r8
 8000d3e:	e7d1      	b.n	8000ce4 <__udivmoddi4+0x258>
 8000d40:	46d0      	mov	r8, sl
 8000d42:	e77b      	b.n	8000c3c <__udivmoddi4+0x1b0>
 8000d44:	3d02      	subs	r5, #2
 8000d46:	4462      	add	r2, ip
 8000d48:	e732      	b.n	8000bb0 <__udivmoddi4+0x124>
 8000d4a:	4608      	mov	r0, r1
 8000d4c:	e70a      	b.n	8000b64 <__udivmoddi4+0xd8>
 8000d4e:	4464      	add	r4, ip
 8000d50:	3802      	subs	r0, #2
 8000d52:	e742      	b.n	8000bda <__udivmoddi4+0x14e>

08000d54 <__aeabi_idiv0>:
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop

08000d58 <microDelay>:
#include "dht11.h"
extern TIM_HandleTypeDef htim1;
void microDelay(uint16_t delay)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b083      	sub	sp, #12
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	4603      	mov	r3, r0
 8000d60:	80fb      	strh	r3, [r7, #6]
  __HAL_TIM_SET_COUNTER(&htim1, 0);
 8000d62:	4b09      	ldr	r3, [pc, #36]	; (8000d88 <microDelay+0x30>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	2200      	movs	r2, #0
 8000d68:	625a      	str	r2, [r3, #36]	; 0x24
  while (__HAL_TIM_GET_COUNTER(&htim1) < delay);
 8000d6a:	bf00      	nop
 8000d6c:	4b06      	ldr	r3, [pc, #24]	; (8000d88 <microDelay+0x30>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000d72:	88fb      	ldrh	r3, [r7, #6]
 8000d74:	429a      	cmp	r2, r3
 8000d76:	d3f9      	bcc.n	8000d6c <microDelay+0x14>
}
 8000d78:	bf00      	nop
 8000d7a:	bf00      	nop
 8000d7c:	370c      	adds	r7, #12
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop
 8000d88:	200000c4 	.word	0x200000c4

08000d8c <DHT11_Start>:

uint8_t DHT11_Start(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b088      	sub	sp, #32
 8000d90:	af00      	add	r7, sp, #0
  uint8_t Response = 0;
 8000d92:	2300      	movs	r3, #0
 8000d94:	77fb      	strb	r3, [r7, #31]
  GPIO_InitTypeDef GPIO_InitStructPrivate = {0};
 8000d96:	463b      	mov	r3, r7
 8000d98:	2200      	movs	r2, #0
 8000d9a:	601a      	str	r2, [r3, #0]
 8000d9c:	605a      	str	r2, [r3, #4]
 8000d9e:	609a      	str	r2, [r3, #8]
 8000da0:	60da      	str	r2, [r3, #12]
 8000da2:	611a      	str	r2, [r3, #16]
  GPIO_InitStructPrivate.Pin = DHT11_PIN;
 8000da4:	2320      	movs	r3, #32
 8000da6:	603b      	str	r3, [r7, #0]
  GPIO_InitStructPrivate.Mode = GPIO_MODE_OUTPUT_PP;
 8000da8:	2301      	movs	r3, #1
 8000daa:	607b      	str	r3, [r7, #4]
  GPIO_InitStructPrivate.Speed = GPIO_SPEED_FREQ_LOW;
 8000dac:	2300      	movs	r3, #0
 8000dae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructPrivate.Pull = GPIO_NOPULL;
 8000db0:	2300      	movs	r3, #0
 8000db2:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStructPrivate); // set the pin as output
 8000db4:	463b      	mov	r3, r7
 8000db6:	4619      	mov	r1, r3
 8000db8:	4826      	ldr	r0, [pc, #152]	; (8000e54 <DHT11_Start+0xc8>)
 8000dba:	f001 fb53 	bl	8002464 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(DHT11_PORT, DHT11_PIN, 0);   // pull the pin low
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	2120      	movs	r1, #32
 8000dc2:	4824      	ldr	r0, [pc, #144]	; (8000e54 <DHT11_Start+0xc8>)
 8000dc4:	f001 fd02 	bl	80027cc <HAL_GPIO_WritePin>
  HAL_Delay(20);   // wait for 20ms
 8000dc8:	2014      	movs	r0, #20
 8000dca:	f000 fe75 	bl	8001ab8 <HAL_Delay>
  HAL_GPIO_WritePin(DHT11_PORT, DHT11_PIN, 1);   // pull the pin high
 8000dce:	2201      	movs	r2, #1
 8000dd0:	2120      	movs	r1, #32
 8000dd2:	4820      	ldr	r0, [pc, #128]	; (8000e54 <DHT11_Start+0xc8>)
 8000dd4:	f001 fcfa 	bl	80027cc <HAL_GPIO_WritePin>
  microDelay(30);   // wait for 30us
 8000dd8:	201e      	movs	r0, #30
 8000dda:	f7ff ffbd 	bl	8000d58 <microDelay>
  GPIO_InitStructPrivate.Mode = GPIO_MODE_INPUT;
 8000dde:	2300      	movs	r3, #0
 8000de0:	607b      	str	r3, [r7, #4]
  GPIO_InitStructPrivate.Pull = GPIO_PULLUP;
 8000de2:	2301      	movs	r3, #1
 8000de4:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStructPrivate); // set the pin as input
 8000de6:	463b      	mov	r3, r7
 8000de8:	4619      	mov	r1, r3
 8000dea:	481a      	ldr	r0, [pc, #104]	; (8000e54 <DHT11_Start+0xc8>)
 8000dec:	f001 fb3a 	bl	8002464 <HAL_GPIO_Init>
  microDelay(40);
 8000df0:	2028      	movs	r0, #40	; 0x28
 8000df2:	f7ff ffb1 	bl	8000d58 <microDelay>
  if (!(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)))
 8000df6:	2120      	movs	r1, #32
 8000df8:	4816      	ldr	r0, [pc, #88]	; (8000e54 <DHT11_Start+0xc8>)
 8000dfa:	f001 fccf 	bl	800279c <HAL_GPIO_ReadPin>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d10b      	bne.n	8000e1c <DHT11_Start+0x90>
  {
    microDelay(80);
 8000e04:	2050      	movs	r0, #80	; 0x50
 8000e06:	f7ff ffa7 	bl	8000d58 <microDelay>
    if ((HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN))) Response = 1;
 8000e0a:	2120      	movs	r1, #32
 8000e0c:	4811      	ldr	r0, [pc, #68]	; (8000e54 <DHT11_Start+0xc8>)
 8000e0e:	f001 fcc5 	bl	800279c <HAL_GPIO_ReadPin>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d001      	beq.n	8000e1c <DHT11_Start+0x90>
 8000e18:	2301      	movs	r3, #1
 8000e1a:	77fb      	strb	r3, [r7, #31]
  }
  uint32_t pMillis = HAL_GetTick();
 8000e1c:	f000 fe40 	bl	8001aa0 <HAL_GetTick>
 8000e20:	6178      	str	r0, [r7, #20]
  uint32_t cMillis = HAL_GetTick();
 8000e22:	f000 fe3d 	bl	8001aa0 <HAL_GetTick>
 8000e26:	61b8      	str	r0, [r7, #24]
  while ((HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8000e28:	e002      	b.n	8000e30 <DHT11_Start+0xa4>
  {
    cMillis = HAL_GetTick();
 8000e2a:	f000 fe39 	bl	8001aa0 <HAL_GetTick>
 8000e2e:	61b8      	str	r0, [r7, #24]
  while ((HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8000e30:	2120      	movs	r1, #32
 8000e32:	4808      	ldr	r0, [pc, #32]	; (8000e54 <DHT11_Start+0xc8>)
 8000e34:	f001 fcb2 	bl	800279c <HAL_GPIO_ReadPin>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d004      	beq.n	8000e48 <DHT11_Start+0xbc>
 8000e3e:	697b      	ldr	r3, [r7, #20]
 8000e40:	3302      	adds	r3, #2
 8000e42:	69ba      	ldr	r2, [r7, #24]
 8000e44:	429a      	cmp	r2, r3
 8000e46:	d3f0      	bcc.n	8000e2a <DHT11_Start+0x9e>
  }
  return Response;
 8000e48:	7ffb      	ldrb	r3, [r7, #31]
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	3720      	adds	r7, #32
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	40021000 	.word	0x40021000

08000e58 <DHT11_Read>:

uint8_t DHT11_Read(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b084      	sub	sp, #16
 8000e5c:	af00      	add	r7, sp, #0
  uint8_t a, b = 0;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	73bb      	strb	r3, [r7, #14]
  for (a = 0; a < 8; a++)
 8000e62:	2300      	movs	r3, #0
 8000e64:	73fb      	strb	r3, [r7, #15]
 8000e66:	e053      	b.n	8000f10 <DHT11_Read+0xb8>
  {
    uint32_t pMillis = HAL_GetTick();
 8000e68:	f000 fe1a 	bl	8001aa0 <HAL_GetTick>
 8000e6c:	6078      	str	r0, [r7, #4]
    uint32_t cMillis = HAL_GetTick();
 8000e6e:	f000 fe17 	bl	8001aa0 <HAL_GetTick>
 8000e72:	60b8      	str	r0, [r7, #8]
    while (!(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8000e74:	e002      	b.n	8000e7c <DHT11_Read+0x24>
    {
      cMillis = HAL_GetTick();
 8000e76:	f000 fe13 	bl	8001aa0 <HAL_GetTick>
 8000e7a:	60b8      	str	r0, [r7, #8]
    while (!(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8000e7c:	2120      	movs	r1, #32
 8000e7e:	4828      	ldr	r0, [pc, #160]	; (8000f20 <DHT11_Read+0xc8>)
 8000e80:	f001 fc8c 	bl	800279c <HAL_GPIO_ReadPin>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d104      	bne.n	8000e94 <DHT11_Read+0x3c>
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	3302      	adds	r3, #2
 8000e8e:	68ba      	ldr	r2, [r7, #8]
 8000e90:	429a      	cmp	r2, r3
 8000e92:	d3f0      	bcc.n	8000e76 <DHT11_Read+0x1e>
    }
    microDelay(40);   // wait for 40 us
 8000e94:	2028      	movs	r0, #40	; 0x28
 8000e96:	f7ff ff5f 	bl	8000d58 <microDelay>
    if (!(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)))   // if the pin is low
 8000e9a:	2120      	movs	r1, #32
 8000e9c:	4820      	ldr	r0, [pc, #128]	; (8000f20 <DHT11_Read+0xc8>)
 8000e9e:	f001 fc7d 	bl	800279c <HAL_GPIO_ReadPin>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d10e      	bne.n	8000ec6 <DHT11_Read+0x6e>
      b &= ~(1 << (7 - a));
 8000ea8:	7bfb      	ldrb	r3, [r7, #15]
 8000eaa:	f1c3 0307 	rsb	r3, r3, #7
 8000eae:	2201      	movs	r2, #1
 8000eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb4:	b25b      	sxtb	r3, r3
 8000eb6:	43db      	mvns	r3, r3
 8000eb8:	b25a      	sxtb	r2, r3
 8000eba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000ebe:	4013      	ands	r3, r2
 8000ec0:	b25b      	sxtb	r3, r3
 8000ec2:	73bb      	strb	r3, [r7, #14]
 8000ec4:	e00b      	b.n	8000ede <DHT11_Read+0x86>
    else
      b |= (1 << (7 - a));
 8000ec6:	7bfb      	ldrb	r3, [r7, #15]
 8000ec8:	f1c3 0307 	rsb	r3, r3, #7
 8000ecc:	2201      	movs	r2, #1
 8000ece:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed2:	b25a      	sxtb	r2, r3
 8000ed4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000ed8:	4313      	orrs	r3, r2
 8000eda:	b25b      	sxtb	r3, r3
 8000edc:	73bb      	strb	r3, [r7, #14]
    pMillis = HAL_GetTick();
 8000ede:	f000 fddf 	bl	8001aa0 <HAL_GetTick>
 8000ee2:	6078      	str	r0, [r7, #4]
    cMillis = HAL_GetTick();
 8000ee4:	f000 fddc 	bl	8001aa0 <HAL_GetTick>
 8000ee8:	60b8      	str	r0, [r7, #8]
    while ((HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8000eea:	e002      	b.n	8000ef2 <DHT11_Read+0x9a>
    {
      cMillis = HAL_GetTick();
 8000eec:	f000 fdd8 	bl	8001aa0 <HAL_GetTick>
 8000ef0:	60b8      	str	r0, [r7, #8]
    while ((HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8000ef2:	2120      	movs	r1, #32
 8000ef4:	480a      	ldr	r0, [pc, #40]	; (8000f20 <DHT11_Read+0xc8>)
 8000ef6:	f001 fc51 	bl	800279c <HAL_GPIO_ReadPin>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d004      	beq.n	8000f0a <DHT11_Read+0xb2>
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	3302      	adds	r3, #2
 8000f04:	68ba      	ldr	r2, [r7, #8]
 8000f06:	429a      	cmp	r2, r3
 8000f08:	d3f0      	bcc.n	8000eec <DHT11_Read+0x94>
  for (a = 0; a < 8; a++)
 8000f0a:	7bfb      	ldrb	r3, [r7, #15]
 8000f0c:	3301      	adds	r3, #1
 8000f0e:	73fb      	strb	r3, [r7, #15]
 8000f10:	7bfb      	ldrb	r3, [r7, #15]
 8000f12:	2b07      	cmp	r3, #7
 8000f14:	d9a8      	bls.n	8000e68 <DHT11_Read+0x10>
    }
  }
  return b;
 8000f16:	7bbb      	ldrb	r3, [r7, #14]
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	3710      	adds	r7, #16
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	40021000 	.word	0x40021000

08000f24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	DWT->CTRL |= (1<<0);
 8000f28:	4b29      	ldr	r3, [pc, #164]	; (8000fd0 <main+0xac>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a28      	ldr	r2, [pc, #160]	; (8000fd0 <main+0xac>)
 8000f2e:	f043 0301 	orr.w	r3, r3, #1
 8000f32:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f34:	f000 fd4e 	bl	80019d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f38:	f000 f874 	bl	8001024 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f3c:	f000 f9a6 	bl	800128c <MX_GPIO_Init>
  MX_TIM1_Init();
 8000f40:	f000 f92a 	bl	8001198 <MX_TIM1_Init>
  MX_ADC1_Init();
 8000f44:	f000 f8d6 	bl	80010f4 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8000f48:	f000 f976 	bl	8001238 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 8000f4c:	4821      	ldr	r0, [pc, #132]	; (8000fd4 <main+0xb0>)
 8000f4e:	f002 f8ff 	bl	8003150 <HAL_TIM_Base_Start>
  HAL_ADC_Start(&hadc1);
 8000f52:	4821      	ldr	r0, [pc, #132]	; (8000fd8 <main+0xb4>)
 8000f54:	f000 fe18 	bl	8001b88 <HAL_ADC_Start>
  SEGGER_SYSVIEW_Conf();
 8000f58:	f005 ffc6 	bl	8006ee8 <SEGGER_SYSVIEW_Conf>
  vSetVarulMaxPRIGROUPValue();
 8000f5c:	f005 fd74 	bl	8006a48 <vSetVarulMaxPRIGROUPValue>
  SEGGER_SYSVIEW_Start();
 8000f60:	f006 ff46 	bl	8007df0 <SEGGER_SYSVIEW_Start>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000f64:	f002 ffd0 	bl	8003f08 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of myTask1 */
  myTask1Handle = osThreadNew(StartTask1, NULL, &myTask1_attributes);
 8000f68:	4a1c      	ldr	r2, [pc, #112]	; (8000fdc <main+0xb8>)
 8000f6a:	2100      	movs	r1, #0
 8000f6c:	481c      	ldr	r0, [pc, #112]	; (8000fe0 <main+0xbc>)
 8000f6e:	f003 f815 	bl	8003f9c <osThreadNew>
 8000f72:	4603      	mov	r3, r0
 8000f74:	4a1b      	ldr	r2, [pc, #108]	; (8000fe4 <main+0xc0>)
 8000f76:	6013      	str	r3, [r2, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 8000f78:	4a1b      	ldr	r2, [pc, #108]	; (8000fe8 <main+0xc4>)
 8000f7a:	2100      	movs	r1, #0
 8000f7c:	481b      	ldr	r0, [pc, #108]	; (8000fec <main+0xc8>)
 8000f7e:	f003 f80d 	bl	8003f9c <osThreadNew>
 8000f82:	4603      	mov	r3, r0
 8000f84:	4a1a      	ldr	r2, [pc, #104]	; (8000ff0 <main+0xcc>)
 8000f86:	6013      	str	r3, [r2, #0]

  /* creation of TaskDHT11 */
  TaskDHT11Handle = osThreadNew(StartTaskDHT11, NULL, &TaskDHT11_attributes);
 8000f88:	4a1a      	ldr	r2, [pc, #104]	; (8000ff4 <main+0xd0>)
 8000f8a:	2100      	movs	r1, #0
 8000f8c:	481a      	ldr	r0, [pc, #104]	; (8000ff8 <main+0xd4>)
 8000f8e:	f003 f805 	bl	8003f9c <osThreadNew>
 8000f92:	4603      	mov	r3, r0
 8000f94:	4a19      	ldr	r2, [pc, #100]	; (8000ffc <main+0xd8>)
 8000f96:	6013      	str	r3, [r2, #0]

  /* creation of TaskHC */
  TaskHCHandle = osThreadNew(StartTaskHC, NULL, &TaskHC_attributes);
 8000f98:	4a19      	ldr	r2, [pc, #100]	; (8001000 <main+0xdc>)
 8000f9a:	2100      	movs	r1, #0
 8000f9c:	4819      	ldr	r0, [pc, #100]	; (8001004 <main+0xe0>)
 8000f9e:	f002 fffd 	bl	8003f9c <osThreadNew>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	4a18      	ldr	r2, [pc, #96]	; (8001008 <main+0xe4>)
 8000fa6:	6013      	str	r3, [r2, #0]

  /* creation of TaskRainSensor */
  TaskRainSensorHandle = osThreadNew(StartTaskRainSensor, NULL, &TaskRainSensor_attributes);
 8000fa8:	4a18      	ldr	r2, [pc, #96]	; (800100c <main+0xe8>)
 8000faa:	2100      	movs	r1, #0
 8000fac:	4818      	ldr	r0, [pc, #96]	; (8001010 <main+0xec>)
 8000fae:	f002 fff5 	bl	8003f9c <osThreadNew>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	4a17      	ldr	r2, [pc, #92]	; (8001014 <main+0xf0>)
 8000fb6:	6013      	str	r3, [r2, #0]

  /* creation of TaskLED */
  TaskLEDHandle = osThreadNew(StartTaskLED, NULL, &TaskLED_attributes);
 8000fb8:	4a17      	ldr	r2, [pc, #92]	; (8001018 <main+0xf4>)
 8000fba:	2100      	movs	r1, #0
 8000fbc:	4817      	ldr	r0, [pc, #92]	; (800101c <main+0xf8>)
 8000fbe:	f002 ffed 	bl	8003f9c <osThreadNew>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	4a16      	ldr	r2, [pc, #88]	; (8001020 <main+0xfc>)
 8000fc6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000fc8:	f002 ffc2 	bl	8003f50 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000fcc:	e7fe      	b.n	8000fcc <main+0xa8>
 8000fce:	bf00      	nop
 8000fd0:	e0001000 	.word	0xe0001000
 8000fd4:	200000c4 	.word	0x200000c4
 8000fd8:	2000007c 	.word	0x2000007c
 8000fdc:	08009468 	.word	0x08009468
 8000fe0:	080013f1 	.word	0x080013f1
 8000fe4:	20000150 	.word	0x20000150
 8000fe8:	0800948c 	.word	0x0800948c
 8000fec:	08001401 	.word	0x08001401
 8000ff0:	20000154 	.word	0x20000154
 8000ff4:	080094b0 	.word	0x080094b0
 8000ff8:	08001411 	.word	0x08001411
 8000ffc:	20000158 	.word	0x20000158
 8001000:	080094d4 	.word	0x080094d4
 8001004:	080014e9 	.word	0x080014e9
 8001008:	2000015c 	.word	0x2000015c
 800100c:	080094f8 	.word	0x080094f8
 8001010:	08001629 	.word	0x08001629
 8001014:	20000160 	.word	0x20000160
 8001018:	0800951c 	.word	0x0800951c
 800101c:	08001695 	.word	0x08001695
 8001020:	20000164 	.word	0x20000164

08001024 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b094      	sub	sp, #80	; 0x50
 8001028:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800102a:	f107 0320 	add.w	r3, r7, #32
 800102e:	2230      	movs	r2, #48	; 0x30
 8001030:	2100      	movs	r1, #0
 8001032:	4618      	mov	r0, r3
 8001034:	f007 fce4 	bl	8008a00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001038:	f107 030c 	add.w	r3, r7, #12
 800103c:	2200      	movs	r2, #0
 800103e:	601a      	str	r2, [r3, #0]
 8001040:	605a      	str	r2, [r3, #4]
 8001042:	609a      	str	r2, [r3, #8]
 8001044:	60da      	str	r2, [r3, #12]
 8001046:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001048:	2300      	movs	r3, #0
 800104a:	60bb      	str	r3, [r7, #8]
 800104c:	4b27      	ldr	r3, [pc, #156]	; (80010ec <SystemClock_Config+0xc8>)
 800104e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001050:	4a26      	ldr	r2, [pc, #152]	; (80010ec <SystemClock_Config+0xc8>)
 8001052:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001056:	6413      	str	r3, [r2, #64]	; 0x40
 8001058:	4b24      	ldr	r3, [pc, #144]	; (80010ec <SystemClock_Config+0xc8>)
 800105a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800105c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001060:	60bb      	str	r3, [r7, #8]
 8001062:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001064:	2300      	movs	r3, #0
 8001066:	607b      	str	r3, [r7, #4]
 8001068:	4b21      	ldr	r3, [pc, #132]	; (80010f0 <SystemClock_Config+0xcc>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a20      	ldr	r2, [pc, #128]	; (80010f0 <SystemClock_Config+0xcc>)
 800106e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001072:	6013      	str	r3, [r2, #0]
 8001074:	4b1e      	ldr	r3, [pc, #120]	; (80010f0 <SystemClock_Config+0xcc>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800107c:	607b      	str	r3, [r7, #4]
 800107e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001080:	2302      	movs	r3, #2
 8001082:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001084:	2301      	movs	r3, #1
 8001086:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001088:	2310      	movs	r3, #16
 800108a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800108c:	2302      	movs	r3, #2
 800108e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001090:	2300      	movs	r3, #0
 8001092:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001094:	2308      	movs	r3, #8
 8001096:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001098:	2348      	movs	r3, #72	; 0x48
 800109a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800109c:	2302      	movs	r3, #2
 800109e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80010a0:	2304      	movs	r3, #4
 80010a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010a4:	f107 0320 	add.w	r3, r7, #32
 80010a8:	4618      	mov	r0, r3
 80010aa:	f001 fba9 	bl	8002800 <HAL_RCC_OscConfig>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80010b4:	f000 fb18 	bl	80016e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010b8:	230f      	movs	r3, #15
 80010ba:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010bc:	2302      	movs	r3, #2
 80010be:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010c0:	2300      	movs	r3, #0
 80010c2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010c8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010ca:	2300      	movs	r3, #0
 80010cc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010ce:	f107 030c 	add.w	r3, r7, #12
 80010d2:	2102      	movs	r1, #2
 80010d4:	4618      	mov	r0, r3
 80010d6:	f001 fe0b 	bl	8002cf0 <HAL_RCC_ClockConfig>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80010e0:	f000 fb02 	bl	80016e8 <Error_Handler>
  }
}
 80010e4:	bf00      	nop
 80010e6:	3750      	adds	r7, #80	; 0x50
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	40023800 	.word	0x40023800
 80010f0:	40007000 	.word	0x40007000

080010f4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b084      	sub	sp, #16
 80010f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010fa:	463b      	mov	r3, r7
 80010fc:	2200      	movs	r2, #0
 80010fe:	601a      	str	r2, [r3, #0]
 8001100:	605a      	str	r2, [r3, #4]
 8001102:	609a      	str	r2, [r3, #8]
 8001104:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001106:	4b21      	ldr	r3, [pc, #132]	; (800118c <MX_ADC1_Init+0x98>)
 8001108:	4a21      	ldr	r2, [pc, #132]	; (8001190 <MX_ADC1_Init+0x9c>)
 800110a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800110c:	4b1f      	ldr	r3, [pc, #124]	; (800118c <MX_ADC1_Init+0x98>)
 800110e:	2200      	movs	r2, #0
 8001110:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001112:	4b1e      	ldr	r3, [pc, #120]	; (800118c <MX_ADC1_Init+0x98>)
 8001114:	2200      	movs	r2, #0
 8001116:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001118:	4b1c      	ldr	r3, [pc, #112]	; (800118c <MX_ADC1_Init+0x98>)
 800111a:	2200      	movs	r2, #0
 800111c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800111e:	4b1b      	ldr	r3, [pc, #108]	; (800118c <MX_ADC1_Init+0x98>)
 8001120:	2200      	movs	r2, #0
 8001122:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001124:	4b19      	ldr	r3, [pc, #100]	; (800118c <MX_ADC1_Init+0x98>)
 8001126:	2200      	movs	r2, #0
 8001128:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800112c:	4b17      	ldr	r3, [pc, #92]	; (800118c <MX_ADC1_Init+0x98>)
 800112e:	2200      	movs	r2, #0
 8001130:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001132:	4b16      	ldr	r3, [pc, #88]	; (800118c <MX_ADC1_Init+0x98>)
 8001134:	4a17      	ldr	r2, [pc, #92]	; (8001194 <MX_ADC1_Init+0xa0>)
 8001136:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001138:	4b14      	ldr	r3, [pc, #80]	; (800118c <MX_ADC1_Init+0x98>)
 800113a:	2200      	movs	r2, #0
 800113c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800113e:	4b13      	ldr	r3, [pc, #76]	; (800118c <MX_ADC1_Init+0x98>)
 8001140:	2201      	movs	r2, #1
 8001142:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001144:	4b11      	ldr	r3, [pc, #68]	; (800118c <MX_ADC1_Init+0x98>)
 8001146:	2200      	movs	r2, #0
 8001148:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800114c:	4b0f      	ldr	r3, [pc, #60]	; (800118c <MX_ADC1_Init+0x98>)
 800114e:	2201      	movs	r2, #1
 8001150:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001152:	480e      	ldr	r0, [pc, #56]	; (800118c <MX_ADC1_Init+0x98>)
 8001154:	f000 fcd4 	bl	8001b00 <HAL_ADC_Init>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800115e:	f000 fac3 	bl	80016e8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001162:	2300      	movs	r3, #0
 8001164:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001166:	2301      	movs	r3, #1
 8001168:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800116a:	2300      	movs	r3, #0
 800116c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800116e:	463b      	mov	r3, r7
 8001170:	4619      	mov	r1, r3
 8001172:	4806      	ldr	r0, [pc, #24]	; (800118c <MX_ADC1_Init+0x98>)
 8001174:	f000 fe72 	bl	8001e5c <HAL_ADC_ConfigChannel>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800117e:	f000 fab3 	bl	80016e8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001182:	bf00      	nop
 8001184:	3710      	adds	r7, #16
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	2000007c 	.word	0x2000007c
 8001190:	40012000 	.word	0x40012000
 8001194:	0f000001 	.word	0x0f000001

08001198 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b086      	sub	sp, #24
 800119c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800119e:	f107 0308 	add.w	r3, r7, #8
 80011a2:	2200      	movs	r2, #0
 80011a4:	601a      	str	r2, [r3, #0]
 80011a6:	605a      	str	r2, [r3, #4]
 80011a8:	609a      	str	r2, [r3, #8]
 80011aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011ac:	463b      	mov	r3, r7
 80011ae:	2200      	movs	r2, #0
 80011b0:	601a      	str	r2, [r3, #0]
 80011b2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80011b4:	4b1e      	ldr	r3, [pc, #120]	; (8001230 <MX_TIM1_Init+0x98>)
 80011b6:	4a1f      	ldr	r2, [pc, #124]	; (8001234 <MX_TIM1_Init+0x9c>)
 80011b8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72;
 80011ba:	4b1d      	ldr	r3, [pc, #116]	; (8001230 <MX_TIM1_Init+0x98>)
 80011bc:	2248      	movs	r2, #72	; 0x48
 80011be:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011c0:	4b1b      	ldr	r3, [pc, #108]	; (8001230 <MX_TIM1_Init+0x98>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80011c6:	4b1a      	ldr	r3, [pc, #104]	; (8001230 <MX_TIM1_Init+0x98>)
 80011c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011cc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011ce:	4b18      	ldr	r3, [pc, #96]	; (8001230 <MX_TIM1_Init+0x98>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80011d4:	4b16      	ldr	r3, [pc, #88]	; (8001230 <MX_TIM1_Init+0x98>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011da:	4b15      	ldr	r3, [pc, #84]	; (8001230 <MX_TIM1_Init+0x98>)
 80011dc:	2200      	movs	r2, #0
 80011de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80011e0:	4813      	ldr	r0, [pc, #76]	; (8001230 <MX_TIM1_Init+0x98>)
 80011e2:	f001 ff65 	bl	80030b0 <HAL_TIM_Base_Init>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80011ec:	f000 fa7c 	bl	80016e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011f4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80011f6:	f107 0308 	add.w	r3, r7, #8
 80011fa:	4619      	mov	r1, r3
 80011fc:	480c      	ldr	r0, [pc, #48]	; (8001230 <MX_TIM1_Init+0x98>)
 80011fe:	f002 f80f 	bl	8003220 <HAL_TIM_ConfigClockSource>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001208:	f000 fa6e 	bl	80016e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800120c:	2300      	movs	r3, #0
 800120e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001210:	2300      	movs	r3, #0
 8001212:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001214:	463b      	mov	r3, r7
 8001216:	4619      	mov	r1, r3
 8001218:	4805      	ldr	r0, [pc, #20]	; (8001230 <MX_TIM1_Init+0x98>)
 800121a:	f002 fa03 	bl	8003624 <HAL_TIMEx_MasterConfigSynchronization>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001224:	f000 fa60 	bl	80016e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001228:	bf00      	nop
 800122a:	3718      	adds	r7, #24
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	200000c4 	.word	0x200000c4
 8001234:	40010000 	.word	0x40010000

08001238 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800123c:	4b11      	ldr	r3, [pc, #68]	; (8001284 <MX_USART2_UART_Init+0x4c>)
 800123e:	4a12      	ldr	r2, [pc, #72]	; (8001288 <MX_USART2_UART_Init+0x50>)
 8001240:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001242:	4b10      	ldr	r3, [pc, #64]	; (8001284 <MX_USART2_UART_Init+0x4c>)
 8001244:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001248:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800124a:	4b0e      	ldr	r3, [pc, #56]	; (8001284 <MX_USART2_UART_Init+0x4c>)
 800124c:	2200      	movs	r2, #0
 800124e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001250:	4b0c      	ldr	r3, [pc, #48]	; (8001284 <MX_USART2_UART_Init+0x4c>)
 8001252:	2200      	movs	r2, #0
 8001254:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001256:	4b0b      	ldr	r3, [pc, #44]	; (8001284 <MX_USART2_UART_Init+0x4c>)
 8001258:	2200      	movs	r2, #0
 800125a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800125c:	4b09      	ldr	r3, [pc, #36]	; (8001284 <MX_USART2_UART_Init+0x4c>)
 800125e:	220c      	movs	r2, #12
 8001260:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001262:	4b08      	ldr	r3, [pc, #32]	; (8001284 <MX_USART2_UART_Init+0x4c>)
 8001264:	2200      	movs	r2, #0
 8001266:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001268:	4b06      	ldr	r3, [pc, #24]	; (8001284 <MX_USART2_UART_Init+0x4c>)
 800126a:	2200      	movs	r2, #0
 800126c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800126e:	4805      	ldr	r0, [pc, #20]	; (8001284 <MX_USART2_UART_Init+0x4c>)
 8001270:	f002 fa54 	bl	800371c <HAL_UART_Init>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800127a:	f000 fa35 	bl	80016e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800127e:	bf00      	nop
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	2000010c 	.word	0x2000010c
 8001288:	40004400 	.word	0x40004400

0800128c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b08a      	sub	sp, #40	; 0x28
 8001290:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001292:	f107 0314 	add.w	r3, r7, #20
 8001296:	2200      	movs	r2, #0
 8001298:	601a      	str	r2, [r3, #0]
 800129a:	605a      	str	r2, [r3, #4]
 800129c:	609a      	str	r2, [r3, #8]
 800129e:	60da      	str	r2, [r3, #12]
 80012a0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80012a2:	2300      	movs	r3, #0
 80012a4:	613b      	str	r3, [r7, #16]
 80012a6:	4b4e      	ldr	r3, [pc, #312]	; (80013e0 <MX_GPIO_Init+0x154>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012aa:	4a4d      	ldr	r2, [pc, #308]	; (80013e0 <MX_GPIO_Init+0x154>)
 80012ac:	f043 0310 	orr.w	r3, r3, #16
 80012b0:	6313      	str	r3, [r2, #48]	; 0x30
 80012b2:	4b4b      	ldr	r3, [pc, #300]	; (80013e0 <MX_GPIO_Init+0x154>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b6:	f003 0310 	and.w	r3, r3, #16
 80012ba:	613b      	str	r3, [r7, #16]
 80012bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012be:	2300      	movs	r3, #0
 80012c0:	60fb      	str	r3, [r7, #12]
 80012c2:	4b47      	ldr	r3, [pc, #284]	; (80013e0 <MX_GPIO_Init+0x154>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c6:	4a46      	ldr	r2, [pc, #280]	; (80013e0 <MX_GPIO_Init+0x154>)
 80012c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012cc:	6313      	str	r3, [r2, #48]	; 0x30
 80012ce:	4b44      	ldr	r3, [pc, #272]	; (80013e0 <MX_GPIO_Init+0x154>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012d6:	60fb      	str	r3, [r7, #12]
 80012d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012da:	2300      	movs	r3, #0
 80012dc:	60bb      	str	r3, [r7, #8]
 80012de:	4b40      	ldr	r3, [pc, #256]	; (80013e0 <MX_GPIO_Init+0x154>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e2:	4a3f      	ldr	r2, [pc, #252]	; (80013e0 <MX_GPIO_Init+0x154>)
 80012e4:	f043 0301 	orr.w	r3, r3, #1
 80012e8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ea:	4b3d      	ldr	r3, [pc, #244]	; (80013e0 <MX_GPIO_Init+0x154>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ee:	f003 0301 	and.w	r3, r3, #1
 80012f2:	60bb      	str	r3, [r7, #8]
 80012f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012f6:	2300      	movs	r3, #0
 80012f8:	607b      	str	r3, [r7, #4]
 80012fa:	4b39      	ldr	r3, [pc, #228]	; (80013e0 <MX_GPIO_Init+0x154>)
 80012fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fe:	4a38      	ldr	r2, [pc, #224]	; (80013e0 <MX_GPIO_Init+0x154>)
 8001300:	f043 0308 	orr.w	r3, r3, #8
 8001304:	6313      	str	r3, [r2, #48]	; 0x30
 8001306:	4b36      	ldr	r3, [pc, #216]	; (80013e0 <MX_GPIO_Init+0x154>)
 8001308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130a:	f003 0308 	and.w	r3, r3, #8
 800130e:	607b      	str	r3, [r7, #4]
 8001310:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_RESET);
 8001312:	2200      	movs	r2, #0
 8001314:	2120      	movs	r1, #32
 8001316:	4833      	ldr	r0, [pc, #204]	; (80013e4 <MX_GPIO_Init+0x158>)
 8001318:	f001 fa58 	bl	80027cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_9, GPIO_PIN_RESET);
 800131c:	2200      	movs	r2, #0
 800131e:	f44f 7108 	mov.w	r1, #544	; 0x220
 8001322:	4831      	ldr	r0, [pc, #196]	; (80013e8 <MX_GPIO_Init+0x15c>)
 8001324:	f001 fa52 	bl	80027cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14|GPIO_PIN_6, GPIO_PIN_RESET);
 8001328:	2200      	movs	r2, #0
 800132a:	f244 0140 	movw	r1, #16448	; 0x4040
 800132e:	482f      	ldr	r0, [pc, #188]	; (80013ec <MX_GPIO_Init+0x160>)
 8001330:	f001 fa4c 	bl	80027cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001334:	2320      	movs	r3, #32
 8001336:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001338:	2301      	movs	r3, #1
 800133a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133c:	2300      	movs	r3, #0
 800133e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001340:	2300      	movs	r3, #0
 8001342:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001344:	f107 0314 	add.w	r3, r7, #20
 8001348:	4619      	mov	r1, r3
 800134a:	4826      	ldr	r0, [pc, #152]	; (80013e4 <MX_GPIO_Init+0x158>)
 800134c:	f001 f88a 	bl	8002464 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_9;
 8001350:	f44f 7308 	mov.w	r3, #544	; 0x220
 8001354:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001356:	2301      	movs	r3, #1
 8001358:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135a:	2300      	movs	r3, #0
 800135c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800135e:	2300      	movs	r3, #0
 8001360:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001362:	f107 0314 	add.w	r3, r7, #20
 8001366:	4619      	mov	r1, r3
 8001368:	481f      	ldr	r0, [pc, #124]	; (80013e8 <MX_GPIO_Init+0x15c>)
 800136a:	f001 f87b 	bl	8002464 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD14 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_6;
 800136e:	f244 0340 	movw	r3, #16448	; 0x4040
 8001372:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001374:	2301      	movs	r3, #1
 8001376:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001378:	2300      	movs	r3, #0
 800137a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800137c:	2300      	movs	r3, #0
 800137e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001380:	f107 0314 	add.w	r3, r7, #20
 8001384:	4619      	mov	r1, r3
 8001386:	4819      	ldr	r0, [pc, #100]	; (80013ec <MX_GPIO_Init+0x160>)
 8001388:	f001 f86c 	bl	8002464 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800138c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001390:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001392:	2300      	movs	r3, #0
 8001394:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001396:	2300      	movs	r3, #0
 8001398:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800139a:	f107 0314 	add.w	r3, r7, #20
 800139e:	4619      	mov	r1, r3
 80013a0:	4811      	ldr	r0, [pc, #68]	; (80013e8 <MX_GPIO_Init+0x15c>)
 80013a2:	f001 f85f 	bl	8002464 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80013a6:	2320      	movs	r3, #32
 80013a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013aa:	2300      	movs	r3, #0
 80013ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ae:	2300      	movs	r3, #0
 80013b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013b2:	f107 0314 	add.w	r3, r7, #20
 80013b6:	4619      	mov	r1, r3
 80013b8:	480c      	ldr	r0, [pc, #48]	; (80013ec <MX_GPIO_Init+0x160>)
 80013ba:	f001 f853 	bl	8002464 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80013be:	2302      	movs	r3, #2
 80013c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013c2:	2303      	movs	r3, #3
 80013c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c6:	2300      	movs	r3, #0
 80013c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013ca:	f107 0314 	add.w	r3, r7, #20
 80013ce:	4619      	mov	r1, r3
 80013d0:	4804      	ldr	r0, [pc, #16]	; (80013e4 <MX_GPIO_Init+0x158>)
 80013d2:	f001 f847 	bl	8002464 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80013d6:	bf00      	nop
 80013d8:	3728      	adds	r7, #40	; 0x28
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	40023800 	.word	0x40023800
 80013e4:	40021000 	.word	0x40021000
 80013e8:	40020000 	.word	0x40020000
 80013ec:	40020c00 	.word	0x40020c00

080013f0 <StartTask1>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask1 */
void StartTask1(void *argument)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80013f8:	2001      	movs	r0, #1
 80013fa:	f002 fe61 	bl	80040c0 <osDelay>
 80013fe:	e7fb      	b.n	80013f8 <StartTask1+0x8>

08001400 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001408:	2001      	movs	r0, #1
 800140a:	f002 fe59 	bl	80040c0 <osDelay>
 800140e:	e7fb      	b.n	8001408 <StartTask02+0x8>

08001410 <StartTaskDHT11>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskDHT11 */
void StartTaskDHT11(void *argument)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b092      	sub	sp, #72	; 0x48
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskDHT11 */
  /* Infinite loop */
	for(;;)
	  {
	    if (DHT11_Start())
 8001418:	f7ff fcb8 	bl	8000d8c <DHT11_Start>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d04b      	beq.n	80014ba <StartTaskDHT11+0xaa>
	    {
	      RHI = DHT11_Read(); // Relative humidity integral
 8001422:	f7ff fd19 	bl	8000e58 <DHT11_Read>
 8001426:	4603      	mov	r3, r0
 8001428:	461a      	mov	r2, r3
 800142a:	4b26      	ldr	r3, [pc, #152]	; (80014c4 <StartTaskDHT11+0xb4>)
 800142c:	701a      	strb	r2, [r3, #0]
	      RHD = DHT11_Read(); // Relative humidity decimal
 800142e:	f7ff fd13 	bl	8000e58 <DHT11_Read>
 8001432:	4603      	mov	r3, r0
 8001434:	461a      	mov	r2, r3
 8001436:	4b24      	ldr	r3, [pc, #144]	; (80014c8 <StartTaskDHT11+0xb8>)
 8001438:	701a      	strb	r2, [r3, #0]
	      TCI = DHT11_Read(); // Celsius integral
 800143a:	f7ff fd0d 	bl	8000e58 <DHT11_Read>
 800143e:	4603      	mov	r3, r0
 8001440:	461a      	mov	r2, r3
 8001442:	4b22      	ldr	r3, [pc, #136]	; (80014cc <StartTaskDHT11+0xbc>)
 8001444:	701a      	strb	r2, [r3, #0]
	      TCD = DHT11_Read(); // Celsius decimal
 8001446:	f7ff fd07 	bl	8000e58 <DHT11_Read>
 800144a:	4603      	mov	r3, r0
 800144c:	461a      	mov	r2, r3
 800144e:	4b20      	ldr	r3, [pc, #128]	; (80014d0 <StartTaskDHT11+0xc0>)
 8001450:	701a      	strb	r2, [r3, #0]
	      SUM = DHT11_Read(); // Check sum
 8001452:	f7ff fd01 	bl	8000e58 <DHT11_Read>
 8001456:	4603      	mov	r3, r0
 8001458:	461a      	mov	r2, r3
 800145a:	4b1e      	ldr	r3, [pc, #120]	; (80014d4 <StartTaskDHT11+0xc4>)
 800145c:	701a      	strb	r2, [r3, #0]


	      char temp[32];
	      char humi[32];

	      sprintf(temp, "Temp:%d\n", TCI);
 800145e:	4b1b      	ldr	r3, [pc, #108]	; (80014cc <StartTaskDHT11+0xbc>)
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	461a      	mov	r2, r3
 8001464:	f107 0308 	add.w	r3, r7, #8
 8001468:	491b      	ldr	r1, [pc, #108]	; (80014d8 <StartTaskDHT11+0xc8>)
 800146a:	4618      	mov	r0, r3
 800146c:	f007 fa98 	bl	80089a0 <siprintf>
	      sprintf(humi, "Humi:%d\n", RHI);
 8001470:	4b14      	ldr	r3, [pc, #80]	; (80014c4 <StartTaskDHT11+0xb4>)
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	461a      	mov	r2, r3
 8001476:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800147a:	4918      	ldr	r1, [pc, #96]	; (80014dc <StartTaskDHT11+0xcc>)
 800147c:	4618      	mov	r0, r3
 800147e:	f007 fa8f 	bl	80089a0 <siprintf>
	      HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp), 1000);
 8001482:	f107 0308 	add.w	r3, r7, #8
 8001486:	4618      	mov	r0, r3
 8001488:	f7fe fea2 	bl	80001d0 <strlen>
 800148c:	4603      	mov	r3, r0
 800148e:	b29a      	uxth	r2, r3
 8001490:	f107 0108 	add.w	r1, r7, #8
 8001494:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001498:	4811      	ldr	r0, [pc, #68]	; (80014e0 <StartTaskDHT11+0xd0>)
 800149a:	f002 f98c 	bl	80037b6 <HAL_UART_Transmit>
	      HAL_UART_Transmit(&huart2, (uint8_t*)humi, strlen(humi), 1000);
 800149e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014a2:	4618      	mov	r0, r3
 80014a4:	f7fe fe94 	bl	80001d0 <strlen>
 80014a8:	4603      	mov	r3, r0
 80014aa:	b29a      	uxth	r2, r3
 80014ac:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80014b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014b4:	480a      	ldr	r0, [pc, #40]	; (80014e0 <StartTaskDHT11+0xd0>)
 80014b6:	f002 f97e 	bl	80037b6 <HAL_UART_Transmit>

	    }
	    osDelay(2000);
 80014ba:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80014be:	f002 fdff 	bl	80040c0 <osDelay>
	    if (DHT11_Start())
 80014c2:	e7a9      	b.n	8001418 <StartTaskDHT11+0x8>
 80014c4:	20000168 	.word	0x20000168
 80014c8:	20000169 	.word	0x20000169
 80014cc:	2000016a 	.word	0x2000016a
 80014d0:	2000016b 	.word	0x2000016b
 80014d4:	2000016c 	.word	0x2000016c
 80014d8:	08009360 	.word	0x08009360
 80014dc:	0800936c 	.word	0x0800936c
 80014e0:	2000010c 	.word	0x2000010c
 80014e4:	00000000 	.word	0x00000000

080014e8 <StartTaskHC>:
*/
/* USER CODE END Header_StartTaskHC */
osMessageQueueId_t HCQueueHandle;

void StartTaskHC(void *argument)
{
 80014e8:	b590      	push	{r4, r7, lr}
 80014ea:	b08b      	sub	sp, #44	; 0x2c
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskHC */
  /* Infinite loop */

	  for (;;)
	  {
	    HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);
 80014f0:	2201      	movs	r2, #1
 80014f2:	2140      	movs	r1, #64	; 0x40
 80014f4:	4844      	ldr	r0, [pc, #272]	; (8001608 <StartTaskHC+0x120>)
 80014f6:	f001 f969 	bl	80027cc <HAL_GPIO_WritePin>
	    __HAL_TIM_SET_COUNTER(&htim1, 0);
 80014fa:	4b44      	ldr	r3, [pc, #272]	; (800160c <StartTaskHC+0x124>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	2200      	movs	r2, #0
 8001500:	625a      	str	r2, [r3, #36]	; 0x24
	    while (__HAL_TIM_GET_COUNTER(&htim1) < 10);
 8001502:	bf00      	nop
 8001504:	4b41      	ldr	r3, [pc, #260]	; (800160c <StartTaskHC+0x124>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800150a:	2b09      	cmp	r3, #9
 800150c:	d9fa      	bls.n	8001504 <StartTaskHC+0x1c>
	    HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);
 800150e:	2200      	movs	r2, #0
 8001510:	2140      	movs	r1, #64	; 0x40
 8001512:	483d      	ldr	r0, [pc, #244]	; (8001608 <StartTaskHC+0x120>)
 8001514:	f001 f95a 	bl	80027cc <HAL_GPIO_WritePin>

	    pMillis = HAL_GetTick();
 8001518:	f000 fac2 	bl	8001aa0 <HAL_GetTick>
 800151c:	4603      	mov	r3, r0
 800151e:	4a3c      	ldr	r2, [pc, #240]	; (8001610 <StartTaskHC+0x128>)
 8001520:	6013      	str	r3, [r2, #0]
	    while (!(HAL_GPIO_ReadPin(ECHO_PORT, ECHO_PIN)) && pMillis + 10 > HAL_GetTick());
 8001522:	bf00      	nop
 8001524:	2120      	movs	r1, #32
 8001526:	4838      	ldr	r0, [pc, #224]	; (8001608 <StartTaskHC+0x120>)
 8001528:	f001 f938 	bl	800279c <HAL_GPIO_ReadPin>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d108      	bne.n	8001544 <StartTaskHC+0x5c>
 8001532:	4b37      	ldr	r3, [pc, #220]	; (8001610 <StartTaskHC+0x128>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f103 040a 	add.w	r4, r3, #10
 800153a:	f000 fab1 	bl	8001aa0 <HAL_GetTick>
 800153e:	4603      	mov	r3, r0
 8001540:	429c      	cmp	r4, r3
 8001542:	d8ef      	bhi.n	8001524 <StartTaskHC+0x3c>
	    Value1 = __HAL_TIM_GET_COUNTER(&htim1);
 8001544:	4b31      	ldr	r3, [pc, #196]	; (800160c <StartTaskHC+0x124>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800154a:	4a32      	ldr	r2, [pc, #200]	; (8001614 <StartTaskHC+0x12c>)
 800154c:	6013      	str	r3, [r2, #0]

	    pMillis = HAL_GetTick();
 800154e:	f000 faa7 	bl	8001aa0 <HAL_GetTick>
 8001552:	4603      	mov	r3, r0
 8001554:	4a2e      	ldr	r2, [pc, #184]	; (8001610 <StartTaskHC+0x128>)
 8001556:	6013      	str	r3, [r2, #0]
	    while ((HAL_GPIO_ReadPin(ECHO_PORT, ECHO_PIN)) && pMillis + 50 > HAL_GetTick());
 8001558:	bf00      	nop
 800155a:	2120      	movs	r1, #32
 800155c:	482a      	ldr	r0, [pc, #168]	; (8001608 <StartTaskHC+0x120>)
 800155e:	f001 f91d 	bl	800279c <HAL_GPIO_ReadPin>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d008      	beq.n	800157a <StartTaskHC+0x92>
 8001568:	4b29      	ldr	r3, [pc, #164]	; (8001610 <StartTaskHC+0x128>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f103 0432 	add.w	r4, r3, #50	; 0x32
 8001570:	f000 fa96 	bl	8001aa0 <HAL_GetTick>
 8001574:	4603      	mov	r3, r0
 8001576:	429c      	cmp	r4, r3
 8001578:	d8ef      	bhi.n	800155a <StartTaskHC+0x72>
	    Value2 = __HAL_TIM_GET_COUNTER(&htim1);
 800157a:	4b24      	ldr	r3, [pc, #144]	; (800160c <StartTaskHC+0x124>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001580:	4a25      	ldr	r2, [pc, #148]	; (8001618 <StartTaskHC+0x130>)
 8001582:	6013      	str	r3, [r2, #0]

	    Distance = ((Value2 - Value1) * 0.034) / 2;
 8001584:	4b24      	ldr	r3, [pc, #144]	; (8001618 <StartTaskHC+0x130>)
 8001586:	681a      	ldr	r2, [r3, #0]
 8001588:	4b22      	ldr	r3, [pc, #136]	; (8001614 <StartTaskHC+0x12c>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	1ad3      	subs	r3, r2, r3
 800158e:	4618      	mov	r0, r3
 8001590:	f7fe ffb8 	bl	8000504 <__aeabi_ui2d>
 8001594:	a31a      	add	r3, pc, #104	; (adr r3, 8001600 <StartTaskHC+0x118>)
 8001596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800159a:	f7ff f82d 	bl	80005f8 <__aeabi_dmul>
 800159e:	4602      	mov	r2, r0
 80015a0:	460b      	mov	r3, r1
 80015a2:	4610      	mov	r0, r2
 80015a4:	4619      	mov	r1, r3
 80015a6:	f04f 0200 	mov.w	r2, #0
 80015aa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80015ae:	f7ff f94d 	bl	800084c <__aeabi_ddiv>
 80015b2:	4602      	mov	r2, r0
 80015b4:	460b      	mov	r3, r1
 80015b6:	4610      	mov	r0, r2
 80015b8:	4619      	mov	r1, r3
 80015ba:	f7ff fa2f 	bl	8000a1c <__aeabi_d2uiz>
 80015be:	4603      	mov	r3, r0
 80015c0:	b29a      	uxth	r2, r3
 80015c2:	4b16      	ldr	r3, [pc, #88]	; (800161c <StartTaskHC+0x134>)
 80015c4:	801a      	strh	r2, [r3, #0]

	    char dis[32];
	    sprintf(dis, "Distance:%d\n", Distance);
 80015c6:	4b15      	ldr	r3, [pc, #84]	; (800161c <StartTaskHC+0x134>)
 80015c8:	881b      	ldrh	r3, [r3, #0]
 80015ca:	461a      	mov	r2, r3
 80015cc:	f107 0308 	add.w	r3, r7, #8
 80015d0:	4913      	ldr	r1, [pc, #76]	; (8001620 <StartTaskHC+0x138>)
 80015d2:	4618      	mov	r0, r3
 80015d4:	f007 f9e4 	bl	80089a0 <siprintf>
	    HAL_UART_Transmit(&huart2, (uint8_t *)dis, strlen(dis), 1000);
 80015d8:	f107 0308 	add.w	r3, r7, #8
 80015dc:	4618      	mov	r0, r3
 80015de:	f7fe fdf7 	bl	80001d0 <strlen>
 80015e2:	4603      	mov	r3, r0
 80015e4:	b29a      	uxth	r2, r3
 80015e6:	f107 0108 	add.w	r1, r7, #8
 80015ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015ee:	480d      	ldr	r0, [pc, #52]	; (8001624 <StartTaskHC+0x13c>)
 80015f0:	f002 f8e1 	bl	80037b6 <HAL_UART_Transmit>

	    osDelay(2000);
 80015f4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80015f8:	f002 fd62 	bl	80040c0 <osDelay>
	  {
 80015fc:	e778      	b.n	80014f0 <StartTaskHC+0x8>
 80015fe:	bf00      	nop
 8001600:	b020c49c 	.word	0xb020c49c
 8001604:	3fa16872 	.word	0x3fa16872
 8001608:	40020c00 	.word	0x40020c00
 800160c:	200000c4 	.word	0x200000c4
 8001610:	20000170 	.word	0x20000170
 8001614:	20000174 	.word	0x20000174
 8001618:	20000178 	.word	0x20000178
 800161c:	2000017c 	.word	0x2000017c
 8001620:	08009378 	.word	0x08009378
 8001624:	2000010c 	.word	0x2000010c

08001628 <StartTaskRainSensor>:
*/
/* USER CODE END Header_StartTaskRainSensor */
osMessageQueueId_t RainSensorQueueHandle;

void StartTaskRainSensor(void *argument)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b08a      	sub	sp, #40	; 0x28
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskRainSensor */
  /* Infinite loop */
  for(;;)
  {
	  HAL_ADC_Start(&hadc1);
 8001630:	4814      	ldr	r0, [pc, #80]	; (8001684 <StartTaskRainSensor+0x5c>)
 8001632:	f000 faa9 	bl	8001b88 <HAL_ADC_Start>
	      HAL_ADC_PollForConversion(&hadc1, 20);
 8001636:	2114      	movs	r1, #20
 8001638:	4812      	ldr	r0, [pc, #72]	; (8001684 <StartTaskRainSensor+0x5c>)
 800163a:	f000 fb77 	bl	8001d2c <HAL_ADC_PollForConversion>
	      rainSensor = HAL_ADC_GetValue(&hadc1);
 800163e:	4811      	ldr	r0, [pc, #68]	; (8001684 <StartTaskRainSensor+0x5c>)
 8001640:	f000 fbff 	bl	8001e42 <HAL_ADC_GetValue>
 8001644:	4603      	mov	r3, r0
 8001646:	b29a      	uxth	r2, r3
 8001648:	4b0f      	ldr	r3, [pc, #60]	; (8001688 <StartTaskRainSensor+0x60>)
 800164a:	801a      	strh	r2, [r3, #0]

	      char rain[32];
	      sprintf(rain, "Rain:%d\n", rainSensor);
 800164c:	4b0e      	ldr	r3, [pc, #56]	; (8001688 <StartTaskRainSensor+0x60>)
 800164e:	881b      	ldrh	r3, [r3, #0]
 8001650:	461a      	mov	r2, r3
 8001652:	f107 0308 	add.w	r3, r7, #8
 8001656:	490d      	ldr	r1, [pc, #52]	; (800168c <StartTaskRainSensor+0x64>)
 8001658:	4618      	mov	r0, r3
 800165a:	f007 f9a1 	bl	80089a0 <siprintf>
	      HAL_UART_Transmit(&huart2, (uint8_t*)rain, strlen(rain), 1000);
 800165e:	f107 0308 	add.w	r3, r7, #8
 8001662:	4618      	mov	r0, r3
 8001664:	f7fe fdb4 	bl	80001d0 <strlen>
 8001668:	4603      	mov	r3, r0
 800166a:	b29a      	uxth	r2, r3
 800166c:	f107 0108 	add.w	r1, r7, #8
 8001670:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001674:	4806      	ldr	r0, [pc, #24]	; (8001690 <StartTaskRainSensor+0x68>)
 8001676:	f002 f89e 	bl	80037b6 <HAL_UART_Transmit>



	      osDelay(2000);
 800167a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800167e:	f002 fd1f 	bl	80040c0 <osDelay>
  {
 8001682:	e7d5      	b.n	8001630 <StartTaskRainSensor+0x8>
 8001684:	2000007c 	.word	0x2000007c
 8001688:	2000017e 	.word	0x2000017e
 800168c:	08009388 	.word	0x08009388
 8001690:	2000010c 	.word	0x2000010c

08001694 <StartTaskLED>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskLED */
void StartTaskLED(void *argument)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b084      	sub	sp, #16
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskLED */
  /* Infinite loop */
	  for (;;)
	  {
	    uint16_t distance;
	    if (osMessageQueueGet(HCQueueHandle, &distance, NULL, osWaitForever) == osOK)
 800169c:	4b10      	ldr	r3, [pc, #64]	; (80016e0 <StartTaskLED+0x4c>)
 800169e:	6818      	ldr	r0, [r3, #0]
 80016a0:	f107 010e 	add.w	r1, r7, #14
 80016a4:	f04f 33ff 	mov.w	r3, #4294967295
 80016a8:	2200      	movs	r2, #0
 80016aa:	f002 fd25 	bl	80040f8 <osMessageQueueGet>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d1f3      	bne.n	800169c <StartTaskLED+0x8>
	    {
	      if (distance < 10 || distance > 800)
 80016b4:	89fb      	ldrh	r3, [r7, #14]
 80016b6:	2b09      	cmp	r3, #9
 80016b8:	d903      	bls.n	80016c2 <StartTaskLED+0x2e>
 80016ba:	89fb      	ldrh	r3, [r7, #14]
 80016bc:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80016c0:	d906      	bls.n	80016d0 <StartTaskLED+0x3c>
	      {
	        HAL_GPIO_WritePin(LED_PORT, LED_PIN, GPIO_PIN_SET);
 80016c2:	2201      	movs	r2, #1
 80016c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016c8:	4806      	ldr	r0, [pc, #24]	; (80016e4 <StartTaskLED+0x50>)
 80016ca:	f001 f87f 	bl	80027cc <HAL_GPIO_WritePin>
 80016ce:	e005      	b.n	80016dc <StartTaskLED+0x48>
	//        sprintf(msg, "FLOOD:\n");
	//        HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), 1000);
	      }
	      else
	      {
	        HAL_GPIO_WritePin(LED_PORT, LED_PIN, GPIO_PIN_RESET);
 80016d0:	2200      	movs	r2, #0
 80016d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016d6:	4803      	ldr	r0, [pc, #12]	; (80016e4 <StartTaskLED+0x50>)
 80016d8:	f001 f878 	bl	80027cc <HAL_GPIO_WritePin>
	  {
 80016dc:	e7de      	b.n	800169c <StartTaskLED+0x8>
 80016de:	bf00      	nop
 80016e0:	20000180 	.word	0x20000180
 80016e4:	40020c00 	.word	0x40020c00

080016e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016ec:	b672      	cpsid	i
}
 80016ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016f0:	e7fe      	b.n	80016f0 <Error_Handler+0x8>
	...

080016f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016fa:	2300      	movs	r3, #0
 80016fc:	607b      	str	r3, [r7, #4]
 80016fe:	4b12      	ldr	r3, [pc, #72]	; (8001748 <HAL_MspInit+0x54>)
 8001700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001702:	4a11      	ldr	r2, [pc, #68]	; (8001748 <HAL_MspInit+0x54>)
 8001704:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001708:	6453      	str	r3, [r2, #68]	; 0x44
 800170a:	4b0f      	ldr	r3, [pc, #60]	; (8001748 <HAL_MspInit+0x54>)
 800170c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800170e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001712:	607b      	str	r3, [r7, #4]
 8001714:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001716:	2300      	movs	r3, #0
 8001718:	603b      	str	r3, [r7, #0]
 800171a:	4b0b      	ldr	r3, [pc, #44]	; (8001748 <HAL_MspInit+0x54>)
 800171c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800171e:	4a0a      	ldr	r2, [pc, #40]	; (8001748 <HAL_MspInit+0x54>)
 8001720:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001724:	6413      	str	r3, [r2, #64]	; 0x40
 8001726:	4b08      	ldr	r3, [pc, #32]	; (8001748 <HAL_MspInit+0x54>)
 8001728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800172e:	603b      	str	r3, [r7, #0]
 8001730:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001732:	2200      	movs	r2, #0
 8001734:	210f      	movs	r1, #15
 8001736:	f06f 0001 	mvn.w	r0, #1
 800173a:	f000 fe6a 	bl	8002412 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800173e:	bf00      	nop
 8001740:	3708      	adds	r7, #8
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	40023800 	.word	0x40023800

0800174c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b08a      	sub	sp, #40	; 0x28
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001754:	f107 0314 	add.w	r3, r7, #20
 8001758:	2200      	movs	r2, #0
 800175a:	601a      	str	r2, [r3, #0]
 800175c:	605a      	str	r2, [r3, #4]
 800175e:	609a      	str	r2, [r3, #8]
 8001760:	60da      	str	r2, [r3, #12]
 8001762:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a17      	ldr	r2, [pc, #92]	; (80017c8 <HAL_ADC_MspInit+0x7c>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d127      	bne.n	80017be <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800176e:	2300      	movs	r3, #0
 8001770:	613b      	str	r3, [r7, #16]
 8001772:	4b16      	ldr	r3, [pc, #88]	; (80017cc <HAL_ADC_MspInit+0x80>)
 8001774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001776:	4a15      	ldr	r2, [pc, #84]	; (80017cc <HAL_ADC_MspInit+0x80>)
 8001778:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800177c:	6453      	str	r3, [r2, #68]	; 0x44
 800177e:	4b13      	ldr	r3, [pc, #76]	; (80017cc <HAL_ADC_MspInit+0x80>)
 8001780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001782:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001786:	613b      	str	r3, [r7, #16]
 8001788:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800178a:	2300      	movs	r3, #0
 800178c:	60fb      	str	r3, [r7, #12]
 800178e:	4b0f      	ldr	r3, [pc, #60]	; (80017cc <HAL_ADC_MspInit+0x80>)
 8001790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001792:	4a0e      	ldr	r2, [pc, #56]	; (80017cc <HAL_ADC_MspInit+0x80>)
 8001794:	f043 0301 	orr.w	r3, r3, #1
 8001798:	6313      	str	r3, [r2, #48]	; 0x30
 800179a:	4b0c      	ldr	r3, [pc, #48]	; (80017cc <HAL_ADC_MspInit+0x80>)
 800179c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179e:	f003 0301 	and.w	r3, r3, #1
 80017a2:	60fb      	str	r3, [r7, #12]
 80017a4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80017a6:	2301      	movs	r3, #1
 80017a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017aa:	2303      	movs	r3, #3
 80017ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ae:	2300      	movs	r3, #0
 80017b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017b2:	f107 0314 	add.w	r3, r7, #20
 80017b6:	4619      	mov	r1, r3
 80017b8:	4805      	ldr	r0, [pc, #20]	; (80017d0 <HAL_ADC_MspInit+0x84>)
 80017ba:	f000 fe53 	bl	8002464 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80017be:	bf00      	nop
 80017c0:	3728      	adds	r7, #40	; 0x28
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	40012000 	.word	0x40012000
 80017cc:	40023800 	.word	0x40023800
 80017d0:	40020000 	.word	0x40020000

080017d4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b085      	sub	sp, #20
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a0b      	ldr	r2, [pc, #44]	; (8001810 <HAL_TIM_Base_MspInit+0x3c>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d10d      	bne.n	8001802 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80017e6:	2300      	movs	r3, #0
 80017e8:	60fb      	str	r3, [r7, #12]
 80017ea:	4b0a      	ldr	r3, [pc, #40]	; (8001814 <HAL_TIM_Base_MspInit+0x40>)
 80017ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ee:	4a09      	ldr	r2, [pc, #36]	; (8001814 <HAL_TIM_Base_MspInit+0x40>)
 80017f0:	f043 0301 	orr.w	r3, r3, #1
 80017f4:	6453      	str	r3, [r2, #68]	; 0x44
 80017f6:	4b07      	ldr	r3, [pc, #28]	; (8001814 <HAL_TIM_Base_MspInit+0x40>)
 80017f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017fa:	f003 0301 	and.w	r3, r3, #1
 80017fe:	60fb      	str	r3, [r7, #12]
 8001800:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001802:	bf00      	nop
 8001804:	3714      	adds	r7, #20
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr
 800180e:	bf00      	nop
 8001810:	40010000 	.word	0x40010000
 8001814:	40023800 	.word	0x40023800

08001818 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b08a      	sub	sp, #40	; 0x28
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001820:	f107 0314 	add.w	r3, r7, #20
 8001824:	2200      	movs	r2, #0
 8001826:	601a      	str	r2, [r3, #0]
 8001828:	605a      	str	r2, [r3, #4]
 800182a:	609a      	str	r2, [r3, #8]
 800182c:	60da      	str	r2, [r3, #12]
 800182e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a19      	ldr	r2, [pc, #100]	; (800189c <HAL_UART_MspInit+0x84>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d12b      	bne.n	8001892 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800183a:	2300      	movs	r3, #0
 800183c:	613b      	str	r3, [r7, #16]
 800183e:	4b18      	ldr	r3, [pc, #96]	; (80018a0 <HAL_UART_MspInit+0x88>)
 8001840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001842:	4a17      	ldr	r2, [pc, #92]	; (80018a0 <HAL_UART_MspInit+0x88>)
 8001844:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001848:	6413      	str	r3, [r2, #64]	; 0x40
 800184a:	4b15      	ldr	r3, [pc, #84]	; (80018a0 <HAL_UART_MspInit+0x88>)
 800184c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001852:	613b      	str	r3, [r7, #16]
 8001854:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001856:	2300      	movs	r3, #0
 8001858:	60fb      	str	r3, [r7, #12]
 800185a:	4b11      	ldr	r3, [pc, #68]	; (80018a0 <HAL_UART_MspInit+0x88>)
 800185c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185e:	4a10      	ldr	r2, [pc, #64]	; (80018a0 <HAL_UART_MspInit+0x88>)
 8001860:	f043 0301 	orr.w	r3, r3, #1
 8001864:	6313      	str	r3, [r2, #48]	; 0x30
 8001866:	4b0e      	ldr	r3, [pc, #56]	; (80018a0 <HAL_UART_MspInit+0x88>)
 8001868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186a:	f003 0301 	and.w	r3, r3, #1
 800186e:	60fb      	str	r3, [r7, #12]
 8001870:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001872:	230c      	movs	r3, #12
 8001874:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001876:	2302      	movs	r3, #2
 8001878:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187a:	2300      	movs	r3, #0
 800187c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800187e:	2303      	movs	r3, #3
 8001880:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001882:	2307      	movs	r3, #7
 8001884:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001886:	f107 0314 	add.w	r3, r7, #20
 800188a:	4619      	mov	r1, r3
 800188c:	4805      	ldr	r0, [pc, #20]	; (80018a4 <HAL_UART_MspInit+0x8c>)
 800188e:	f000 fde9 	bl	8002464 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001892:	bf00      	nop
 8001894:	3728      	adds	r7, #40	; 0x28
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	40004400 	.word	0x40004400
 80018a0:	40023800 	.word	0x40023800
 80018a4:	40020000 	.word	0x40020000

080018a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018ac:	e7fe      	b.n	80018ac <NMI_Handler+0x4>

080018ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018ae:	b480      	push	{r7}
 80018b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018b2:	e7fe      	b.n	80018b2 <HardFault_Handler+0x4>

080018b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018b8:	e7fe      	b.n	80018b8 <MemManage_Handler+0x4>

080018ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018ba:	b480      	push	{r7}
 80018bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018be:	e7fe      	b.n	80018be <BusFault_Handler+0x4>

080018c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018c4:	e7fe      	b.n	80018c4 <UsageFault_Handler+0x4>

080018c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018c6:	b480      	push	{r7}
 80018c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018ca:	bf00      	nop
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr

080018d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018d8:	f000 f8ce 	bl	8001a78 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80018dc:	f004 fa16 	bl	8005d0c <xTaskGetSchedulerState>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b01      	cmp	r3, #1
 80018e4:	d001      	beq.n	80018ea <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80018e6:	f005 f817 	bl	8006918 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018ea:	bf00      	nop
 80018ec:	bd80      	pop	{r7, pc}
	...

080018f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b086      	sub	sp, #24
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018f8:	4a14      	ldr	r2, [pc, #80]	; (800194c <_sbrk+0x5c>)
 80018fa:	4b15      	ldr	r3, [pc, #84]	; (8001950 <_sbrk+0x60>)
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001904:	4b13      	ldr	r3, [pc, #76]	; (8001954 <_sbrk+0x64>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d102      	bne.n	8001912 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800190c:	4b11      	ldr	r3, [pc, #68]	; (8001954 <_sbrk+0x64>)
 800190e:	4a12      	ldr	r2, [pc, #72]	; (8001958 <_sbrk+0x68>)
 8001910:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001912:	4b10      	ldr	r3, [pc, #64]	; (8001954 <_sbrk+0x64>)
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	4413      	add	r3, r2
 800191a:	693a      	ldr	r2, [r7, #16]
 800191c:	429a      	cmp	r2, r3
 800191e:	d207      	bcs.n	8001930 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001920:	f007 f876 	bl	8008a10 <__errno>
 8001924:	4603      	mov	r3, r0
 8001926:	220c      	movs	r2, #12
 8001928:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800192a:	f04f 33ff 	mov.w	r3, #4294967295
 800192e:	e009      	b.n	8001944 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001930:	4b08      	ldr	r3, [pc, #32]	; (8001954 <_sbrk+0x64>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001936:	4b07      	ldr	r3, [pc, #28]	; (8001954 <_sbrk+0x64>)
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	4413      	add	r3, r2
 800193e:	4a05      	ldr	r2, [pc, #20]	; (8001954 <_sbrk+0x64>)
 8001940:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001942:	68fb      	ldr	r3, [r7, #12]
}
 8001944:	4618      	mov	r0, r3
 8001946:	3718      	adds	r7, #24
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	20020000 	.word	0x20020000
 8001950:	00000400 	.word	0x00000400
 8001954:	20000184 	.word	0x20000184
 8001958:	200072a0 	.word	0x200072a0

0800195c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001960:	4b06      	ldr	r3, [pc, #24]	; (800197c <SystemInit+0x20>)
 8001962:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001966:	4a05      	ldr	r2, [pc, #20]	; (800197c <SystemInit+0x20>)
 8001968:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800196c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001970:	bf00      	nop
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr
 800197a:	bf00      	nop
 800197c:	e000ed00 	.word	0xe000ed00

08001980 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001980:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019b8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001984:	480d      	ldr	r0, [pc, #52]	; (80019bc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001986:	490e      	ldr	r1, [pc, #56]	; (80019c0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001988:	4a0e      	ldr	r2, [pc, #56]	; (80019c4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800198a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800198c:	e002      	b.n	8001994 <LoopCopyDataInit>

0800198e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800198e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001990:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001992:	3304      	adds	r3, #4

08001994 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001994:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001996:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001998:	d3f9      	bcc.n	800198e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800199a:	4a0b      	ldr	r2, [pc, #44]	; (80019c8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800199c:	4c0b      	ldr	r4, [pc, #44]	; (80019cc <LoopFillZerobss+0x26>)
  movs r3, #0
 800199e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019a0:	e001      	b.n	80019a6 <LoopFillZerobss>

080019a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019a4:	3204      	adds	r2, #4

080019a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019a8:	d3fb      	bcc.n	80019a2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80019aa:	f7ff ffd7 	bl	800195c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019ae:	f007 f835 	bl	8008a1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019b2:	f7ff fab7 	bl	8000f24 <main>
  bx  lr    
 80019b6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80019b8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80019bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019c0:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80019c4:	080095b0 	.word	0x080095b0
  ldr r2, =_sbss
 80019c8:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80019cc:	2000729c 	.word	0x2000729c

080019d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019d0:	e7fe      	b.n	80019d0 <ADC_IRQHandler>
	...

080019d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80019d8:	4b0e      	ldr	r3, [pc, #56]	; (8001a14 <HAL_Init+0x40>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a0d      	ldr	r2, [pc, #52]	; (8001a14 <HAL_Init+0x40>)
 80019de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80019e4:	4b0b      	ldr	r3, [pc, #44]	; (8001a14 <HAL_Init+0x40>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a0a      	ldr	r2, [pc, #40]	; (8001a14 <HAL_Init+0x40>)
 80019ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019f0:	4b08      	ldr	r3, [pc, #32]	; (8001a14 <HAL_Init+0x40>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a07      	ldr	r2, [pc, #28]	; (8001a14 <HAL_Init+0x40>)
 80019f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019fc:	2003      	movs	r0, #3
 80019fe:	f000 fcfd 	bl	80023fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a02:	200f      	movs	r0, #15
 8001a04:	f000 f808 	bl	8001a18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a08:	f7ff fe74 	bl	80016f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a0c:	2300      	movs	r3, #0
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	40023c00 	.word	0x40023c00

08001a18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a20:	4b12      	ldr	r3, [pc, #72]	; (8001a6c <HAL_InitTick+0x54>)
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	4b12      	ldr	r3, [pc, #72]	; (8001a70 <HAL_InitTick+0x58>)
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	4619      	mov	r1, r3
 8001a2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a32:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a36:	4618      	mov	r0, r3
 8001a38:	f000 fd07 	bl	800244a <HAL_SYSTICK_Config>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d001      	beq.n	8001a46 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
 8001a44:	e00e      	b.n	8001a64 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2b0f      	cmp	r3, #15
 8001a4a:	d80a      	bhi.n	8001a62 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	6879      	ldr	r1, [r7, #4]
 8001a50:	f04f 30ff 	mov.w	r0, #4294967295
 8001a54:	f000 fcdd 	bl	8002412 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a58:	4a06      	ldr	r2, [pc, #24]	; (8001a74 <HAL_InitTick+0x5c>)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	e000      	b.n	8001a64 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	3708      	adds	r7, #8
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	20000000 	.word	0x20000000
 8001a70:	20000008 	.word	0x20000008
 8001a74:	20000004 	.word	0x20000004

08001a78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a7c:	4b06      	ldr	r3, [pc, #24]	; (8001a98 <HAL_IncTick+0x20>)
 8001a7e:	781b      	ldrb	r3, [r3, #0]
 8001a80:	461a      	mov	r2, r3
 8001a82:	4b06      	ldr	r3, [pc, #24]	; (8001a9c <HAL_IncTick+0x24>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4413      	add	r3, r2
 8001a88:	4a04      	ldr	r2, [pc, #16]	; (8001a9c <HAL_IncTick+0x24>)
 8001a8a:	6013      	str	r3, [r2, #0]
}
 8001a8c:	bf00      	nop
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr
 8001a96:	bf00      	nop
 8001a98:	20000008 	.word	0x20000008
 8001a9c:	20000188 	.word	0x20000188

08001aa0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  return uwTick;
 8001aa4:	4b03      	ldr	r3, [pc, #12]	; (8001ab4 <HAL_GetTick+0x14>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr
 8001ab2:	bf00      	nop
 8001ab4:	20000188 	.word	0x20000188

08001ab8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b084      	sub	sp, #16
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ac0:	f7ff ffee 	bl	8001aa0 <HAL_GetTick>
 8001ac4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ad0:	d005      	beq.n	8001ade <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ad2:	4b0a      	ldr	r3, [pc, #40]	; (8001afc <HAL_Delay+0x44>)
 8001ad4:	781b      	ldrb	r3, [r3, #0]
 8001ad6:	461a      	mov	r2, r3
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	4413      	add	r3, r2
 8001adc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001ade:	bf00      	nop
 8001ae0:	f7ff ffde 	bl	8001aa0 <HAL_GetTick>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	68bb      	ldr	r3, [r7, #8]
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	68fa      	ldr	r2, [r7, #12]
 8001aec:	429a      	cmp	r2, r3
 8001aee:	d8f7      	bhi.n	8001ae0 <HAL_Delay+0x28>
  {
  }
}
 8001af0:	bf00      	nop
 8001af2:	bf00      	nop
 8001af4:	3710      	adds	r7, #16
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	20000008 	.word	0x20000008

08001b00 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b084      	sub	sp, #16
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d101      	bne.n	8001b16 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	e033      	b.n	8001b7e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d109      	bne.n	8001b32 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b1e:	6878      	ldr	r0, [r7, #4]
 8001b20:	f7ff fe14 	bl	800174c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2200      	movs	r2, #0
 8001b28:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b36:	f003 0310 	and.w	r3, r3, #16
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d118      	bne.n	8001b70 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b42:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001b46:	f023 0302 	bic.w	r3, r3, #2
 8001b4a:	f043 0202 	orr.w	r2, r3, #2
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001b52:	6878      	ldr	r0, [r7, #4]
 8001b54:	f000 faa4 	bl	80020a0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b62:	f023 0303 	bic.w	r3, r3, #3
 8001b66:	f043 0201 	orr.w	r2, r3, #1
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	641a      	str	r2, [r3, #64]	; 0x40
 8001b6e:	e001      	b.n	8001b74 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001b70:	2301      	movs	r3, #1
 8001b72:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2200      	movs	r2, #0
 8001b78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001b7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3710      	adds	r7, #16
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
	...

08001b88 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b085      	sub	sp, #20
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001b90:	2300      	movs	r3, #0
 8001b92:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b9a:	2b01      	cmp	r3, #1
 8001b9c:	d101      	bne.n	8001ba2 <HAL_ADC_Start+0x1a>
 8001b9e:	2302      	movs	r3, #2
 8001ba0:	e0b2      	b.n	8001d08 <HAL_ADC_Start+0x180>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	f003 0301 	and.w	r3, r3, #1
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	d018      	beq.n	8001bea <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	689a      	ldr	r2, [r3, #8]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f042 0201 	orr.w	r2, r2, #1
 8001bc6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001bc8:	4b52      	ldr	r3, [pc, #328]	; (8001d14 <HAL_ADC_Start+0x18c>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a52      	ldr	r2, [pc, #328]	; (8001d18 <HAL_ADC_Start+0x190>)
 8001bce:	fba2 2303 	umull	r2, r3, r2, r3
 8001bd2:	0c9a      	lsrs	r2, r3, #18
 8001bd4:	4613      	mov	r3, r2
 8001bd6:	005b      	lsls	r3, r3, #1
 8001bd8:	4413      	add	r3, r2
 8001bda:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001bdc:	e002      	b.n	8001be4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001bde:	68bb      	ldr	r3, [r7, #8]
 8001be0:	3b01      	subs	r3, #1
 8001be2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d1f9      	bne.n	8001bde <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	f003 0301 	and.w	r3, r3, #1
 8001bf4:	2b01      	cmp	r3, #1
 8001bf6:	d17a      	bne.n	8001cee <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001c00:	f023 0301 	bic.w	r3, r3, #1
 8001c04:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d007      	beq.n	8001c2a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001c22:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c36:	d106      	bne.n	8001c46 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c3c:	f023 0206 	bic.w	r2, r3, #6
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	645a      	str	r2, [r3, #68]	; 0x44
 8001c44:	e002      	b.n	8001c4c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2200      	movs	r2, #0
 8001c50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c54:	4b31      	ldr	r3, [pc, #196]	; (8001d1c <HAL_ADC_Start+0x194>)
 8001c56:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001c60:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	f003 031f 	and.w	r3, r3, #31
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d12a      	bne.n	8001cc4 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a2b      	ldr	r2, [pc, #172]	; (8001d20 <HAL_ADC_Start+0x198>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d015      	beq.n	8001ca4 <HAL_ADC_Start+0x11c>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a29      	ldr	r2, [pc, #164]	; (8001d24 <HAL_ADC_Start+0x19c>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d105      	bne.n	8001c8e <HAL_ADC_Start+0x106>
 8001c82:	4b26      	ldr	r3, [pc, #152]	; (8001d1c <HAL_ADC_Start+0x194>)
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	f003 031f 	and.w	r3, r3, #31
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d00a      	beq.n	8001ca4 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a25      	ldr	r2, [pc, #148]	; (8001d28 <HAL_ADC_Start+0x1a0>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d136      	bne.n	8001d06 <HAL_ADC_Start+0x17e>
 8001c98:	4b20      	ldr	r3, [pc, #128]	; (8001d1c <HAL_ADC_Start+0x194>)
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f003 0310 	and.w	r3, r3, #16
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d130      	bne.n	8001d06 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d129      	bne.n	8001d06 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	689a      	ldr	r2, [r3, #8]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001cc0:	609a      	str	r2, [r3, #8]
 8001cc2:	e020      	b.n	8001d06 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a15      	ldr	r2, [pc, #84]	; (8001d20 <HAL_ADC_Start+0x198>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d11b      	bne.n	8001d06 <HAL_ADC_Start+0x17e>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d114      	bne.n	8001d06 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	689a      	ldr	r2, [r3, #8]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001cea:	609a      	str	r2, [r3, #8]
 8001cec:	e00b      	b.n	8001d06 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf2:	f043 0210 	orr.w	r2, r3, #16
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cfe:	f043 0201 	orr.w	r2, r3, #1
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001d06:	2300      	movs	r3, #0
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	3714      	adds	r7, #20
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr
 8001d14:	20000000 	.word	0x20000000
 8001d18:	431bde83 	.word	0x431bde83
 8001d1c:	40012300 	.word	0x40012300
 8001d20:	40012000 	.word	0x40012000
 8001d24:	40012100 	.word	0x40012100
 8001d28:	40012200 	.word	0x40012200

08001d2c <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b084      	sub	sp, #16
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
 8001d34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001d36:	2300      	movs	r3, #0
 8001d38:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	689b      	ldr	r3, [r3, #8]
 8001d40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d48:	d113      	bne.n	8001d72 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001d54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d58:	d10b      	bne.n	8001d72 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5e:	f043 0220 	orr.w	r2, r3, #32
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e063      	b.n	8001e3a <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001d72:	f7ff fe95 	bl	8001aa0 <HAL_GetTick>
 8001d76:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001d78:	e021      	b.n	8001dbe <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d80:	d01d      	beq.n	8001dbe <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d007      	beq.n	8001d98 <HAL_ADC_PollForConversion+0x6c>
 8001d88:	f7ff fe8a 	bl	8001aa0 <HAL_GetTick>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	1ad3      	subs	r3, r2, r3
 8001d92:	683a      	ldr	r2, [r7, #0]
 8001d94:	429a      	cmp	r2, r3
 8001d96:	d212      	bcs.n	8001dbe <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f003 0302 	and.w	r3, r3, #2
 8001da2:	2b02      	cmp	r3, #2
 8001da4:	d00b      	beq.n	8001dbe <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001daa:	f043 0204 	orr.w	r2, r3, #4
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2200      	movs	r2, #0
 8001db6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001dba:	2303      	movs	r3, #3
 8001dbc:	e03d      	b.n	8001e3a <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f003 0302 	and.w	r3, r3, #2
 8001dc8:	2b02      	cmp	r3, #2
 8001dca:	d1d6      	bne.n	8001d7a <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f06f 0212 	mvn.w	r2, #18
 8001dd4:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dda:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d123      	bne.n	8001e38 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d11f      	bne.n	8001e38 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dfe:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d006      	beq.n	8001e14 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d111      	bne.n	8001e38 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e18:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e24:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d105      	bne.n	8001e38 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e30:	f043 0201 	orr.w	r2, r3, #1
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001e38:	2300      	movs	r3, #0
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3710      	adds	r7, #16
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}

08001e42 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001e42:	b480      	push	{r7}
 8001e44:	b083      	sub	sp, #12
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	370c      	adds	r7, #12
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr

08001e5c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b085      	sub	sp, #20
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
 8001e64:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001e66:	2300      	movs	r3, #0
 8001e68:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	d101      	bne.n	8001e78 <HAL_ADC_ConfigChannel+0x1c>
 8001e74:	2302      	movs	r3, #2
 8001e76:	e105      	b.n	8002084 <HAL_ADC_ConfigChannel+0x228>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	2b09      	cmp	r3, #9
 8001e86:	d925      	bls.n	8001ed4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	68d9      	ldr	r1, [r3, #12]
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	b29b      	uxth	r3, r3
 8001e94:	461a      	mov	r2, r3
 8001e96:	4613      	mov	r3, r2
 8001e98:	005b      	lsls	r3, r3, #1
 8001e9a:	4413      	add	r3, r2
 8001e9c:	3b1e      	subs	r3, #30
 8001e9e:	2207      	movs	r2, #7
 8001ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea4:	43da      	mvns	r2, r3
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	400a      	ands	r2, r1
 8001eac:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	68d9      	ldr	r1, [r3, #12]
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	689a      	ldr	r2, [r3, #8]
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	b29b      	uxth	r3, r3
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	005b      	lsls	r3, r3, #1
 8001ec4:	4403      	add	r3, r0
 8001ec6:	3b1e      	subs	r3, #30
 8001ec8:	409a      	lsls	r2, r3
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	430a      	orrs	r2, r1
 8001ed0:	60da      	str	r2, [r3, #12]
 8001ed2:	e022      	b.n	8001f1a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	6919      	ldr	r1, [r3, #16]
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	b29b      	uxth	r3, r3
 8001ee0:	461a      	mov	r2, r3
 8001ee2:	4613      	mov	r3, r2
 8001ee4:	005b      	lsls	r3, r3, #1
 8001ee6:	4413      	add	r3, r2
 8001ee8:	2207      	movs	r2, #7
 8001eea:	fa02 f303 	lsl.w	r3, r2, r3
 8001eee:	43da      	mvns	r2, r3
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	400a      	ands	r2, r1
 8001ef6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	6919      	ldr	r1, [r3, #16]
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	689a      	ldr	r2, [r3, #8]
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	b29b      	uxth	r3, r3
 8001f08:	4618      	mov	r0, r3
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	005b      	lsls	r3, r3, #1
 8001f0e:	4403      	add	r3, r0
 8001f10:	409a      	lsls	r2, r3
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	430a      	orrs	r2, r1
 8001f18:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	2b06      	cmp	r3, #6
 8001f20:	d824      	bhi.n	8001f6c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	685a      	ldr	r2, [r3, #4]
 8001f2c:	4613      	mov	r3, r2
 8001f2e:	009b      	lsls	r3, r3, #2
 8001f30:	4413      	add	r3, r2
 8001f32:	3b05      	subs	r3, #5
 8001f34:	221f      	movs	r2, #31
 8001f36:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3a:	43da      	mvns	r2, r3
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	400a      	ands	r2, r1
 8001f42:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	b29b      	uxth	r3, r3
 8001f50:	4618      	mov	r0, r3
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	685a      	ldr	r2, [r3, #4]
 8001f56:	4613      	mov	r3, r2
 8001f58:	009b      	lsls	r3, r3, #2
 8001f5a:	4413      	add	r3, r2
 8001f5c:	3b05      	subs	r3, #5
 8001f5e:	fa00 f203 	lsl.w	r2, r0, r3
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	430a      	orrs	r2, r1
 8001f68:	635a      	str	r2, [r3, #52]	; 0x34
 8001f6a:	e04c      	b.n	8002006 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	2b0c      	cmp	r3, #12
 8001f72:	d824      	bhi.n	8001fbe <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	685a      	ldr	r2, [r3, #4]
 8001f7e:	4613      	mov	r3, r2
 8001f80:	009b      	lsls	r3, r3, #2
 8001f82:	4413      	add	r3, r2
 8001f84:	3b23      	subs	r3, #35	; 0x23
 8001f86:	221f      	movs	r2, #31
 8001f88:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8c:	43da      	mvns	r2, r3
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	400a      	ands	r2, r1
 8001f94:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	b29b      	uxth	r3, r3
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	685a      	ldr	r2, [r3, #4]
 8001fa8:	4613      	mov	r3, r2
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	4413      	add	r3, r2
 8001fae:	3b23      	subs	r3, #35	; 0x23
 8001fb0:	fa00 f203 	lsl.w	r2, r0, r3
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	430a      	orrs	r2, r1
 8001fba:	631a      	str	r2, [r3, #48]	; 0x30
 8001fbc:	e023      	b.n	8002006 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	685a      	ldr	r2, [r3, #4]
 8001fc8:	4613      	mov	r3, r2
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	4413      	add	r3, r2
 8001fce:	3b41      	subs	r3, #65	; 0x41
 8001fd0:	221f      	movs	r2, #31
 8001fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd6:	43da      	mvns	r2, r3
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	400a      	ands	r2, r1
 8001fde:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	b29b      	uxth	r3, r3
 8001fec:	4618      	mov	r0, r3
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	685a      	ldr	r2, [r3, #4]
 8001ff2:	4613      	mov	r3, r2
 8001ff4:	009b      	lsls	r3, r3, #2
 8001ff6:	4413      	add	r3, r2
 8001ff8:	3b41      	subs	r3, #65	; 0x41
 8001ffa:	fa00 f203 	lsl.w	r2, r0, r3
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	430a      	orrs	r2, r1
 8002004:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002006:	4b22      	ldr	r3, [pc, #136]	; (8002090 <HAL_ADC_ConfigChannel+0x234>)
 8002008:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a21      	ldr	r2, [pc, #132]	; (8002094 <HAL_ADC_ConfigChannel+0x238>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d109      	bne.n	8002028 <HAL_ADC_ConfigChannel+0x1cc>
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	2b12      	cmp	r3, #18
 800201a:	d105      	bne.n	8002028 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a19      	ldr	r2, [pc, #100]	; (8002094 <HAL_ADC_ConfigChannel+0x238>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d123      	bne.n	800207a <HAL_ADC_ConfigChannel+0x21e>
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	2b10      	cmp	r3, #16
 8002038:	d003      	beq.n	8002042 <HAL_ADC_ConfigChannel+0x1e6>
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	2b11      	cmp	r3, #17
 8002040:	d11b      	bne.n	800207a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	2b10      	cmp	r3, #16
 8002054:	d111      	bne.n	800207a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002056:	4b10      	ldr	r3, [pc, #64]	; (8002098 <HAL_ADC_ConfigChannel+0x23c>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a10      	ldr	r2, [pc, #64]	; (800209c <HAL_ADC_ConfigChannel+0x240>)
 800205c:	fba2 2303 	umull	r2, r3, r2, r3
 8002060:	0c9a      	lsrs	r2, r3, #18
 8002062:	4613      	mov	r3, r2
 8002064:	009b      	lsls	r3, r3, #2
 8002066:	4413      	add	r3, r2
 8002068:	005b      	lsls	r3, r3, #1
 800206a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800206c:	e002      	b.n	8002074 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	3b01      	subs	r3, #1
 8002072:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d1f9      	bne.n	800206e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2200      	movs	r2, #0
 800207e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002082:	2300      	movs	r3, #0
}
 8002084:	4618      	mov	r0, r3
 8002086:	3714      	adds	r7, #20
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr
 8002090:	40012300 	.word	0x40012300
 8002094:	40012000 	.word	0x40012000
 8002098:	20000000 	.word	0x20000000
 800209c:	431bde83 	.word	0x431bde83

080020a0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b085      	sub	sp, #20
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80020a8:	4b79      	ldr	r3, [pc, #484]	; (8002290 <ADC_Init+0x1f0>)
 80020aa:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	685a      	ldr	r2, [r3, #4]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	431a      	orrs	r2, r3
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	685a      	ldr	r2, [r3, #4]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80020d4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	6859      	ldr	r1, [r3, #4]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	691b      	ldr	r3, [r3, #16]
 80020e0:	021a      	lsls	r2, r3, #8
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	430a      	orrs	r2, r1
 80020e8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	685a      	ldr	r2, [r3, #4]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80020f8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	6859      	ldr	r1, [r3, #4]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	689a      	ldr	r2, [r3, #8]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	430a      	orrs	r2, r1
 800210a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	689a      	ldr	r2, [r3, #8]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800211a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	6899      	ldr	r1, [r3, #8]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	68da      	ldr	r2, [r3, #12]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	430a      	orrs	r2, r1
 800212c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002132:	4a58      	ldr	r2, [pc, #352]	; (8002294 <ADC_Init+0x1f4>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d022      	beq.n	800217e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	689a      	ldr	r2, [r3, #8]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002146:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	6899      	ldr	r1, [r3, #8]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	430a      	orrs	r2, r1
 8002158:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	689a      	ldr	r2, [r3, #8]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002168:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	6899      	ldr	r1, [r3, #8]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	430a      	orrs	r2, r1
 800217a:	609a      	str	r2, [r3, #8]
 800217c:	e00f      	b.n	800219e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	689a      	ldr	r2, [r3, #8]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800218c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	689a      	ldr	r2, [r3, #8]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800219c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	689a      	ldr	r2, [r3, #8]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f022 0202 	bic.w	r2, r2, #2
 80021ac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	6899      	ldr	r1, [r3, #8]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	7e1b      	ldrb	r3, [r3, #24]
 80021b8:	005a      	lsls	r2, r3, #1
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	430a      	orrs	r2, r1
 80021c0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d01b      	beq.n	8002204 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	685a      	ldr	r2, [r3, #4]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80021da:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	685a      	ldr	r2, [r3, #4]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80021ea:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	6859      	ldr	r1, [r3, #4]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f6:	3b01      	subs	r3, #1
 80021f8:	035a      	lsls	r2, r3, #13
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	430a      	orrs	r2, r1
 8002200:	605a      	str	r2, [r3, #4]
 8002202:	e007      	b.n	8002214 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	685a      	ldr	r2, [r3, #4]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002212:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002222:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	69db      	ldr	r3, [r3, #28]
 800222e:	3b01      	subs	r3, #1
 8002230:	051a      	lsls	r2, r3, #20
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	430a      	orrs	r2, r1
 8002238:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	689a      	ldr	r2, [r3, #8]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002248:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	6899      	ldr	r1, [r3, #8]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002256:	025a      	lsls	r2, r3, #9
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	430a      	orrs	r2, r1
 800225e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	689a      	ldr	r2, [r3, #8]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800226e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	6899      	ldr	r1, [r3, #8]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	695b      	ldr	r3, [r3, #20]
 800227a:	029a      	lsls	r2, r3, #10
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	430a      	orrs	r2, r1
 8002282:	609a      	str	r2, [r3, #8]
}
 8002284:	bf00      	nop
 8002286:	3714      	adds	r7, #20
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr
 8002290:	40012300 	.word	0x40012300
 8002294:	0f000001 	.word	0x0f000001

08002298 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002298:	b480      	push	{r7}
 800229a:	b085      	sub	sp, #20
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	f003 0307 	and.w	r3, r3, #7
 80022a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022a8:	4b0c      	ldr	r3, [pc, #48]	; (80022dc <__NVIC_SetPriorityGrouping+0x44>)
 80022aa:	68db      	ldr	r3, [r3, #12]
 80022ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022ae:	68ba      	ldr	r2, [r7, #8]
 80022b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022b4:	4013      	ands	r3, r2
 80022b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80022c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022ca:	4a04      	ldr	r2, [pc, #16]	; (80022dc <__NVIC_SetPriorityGrouping+0x44>)
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	60d3      	str	r3, [r2, #12]
}
 80022d0:	bf00      	nop
 80022d2:	3714      	adds	r7, #20
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr
 80022dc:	e000ed00 	.word	0xe000ed00

080022e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022e0:	b480      	push	{r7}
 80022e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022e4:	4b04      	ldr	r3, [pc, #16]	; (80022f8 <__NVIC_GetPriorityGrouping+0x18>)
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	0a1b      	lsrs	r3, r3, #8
 80022ea:	f003 0307 	and.w	r3, r3, #7
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	46bd      	mov	sp, r7
 80022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f6:	4770      	bx	lr
 80022f8:	e000ed00 	.word	0xe000ed00

080022fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b083      	sub	sp, #12
 8002300:	af00      	add	r7, sp, #0
 8002302:	4603      	mov	r3, r0
 8002304:	6039      	str	r1, [r7, #0]
 8002306:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002308:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800230c:	2b00      	cmp	r3, #0
 800230e:	db0a      	blt.n	8002326 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	b2da      	uxtb	r2, r3
 8002314:	490c      	ldr	r1, [pc, #48]	; (8002348 <__NVIC_SetPriority+0x4c>)
 8002316:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800231a:	0112      	lsls	r2, r2, #4
 800231c:	b2d2      	uxtb	r2, r2
 800231e:	440b      	add	r3, r1
 8002320:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002324:	e00a      	b.n	800233c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	b2da      	uxtb	r2, r3
 800232a:	4908      	ldr	r1, [pc, #32]	; (800234c <__NVIC_SetPriority+0x50>)
 800232c:	79fb      	ldrb	r3, [r7, #7]
 800232e:	f003 030f 	and.w	r3, r3, #15
 8002332:	3b04      	subs	r3, #4
 8002334:	0112      	lsls	r2, r2, #4
 8002336:	b2d2      	uxtb	r2, r2
 8002338:	440b      	add	r3, r1
 800233a:	761a      	strb	r2, [r3, #24]
}
 800233c:	bf00      	nop
 800233e:	370c      	adds	r7, #12
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr
 8002348:	e000e100 	.word	0xe000e100
 800234c:	e000ed00 	.word	0xe000ed00

08002350 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002350:	b480      	push	{r7}
 8002352:	b089      	sub	sp, #36	; 0x24
 8002354:	af00      	add	r7, sp, #0
 8002356:	60f8      	str	r0, [r7, #12]
 8002358:	60b9      	str	r1, [r7, #8]
 800235a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	f003 0307 	and.w	r3, r3, #7
 8002362:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002364:	69fb      	ldr	r3, [r7, #28]
 8002366:	f1c3 0307 	rsb	r3, r3, #7
 800236a:	2b04      	cmp	r3, #4
 800236c:	bf28      	it	cs
 800236e:	2304      	movcs	r3, #4
 8002370:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002372:	69fb      	ldr	r3, [r7, #28]
 8002374:	3304      	adds	r3, #4
 8002376:	2b06      	cmp	r3, #6
 8002378:	d902      	bls.n	8002380 <NVIC_EncodePriority+0x30>
 800237a:	69fb      	ldr	r3, [r7, #28]
 800237c:	3b03      	subs	r3, #3
 800237e:	e000      	b.n	8002382 <NVIC_EncodePriority+0x32>
 8002380:	2300      	movs	r3, #0
 8002382:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002384:	f04f 32ff 	mov.w	r2, #4294967295
 8002388:	69bb      	ldr	r3, [r7, #24]
 800238a:	fa02 f303 	lsl.w	r3, r2, r3
 800238e:	43da      	mvns	r2, r3
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	401a      	ands	r2, r3
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002398:	f04f 31ff 	mov.w	r1, #4294967295
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	fa01 f303 	lsl.w	r3, r1, r3
 80023a2:	43d9      	mvns	r1, r3
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023a8:	4313      	orrs	r3, r2
         );
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	3724      	adds	r7, #36	; 0x24
 80023ae:	46bd      	mov	sp, r7
 80023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b4:	4770      	bx	lr
	...

080023b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b082      	sub	sp, #8
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	3b01      	subs	r3, #1
 80023c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023c8:	d301      	bcc.n	80023ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023ca:	2301      	movs	r3, #1
 80023cc:	e00f      	b.n	80023ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023ce:	4a0a      	ldr	r2, [pc, #40]	; (80023f8 <SysTick_Config+0x40>)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	3b01      	subs	r3, #1
 80023d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023d6:	210f      	movs	r1, #15
 80023d8:	f04f 30ff 	mov.w	r0, #4294967295
 80023dc:	f7ff ff8e 	bl	80022fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023e0:	4b05      	ldr	r3, [pc, #20]	; (80023f8 <SysTick_Config+0x40>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023e6:	4b04      	ldr	r3, [pc, #16]	; (80023f8 <SysTick_Config+0x40>)
 80023e8:	2207      	movs	r2, #7
 80023ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023ec:	2300      	movs	r3, #0
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3708      	adds	r7, #8
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	e000e010 	.word	0xe000e010

080023fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b082      	sub	sp, #8
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002404:	6878      	ldr	r0, [r7, #4]
 8002406:	f7ff ff47 	bl	8002298 <__NVIC_SetPriorityGrouping>
}
 800240a:	bf00      	nop
 800240c:	3708      	adds	r7, #8
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}

08002412 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002412:	b580      	push	{r7, lr}
 8002414:	b086      	sub	sp, #24
 8002416:	af00      	add	r7, sp, #0
 8002418:	4603      	mov	r3, r0
 800241a:	60b9      	str	r1, [r7, #8]
 800241c:	607a      	str	r2, [r7, #4]
 800241e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002420:	2300      	movs	r3, #0
 8002422:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002424:	f7ff ff5c 	bl	80022e0 <__NVIC_GetPriorityGrouping>
 8002428:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800242a:	687a      	ldr	r2, [r7, #4]
 800242c:	68b9      	ldr	r1, [r7, #8]
 800242e:	6978      	ldr	r0, [r7, #20]
 8002430:	f7ff ff8e 	bl	8002350 <NVIC_EncodePriority>
 8002434:	4602      	mov	r2, r0
 8002436:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800243a:	4611      	mov	r1, r2
 800243c:	4618      	mov	r0, r3
 800243e:	f7ff ff5d 	bl	80022fc <__NVIC_SetPriority>
}
 8002442:	bf00      	nop
 8002444:	3718      	adds	r7, #24
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}

0800244a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800244a:	b580      	push	{r7, lr}
 800244c:	b082      	sub	sp, #8
 800244e:	af00      	add	r7, sp, #0
 8002450:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002452:	6878      	ldr	r0, [r7, #4]
 8002454:	f7ff ffb0 	bl	80023b8 <SysTick_Config>
 8002458:	4603      	mov	r3, r0
}
 800245a:	4618      	mov	r0, r3
 800245c:	3708      	adds	r7, #8
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
	...

08002464 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002464:	b480      	push	{r7}
 8002466:	b089      	sub	sp, #36	; 0x24
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
 800246c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800246e:	2300      	movs	r3, #0
 8002470:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002472:	2300      	movs	r3, #0
 8002474:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002476:	2300      	movs	r3, #0
 8002478:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800247a:	2300      	movs	r3, #0
 800247c:	61fb      	str	r3, [r7, #28]
 800247e:	e16b      	b.n	8002758 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002480:	2201      	movs	r2, #1
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	fa02 f303 	lsl.w	r3, r2, r3
 8002488:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	697a      	ldr	r2, [r7, #20]
 8002490:	4013      	ands	r3, r2
 8002492:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002494:	693a      	ldr	r2, [r7, #16]
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	429a      	cmp	r2, r3
 800249a:	f040 815a 	bne.w	8002752 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	f003 0303 	and.w	r3, r3, #3
 80024a6:	2b01      	cmp	r3, #1
 80024a8:	d005      	beq.n	80024b6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024b2:	2b02      	cmp	r3, #2
 80024b4:	d130      	bne.n	8002518 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80024bc:	69fb      	ldr	r3, [r7, #28]
 80024be:	005b      	lsls	r3, r3, #1
 80024c0:	2203      	movs	r2, #3
 80024c2:	fa02 f303 	lsl.w	r3, r2, r3
 80024c6:	43db      	mvns	r3, r3
 80024c8:	69ba      	ldr	r2, [r7, #24]
 80024ca:	4013      	ands	r3, r2
 80024cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	68da      	ldr	r2, [r3, #12]
 80024d2:	69fb      	ldr	r3, [r7, #28]
 80024d4:	005b      	lsls	r3, r3, #1
 80024d6:	fa02 f303 	lsl.w	r3, r2, r3
 80024da:	69ba      	ldr	r2, [r7, #24]
 80024dc:	4313      	orrs	r3, r2
 80024de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	69ba      	ldr	r2, [r7, #24]
 80024e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024ec:	2201      	movs	r2, #1
 80024ee:	69fb      	ldr	r3, [r7, #28]
 80024f0:	fa02 f303 	lsl.w	r3, r2, r3
 80024f4:	43db      	mvns	r3, r3
 80024f6:	69ba      	ldr	r2, [r7, #24]
 80024f8:	4013      	ands	r3, r2
 80024fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	091b      	lsrs	r3, r3, #4
 8002502:	f003 0201 	and.w	r2, r3, #1
 8002506:	69fb      	ldr	r3, [r7, #28]
 8002508:	fa02 f303 	lsl.w	r3, r2, r3
 800250c:	69ba      	ldr	r2, [r7, #24]
 800250e:	4313      	orrs	r3, r2
 8002510:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	69ba      	ldr	r2, [r7, #24]
 8002516:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	f003 0303 	and.w	r3, r3, #3
 8002520:	2b03      	cmp	r3, #3
 8002522:	d017      	beq.n	8002554 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	68db      	ldr	r3, [r3, #12]
 8002528:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800252a:	69fb      	ldr	r3, [r7, #28]
 800252c:	005b      	lsls	r3, r3, #1
 800252e:	2203      	movs	r2, #3
 8002530:	fa02 f303 	lsl.w	r3, r2, r3
 8002534:	43db      	mvns	r3, r3
 8002536:	69ba      	ldr	r2, [r7, #24]
 8002538:	4013      	ands	r3, r2
 800253a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	689a      	ldr	r2, [r3, #8]
 8002540:	69fb      	ldr	r3, [r7, #28]
 8002542:	005b      	lsls	r3, r3, #1
 8002544:	fa02 f303 	lsl.w	r3, r2, r3
 8002548:	69ba      	ldr	r2, [r7, #24]
 800254a:	4313      	orrs	r3, r2
 800254c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	69ba      	ldr	r2, [r7, #24]
 8002552:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	f003 0303 	and.w	r3, r3, #3
 800255c:	2b02      	cmp	r3, #2
 800255e:	d123      	bne.n	80025a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002560:	69fb      	ldr	r3, [r7, #28]
 8002562:	08da      	lsrs	r2, r3, #3
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	3208      	adds	r2, #8
 8002568:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800256c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	f003 0307 	and.w	r3, r3, #7
 8002574:	009b      	lsls	r3, r3, #2
 8002576:	220f      	movs	r2, #15
 8002578:	fa02 f303 	lsl.w	r3, r2, r3
 800257c:	43db      	mvns	r3, r3
 800257e:	69ba      	ldr	r2, [r7, #24]
 8002580:	4013      	ands	r3, r2
 8002582:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	691a      	ldr	r2, [r3, #16]
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	f003 0307 	and.w	r3, r3, #7
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	fa02 f303 	lsl.w	r3, r2, r3
 8002594:	69ba      	ldr	r2, [r7, #24]
 8002596:	4313      	orrs	r3, r2
 8002598:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800259a:	69fb      	ldr	r3, [r7, #28]
 800259c:	08da      	lsrs	r2, r3, #3
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	3208      	adds	r2, #8
 80025a2:	69b9      	ldr	r1, [r7, #24]
 80025a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80025ae:	69fb      	ldr	r3, [r7, #28]
 80025b0:	005b      	lsls	r3, r3, #1
 80025b2:	2203      	movs	r2, #3
 80025b4:	fa02 f303 	lsl.w	r3, r2, r3
 80025b8:	43db      	mvns	r3, r3
 80025ba:	69ba      	ldr	r2, [r7, #24]
 80025bc:	4013      	ands	r3, r2
 80025be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f003 0203 	and.w	r2, r3, #3
 80025c8:	69fb      	ldr	r3, [r7, #28]
 80025ca:	005b      	lsls	r3, r3, #1
 80025cc:	fa02 f303 	lsl.w	r3, r2, r3
 80025d0:	69ba      	ldr	r2, [r7, #24]
 80025d2:	4313      	orrs	r3, r2
 80025d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	69ba      	ldr	r2, [r7, #24]
 80025da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	f000 80b4 	beq.w	8002752 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025ea:	2300      	movs	r3, #0
 80025ec:	60fb      	str	r3, [r7, #12]
 80025ee:	4b60      	ldr	r3, [pc, #384]	; (8002770 <HAL_GPIO_Init+0x30c>)
 80025f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025f2:	4a5f      	ldr	r2, [pc, #380]	; (8002770 <HAL_GPIO_Init+0x30c>)
 80025f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025f8:	6453      	str	r3, [r2, #68]	; 0x44
 80025fa:	4b5d      	ldr	r3, [pc, #372]	; (8002770 <HAL_GPIO_Init+0x30c>)
 80025fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002602:	60fb      	str	r3, [r7, #12]
 8002604:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002606:	4a5b      	ldr	r2, [pc, #364]	; (8002774 <HAL_GPIO_Init+0x310>)
 8002608:	69fb      	ldr	r3, [r7, #28]
 800260a:	089b      	lsrs	r3, r3, #2
 800260c:	3302      	adds	r3, #2
 800260e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002612:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002614:	69fb      	ldr	r3, [r7, #28]
 8002616:	f003 0303 	and.w	r3, r3, #3
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	220f      	movs	r2, #15
 800261e:	fa02 f303 	lsl.w	r3, r2, r3
 8002622:	43db      	mvns	r3, r3
 8002624:	69ba      	ldr	r2, [r7, #24]
 8002626:	4013      	ands	r3, r2
 8002628:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	4a52      	ldr	r2, [pc, #328]	; (8002778 <HAL_GPIO_Init+0x314>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d02b      	beq.n	800268a <HAL_GPIO_Init+0x226>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	4a51      	ldr	r2, [pc, #324]	; (800277c <HAL_GPIO_Init+0x318>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d025      	beq.n	8002686 <HAL_GPIO_Init+0x222>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	4a50      	ldr	r2, [pc, #320]	; (8002780 <HAL_GPIO_Init+0x31c>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d01f      	beq.n	8002682 <HAL_GPIO_Init+0x21e>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	4a4f      	ldr	r2, [pc, #316]	; (8002784 <HAL_GPIO_Init+0x320>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d019      	beq.n	800267e <HAL_GPIO_Init+0x21a>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	4a4e      	ldr	r2, [pc, #312]	; (8002788 <HAL_GPIO_Init+0x324>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d013      	beq.n	800267a <HAL_GPIO_Init+0x216>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	4a4d      	ldr	r2, [pc, #308]	; (800278c <HAL_GPIO_Init+0x328>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d00d      	beq.n	8002676 <HAL_GPIO_Init+0x212>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	4a4c      	ldr	r2, [pc, #304]	; (8002790 <HAL_GPIO_Init+0x32c>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d007      	beq.n	8002672 <HAL_GPIO_Init+0x20e>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	4a4b      	ldr	r2, [pc, #300]	; (8002794 <HAL_GPIO_Init+0x330>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d101      	bne.n	800266e <HAL_GPIO_Init+0x20a>
 800266a:	2307      	movs	r3, #7
 800266c:	e00e      	b.n	800268c <HAL_GPIO_Init+0x228>
 800266e:	2308      	movs	r3, #8
 8002670:	e00c      	b.n	800268c <HAL_GPIO_Init+0x228>
 8002672:	2306      	movs	r3, #6
 8002674:	e00a      	b.n	800268c <HAL_GPIO_Init+0x228>
 8002676:	2305      	movs	r3, #5
 8002678:	e008      	b.n	800268c <HAL_GPIO_Init+0x228>
 800267a:	2304      	movs	r3, #4
 800267c:	e006      	b.n	800268c <HAL_GPIO_Init+0x228>
 800267e:	2303      	movs	r3, #3
 8002680:	e004      	b.n	800268c <HAL_GPIO_Init+0x228>
 8002682:	2302      	movs	r3, #2
 8002684:	e002      	b.n	800268c <HAL_GPIO_Init+0x228>
 8002686:	2301      	movs	r3, #1
 8002688:	e000      	b.n	800268c <HAL_GPIO_Init+0x228>
 800268a:	2300      	movs	r3, #0
 800268c:	69fa      	ldr	r2, [r7, #28]
 800268e:	f002 0203 	and.w	r2, r2, #3
 8002692:	0092      	lsls	r2, r2, #2
 8002694:	4093      	lsls	r3, r2
 8002696:	69ba      	ldr	r2, [r7, #24]
 8002698:	4313      	orrs	r3, r2
 800269a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800269c:	4935      	ldr	r1, [pc, #212]	; (8002774 <HAL_GPIO_Init+0x310>)
 800269e:	69fb      	ldr	r3, [r7, #28]
 80026a0:	089b      	lsrs	r3, r3, #2
 80026a2:	3302      	adds	r3, #2
 80026a4:	69ba      	ldr	r2, [r7, #24]
 80026a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026aa:	4b3b      	ldr	r3, [pc, #236]	; (8002798 <HAL_GPIO_Init+0x334>)
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	43db      	mvns	r3, r3
 80026b4:	69ba      	ldr	r2, [r7, #24]
 80026b6:	4013      	ands	r3, r2
 80026b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d003      	beq.n	80026ce <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80026c6:	69ba      	ldr	r2, [r7, #24]
 80026c8:	693b      	ldr	r3, [r7, #16]
 80026ca:	4313      	orrs	r3, r2
 80026cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80026ce:	4a32      	ldr	r2, [pc, #200]	; (8002798 <HAL_GPIO_Init+0x334>)
 80026d0:	69bb      	ldr	r3, [r7, #24]
 80026d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026d4:	4b30      	ldr	r3, [pc, #192]	; (8002798 <HAL_GPIO_Init+0x334>)
 80026d6:	68db      	ldr	r3, [r3, #12]
 80026d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	43db      	mvns	r3, r3
 80026de:	69ba      	ldr	r2, [r7, #24]
 80026e0:	4013      	ands	r3, r2
 80026e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d003      	beq.n	80026f8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80026f0:	69ba      	ldr	r2, [r7, #24]
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	4313      	orrs	r3, r2
 80026f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80026f8:	4a27      	ldr	r2, [pc, #156]	; (8002798 <HAL_GPIO_Init+0x334>)
 80026fa:	69bb      	ldr	r3, [r7, #24]
 80026fc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80026fe:	4b26      	ldr	r3, [pc, #152]	; (8002798 <HAL_GPIO_Init+0x334>)
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	43db      	mvns	r3, r3
 8002708:	69ba      	ldr	r2, [r7, #24]
 800270a:	4013      	ands	r3, r2
 800270c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d003      	beq.n	8002722 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800271a:	69ba      	ldr	r2, [r7, #24]
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	4313      	orrs	r3, r2
 8002720:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002722:	4a1d      	ldr	r2, [pc, #116]	; (8002798 <HAL_GPIO_Init+0x334>)
 8002724:	69bb      	ldr	r3, [r7, #24]
 8002726:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002728:	4b1b      	ldr	r3, [pc, #108]	; (8002798 <HAL_GPIO_Init+0x334>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	43db      	mvns	r3, r3
 8002732:	69ba      	ldr	r2, [r7, #24]
 8002734:	4013      	ands	r3, r2
 8002736:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002740:	2b00      	cmp	r3, #0
 8002742:	d003      	beq.n	800274c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002744:	69ba      	ldr	r2, [r7, #24]
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	4313      	orrs	r3, r2
 800274a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800274c:	4a12      	ldr	r2, [pc, #72]	; (8002798 <HAL_GPIO_Init+0x334>)
 800274e:	69bb      	ldr	r3, [r7, #24]
 8002750:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002752:	69fb      	ldr	r3, [r7, #28]
 8002754:	3301      	adds	r3, #1
 8002756:	61fb      	str	r3, [r7, #28]
 8002758:	69fb      	ldr	r3, [r7, #28]
 800275a:	2b0f      	cmp	r3, #15
 800275c:	f67f ae90 	bls.w	8002480 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002760:	bf00      	nop
 8002762:	bf00      	nop
 8002764:	3724      	adds	r7, #36	; 0x24
 8002766:	46bd      	mov	sp, r7
 8002768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276c:	4770      	bx	lr
 800276e:	bf00      	nop
 8002770:	40023800 	.word	0x40023800
 8002774:	40013800 	.word	0x40013800
 8002778:	40020000 	.word	0x40020000
 800277c:	40020400 	.word	0x40020400
 8002780:	40020800 	.word	0x40020800
 8002784:	40020c00 	.word	0x40020c00
 8002788:	40021000 	.word	0x40021000
 800278c:	40021400 	.word	0x40021400
 8002790:	40021800 	.word	0x40021800
 8002794:	40021c00 	.word	0x40021c00
 8002798:	40013c00 	.word	0x40013c00

0800279c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800279c:	b480      	push	{r7}
 800279e:	b085      	sub	sp, #20
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
 80027a4:	460b      	mov	r3, r1
 80027a6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	691a      	ldr	r2, [r3, #16]
 80027ac:	887b      	ldrh	r3, [r7, #2]
 80027ae:	4013      	ands	r3, r2
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d002      	beq.n	80027ba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80027b4:	2301      	movs	r3, #1
 80027b6:	73fb      	strb	r3, [r7, #15]
 80027b8:	e001      	b.n	80027be <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80027ba:	2300      	movs	r3, #0
 80027bc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80027be:	7bfb      	ldrb	r3, [r7, #15]
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	3714      	adds	r7, #20
 80027c4:	46bd      	mov	sp, r7
 80027c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ca:	4770      	bx	lr

080027cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
 80027d4:	460b      	mov	r3, r1
 80027d6:	807b      	strh	r3, [r7, #2]
 80027d8:	4613      	mov	r3, r2
 80027da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027dc:	787b      	ldrb	r3, [r7, #1]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d003      	beq.n	80027ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027e2:	887a      	ldrh	r2, [r7, #2]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80027e8:	e003      	b.n	80027f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80027ea:	887b      	ldrh	r3, [r7, #2]
 80027ec:	041a      	lsls	r2, r3, #16
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	619a      	str	r2, [r3, #24]
}
 80027f2:	bf00      	nop
 80027f4:	370c      	adds	r7, #12
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr
	...

08002800 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b086      	sub	sp, #24
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d101      	bne.n	8002812 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	e267      	b.n	8002ce2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 0301 	and.w	r3, r3, #1
 800281a:	2b00      	cmp	r3, #0
 800281c:	d075      	beq.n	800290a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800281e:	4b88      	ldr	r3, [pc, #544]	; (8002a40 <HAL_RCC_OscConfig+0x240>)
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	f003 030c 	and.w	r3, r3, #12
 8002826:	2b04      	cmp	r3, #4
 8002828:	d00c      	beq.n	8002844 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800282a:	4b85      	ldr	r3, [pc, #532]	; (8002a40 <HAL_RCC_OscConfig+0x240>)
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002832:	2b08      	cmp	r3, #8
 8002834:	d112      	bne.n	800285c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002836:	4b82      	ldr	r3, [pc, #520]	; (8002a40 <HAL_RCC_OscConfig+0x240>)
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800283e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002842:	d10b      	bne.n	800285c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002844:	4b7e      	ldr	r3, [pc, #504]	; (8002a40 <HAL_RCC_OscConfig+0x240>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800284c:	2b00      	cmp	r3, #0
 800284e:	d05b      	beq.n	8002908 <HAL_RCC_OscConfig+0x108>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d157      	bne.n	8002908 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002858:	2301      	movs	r3, #1
 800285a:	e242      	b.n	8002ce2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002864:	d106      	bne.n	8002874 <HAL_RCC_OscConfig+0x74>
 8002866:	4b76      	ldr	r3, [pc, #472]	; (8002a40 <HAL_RCC_OscConfig+0x240>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a75      	ldr	r2, [pc, #468]	; (8002a40 <HAL_RCC_OscConfig+0x240>)
 800286c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002870:	6013      	str	r3, [r2, #0]
 8002872:	e01d      	b.n	80028b0 <HAL_RCC_OscConfig+0xb0>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800287c:	d10c      	bne.n	8002898 <HAL_RCC_OscConfig+0x98>
 800287e:	4b70      	ldr	r3, [pc, #448]	; (8002a40 <HAL_RCC_OscConfig+0x240>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a6f      	ldr	r2, [pc, #444]	; (8002a40 <HAL_RCC_OscConfig+0x240>)
 8002884:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002888:	6013      	str	r3, [r2, #0]
 800288a:	4b6d      	ldr	r3, [pc, #436]	; (8002a40 <HAL_RCC_OscConfig+0x240>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a6c      	ldr	r2, [pc, #432]	; (8002a40 <HAL_RCC_OscConfig+0x240>)
 8002890:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002894:	6013      	str	r3, [r2, #0]
 8002896:	e00b      	b.n	80028b0 <HAL_RCC_OscConfig+0xb0>
 8002898:	4b69      	ldr	r3, [pc, #420]	; (8002a40 <HAL_RCC_OscConfig+0x240>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a68      	ldr	r2, [pc, #416]	; (8002a40 <HAL_RCC_OscConfig+0x240>)
 800289e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028a2:	6013      	str	r3, [r2, #0]
 80028a4:	4b66      	ldr	r3, [pc, #408]	; (8002a40 <HAL_RCC_OscConfig+0x240>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a65      	ldr	r2, [pc, #404]	; (8002a40 <HAL_RCC_OscConfig+0x240>)
 80028aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d013      	beq.n	80028e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028b8:	f7ff f8f2 	bl	8001aa0 <HAL_GetTick>
 80028bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028be:	e008      	b.n	80028d2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028c0:	f7ff f8ee 	bl	8001aa0 <HAL_GetTick>
 80028c4:	4602      	mov	r2, r0
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	2b64      	cmp	r3, #100	; 0x64
 80028cc:	d901      	bls.n	80028d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80028ce:	2303      	movs	r3, #3
 80028d0:	e207      	b.n	8002ce2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028d2:	4b5b      	ldr	r3, [pc, #364]	; (8002a40 <HAL_RCC_OscConfig+0x240>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d0f0      	beq.n	80028c0 <HAL_RCC_OscConfig+0xc0>
 80028de:	e014      	b.n	800290a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028e0:	f7ff f8de 	bl	8001aa0 <HAL_GetTick>
 80028e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028e6:	e008      	b.n	80028fa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028e8:	f7ff f8da 	bl	8001aa0 <HAL_GetTick>
 80028ec:	4602      	mov	r2, r0
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	1ad3      	subs	r3, r2, r3
 80028f2:	2b64      	cmp	r3, #100	; 0x64
 80028f4:	d901      	bls.n	80028fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80028f6:	2303      	movs	r3, #3
 80028f8:	e1f3      	b.n	8002ce2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028fa:	4b51      	ldr	r3, [pc, #324]	; (8002a40 <HAL_RCC_OscConfig+0x240>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002902:	2b00      	cmp	r3, #0
 8002904:	d1f0      	bne.n	80028e8 <HAL_RCC_OscConfig+0xe8>
 8002906:	e000      	b.n	800290a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002908:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 0302 	and.w	r3, r3, #2
 8002912:	2b00      	cmp	r3, #0
 8002914:	d063      	beq.n	80029de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002916:	4b4a      	ldr	r3, [pc, #296]	; (8002a40 <HAL_RCC_OscConfig+0x240>)
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	f003 030c 	and.w	r3, r3, #12
 800291e:	2b00      	cmp	r3, #0
 8002920:	d00b      	beq.n	800293a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002922:	4b47      	ldr	r3, [pc, #284]	; (8002a40 <HAL_RCC_OscConfig+0x240>)
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800292a:	2b08      	cmp	r3, #8
 800292c:	d11c      	bne.n	8002968 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800292e:	4b44      	ldr	r3, [pc, #272]	; (8002a40 <HAL_RCC_OscConfig+0x240>)
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002936:	2b00      	cmp	r3, #0
 8002938:	d116      	bne.n	8002968 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800293a:	4b41      	ldr	r3, [pc, #260]	; (8002a40 <HAL_RCC_OscConfig+0x240>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 0302 	and.w	r3, r3, #2
 8002942:	2b00      	cmp	r3, #0
 8002944:	d005      	beq.n	8002952 <HAL_RCC_OscConfig+0x152>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	68db      	ldr	r3, [r3, #12]
 800294a:	2b01      	cmp	r3, #1
 800294c:	d001      	beq.n	8002952 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	e1c7      	b.n	8002ce2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002952:	4b3b      	ldr	r3, [pc, #236]	; (8002a40 <HAL_RCC_OscConfig+0x240>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	691b      	ldr	r3, [r3, #16]
 800295e:	00db      	lsls	r3, r3, #3
 8002960:	4937      	ldr	r1, [pc, #220]	; (8002a40 <HAL_RCC_OscConfig+0x240>)
 8002962:	4313      	orrs	r3, r2
 8002964:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002966:	e03a      	b.n	80029de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d020      	beq.n	80029b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002970:	4b34      	ldr	r3, [pc, #208]	; (8002a44 <HAL_RCC_OscConfig+0x244>)
 8002972:	2201      	movs	r2, #1
 8002974:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002976:	f7ff f893 	bl	8001aa0 <HAL_GetTick>
 800297a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800297c:	e008      	b.n	8002990 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800297e:	f7ff f88f 	bl	8001aa0 <HAL_GetTick>
 8002982:	4602      	mov	r2, r0
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	1ad3      	subs	r3, r2, r3
 8002988:	2b02      	cmp	r3, #2
 800298a:	d901      	bls.n	8002990 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800298c:	2303      	movs	r3, #3
 800298e:	e1a8      	b.n	8002ce2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002990:	4b2b      	ldr	r3, [pc, #172]	; (8002a40 <HAL_RCC_OscConfig+0x240>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 0302 	and.w	r3, r3, #2
 8002998:	2b00      	cmp	r3, #0
 800299a:	d0f0      	beq.n	800297e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800299c:	4b28      	ldr	r3, [pc, #160]	; (8002a40 <HAL_RCC_OscConfig+0x240>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	691b      	ldr	r3, [r3, #16]
 80029a8:	00db      	lsls	r3, r3, #3
 80029aa:	4925      	ldr	r1, [pc, #148]	; (8002a40 <HAL_RCC_OscConfig+0x240>)
 80029ac:	4313      	orrs	r3, r2
 80029ae:	600b      	str	r3, [r1, #0]
 80029b0:	e015      	b.n	80029de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029b2:	4b24      	ldr	r3, [pc, #144]	; (8002a44 <HAL_RCC_OscConfig+0x244>)
 80029b4:	2200      	movs	r2, #0
 80029b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029b8:	f7ff f872 	bl	8001aa0 <HAL_GetTick>
 80029bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029be:	e008      	b.n	80029d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029c0:	f7ff f86e 	bl	8001aa0 <HAL_GetTick>
 80029c4:	4602      	mov	r2, r0
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	1ad3      	subs	r3, r2, r3
 80029ca:	2b02      	cmp	r3, #2
 80029cc:	d901      	bls.n	80029d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80029ce:	2303      	movs	r3, #3
 80029d0:	e187      	b.n	8002ce2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029d2:	4b1b      	ldr	r3, [pc, #108]	; (8002a40 <HAL_RCC_OscConfig+0x240>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 0302 	and.w	r3, r3, #2
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d1f0      	bne.n	80029c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 0308 	and.w	r3, r3, #8
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d036      	beq.n	8002a58 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	695b      	ldr	r3, [r3, #20]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d016      	beq.n	8002a20 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029f2:	4b15      	ldr	r3, [pc, #84]	; (8002a48 <HAL_RCC_OscConfig+0x248>)
 80029f4:	2201      	movs	r2, #1
 80029f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029f8:	f7ff f852 	bl	8001aa0 <HAL_GetTick>
 80029fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029fe:	e008      	b.n	8002a12 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a00:	f7ff f84e 	bl	8001aa0 <HAL_GetTick>
 8002a04:	4602      	mov	r2, r0
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	1ad3      	subs	r3, r2, r3
 8002a0a:	2b02      	cmp	r3, #2
 8002a0c:	d901      	bls.n	8002a12 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002a0e:	2303      	movs	r3, #3
 8002a10:	e167      	b.n	8002ce2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a12:	4b0b      	ldr	r3, [pc, #44]	; (8002a40 <HAL_RCC_OscConfig+0x240>)
 8002a14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a16:	f003 0302 	and.w	r3, r3, #2
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d0f0      	beq.n	8002a00 <HAL_RCC_OscConfig+0x200>
 8002a1e:	e01b      	b.n	8002a58 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a20:	4b09      	ldr	r3, [pc, #36]	; (8002a48 <HAL_RCC_OscConfig+0x248>)
 8002a22:	2200      	movs	r2, #0
 8002a24:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a26:	f7ff f83b 	bl	8001aa0 <HAL_GetTick>
 8002a2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a2c:	e00e      	b.n	8002a4c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a2e:	f7ff f837 	bl	8001aa0 <HAL_GetTick>
 8002a32:	4602      	mov	r2, r0
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	1ad3      	subs	r3, r2, r3
 8002a38:	2b02      	cmp	r3, #2
 8002a3a:	d907      	bls.n	8002a4c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002a3c:	2303      	movs	r3, #3
 8002a3e:	e150      	b.n	8002ce2 <HAL_RCC_OscConfig+0x4e2>
 8002a40:	40023800 	.word	0x40023800
 8002a44:	42470000 	.word	0x42470000
 8002a48:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a4c:	4b88      	ldr	r3, [pc, #544]	; (8002c70 <HAL_RCC_OscConfig+0x470>)
 8002a4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a50:	f003 0302 	and.w	r3, r3, #2
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d1ea      	bne.n	8002a2e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 0304 	and.w	r3, r3, #4
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	f000 8097 	beq.w	8002b94 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a66:	2300      	movs	r3, #0
 8002a68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a6a:	4b81      	ldr	r3, [pc, #516]	; (8002c70 <HAL_RCC_OscConfig+0x470>)
 8002a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d10f      	bne.n	8002a96 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a76:	2300      	movs	r3, #0
 8002a78:	60bb      	str	r3, [r7, #8]
 8002a7a:	4b7d      	ldr	r3, [pc, #500]	; (8002c70 <HAL_RCC_OscConfig+0x470>)
 8002a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7e:	4a7c      	ldr	r2, [pc, #496]	; (8002c70 <HAL_RCC_OscConfig+0x470>)
 8002a80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a84:	6413      	str	r3, [r2, #64]	; 0x40
 8002a86:	4b7a      	ldr	r3, [pc, #488]	; (8002c70 <HAL_RCC_OscConfig+0x470>)
 8002a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a8e:	60bb      	str	r3, [r7, #8]
 8002a90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a92:	2301      	movs	r3, #1
 8002a94:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a96:	4b77      	ldr	r3, [pc, #476]	; (8002c74 <HAL_RCC_OscConfig+0x474>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d118      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002aa2:	4b74      	ldr	r3, [pc, #464]	; (8002c74 <HAL_RCC_OscConfig+0x474>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a73      	ldr	r2, [pc, #460]	; (8002c74 <HAL_RCC_OscConfig+0x474>)
 8002aa8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002aac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002aae:	f7fe fff7 	bl	8001aa0 <HAL_GetTick>
 8002ab2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ab4:	e008      	b.n	8002ac8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ab6:	f7fe fff3 	bl	8001aa0 <HAL_GetTick>
 8002aba:	4602      	mov	r2, r0
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	1ad3      	subs	r3, r2, r3
 8002ac0:	2b02      	cmp	r3, #2
 8002ac2:	d901      	bls.n	8002ac8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002ac4:	2303      	movs	r3, #3
 8002ac6:	e10c      	b.n	8002ce2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ac8:	4b6a      	ldr	r3, [pc, #424]	; (8002c74 <HAL_RCC_OscConfig+0x474>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d0f0      	beq.n	8002ab6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d106      	bne.n	8002aea <HAL_RCC_OscConfig+0x2ea>
 8002adc:	4b64      	ldr	r3, [pc, #400]	; (8002c70 <HAL_RCC_OscConfig+0x470>)
 8002ade:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ae0:	4a63      	ldr	r2, [pc, #396]	; (8002c70 <HAL_RCC_OscConfig+0x470>)
 8002ae2:	f043 0301 	orr.w	r3, r3, #1
 8002ae6:	6713      	str	r3, [r2, #112]	; 0x70
 8002ae8:	e01c      	b.n	8002b24 <HAL_RCC_OscConfig+0x324>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	2b05      	cmp	r3, #5
 8002af0:	d10c      	bne.n	8002b0c <HAL_RCC_OscConfig+0x30c>
 8002af2:	4b5f      	ldr	r3, [pc, #380]	; (8002c70 <HAL_RCC_OscConfig+0x470>)
 8002af4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002af6:	4a5e      	ldr	r2, [pc, #376]	; (8002c70 <HAL_RCC_OscConfig+0x470>)
 8002af8:	f043 0304 	orr.w	r3, r3, #4
 8002afc:	6713      	str	r3, [r2, #112]	; 0x70
 8002afe:	4b5c      	ldr	r3, [pc, #368]	; (8002c70 <HAL_RCC_OscConfig+0x470>)
 8002b00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b02:	4a5b      	ldr	r2, [pc, #364]	; (8002c70 <HAL_RCC_OscConfig+0x470>)
 8002b04:	f043 0301 	orr.w	r3, r3, #1
 8002b08:	6713      	str	r3, [r2, #112]	; 0x70
 8002b0a:	e00b      	b.n	8002b24 <HAL_RCC_OscConfig+0x324>
 8002b0c:	4b58      	ldr	r3, [pc, #352]	; (8002c70 <HAL_RCC_OscConfig+0x470>)
 8002b0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b10:	4a57      	ldr	r2, [pc, #348]	; (8002c70 <HAL_RCC_OscConfig+0x470>)
 8002b12:	f023 0301 	bic.w	r3, r3, #1
 8002b16:	6713      	str	r3, [r2, #112]	; 0x70
 8002b18:	4b55      	ldr	r3, [pc, #340]	; (8002c70 <HAL_RCC_OscConfig+0x470>)
 8002b1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b1c:	4a54      	ldr	r2, [pc, #336]	; (8002c70 <HAL_RCC_OscConfig+0x470>)
 8002b1e:	f023 0304 	bic.w	r3, r3, #4
 8002b22:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d015      	beq.n	8002b58 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b2c:	f7fe ffb8 	bl	8001aa0 <HAL_GetTick>
 8002b30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b32:	e00a      	b.n	8002b4a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b34:	f7fe ffb4 	bl	8001aa0 <HAL_GetTick>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d901      	bls.n	8002b4a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002b46:	2303      	movs	r3, #3
 8002b48:	e0cb      	b.n	8002ce2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b4a:	4b49      	ldr	r3, [pc, #292]	; (8002c70 <HAL_RCC_OscConfig+0x470>)
 8002b4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b4e:	f003 0302 	and.w	r3, r3, #2
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d0ee      	beq.n	8002b34 <HAL_RCC_OscConfig+0x334>
 8002b56:	e014      	b.n	8002b82 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b58:	f7fe ffa2 	bl	8001aa0 <HAL_GetTick>
 8002b5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b5e:	e00a      	b.n	8002b76 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b60:	f7fe ff9e 	bl	8001aa0 <HAL_GetTick>
 8002b64:	4602      	mov	r2, r0
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	1ad3      	subs	r3, r2, r3
 8002b6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d901      	bls.n	8002b76 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002b72:	2303      	movs	r3, #3
 8002b74:	e0b5      	b.n	8002ce2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b76:	4b3e      	ldr	r3, [pc, #248]	; (8002c70 <HAL_RCC_OscConfig+0x470>)
 8002b78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b7a:	f003 0302 	and.w	r3, r3, #2
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d1ee      	bne.n	8002b60 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b82:	7dfb      	ldrb	r3, [r7, #23]
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d105      	bne.n	8002b94 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b88:	4b39      	ldr	r3, [pc, #228]	; (8002c70 <HAL_RCC_OscConfig+0x470>)
 8002b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8c:	4a38      	ldr	r2, [pc, #224]	; (8002c70 <HAL_RCC_OscConfig+0x470>)
 8002b8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b92:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	699b      	ldr	r3, [r3, #24]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	f000 80a1 	beq.w	8002ce0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b9e:	4b34      	ldr	r3, [pc, #208]	; (8002c70 <HAL_RCC_OscConfig+0x470>)
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	f003 030c 	and.w	r3, r3, #12
 8002ba6:	2b08      	cmp	r3, #8
 8002ba8:	d05c      	beq.n	8002c64 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	699b      	ldr	r3, [r3, #24]
 8002bae:	2b02      	cmp	r3, #2
 8002bb0:	d141      	bne.n	8002c36 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bb2:	4b31      	ldr	r3, [pc, #196]	; (8002c78 <HAL_RCC_OscConfig+0x478>)
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bb8:	f7fe ff72 	bl	8001aa0 <HAL_GetTick>
 8002bbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bbe:	e008      	b.n	8002bd2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bc0:	f7fe ff6e 	bl	8001aa0 <HAL_GetTick>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	1ad3      	subs	r3, r2, r3
 8002bca:	2b02      	cmp	r3, #2
 8002bcc:	d901      	bls.n	8002bd2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002bce:	2303      	movs	r3, #3
 8002bd0:	e087      	b.n	8002ce2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bd2:	4b27      	ldr	r3, [pc, #156]	; (8002c70 <HAL_RCC_OscConfig+0x470>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d1f0      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	69da      	ldr	r2, [r3, #28]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6a1b      	ldr	r3, [r3, #32]
 8002be6:	431a      	orrs	r2, r3
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bec:	019b      	lsls	r3, r3, #6
 8002bee:	431a      	orrs	r2, r3
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bf4:	085b      	lsrs	r3, r3, #1
 8002bf6:	3b01      	subs	r3, #1
 8002bf8:	041b      	lsls	r3, r3, #16
 8002bfa:	431a      	orrs	r2, r3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c00:	061b      	lsls	r3, r3, #24
 8002c02:	491b      	ldr	r1, [pc, #108]	; (8002c70 <HAL_RCC_OscConfig+0x470>)
 8002c04:	4313      	orrs	r3, r2
 8002c06:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c08:	4b1b      	ldr	r3, [pc, #108]	; (8002c78 <HAL_RCC_OscConfig+0x478>)
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c0e:	f7fe ff47 	bl	8001aa0 <HAL_GetTick>
 8002c12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c14:	e008      	b.n	8002c28 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c16:	f7fe ff43 	bl	8001aa0 <HAL_GetTick>
 8002c1a:	4602      	mov	r2, r0
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	1ad3      	subs	r3, r2, r3
 8002c20:	2b02      	cmp	r3, #2
 8002c22:	d901      	bls.n	8002c28 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002c24:	2303      	movs	r3, #3
 8002c26:	e05c      	b.n	8002ce2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c28:	4b11      	ldr	r3, [pc, #68]	; (8002c70 <HAL_RCC_OscConfig+0x470>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d0f0      	beq.n	8002c16 <HAL_RCC_OscConfig+0x416>
 8002c34:	e054      	b.n	8002ce0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c36:	4b10      	ldr	r3, [pc, #64]	; (8002c78 <HAL_RCC_OscConfig+0x478>)
 8002c38:	2200      	movs	r2, #0
 8002c3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c3c:	f7fe ff30 	bl	8001aa0 <HAL_GetTick>
 8002c40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c42:	e008      	b.n	8002c56 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c44:	f7fe ff2c 	bl	8001aa0 <HAL_GetTick>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	2b02      	cmp	r3, #2
 8002c50:	d901      	bls.n	8002c56 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002c52:	2303      	movs	r3, #3
 8002c54:	e045      	b.n	8002ce2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c56:	4b06      	ldr	r3, [pc, #24]	; (8002c70 <HAL_RCC_OscConfig+0x470>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d1f0      	bne.n	8002c44 <HAL_RCC_OscConfig+0x444>
 8002c62:	e03d      	b.n	8002ce0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	699b      	ldr	r3, [r3, #24]
 8002c68:	2b01      	cmp	r3, #1
 8002c6a:	d107      	bne.n	8002c7c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	e038      	b.n	8002ce2 <HAL_RCC_OscConfig+0x4e2>
 8002c70:	40023800 	.word	0x40023800
 8002c74:	40007000 	.word	0x40007000
 8002c78:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002c7c:	4b1b      	ldr	r3, [pc, #108]	; (8002cec <HAL_RCC_OscConfig+0x4ec>)
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	699b      	ldr	r3, [r3, #24]
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d028      	beq.n	8002cdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d121      	bne.n	8002cdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ca2:	429a      	cmp	r2, r3
 8002ca4:	d11a      	bne.n	8002cdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ca6:	68fa      	ldr	r2, [r7, #12]
 8002ca8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002cac:	4013      	ands	r3, r2
 8002cae:	687a      	ldr	r2, [r7, #4]
 8002cb0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002cb2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d111      	bne.n	8002cdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cc2:	085b      	lsrs	r3, r3, #1
 8002cc4:	3b01      	subs	r3, #1
 8002cc6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	d107      	bne.n	8002cdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cd6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d001      	beq.n	8002ce0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e000      	b.n	8002ce2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002ce0:	2300      	movs	r3, #0
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3718      	adds	r7, #24
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	bf00      	nop
 8002cec:	40023800 	.word	0x40023800

08002cf0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b084      	sub	sp, #16
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
 8002cf8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d101      	bne.n	8002d04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	e0cc      	b.n	8002e9e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d04:	4b68      	ldr	r3, [pc, #416]	; (8002ea8 <HAL_RCC_ClockConfig+0x1b8>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 0307 	and.w	r3, r3, #7
 8002d0c:	683a      	ldr	r2, [r7, #0]
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	d90c      	bls.n	8002d2c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d12:	4b65      	ldr	r3, [pc, #404]	; (8002ea8 <HAL_RCC_ClockConfig+0x1b8>)
 8002d14:	683a      	ldr	r2, [r7, #0]
 8002d16:	b2d2      	uxtb	r2, r2
 8002d18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d1a:	4b63      	ldr	r3, [pc, #396]	; (8002ea8 <HAL_RCC_ClockConfig+0x1b8>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 0307 	and.w	r3, r3, #7
 8002d22:	683a      	ldr	r2, [r7, #0]
 8002d24:	429a      	cmp	r2, r3
 8002d26:	d001      	beq.n	8002d2c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e0b8      	b.n	8002e9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 0302 	and.w	r3, r3, #2
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d020      	beq.n	8002d7a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f003 0304 	and.w	r3, r3, #4
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d005      	beq.n	8002d50 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d44:	4b59      	ldr	r3, [pc, #356]	; (8002eac <HAL_RCC_ClockConfig+0x1bc>)
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	4a58      	ldr	r2, [pc, #352]	; (8002eac <HAL_RCC_ClockConfig+0x1bc>)
 8002d4a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002d4e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 0308 	and.w	r3, r3, #8
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d005      	beq.n	8002d68 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d5c:	4b53      	ldr	r3, [pc, #332]	; (8002eac <HAL_RCC_ClockConfig+0x1bc>)
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	4a52      	ldr	r2, [pc, #328]	; (8002eac <HAL_RCC_ClockConfig+0x1bc>)
 8002d62:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002d66:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d68:	4b50      	ldr	r3, [pc, #320]	; (8002eac <HAL_RCC_ClockConfig+0x1bc>)
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	494d      	ldr	r1, [pc, #308]	; (8002eac <HAL_RCC_ClockConfig+0x1bc>)
 8002d76:	4313      	orrs	r3, r2
 8002d78:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 0301 	and.w	r3, r3, #1
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d044      	beq.n	8002e10 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	2b01      	cmp	r3, #1
 8002d8c:	d107      	bne.n	8002d9e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d8e:	4b47      	ldr	r3, [pc, #284]	; (8002eac <HAL_RCC_ClockConfig+0x1bc>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d119      	bne.n	8002dce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e07f      	b.n	8002e9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	2b02      	cmp	r3, #2
 8002da4:	d003      	beq.n	8002dae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002daa:	2b03      	cmp	r3, #3
 8002dac:	d107      	bne.n	8002dbe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dae:	4b3f      	ldr	r3, [pc, #252]	; (8002eac <HAL_RCC_ClockConfig+0x1bc>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d109      	bne.n	8002dce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e06f      	b.n	8002e9e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dbe:	4b3b      	ldr	r3, [pc, #236]	; (8002eac <HAL_RCC_ClockConfig+0x1bc>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f003 0302 	and.w	r3, r3, #2
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d101      	bne.n	8002dce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e067      	b.n	8002e9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002dce:	4b37      	ldr	r3, [pc, #220]	; (8002eac <HAL_RCC_ClockConfig+0x1bc>)
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	f023 0203 	bic.w	r2, r3, #3
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	4934      	ldr	r1, [pc, #208]	; (8002eac <HAL_RCC_ClockConfig+0x1bc>)
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002de0:	f7fe fe5e 	bl	8001aa0 <HAL_GetTick>
 8002de4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002de6:	e00a      	b.n	8002dfe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002de8:	f7fe fe5a 	bl	8001aa0 <HAL_GetTick>
 8002dec:	4602      	mov	r2, r0
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	1ad3      	subs	r3, r2, r3
 8002df2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d901      	bls.n	8002dfe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002dfa:	2303      	movs	r3, #3
 8002dfc:	e04f      	b.n	8002e9e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dfe:	4b2b      	ldr	r3, [pc, #172]	; (8002eac <HAL_RCC_ClockConfig+0x1bc>)
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	f003 020c 	and.w	r2, r3, #12
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	009b      	lsls	r3, r3, #2
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d1eb      	bne.n	8002de8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e10:	4b25      	ldr	r3, [pc, #148]	; (8002ea8 <HAL_RCC_ClockConfig+0x1b8>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 0307 	and.w	r3, r3, #7
 8002e18:	683a      	ldr	r2, [r7, #0]
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	d20c      	bcs.n	8002e38 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e1e:	4b22      	ldr	r3, [pc, #136]	; (8002ea8 <HAL_RCC_ClockConfig+0x1b8>)
 8002e20:	683a      	ldr	r2, [r7, #0]
 8002e22:	b2d2      	uxtb	r2, r2
 8002e24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e26:	4b20      	ldr	r3, [pc, #128]	; (8002ea8 <HAL_RCC_ClockConfig+0x1b8>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 0307 	and.w	r3, r3, #7
 8002e2e:	683a      	ldr	r2, [r7, #0]
 8002e30:	429a      	cmp	r2, r3
 8002e32:	d001      	beq.n	8002e38 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	e032      	b.n	8002e9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 0304 	and.w	r3, r3, #4
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d008      	beq.n	8002e56 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e44:	4b19      	ldr	r3, [pc, #100]	; (8002eac <HAL_RCC_ClockConfig+0x1bc>)
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	68db      	ldr	r3, [r3, #12]
 8002e50:	4916      	ldr	r1, [pc, #88]	; (8002eac <HAL_RCC_ClockConfig+0x1bc>)
 8002e52:	4313      	orrs	r3, r2
 8002e54:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 0308 	and.w	r3, r3, #8
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d009      	beq.n	8002e76 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e62:	4b12      	ldr	r3, [pc, #72]	; (8002eac <HAL_RCC_ClockConfig+0x1bc>)
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	691b      	ldr	r3, [r3, #16]
 8002e6e:	00db      	lsls	r3, r3, #3
 8002e70:	490e      	ldr	r1, [pc, #56]	; (8002eac <HAL_RCC_ClockConfig+0x1bc>)
 8002e72:	4313      	orrs	r3, r2
 8002e74:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e76:	f000 f821 	bl	8002ebc <HAL_RCC_GetSysClockFreq>
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	4b0b      	ldr	r3, [pc, #44]	; (8002eac <HAL_RCC_ClockConfig+0x1bc>)
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	091b      	lsrs	r3, r3, #4
 8002e82:	f003 030f 	and.w	r3, r3, #15
 8002e86:	490a      	ldr	r1, [pc, #40]	; (8002eb0 <HAL_RCC_ClockConfig+0x1c0>)
 8002e88:	5ccb      	ldrb	r3, [r1, r3]
 8002e8a:	fa22 f303 	lsr.w	r3, r2, r3
 8002e8e:	4a09      	ldr	r2, [pc, #36]	; (8002eb4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002e92:	4b09      	ldr	r3, [pc, #36]	; (8002eb8 <HAL_RCC_ClockConfig+0x1c8>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4618      	mov	r0, r3
 8002e98:	f7fe fdbe 	bl	8001a18 <HAL_InitTick>

  return HAL_OK;
 8002e9c:	2300      	movs	r3, #0
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3710      	adds	r7, #16
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	40023c00 	.word	0x40023c00
 8002eac:	40023800 	.word	0x40023800
 8002eb0:	08009540 	.word	0x08009540
 8002eb4:	20000000 	.word	0x20000000
 8002eb8:	20000004 	.word	0x20000004

08002ebc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ebc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ec0:	b090      	sub	sp, #64	; 0x40
 8002ec2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	637b      	str	r3, [r7, #52]	; 0x34
 8002ec8:	2300      	movs	r3, #0
 8002eca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ecc:	2300      	movs	r3, #0
 8002ece:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ed4:	4b59      	ldr	r3, [pc, #356]	; (800303c <HAL_RCC_GetSysClockFreq+0x180>)
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	f003 030c 	and.w	r3, r3, #12
 8002edc:	2b08      	cmp	r3, #8
 8002ede:	d00d      	beq.n	8002efc <HAL_RCC_GetSysClockFreq+0x40>
 8002ee0:	2b08      	cmp	r3, #8
 8002ee2:	f200 80a1 	bhi.w	8003028 <HAL_RCC_GetSysClockFreq+0x16c>
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d002      	beq.n	8002ef0 <HAL_RCC_GetSysClockFreq+0x34>
 8002eea:	2b04      	cmp	r3, #4
 8002eec:	d003      	beq.n	8002ef6 <HAL_RCC_GetSysClockFreq+0x3a>
 8002eee:	e09b      	b.n	8003028 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ef0:	4b53      	ldr	r3, [pc, #332]	; (8003040 <HAL_RCC_GetSysClockFreq+0x184>)
 8002ef2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002ef4:	e09b      	b.n	800302e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ef6:	4b53      	ldr	r3, [pc, #332]	; (8003044 <HAL_RCC_GetSysClockFreq+0x188>)
 8002ef8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002efa:	e098      	b.n	800302e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002efc:	4b4f      	ldr	r3, [pc, #316]	; (800303c <HAL_RCC_GetSysClockFreq+0x180>)
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f04:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f06:	4b4d      	ldr	r3, [pc, #308]	; (800303c <HAL_RCC_GetSysClockFreq+0x180>)
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d028      	beq.n	8002f64 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f12:	4b4a      	ldr	r3, [pc, #296]	; (800303c <HAL_RCC_GetSysClockFreq+0x180>)
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	099b      	lsrs	r3, r3, #6
 8002f18:	2200      	movs	r2, #0
 8002f1a:	623b      	str	r3, [r7, #32]
 8002f1c:	627a      	str	r2, [r7, #36]	; 0x24
 8002f1e:	6a3b      	ldr	r3, [r7, #32]
 8002f20:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002f24:	2100      	movs	r1, #0
 8002f26:	4b47      	ldr	r3, [pc, #284]	; (8003044 <HAL_RCC_GetSysClockFreq+0x188>)
 8002f28:	fb03 f201 	mul.w	r2, r3, r1
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	fb00 f303 	mul.w	r3, r0, r3
 8002f32:	4413      	add	r3, r2
 8002f34:	4a43      	ldr	r2, [pc, #268]	; (8003044 <HAL_RCC_GetSysClockFreq+0x188>)
 8002f36:	fba0 1202 	umull	r1, r2, r0, r2
 8002f3a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002f3c:	460a      	mov	r2, r1
 8002f3e:	62ba      	str	r2, [r7, #40]	; 0x28
 8002f40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f42:	4413      	add	r3, r2
 8002f44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f48:	2200      	movs	r2, #0
 8002f4a:	61bb      	str	r3, [r7, #24]
 8002f4c:	61fa      	str	r2, [r7, #28]
 8002f4e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f52:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002f56:	f7fd fd81 	bl	8000a5c <__aeabi_uldivmod>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	460b      	mov	r3, r1
 8002f5e:	4613      	mov	r3, r2
 8002f60:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f62:	e053      	b.n	800300c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f64:	4b35      	ldr	r3, [pc, #212]	; (800303c <HAL_RCC_GetSysClockFreq+0x180>)
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	099b      	lsrs	r3, r3, #6
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	613b      	str	r3, [r7, #16]
 8002f6e:	617a      	str	r2, [r7, #20]
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002f76:	f04f 0b00 	mov.w	fp, #0
 8002f7a:	4652      	mov	r2, sl
 8002f7c:	465b      	mov	r3, fp
 8002f7e:	f04f 0000 	mov.w	r0, #0
 8002f82:	f04f 0100 	mov.w	r1, #0
 8002f86:	0159      	lsls	r1, r3, #5
 8002f88:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f8c:	0150      	lsls	r0, r2, #5
 8002f8e:	4602      	mov	r2, r0
 8002f90:	460b      	mov	r3, r1
 8002f92:	ebb2 080a 	subs.w	r8, r2, sl
 8002f96:	eb63 090b 	sbc.w	r9, r3, fp
 8002f9a:	f04f 0200 	mov.w	r2, #0
 8002f9e:	f04f 0300 	mov.w	r3, #0
 8002fa2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002fa6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002faa:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002fae:	ebb2 0408 	subs.w	r4, r2, r8
 8002fb2:	eb63 0509 	sbc.w	r5, r3, r9
 8002fb6:	f04f 0200 	mov.w	r2, #0
 8002fba:	f04f 0300 	mov.w	r3, #0
 8002fbe:	00eb      	lsls	r3, r5, #3
 8002fc0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002fc4:	00e2      	lsls	r2, r4, #3
 8002fc6:	4614      	mov	r4, r2
 8002fc8:	461d      	mov	r5, r3
 8002fca:	eb14 030a 	adds.w	r3, r4, sl
 8002fce:	603b      	str	r3, [r7, #0]
 8002fd0:	eb45 030b 	adc.w	r3, r5, fp
 8002fd4:	607b      	str	r3, [r7, #4]
 8002fd6:	f04f 0200 	mov.w	r2, #0
 8002fda:	f04f 0300 	mov.w	r3, #0
 8002fde:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002fe2:	4629      	mov	r1, r5
 8002fe4:	028b      	lsls	r3, r1, #10
 8002fe6:	4621      	mov	r1, r4
 8002fe8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002fec:	4621      	mov	r1, r4
 8002fee:	028a      	lsls	r2, r1, #10
 8002ff0:	4610      	mov	r0, r2
 8002ff2:	4619      	mov	r1, r3
 8002ff4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	60bb      	str	r3, [r7, #8]
 8002ffa:	60fa      	str	r2, [r7, #12]
 8002ffc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003000:	f7fd fd2c 	bl	8000a5c <__aeabi_uldivmod>
 8003004:	4602      	mov	r2, r0
 8003006:	460b      	mov	r3, r1
 8003008:	4613      	mov	r3, r2
 800300a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800300c:	4b0b      	ldr	r3, [pc, #44]	; (800303c <HAL_RCC_GetSysClockFreq+0x180>)
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	0c1b      	lsrs	r3, r3, #16
 8003012:	f003 0303 	and.w	r3, r3, #3
 8003016:	3301      	adds	r3, #1
 8003018:	005b      	lsls	r3, r3, #1
 800301a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800301c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800301e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003020:	fbb2 f3f3 	udiv	r3, r2, r3
 8003024:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003026:	e002      	b.n	800302e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003028:	4b05      	ldr	r3, [pc, #20]	; (8003040 <HAL_RCC_GetSysClockFreq+0x184>)
 800302a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800302c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800302e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003030:	4618      	mov	r0, r3
 8003032:	3740      	adds	r7, #64	; 0x40
 8003034:	46bd      	mov	sp, r7
 8003036:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800303a:	bf00      	nop
 800303c:	40023800 	.word	0x40023800
 8003040:	00f42400 	.word	0x00f42400
 8003044:	017d7840 	.word	0x017d7840

08003048 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003048:	b480      	push	{r7}
 800304a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800304c:	4b03      	ldr	r3, [pc, #12]	; (800305c <HAL_RCC_GetHCLKFreq+0x14>)
 800304e:	681b      	ldr	r3, [r3, #0]
}
 8003050:	4618      	mov	r0, r3
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr
 800305a:	bf00      	nop
 800305c:	20000000 	.word	0x20000000

08003060 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003064:	f7ff fff0 	bl	8003048 <HAL_RCC_GetHCLKFreq>
 8003068:	4602      	mov	r2, r0
 800306a:	4b05      	ldr	r3, [pc, #20]	; (8003080 <HAL_RCC_GetPCLK1Freq+0x20>)
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	0a9b      	lsrs	r3, r3, #10
 8003070:	f003 0307 	and.w	r3, r3, #7
 8003074:	4903      	ldr	r1, [pc, #12]	; (8003084 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003076:	5ccb      	ldrb	r3, [r1, r3]
 8003078:	fa22 f303 	lsr.w	r3, r2, r3
}
 800307c:	4618      	mov	r0, r3
 800307e:	bd80      	pop	{r7, pc}
 8003080:	40023800 	.word	0x40023800
 8003084:	08009550 	.word	0x08009550

08003088 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800308c:	f7ff ffdc 	bl	8003048 <HAL_RCC_GetHCLKFreq>
 8003090:	4602      	mov	r2, r0
 8003092:	4b05      	ldr	r3, [pc, #20]	; (80030a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	0b5b      	lsrs	r3, r3, #13
 8003098:	f003 0307 	and.w	r3, r3, #7
 800309c:	4903      	ldr	r1, [pc, #12]	; (80030ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800309e:	5ccb      	ldrb	r3, [r1, r3]
 80030a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	bd80      	pop	{r7, pc}
 80030a8:	40023800 	.word	0x40023800
 80030ac:	08009550 	.word	0x08009550

080030b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b082      	sub	sp, #8
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d101      	bne.n	80030c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	e041      	b.n	8003146 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d106      	bne.n	80030dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2200      	movs	r2, #0
 80030d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80030d6:	6878      	ldr	r0, [r7, #4]
 80030d8:	f7fe fb7c 	bl	80017d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2202      	movs	r2, #2
 80030e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681a      	ldr	r2, [r3, #0]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	3304      	adds	r3, #4
 80030ec:	4619      	mov	r1, r3
 80030ee:	4610      	mov	r0, r2
 80030f0:	f000 f95e 	bl	80033b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2201      	movs	r2, #1
 80030f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2201      	movs	r2, #1
 8003100:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2201      	movs	r2, #1
 8003108:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2201      	movs	r2, #1
 8003110:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2201      	movs	r2, #1
 8003118:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2201      	movs	r2, #1
 8003120:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2201      	movs	r2, #1
 8003128:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2201      	movs	r2, #1
 8003130:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2201      	movs	r2, #1
 8003138:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2201      	movs	r2, #1
 8003140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003144:	2300      	movs	r3, #0
}
 8003146:	4618      	mov	r0, r3
 8003148:	3708      	adds	r7, #8
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}
	...

08003150 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003150:	b480      	push	{r7}
 8003152:	b085      	sub	sp, #20
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800315e:	b2db      	uxtb	r3, r3
 8003160:	2b01      	cmp	r3, #1
 8003162:	d001      	beq.n	8003168 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	e046      	b.n	80031f6 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2202      	movs	r2, #2
 800316c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a23      	ldr	r2, [pc, #140]	; (8003204 <HAL_TIM_Base_Start+0xb4>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d022      	beq.n	80031c0 <HAL_TIM_Base_Start+0x70>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003182:	d01d      	beq.n	80031c0 <HAL_TIM_Base_Start+0x70>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a1f      	ldr	r2, [pc, #124]	; (8003208 <HAL_TIM_Base_Start+0xb8>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d018      	beq.n	80031c0 <HAL_TIM_Base_Start+0x70>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a1e      	ldr	r2, [pc, #120]	; (800320c <HAL_TIM_Base_Start+0xbc>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d013      	beq.n	80031c0 <HAL_TIM_Base_Start+0x70>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a1c      	ldr	r2, [pc, #112]	; (8003210 <HAL_TIM_Base_Start+0xc0>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d00e      	beq.n	80031c0 <HAL_TIM_Base_Start+0x70>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a1b      	ldr	r2, [pc, #108]	; (8003214 <HAL_TIM_Base_Start+0xc4>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d009      	beq.n	80031c0 <HAL_TIM_Base_Start+0x70>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a19      	ldr	r2, [pc, #100]	; (8003218 <HAL_TIM_Base_Start+0xc8>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d004      	beq.n	80031c0 <HAL_TIM_Base_Start+0x70>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a18      	ldr	r2, [pc, #96]	; (800321c <HAL_TIM_Base_Start+0xcc>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d111      	bne.n	80031e4 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	f003 0307 	and.w	r3, r3, #7
 80031ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	2b06      	cmp	r3, #6
 80031d0:	d010      	beq.n	80031f4 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	681a      	ldr	r2, [r3, #0]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f042 0201 	orr.w	r2, r2, #1
 80031e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031e2:	e007      	b.n	80031f4 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	681a      	ldr	r2, [r3, #0]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f042 0201 	orr.w	r2, r2, #1
 80031f2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80031f4:	2300      	movs	r3, #0
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	3714      	adds	r7, #20
 80031fa:	46bd      	mov	sp, r7
 80031fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003200:	4770      	bx	lr
 8003202:	bf00      	nop
 8003204:	40010000 	.word	0x40010000
 8003208:	40000400 	.word	0x40000400
 800320c:	40000800 	.word	0x40000800
 8003210:	40000c00 	.word	0x40000c00
 8003214:	40010400 	.word	0x40010400
 8003218:	40014000 	.word	0x40014000
 800321c:	40001800 	.word	0x40001800

08003220 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b084      	sub	sp, #16
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
 8003228:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800322a:	2300      	movs	r3, #0
 800322c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003234:	2b01      	cmp	r3, #1
 8003236:	d101      	bne.n	800323c <HAL_TIM_ConfigClockSource+0x1c>
 8003238:	2302      	movs	r3, #2
 800323a:	e0b4      	b.n	80033a6 <HAL_TIM_ConfigClockSource+0x186>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2201      	movs	r2, #1
 8003240:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2202      	movs	r2, #2
 8003248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800325a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003262:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	68ba      	ldr	r2, [r7, #8]
 800326a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003274:	d03e      	beq.n	80032f4 <HAL_TIM_ConfigClockSource+0xd4>
 8003276:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800327a:	f200 8087 	bhi.w	800338c <HAL_TIM_ConfigClockSource+0x16c>
 800327e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003282:	f000 8086 	beq.w	8003392 <HAL_TIM_ConfigClockSource+0x172>
 8003286:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800328a:	d87f      	bhi.n	800338c <HAL_TIM_ConfigClockSource+0x16c>
 800328c:	2b70      	cmp	r3, #112	; 0x70
 800328e:	d01a      	beq.n	80032c6 <HAL_TIM_ConfigClockSource+0xa6>
 8003290:	2b70      	cmp	r3, #112	; 0x70
 8003292:	d87b      	bhi.n	800338c <HAL_TIM_ConfigClockSource+0x16c>
 8003294:	2b60      	cmp	r3, #96	; 0x60
 8003296:	d050      	beq.n	800333a <HAL_TIM_ConfigClockSource+0x11a>
 8003298:	2b60      	cmp	r3, #96	; 0x60
 800329a:	d877      	bhi.n	800338c <HAL_TIM_ConfigClockSource+0x16c>
 800329c:	2b50      	cmp	r3, #80	; 0x50
 800329e:	d03c      	beq.n	800331a <HAL_TIM_ConfigClockSource+0xfa>
 80032a0:	2b50      	cmp	r3, #80	; 0x50
 80032a2:	d873      	bhi.n	800338c <HAL_TIM_ConfigClockSource+0x16c>
 80032a4:	2b40      	cmp	r3, #64	; 0x40
 80032a6:	d058      	beq.n	800335a <HAL_TIM_ConfigClockSource+0x13a>
 80032a8:	2b40      	cmp	r3, #64	; 0x40
 80032aa:	d86f      	bhi.n	800338c <HAL_TIM_ConfigClockSource+0x16c>
 80032ac:	2b30      	cmp	r3, #48	; 0x30
 80032ae:	d064      	beq.n	800337a <HAL_TIM_ConfigClockSource+0x15a>
 80032b0:	2b30      	cmp	r3, #48	; 0x30
 80032b2:	d86b      	bhi.n	800338c <HAL_TIM_ConfigClockSource+0x16c>
 80032b4:	2b20      	cmp	r3, #32
 80032b6:	d060      	beq.n	800337a <HAL_TIM_ConfigClockSource+0x15a>
 80032b8:	2b20      	cmp	r3, #32
 80032ba:	d867      	bhi.n	800338c <HAL_TIM_ConfigClockSource+0x16c>
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d05c      	beq.n	800337a <HAL_TIM_ConfigClockSource+0x15a>
 80032c0:	2b10      	cmp	r3, #16
 80032c2:	d05a      	beq.n	800337a <HAL_TIM_ConfigClockSource+0x15a>
 80032c4:	e062      	b.n	800338c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6818      	ldr	r0, [r3, #0]
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	6899      	ldr	r1, [r3, #8]
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	685a      	ldr	r2, [r3, #4]
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	68db      	ldr	r3, [r3, #12]
 80032d6:	f000 f985 	bl	80035e4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80032e2:	68bb      	ldr	r3, [r7, #8]
 80032e4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80032e8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	68ba      	ldr	r2, [r7, #8]
 80032f0:	609a      	str	r2, [r3, #8]
      break;
 80032f2:	e04f      	b.n	8003394 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6818      	ldr	r0, [r3, #0]
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	6899      	ldr	r1, [r3, #8]
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	685a      	ldr	r2, [r3, #4]
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	68db      	ldr	r3, [r3, #12]
 8003304:	f000 f96e 	bl	80035e4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	689a      	ldr	r2, [r3, #8]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003316:	609a      	str	r2, [r3, #8]
      break;
 8003318:	e03c      	b.n	8003394 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6818      	ldr	r0, [r3, #0]
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	6859      	ldr	r1, [r3, #4]
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	68db      	ldr	r3, [r3, #12]
 8003326:	461a      	mov	r2, r3
 8003328:	f000 f8e2 	bl	80034f0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	2150      	movs	r1, #80	; 0x50
 8003332:	4618      	mov	r0, r3
 8003334:	f000 f93b 	bl	80035ae <TIM_ITRx_SetConfig>
      break;
 8003338:	e02c      	b.n	8003394 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6818      	ldr	r0, [r3, #0]
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	6859      	ldr	r1, [r3, #4]
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	68db      	ldr	r3, [r3, #12]
 8003346:	461a      	mov	r2, r3
 8003348:	f000 f901 	bl	800354e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	2160      	movs	r1, #96	; 0x60
 8003352:	4618      	mov	r0, r3
 8003354:	f000 f92b 	bl	80035ae <TIM_ITRx_SetConfig>
      break;
 8003358:	e01c      	b.n	8003394 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6818      	ldr	r0, [r3, #0]
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	6859      	ldr	r1, [r3, #4]
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	68db      	ldr	r3, [r3, #12]
 8003366:	461a      	mov	r2, r3
 8003368:	f000 f8c2 	bl	80034f0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	2140      	movs	r1, #64	; 0x40
 8003372:	4618      	mov	r0, r3
 8003374:	f000 f91b 	bl	80035ae <TIM_ITRx_SetConfig>
      break;
 8003378:	e00c      	b.n	8003394 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681a      	ldr	r2, [r3, #0]
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4619      	mov	r1, r3
 8003384:	4610      	mov	r0, r2
 8003386:	f000 f912 	bl	80035ae <TIM_ITRx_SetConfig>
      break;
 800338a:	e003      	b.n	8003394 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800338c:	2301      	movs	r3, #1
 800338e:	73fb      	strb	r3, [r7, #15]
      break;
 8003390:	e000      	b.n	8003394 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003392:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2201      	movs	r2, #1
 8003398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2200      	movs	r2, #0
 80033a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80033a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	3710      	adds	r7, #16
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}
	...

080033b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b085      	sub	sp, #20
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
 80033b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	4a40      	ldr	r2, [pc, #256]	; (80034c4 <TIM_Base_SetConfig+0x114>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d013      	beq.n	80033f0 <TIM_Base_SetConfig+0x40>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033ce:	d00f      	beq.n	80033f0 <TIM_Base_SetConfig+0x40>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	4a3d      	ldr	r2, [pc, #244]	; (80034c8 <TIM_Base_SetConfig+0x118>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d00b      	beq.n	80033f0 <TIM_Base_SetConfig+0x40>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	4a3c      	ldr	r2, [pc, #240]	; (80034cc <TIM_Base_SetConfig+0x11c>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d007      	beq.n	80033f0 <TIM_Base_SetConfig+0x40>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	4a3b      	ldr	r2, [pc, #236]	; (80034d0 <TIM_Base_SetConfig+0x120>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d003      	beq.n	80033f0 <TIM_Base_SetConfig+0x40>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	4a3a      	ldr	r2, [pc, #232]	; (80034d4 <TIM_Base_SetConfig+0x124>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d108      	bne.n	8003402 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	68fa      	ldr	r2, [r7, #12]
 80033fe:	4313      	orrs	r3, r2
 8003400:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	4a2f      	ldr	r2, [pc, #188]	; (80034c4 <TIM_Base_SetConfig+0x114>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d02b      	beq.n	8003462 <TIM_Base_SetConfig+0xb2>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003410:	d027      	beq.n	8003462 <TIM_Base_SetConfig+0xb2>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	4a2c      	ldr	r2, [pc, #176]	; (80034c8 <TIM_Base_SetConfig+0x118>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d023      	beq.n	8003462 <TIM_Base_SetConfig+0xb2>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	4a2b      	ldr	r2, [pc, #172]	; (80034cc <TIM_Base_SetConfig+0x11c>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d01f      	beq.n	8003462 <TIM_Base_SetConfig+0xb2>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	4a2a      	ldr	r2, [pc, #168]	; (80034d0 <TIM_Base_SetConfig+0x120>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d01b      	beq.n	8003462 <TIM_Base_SetConfig+0xb2>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	4a29      	ldr	r2, [pc, #164]	; (80034d4 <TIM_Base_SetConfig+0x124>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d017      	beq.n	8003462 <TIM_Base_SetConfig+0xb2>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	4a28      	ldr	r2, [pc, #160]	; (80034d8 <TIM_Base_SetConfig+0x128>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d013      	beq.n	8003462 <TIM_Base_SetConfig+0xb2>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	4a27      	ldr	r2, [pc, #156]	; (80034dc <TIM_Base_SetConfig+0x12c>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d00f      	beq.n	8003462 <TIM_Base_SetConfig+0xb2>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	4a26      	ldr	r2, [pc, #152]	; (80034e0 <TIM_Base_SetConfig+0x130>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d00b      	beq.n	8003462 <TIM_Base_SetConfig+0xb2>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	4a25      	ldr	r2, [pc, #148]	; (80034e4 <TIM_Base_SetConfig+0x134>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d007      	beq.n	8003462 <TIM_Base_SetConfig+0xb2>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	4a24      	ldr	r2, [pc, #144]	; (80034e8 <TIM_Base_SetConfig+0x138>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d003      	beq.n	8003462 <TIM_Base_SetConfig+0xb2>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	4a23      	ldr	r2, [pc, #140]	; (80034ec <TIM_Base_SetConfig+0x13c>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d108      	bne.n	8003474 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003468:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	68db      	ldr	r3, [r3, #12]
 800346e:	68fa      	ldr	r2, [r7, #12]
 8003470:	4313      	orrs	r3, r2
 8003472:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	695b      	ldr	r3, [r3, #20]
 800347e:	4313      	orrs	r3, r2
 8003480:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	68fa      	ldr	r2, [r7, #12]
 8003486:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	689a      	ldr	r2, [r3, #8]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	681a      	ldr	r2, [r3, #0]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	4a0a      	ldr	r2, [pc, #40]	; (80034c4 <TIM_Base_SetConfig+0x114>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d003      	beq.n	80034a8 <TIM_Base_SetConfig+0xf8>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	4a0c      	ldr	r2, [pc, #48]	; (80034d4 <TIM_Base_SetConfig+0x124>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d103      	bne.n	80034b0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	691a      	ldr	r2, [r3, #16]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2201      	movs	r2, #1
 80034b4:	615a      	str	r2, [r3, #20]
}
 80034b6:	bf00      	nop
 80034b8:	3714      	adds	r7, #20
 80034ba:	46bd      	mov	sp, r7
 80034bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c0:	4770      	bx	lr
 80034c2:	bf00      	nop
 80034c4:	40010000 	.word	0x40010000
 80034c8:	40000400 	.word	0x40000400
 80034cc:	40000800 	.word	0x40000800
 80034d0:	40000c00 	.word	0x40000c00
 80034d4:	40010400 	.word	0x40010400
 80034d8:	40014000 	.word	0x40014000
 80034dc:	40014400 	.word	0x40014400
 80034e0:	40014800 	.word	0x40014800
 80034e4:	40001800 	.word	0x40001800
 80034e8:	40001c00 	.word	0x40001c00
 80034ec:	40002000 	.word	0x40002000

080034f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b087      	sub	sp, #28
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	60f8      	str	r0, [r7, #12]
 80034f8:	60b9      	str	r1, [r7, #8]
 80034fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	6a1b      	ldr	r3, [r3, #32]
 8003500:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	6a1b      	ldr	r3, [r3, #32]
 8003506:	f023 0201 	bic.w	r2, r3, #1
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	699b      	ldr	r3, [r3, #24]
 8003512:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800351a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	011b      	lsls	r3, r3, #4
 8003520:	693a      	ldr	r2, [r7, #16]
 8003522:	4313      	orrs	r3, r2
 8003524:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	f023 030a 	bic.w	r3, r3, #10
 800352c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800352e:	697a      	ldr	r2, [r7, #20]
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	4313      	orrs	r3, r2
 8003534:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	693a      	ldr	r2, [r7, #16]
 800353a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	697a      	ldr	r2, [r7, #20]
 8003540:	621a      	str	r2, [r3, #32]
}
 8003542:	bf00      	nop
 8003544:	371c      	adds	r7, #28
 8003546:	46bd      	mov	sp, r7
 8003548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354c:	4770      	bx	lr

0800354e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800354e:	b480      	push	{r7}
 8003550:	b087      	sub	sp, #28
 8003552:	af00      	add	r7, sp, #0
 8003554:	60f8      	str	r0, [r7, #12]
 8003556:	60b9      	str	r1, [r7, #8]
 8003558:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	6a1b      	ldr	r3, [r3, #32]
 800355e:	f023 0210 	bic.w	r2, r3, #16
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	699b      	ldr	r3, [r3, #24]
 800356a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	6a1b      	ldr	r3, [r3, #32]
 8003570:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003578:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	031b      	lsls	r3, r3, #12
 800357e:	697a      	ldr	r2, [r7, #20]
 8003580:	4313      	orrs	r3, r2
 8003582:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800358a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	011b      	lsls	r3, r3, #4
 8003590:	693a      	ldr	r2, [r7, #16]
 8003592:	4313      	orrs	r3, r2
 8003594:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	697a      	ldr	r2, [r7, #20]
 800359a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	693a      	ldr	r2, [r7, #16]
 80035a0:	621a      	str	r2, [r3, #32]
}
 80035a2:	bf00      	nop
 80035a4:	371c      	adds	r7, #28
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr

080035ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80035ae:	b480      	push	{r7}
 80035b0:	b085      	sub	sp, #20
 80035b2:	af00      	add	r7, sp, #0
 80035b4:	6078      	str	r0, [r7, #4]
 80035b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80035c6:	683a      	ldr	r2, [r7, #0]
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	4313      	orrs	r3, r2
 80035cc:	f043 0307 	orr.w	r3, r3, #7
 80035d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	68fa      	ldr	r2, [r7, #12]
 80035d6:	609a      	str	r2, [r3, #8]
}
 80035d8:	bf00      	nop
 80035da:	3714      	adds	r7, #20
 80035dc:	46bd      	mov	sp, r7
 80035de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e2:	4770      	bx	lr

080035e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b087      	sub	sp, #28
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	60f8      	str	r0, [r7, #12]
 80035ec:	60b9      	str	r1, [r7, #8]
 80035ee:	607a      	str	r2, [r7, #4]
 80035f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80035fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	021a      	lsls	r2, r3, #8
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	431a      	orrs	r2, r3
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	4313      	orrs	r3, r2
 800360c:	697a      	ldr	r2, [r7, #20]
 800360e:	4313      	orrs	r3, r2
 8003610:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	697a      	ldr	r2, [r7, #20]
 8003616:	609a      	str	r2, [r3, #8]
}
 8003618:	bf00      	nop
 800361a:	371c      	adds	r7, #28
 800361c:	46bd      	mov	sp, r7
 800361e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003622:	4770      	bx	lr

08003624 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003624:	b480      	push	{r7}
 8003626:	b085      	sub	sp, #20
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
 800362c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003634:	2b01      	cmp	r3, #1
 8003636:	d101      	bne.n	800363c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003638:	2302      	movs	r3, #2
 800363a:	e05a      	b.n	80036f2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2201      	movs	r2, #1
 8003640:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2202      	movs	r2, #2
 8003648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003662:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	68fa      	ldr	r2, [r7, #12]
 800366a:	4313      	orrs	r3, r2
 800366c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	68fa      	ldr	r2, [r7, #12]
 8003674:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a21      	ldr	r2, [pc, #132]	; (8003700 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d022      	beq.n	80036c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003688:	d01d      	beq.n	80036c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a1d      	ldr	r2, [pc, #116]	; (8003704 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d018      	beq.n	80036c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a1b      	ldr	r2, [pc, #108]	; (8003708 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d013      	beq.n	80036c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a1a      	ldr	r2, [pc, #104]	; (800370c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d00e      	beq.n	80036c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a18      	ldr	r2, [pc, #96]	; (8003710 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d009      	beq.n	80036c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a17      	ldr	r2, [pc, #92]	; (8003714 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d004      	beq.n	80036c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a15      	ldr	r2, [pc, #84]	; (8003718 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d10c      	bne.n	80036e0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	68ba      	ldr	r2, [r7, #8]
 80036d4:	4313      	orrs	r3, r2
 80036d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	68ba      	ldr	r2, [r7, #8]
 80036de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2201      	movs	r2, #1
 80036e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2200      	movs	r2, #0
 80036ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80036f0:	2300      	movs	r3, #0
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	3714      	adds	r7, #20
 80036f6:	46bd      	mov	sp, r7
 80036f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fc:	4770      	bx	lr
 80036fe:	bf00      	nop
 8003700:	40010000 	.word	0x40010000
 8003704:	40000400 	.word	0x40000400
 8003708:	40000800 	.word	0x40000800
 800370c:	40000c00 	.word	0x40000c00
 8003710:	40010400 	.word	0x40010400
 8003714:	40014000 	.word	0x40014000
 8003718:	40001800 	.word	0x40001800

0800371c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b082      	sub	sp, #8
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d101      	bne.n	800372e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	e03f      	b.n	80037ae <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003734:	b2db      	uxtb	r3, r3
 8003736:	2b00      	cmp	r3, #0
 8003738:	d106      	bne.n	8003748 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2200      	movs	r2, #0
 800373e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f7fe f868 	bl	8001818 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2224      	movs	r2, #36	; 0x24
 800374c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	68da      	ldr	r2, [r3, #12]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800375e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003760:	6878      	ldr	r0, [r7, #4]
 8003762:	f000 f929 	bl	80039b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	691a      	ldr	r2, [r3, #16]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003774:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	695a      	ldr	r2, [r3, #20]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003784:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	68da      	ldr	r2, [r3, #12]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003794:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2200      	movs	r2, #0
 800379a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2220      	movs	r2, #32
 80037a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2220      	movs	r2, #32
 80037a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80037ac:	2300      	movs	r3, #0
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	3708      	adds	r7, #8
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}

080037b6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037b6:	b580      	push	{r7, lr}
 80037b8:	b08a      	sub	sp, #40	; 0x28
 80037ba:	af02      	add	r7, sp, #8
 80037bc:	60f8      	str	r0, [r7, #12]
 80037be:	60b9      	str	r1, [r7, #8]
 80037c0:	603b      	str	r3, [r7, #0]
 80037c2:	4613      	mov	r3, r2
 80037c4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80037c6:	2300      	movs	r3, #0
 80037c8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	2b20      	cmp	r3, #32
 80037d4:	d17c      	bne.n	80038d0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d002      	beq.n	80037e2 <HAL_UART_Transmit+0x2c>
 80037dc:	88fb      	ldrh	r3, [r7, #6]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d101      	bne.n	80037e6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	e075      	b.n	80038d2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d101      	bne.n	80037f4 <HAL_UART_Transmit+0x3e>
 80037f0:	2302      	movs	r3, #2
 80037f2:	e06e      	b.n	80038d2 <HAL_UART_Transmit+0x11c>
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2201      	movs	r2, #1
 80037f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2200      	movs	r2, #0
 8003800:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	2221      	movs	r2, #33	; 0x21
 8003806:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800380a:	f7fe f949 	bl	8001aa0 <HAL_GetTick>
 800380e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	88fa      	ldrh	r2, [r7, #6]
 8003814:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	88fa      	ldrh	r2, [r7, #6]
 800381a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003824:	d108      	bne.n	8003838 <HAL_UART_Transmit+0x82>
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	691b      	ldr	r3, [r3, #16]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d104      	bne.n	8003838 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800382e:	2300      	movs	r3, #0
 8003830:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	61bb      	str	r3, [r7, #24]
 8003836:	e003      	b.n	8003840 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800383c:	2300      	movs	r3, #0
 800383e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2200      	movs	r2, #0
 8003844:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003848:	e02a      	b.n	80038a0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	9300      	str	r3, [sp, #0]
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	2200      	movs	r2, #0
 8003852:	2180      	movs	r1, #128	; 0x80
 8003854:	68f8      	ldr	r0, [r7, #12]
 8003856:	f000 f840 	bl	80038da <UART_WaitOnFlagUntilTimeout>
 800385a:	4603      	mov	r3, r0
 800385c:	2b00      	cmp	r3, #0
 800385e:	d001      	beq.n	8003864 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003860:	2303      	movs	r3, #3
 8003862:	e036      	b.n	80038d2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003864:	69fb      	ldr	r3, [r7, #28]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d10b      	bne.n	8003882 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800386a:	69bb      	ldr	r3, [r7, #24]
 800386c:	881b      	ldrh	r3, [r3, #0]
 800386e:	461a      	mov	r2, r3
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003878:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800387a:	69bb      	ldr	r3, [r7, #24]
 800387c:	3302      	adds	r3, #2
 800387e:	61bb      	str	r3, [r7, #24]
 8003880:	e007      	b.n	8003892 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003882:	69fb      	ldr	r3, [r7, #28]
 8003884:	781a      	ldrb	r2, [r3, #0]
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800388c:	69fb      	ldr	r3, [r7, #28]
 800388e:	3301      	adds	r3, #1
 8003890:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003896:	b29b      	uxth	r3, r3
 8003898:	3b01      	subs	r3, #1
 800389a:	b29a      	uxth	r2, r3
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80038a4:	b29b      	uxth	r3, r3
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d1cf      	bne.n	800384a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	9300      	str	r3, [sp, #0]
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	2200      	movs	r2, #0
 80038b2:	2140      	movs	r1, #64	; 0x40
 80038b4:	68f8      	ldr	r0, [r7, #12]
 80038b6:	f000 f810 	bl	80038da <UART_WaitOnFlagUntilTimeout>
 80038ba:	4603      	mov	r3, r0
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d001      	beq.n	80038c4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80038c0:	2303      	movs	r3, #3
 80038c2:	e006      	b.n	80038d2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2220      	movs	r2, #32
 80038c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80038cc:	2300      	movs	r3, #0
 80038ce:	e000      	b.n	80038d2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80038d0:	2302      	movs	r3, #2
  }
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	3720      	adds	r7, #32
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}

080038da <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80038da:	b580      	push	{r7, lr}
 80038dc:	b090      	sub	sp, #64	; 0x40
 80038de:	af00      	add	r7, sp, #0
 80038e0:	60f8      	str	r0, [r7, #12]
 80038e2:	60b9      	str	r1, [r7, #8]
 80038e4:	603b      	str	r3, [r7, #0]
 80038e6:	4613      	mov	r3, r2
 80038e8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038ea:	e050      	b.n	800398e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038f2:	d04c      	beq.n	800398e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80038f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d007      	beq.n	800390a <UART_WaitOnFlagUntilTimeout+0x30>
 80038fa:	f7fe f8d1 	bl	8001aa0 <HAL_GetTick>
 80038fe:	4602      	mov	r2, r0
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	1ad3      	subs	r3, r2, r3
 8003904:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003906:	429a      	cmp	r2, r3
 8003908:	d241      	bcs.n	800398e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	330c      	adds	r3, #12
 8003910:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003914:	e853 3f00 	ldrex	r3, [r3]
 8003918:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800391a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800391c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003920:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	330c      	adds	r3, #12
 8003928:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800392a:	637a      	str	r2, [r7, #52]	; 0x34
 800392c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800392e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003930:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003932:	e841 2300 	strex	r3, r2, [r1]
 8003936:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800393a:	2b00      	cmp	r3, #0
 800393c:	d1e5      	bne.n	800390a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	3314      	adds	r3, #20
 8003944:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	e853 3f00 	ldrex	r3, [r3]
 800394c:	613b      	str	r3, [r7, #16]
   return(result);
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	f023 0301 	bic.w	r3, r3, #1
 8003954:	63bb      	str	r3, [r7, #56]	; 0x38
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	3314      	adds	r3, #20
 800395c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800395e:	623a      	str	r2, [r7, #32]
 8003960:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003962:	69f9      	ldr	r1, [r7, #28]
 8003964:	6a3a      	ldr	r2, [r7, #32]
 8003966:	e841 2300 	strex	r3, r2, [r1]
 800396a:	61bb      	str	r3, [r7, #24]
   return(result);
 800396c:	69bb      	ldr	r3, [r7, #24]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d1e5      	bne.n	800393e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2220      	movs	r2, #32
 8003976:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2220      	movs	r2, #32
 800397e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2200      	movs	r2, #0
 8003986:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800398a:	2303      	movs	r3, #3
 800398c:	e00f      	b.n	80039ae <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	4013      	ands	r3, r2
 8003998:	68ba      	ldr	r2, [r7, #8]
 800399a:	429a      	cmp	r2, r3
 800399c:	bf0c      	ite	eq
 800399e:	2301      	moveq	r3, #1
 80039a0:	2300      	movne	r3, #0
 80039a2:	b2db      	uxtb	r3, r3
 80039a4:	461a      	mov	r2, r3
 80039a6:	79fb      	ldrb	r3, [r7, #7]
 80039a8:	429a      	cmp	r2, r3
 80039aa:	d09f      	beq.n	80038ec <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80039ac:	2300      	movs	r3, #0
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	3740      	adds	r7, #64	; 0x40
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}
	...

080039b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80039b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039bc:	b0c0      	sub	sp, #256	; 0x100
 80039be:	af00      	add	r7, sp, #0
 80039c0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	691b      	ldr	r3, [r3, #16]
 80039cc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80039d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039d4:	68d9      	ldr	r1, [r3, #12]
 80039d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	ea40 0301 	orr.w	r3, r0, r1
 80039e0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80039e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039e6:	689a      	ldr	r2, [r3, #8]
 80039e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039ec:	691b      	ldr	r3, [r3, #16]
 80039ee:	431a      	orrs	r2, r3
 80039f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039f4:	695b      	ldr	r3, [r3, #20]
 80039f6:	431a      	orrs	r2, r3
 80039f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039fc:	69db      	ldr	r3, [r3, #28]
 80039fe:	4313      	orrs	r3, r2
 8003a00:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003a04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	68db      	ldr	r3, [r3, #12]
 8003a0c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003a10:	f021 010c 	bic.w	r1, r1, #12
 8003a14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a18:	681a      	ldr	r2, [r3, #0]
 8003a1a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003a1e:	430b      	orrs	r3, r1
 8003a20:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003a22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	695b      	ldr	r3, [r3, #20]
 8003a2a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003a2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a32:	6999      	ldr	r1, [r3, #24]
 8003a34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a38:	681a      	ldr	r2, [r3, #0]
 8003a3a:	ea40 0301 	orr.w	r3, r0, r1
 8003a3e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003a40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	4b8f      	ldr	r3, [pc, #572]	; (8003c84 <UART_SetConfig+0x2cc>)
 8003a48:	429a      	cmp	r2, r3
 8003a4a:	d005      	beq.n	8003a58 <UART_SetConfig+0xa0>
 8003a4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	4b8d      	ldr	r3, [pc, #564]	; (8003c88 <UART_SetConfig+0x2d0>)
 8003a54:	429a      	cmp	r2, r3
 8003a56:	d104      	bne.n	8003a62 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003a58:	f7ff fb16 	bl	8003088 <HAL_RCC_GetPCLK2Freq>
 8003a5c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003a60:	e003      	b.n	8003a6a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003a62:	f7ff fafd 	bl	8003060 <HAL_RCC_GetPCLK1Freq>
 8003a66:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a6e:	69db      	ldr	r3, [r3, #28]
 8003a70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a74:	f040 810c 	bne.w	8003c90 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003a78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003a82:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003a86:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003a8a:	4622      	mov	r2, r4
 8003a8c:	462b      	mov	r3, r5
 8003a8e:	1891      	adds	r1, r2, r2
 8003a90:	65b9      	str	r1, [r7, #88]	; 0x58
 8003a92:	415b      	adcs	r3, r3
 8003a94:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003a96:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003a9a:	4621      	mov	r1, r4
 8003a9c:	eb12 0801 	adds.w	r8, r2, r1
 8003aa0:	4629      	mov	r1, r5
 8003aa2:	eb43 0901 	adc.w	r9, r3, r1
 8003aa6:	f04f 0200 	mov.w	r2, #0
 8003aaa:	f04f 0300 	mov.w	r3, #0
 8003aae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003ab2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003ab6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003aba:	4690      	mov	r8, r2
 8003abc:	4699      	mov	r9, r3
 8003abe:	4623      	mov	r3, r4
 8003ac0:	eb18 0303 	adds.w	r3, r8, r3
 8003ac4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003ac8:	462b      	mov	r3, r5
 8003aca:	eb49 0303 	adc.w	r3, r9, r3
 8003ace:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003ad2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003ade:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003ae2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003ae6:	460b      	mov	r3, r1
 8003ae8:	18db      	adds	r3, r3, r3
 8003aea:	653b      	str	r3, [r7, #80]	; 0x50
 8003aec:	4613      	mov	r3, r2
 8003aee:	eb42 0303 	adc.w	r3, r2, r3
 8003af2:	657b      	str	r3, [r7, #84]	; 0x54
 8003af4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003af8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003afc:	f7fc ffae 	bl	8000a5c <__aeabi_uldivmod>
 8003b00:	4602      	mov	r2, r0
 8003b02:	460b      	mov	r3, r1
 8003b04:	4b61      	ldr	r3, [pc, #388]	; (8003c8c <UART_SetConfig+0x2d4>)
 8003b06:	fba3 2302 	umull	r2, r3, r3, r2
 8003b0a:	095b      	lsrs	r3, r3, #5
 8003b0c:	011c      	lsls	r4, r3, #4
 8003b0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b12:	2200      	movs	r2, #0
 8003b14:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003b18:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003b1c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003b20:	4642      	mov	r2, r8
 8003b22:	464b      	mov	r3, r9
 8003b24:	1891      	adds	r1, r2, r2
 8003b26:	64b9      	str	r1, [r7, #72]	; 0x48
 8003b28:	415b      	adcs	r3, r3
 8003b2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b2c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003b30:	4641      	mov	r1, r8
 8003b32:	eb12 0a01 	adds.w	sl, r2, r1
 8003b36:	4649      	mov	r1, r9
 8003b38:	eb43 0b01 	adc.w	fp, r3, r1
 8003b3c:	f04f 0200 	mov.w	r2, #0
 8003b40:	f04f 0300 	mov.w	r3, #0
 8003b44:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003b48:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003b4c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003b50:	4692      	mov	sl, r2
 8003b52:	469b      	mov	fp, r3
 8003b54:	4643      	mov	r3, r8
 8003b56:	eb1a 0303 	adds.w	r3, sl, r3
 8003b5a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003b5e:	464b      	mov	r3, r9
 8003b60:	eb4b 0303 	adc.w	r3, fp, r3
 8003b64:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003b68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003b74:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003b78:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003b7c:	460b      	mov	r3, r1
 8003b7e:	18db      	adds	r3, r3, r3
 8003b80:	643b      	str	r3, [r7, #64]	; 0x40
 8003b82:	4613      	mov	r3, r2
 8003b84:	eb42 0303 	adc.w	r3, r2, r3
 8003b88:	647b      	str	r3, [r7, #68]	; 0x44
 8003b8a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003b8e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003b92:	f7fc ff63 	bl	8000a5c <__aeabi_uldivmod>
 8003b96:	4602      	mov	r2, r0
 8003b98:	460b      	mov	r3, r1
 8003b9a:	4611      	mov	r1, r2
 8003b9c:	4b3b      	ldr	r3, [pc, #236]	; (8003c8c <UART_SetConfig+0x2d4>)
 8003b9e:	fba3 2301 	umull	r2, r3, r3, r1
 8003ba2:	095b      	lsrs	r3, r3, #5
 8003ba4:	2264      	movs	r2, #100	; 0x64
 8003ba6:	fb02 f303 	mul.w	r3, r2, r3
 8003baa:	1acb      	subs	r3, r1, r3
 8003bac:	00db      	lsls	r3, r3, #3
 8003bae:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003bb2:	4b36      	ldr	r3, [pc, #216]	; (8003c8c <UART_SetConfig+0x2d4>)
 8003bb4:	fba3 2302 	umull	r2, r3, r3, r2
 8003bb8:	095b      	lsrs	r3, r3, #5
 8003bba:	005b      	lsls	r3, r3, #1
 8003bbc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003bc0:	441c      	add	r4, r3
 8003bc2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003bcc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003bd0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003bd4:	4642      	mov	r2, r8
 8003bd6:	464b      	mov	r3, r9
 8003bd8:	1891      	adds	r1, r2, r2
 8003bda:	63b9      	str	r1, [r7, #56]	; 0x38
 8003bdc:	415b      	adcs	r3, r3
 8003bde:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003be0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003be4:	4641      	mov	r1, r8
 8003be6:	1851      	adds	r1, r2, r1
 8003be8:	6339      	str	r1, [r7, #48]	; 0x30
 8003bea:	4649      	mov	r1, r9
 8003bec:	414b      	adcs	r3, r1
 8003bee:	637b      	str	r3, [r7, #52]	; 0x34
 8003bf0:	f04f 0200 	mov.w	r2, #0
 8003bf4:	f04f 0300 	mov.w	r3, #0
 8003bf8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003bfc:	4659      	mov	r1, fp
 8003bfe:	00cb      	lsls	r3, r1, #3
 8003c00:	4651      	mov	r1, sl
 8003c02:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c06:	4651      	mov	r1, sl
 8003c08:	00ca      	lsls	r2, r1, #3
 8003c0a:	4610      	mov	r0, r2
 8003c0c:	4619      	mov	r1, r3
 8003c0e:	4603      	mov	r3, r0
 8003c10:	4642      	mov	r2, r8
 8003c12:	189b      	adds	r3, r3, r2
 8003c14:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003c18:	464b      	mov	r3, r9
 8003c1a:	460a      	mov	r2, r1
 8003c1c:	eb42 0303 	adc.w	r3, r2, r3
 8003c20:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003c24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003c30:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003c34:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003c38:	460b      	mov	r3, r1
 8003c3a:	18db      	adds	r3, r3, r3
 8003c3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c3e:	4613      	mov	r3, r2
 8003c40:	eb42 0303 	adc.w	r3, r2, r3
 8003c44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c46:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003c4a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003c4e:	f7fc ff05 	bl	8000a5c <__aeabi_uldivmod>
 8003c52:	4602      	mov	r2, r0
 8003c54:	460b      	mov	r3, r1
 8003c56:	4b0d      	ldr	r3, [pc, #52]	; (8003c8c <UART_SetConfig+0x2d4>)
 8003c58:	fba3 1302 	umull	r1, r3, r3, r2
 8003c5c:	095b      	lsrs	r3, r3, #5
 8003c5e:	2164      	movs	r1, #100	; 0x64
 8003c60:	fb01 f303 	mul.w	r3, r1, r3
 8003c64:	1ad3      	subs	r3, r2, r3
 8003c66:	00db      	lsls	r3, r3, #3
 8003c68:	3332      	adds	r3, #50	; 0x32
 8003c6a:	4a08      	ldr	r2, [pc, #32]	; (8003c8c <UART_SetConfig+0x2d4>)
 8003c6c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c70:	095b      	lsrs	r3, r3, #5
 8003c72:	f003 0207 	and.w	r2, r3, #7
 8003c76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4422      	add	r2, r4
 8003c7e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003c80:	e106      	b.n	8003e90 <UART_SetConfig+0x4d8>
 8003c82:	bf00      	nop
 8003c84:	40011000 	.word	0x40011000
 8003c88:	40011400 	.word	0x40011400
 8003c8c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c94:	2200      	movs	r2, #0
 8003c96:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003c9a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003c9e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003ca2:	4642      	mov	r2, r8
 8003ca4:	464b      	mov	r3, r9
 8003ca6:	1891      	adds	r1, r2, r2
 8003ca8:	6239      	str	r1, [r7, #32]
 8003caa:	415b      	adcs	r3, r3
 8003cac:	627b      	str	r3, [r7, #36]	; 0x24
 8003cae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003cb2:	4641      	mov	r1, r8
 8003cb4:	1854      	adds	r4, r2, r1
 8003cb6:	4649      	mov	r1, r9
 8003cb8:	eb43 0501 	adc.w	r5, r3, r1
 8003cbc:	f04f 0200 	mov.w	r2, #0
 8003cc0:	f04f 0300 	mov.w	r3, #0
 8003cc4:	00eb      	lsls	r3, r5, #3
 8003cc6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003cca:	00e2      	lsls	r2, r4, #3
 8003ccc:	4614      	mov	r4, r2
 8003cce:	461d      	mov	r5, r3
 8003cd0:	4643      	mov	r3, r8
 8003cd2:	18e3      	adds	r3, r4, r3
 8003cd4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003cd8:	464b      	mov	r3, r9
 8003cda:	eb45 0303 	adc.w	r3, r5, r3
 8003cde:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003ce2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003cee:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003cf2:	f04f 0200 	mov.w	r2, #0
 8003cf6:	f04f 0300 	mov.w	r3, #0
 8003cfa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003cfe:	4629      	mov	r1, r5
 8003d00:	008b      	lsls	r3, r1, #2
 8003d02:	4621      	mov	r1, r4
 8003d04:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d08:	4621      	mov	r1, r4
 8003d0a:	008a      	lsls	r2, r1, #2
 8003d0c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003d10:	f7fc fea4 	bl	8000a5c <__aeabi_uldivmod>
 8003d14:	4602      	mov	r2, r0
 8003d16:	460b      	mov	r3, r1
 8003d18:	4b60      	ldr	r3, [pc, #384]	; (8003e9c <UART_SetConfig+0x4e4>)
 8003d1a:	fba3 2302 	umull	r2, r3, r3, r2
 8003d1e:	095b      	lsrs	r3, r3, #5
 8003d20:	011c      	lsls	r4, r3, #4
 8003d22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d26:	2200      	movs	r2, #0
 8003d28:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003d2c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003d30:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003d34:	4642      	mov	r2, r8
 8003d36:	464b      	mov	r3, r9
 8003d38:	1891      	adds	r1, r2, r2
 8003d3a:	61b9      	str	r1, [r7, #24]
 8003d3c:	415b      	adcs	r3, r3
 8003d3e:	61fb      	str	r3, [r7, #28]
 8003d40:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d44:	4641      	mov	r1, r8
 8003d46:	1851      	adds	r1, r2, r1
 8003d48:	6139      	str	r1, [r7, #16]
 8003d4a:	4649      	mov	r1, r9
 8003d4c:	414b      	adcs	r3, r1
 8003d4e:	617b      	str	r3, [r7, #20]
 8003d50:	f04f 0200 	mov.w	r2, #0
 8003d54:	f04f 0300 	mov.w	r3, #0
 8003d58:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003d5c:	4659      	mov	r1, fp
 8003d5e:	00cb      	lsls	r3, r1, #3
 8003d60:	4651      	mov	r1, sl
 8003d62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d66:	4651      	mov	r1, sl
 8003d68:	00ca      	lsls	r2, r1, #3
 8003d6a:	4610      	mov	r0, r2
 8003d6c:	4619      	mov	r1, r3
 8003d6e:	4603      	mov	r3, r0
 8003d70:	4642      	mov	r2, r8
 8003d72:	189b      	adds	r3, r3, r2
 8003d74:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003d78:	464b      	mov	r3, r9
 8003d7a:	460a      	mov	r2, r1
 8003d7c:	eb42 0303 	adc.w	r3, r2, r3
 8003d80:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003d84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	67bb      	str	r3, [r7, #120]	; 0x78
 8003d8e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003d90:	f04f 0200 	mov.w	r2, #0
 8003d94:	f04f 0300 	mov.w	r3, #0
 8003d98:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003d9c:	4649      	mov	r1, r9
 8003d9e:	008b      	lsls	r3, r1, #2
 8003da0:	4641      	mov	r1, r8
 8003da2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003da6:	4641      	mov	r1, r8
 8003da8:	008a      	lsls	r2, r1, #2
 8003daa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003dae:	f7fc fe55 	bl	8000a5c <__aeabi_uldivmod>
 8003db2:	4602      	mov	r2, r0
 8003db4:	460b      	mov	r3, r1
 8003db6:	4611      	mov	r1, r2
 8003db8:	4b38      	ldr	r3, [pc, #224]	; (8003e9c <UART_SetConfig+0x4e4>)
 8003dba:	fba3 2301 	umull	r2, r3, r3, r1
 8003dbe:	095b      	lsrs	r3, r3, #5
 8003dc0:	2264      	movs	r2, #100	; 0x64
 8003dc2:	fb02 f303 	mul.w	r3, r2, r3
 8003dc6:	1acb      	subs	r3, r1, r3
 8003dc8:	011b      	lsls	r3, r3, #4
 8003dca:	3332      	adds	r3, #50	; 0x32
 8003dcc:	4a33      	ldr	r2, [pc, #204]	; (8003e9c <UART_SetConfig+0x4e4>)
 8003dce:	fba2 2303 	umull	r2, r3, r2, r3
 8003dd2:	095b      	lsrs	r3, r3, #5
 8003dd4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003dd8:	441c      	add	r4, r3
 8003dda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003dde:	2200      	movs	r2, #0
 8003de0:	673b      	str	r3, [r7, #112]	; 0x70
 8003de2:	677a      	str	r2, [r7, #116]	; 0x74
 8003de4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003de8:	4642      	mov	r2, r8
 8003dea:	464b      	mov	r3, r9
 8003dec:	1891      	adds	r1, r2, r2
 8003dee:	60b9      	str	r1, [r7, #8]
 8003df0:	415b      	adcs	r3, r3
 8003df2:	60fb      	str	r3, [r7, #12]
 8003df4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003df8:	4641      	mov	r1, r8
 8003dfa:	1851      	adds	r1, r2, r1
 8003dfc:	6039      	str	r1, [r7, #0]
 8003dfe:	4649      	mov	r1, r9
 8003e00:	414b      	adcs	r3, r1
 8003e02:	607b      	str	r3, [r7, #4]
 8003e04:	f04f 0200 	mov.w	r2, #0
 8003e08:	f04f 0300 	mov.w	r3, #0
 8003e0c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003e10:	4659      	mov	r1, fp
 8003e12:	00cb      	lsls	r3, r1, #3
 8003e14:	4651      	mov	r1, sl
 8003e16:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e1a:	4651      	mov	r1, sl
 8003e1c:	00ca      	lsls	r2, r1, #3
 8003e1e:	4610      	mov	r0, r2
 8003e20:	4619      	mov	r1, r3
 8003e22:	4603      	mov	r3, r0
 8003e24:	4642      	mov	r2, r8
 8003e26:	189b      	adds	r3, r3, r2
 8003e28:	66bb      	str	r3, [r7, #104]	; 0x68
 8003e2a:	464b      	mov	r3, r9
 8003e2c:	460a      	mov	r2, r1
 8003e2e:	eb42 0303 	adc.w	r3, r2, r3
 8003e32:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003e34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	663b      	str	r3, [r7, #96]	; 0x60
 8003e3e:	667a      	str	r2, [r7, #100]	; 0x64
 8003e40:	f04f 0200 	mov.w	r2, #0
 8003e44:	f04f 0300 	mov.w	r3, #0
 8003e48:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003e4c:	4649      	mov	r1, r9
 8003e4e:	008b      	lsls	r3, r1, #2
 8003e50:	4641      	mov	r1, r8
 8003e52:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e56:	4641      	mov	r1, r8
 8003e58:	008a      	lsls	r2, r1, #2
 8003e5a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003e5e:	f7fc fdfd 	bl	8000a5c <__aeabi_uldivmod>
 8003e62:	4602      	mov	r2, r0
 8003e64:	460b      	mov	r3, r1
 8003e66:	4b0d      	ldr	r3, [pc, #52]	; (8003e9c <UART_SetConfig+0x4e4>)
 8003e68:	fba3 1302 	umull	r1, r3, r3, r2
 8003e6c:	095b      	lsrs	r3, r3, #5
 8003e6e:	2164      	movs	r1, #100	; 0x64
 8003e70:	fb01 f303 	mul.w	r3, r1, r3
 8003e74:	1ad3      	subs	r3, r2, r3
 8003e76:	011b      	lsls	r3, r3, #4
 8003e78:	3332      	adds	r3, #50	; 0x32
 8003e7a:	4a08      	ldr	r2, [pc, #32]	; (8003e9c <UART_SetConfig+0x4e4>)
 8003e7c:	fba2 2303 	umull	r2, r3, r2, r3
 8003e80:	095b      	lsrs	r3, r3, #5
 8003e82:	f003 020f 	and.w	r2, r3, #15
 8003e86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4422      	add	r2, r4
 8003e8e:	609a      	str	r2, [r3, #8]
}
 8003e90:	bf00      	nop
 8003e92:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003e96:	46bd      	mov	sp, r7
 8003e98:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e9c:	51eb851f 	.word	0x51eb851f

08003ea0 <__NVIC_SetPriority>:
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b083      	sub	sp, #12
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	6039      	str	r1, [r7, #0]
 8003eaa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003eac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	db0a      	blt.n	8003eca <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	b2da      	uxtb	r2, r3
 8003eb8:	490c      	ldr	r1, [pc, #48]	; (8003eec <__NVIC_SetPriority+0x4c>)
 8003eba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ebe:	0112      	lsls	r2, r2, #4
 8003ec0:	b2d2      	uxtb	r2, r2
 8003ec2:	440b      	add	r3, r1
 8003ec4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003ec8:	e00a      	b.n	8003ee0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	b2da      	uxtb	r2, r3
 8003ece:	4908      	ldr	r1, [pc, #32]	; (8003ef0 <__NVIC_SetPriority+0x50>)
 8003ed0:	79fb      	ldrb	r3, [r7, #7]
 8003ed2:	f003 030f 	and.w	r3, r3, #15
 8003ed6:	3b04      	subs	r3, #4
 8003ed8:	0112      	lsls	r2, r2, #4
 8003eda:	b2d2      	uxtb	r2, r2
 8003edc:	440b      	add	r3, r1
 8003ede:	761a      	strb	r2, [r3, #24]
}
 8003ee0:	bf00      	nop
 8003ee2:	370c      	adds	r7, #12
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eea:	4770      	bx	lr
 8003eec:	e000e100 	.word	0xe000e100
 8003ef0:	e000ed00 	.word	0xe000ed00

08003ef4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003ef8:	2100      	movs	r1, #0
 8003efa:	f06f 0004 	mvn.w	r0, #4
 8003efe:	f7ff ffcf 	bl	8003ea0 <__NVIC_SetPriority>
#endif
}
 8003f02:	bf00      	nop
 8003f04:	bd80      	pop	{r7, pc}
	...

08003f08 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003f08:	b480      	push	{r7}
 8003f0a:	b083      	sub	sp, #12
 8003f0c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003f0e:	f3ef 8305 	mrs	r3, IPSR
 8003f12:	603b      	str	r3, [r7, #0]
  return(result);
 8003f14:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d003      	beq.n	8003f22 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003f1a:	f06f 0305 	mvn.w	r3, #5
 8003f1e:	607b      	str	r3, [r7, #4]
 8003f20:	e00c      	b.n	8003f3c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003f22:	4b0a      	ldr	r3, [pc, #40]	; (8003f4c <osKernelInitialize+0x44>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d105      	bne.n	8003f36 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003f2a:	4b08      	ldr	r3, [pc, #32]	; (8003f4c <osKernelInitialize+0x44>)
 8003f2c:	2201      	movs	r2, #1
 8003f2e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003f30:	2300      	movs	r3, #0
 8003f32:	607b      	str	r3, [r7, #4]
 8003f34:	e002      	b.n	8003f3c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003f36:	f04f 33ff 	mov.w	r3, #4294967295
 8003f3a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003f3c:	687b      	ldr	r3, [r7, #4]
}
 8003f3e:	4618      	mov	r0, r3
 8003f40:	370c      	adds	r7, #12
 8003f42:	46bd      	mov	sp, r7
 8003f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f48:	4770      	bx	lr
 8003f4a:	bf00      	nop
 8003f4c:	2000018c 	.word	0x2000018c

08003f50 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b082      	sub	sp, #8
 8003f54:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003f56:	f3ef 8305 	mrs	r3, IPSR
 8003f5a:	603b      	str	r3, [r7, #0]
  return(result);
 8003f5c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d003      	beq.n	8003f6a <osKernelStart+0x1a>
    stat = osErrorISR;
 8003f62:	f06f 0305 	mvn.w	r3, #5
 8003f66:	607b      	str	r3, [r7, #4]
 8003f68:	e010      	b.n	8003f8c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003f6a:	4b0b      	ldr	r3, [pc, #44]	; (8003f98 <osKernelStart+0x48>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	2b01      	cmp	r3, #1
 8003f70:	d109      	bne.n	8003f86 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003f72:	f7ff ffbf 	bl	8003ef4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003f76:	4b08      	ldr	r3, [pc, #32]	; (8003f98 <osKernelStart+0x48>)
 8003f78:	2202      	movs	r2, #2
 8003f7a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003f7c:	f001 f9fe 	bl	800537c <vTaskStartScheduler>
      stat = osOK;
 8003f80:	2300      	movs	r3, #0
 8003f82:	607b      	str	r3, [r7, #4]
 8003f84:	e002      	b.n	8003f8c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003f86:	f04f 33ff 	mov.w	r3, #4294967295
 8003f8a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003f8c:	687b      	ldr	r3, [r7, #4]
}
 8003f8e:	4618      	mov	r0, r3
 8003f90:	3708      	adds	r7, #8
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}
 8003f96:	bf00      	nop
 8003f98:	2000018c 	.word	0x2000018c

08003f9c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b08e      	sub	sp, #56	; 0x38
 8003fa0:	af04      	add	r7, sp, #16
 8003fa2:	60f8      	str	r0, [r7, #12]
 8003fa4:	60b9      	str	r1, [r7, #8]
 8003fa6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003fac:	f3ef 8305 	mrs	r3, IPSR
 8003fb0:	617b      	str	r3, [r7, #20]
  return(result);
 8003fb2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d17e      	bne.n	80040b6 <osThreadNew+0x11a>
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d07b      	beq.n	80040b6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003fbe:	2380      	movs	r3, #128	; 0x80
 8003fc0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003fc2:	2318      	movs	r3, #24
 8003fc4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8003fca:	f04f 33ff 	mov.w	r3, #4294967295
 8003fce:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d045      	beq.n	8004062 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d002      	beq.n	8003fe4 <osThreadNew+0x48>
        name = attr->name;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	699b      	ldr	r3, [r3, #24]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d002      	beq.n	8003ff2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	699b      	ldr	r3, [r3, #24]
 8003ff0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003ff2:	69fb      	ldr	r3, [r7, #28]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d008      	beq.n	800400a <osThreadNew+0x6e>
 8003ff8:	69fb      	ldr	r3, [r7, #28]
 8003ffa:	2b38      	cmp	r3, #56	; 0x38
 8003ffc:	d805      	bhi.n	800400a <osThreadNew+0x6e>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	f003 0301 	and.w	r3, r3, #1
 8004006:	2b00      	cmp	r3, #0
 8004008:	d001      	beq.n	800400e <osThreadNew+0x72>
        return (NULL);
 800400a:	2300      	movs	r3, #0
 800400c:	e054      	b.n	80040b8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	695b      	ldr	r3, [r3, #20]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d003      	beq.n	800401e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	695b      	ldr	r3, [r3, #20]
 800401a:	089b      	lsrs	r3, r3, #2
 800401c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d00e      	beq.n	8004044 <osThreadNew+0xa8>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	68db      	ldr	r3, [r3, #12]
 800402a:	2b5b      	cmp	r3, #91	; 0x5b
 800402c:	d90a      	bls.n	8004044 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004032:	2b00      	cmp	r3, #0
 8004034:	d006      	beq.n	8004044 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	695b      	ldr	r3, [r3, #20]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d002      	beq.n	8004044 <osThreadNew+0xa8>
        mem = 1;
 800403e:	2301      	movs	r3, #1
 8004040:	61bb      	str	r3, [r7, #24]
 8004042:	e010      	b.n	8004066 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	689b      	ldr	r3, [r3, #8]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d10c      	bne.n	8004066 <osThreadNew+0xca>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	68db      	ldr	r3, [r3, #12]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d108      	bne.n	8004066 <osThreadNew+0xca>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	691b      	ldr	r3, [r3, #16]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d104      	bne.n	8004066 <osThreadNew+0xca>
          mem = 0;
 800405c:	2300      	movs	r3, #0
 800405e:	61bb      	str	r3, [r7, #24]
 8004060:	e001      	b.n	8004066 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004062:	2300      	movs	r3, #0
 8004064:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004066:	69bb      	ldr	r3, [r7, #24]
 8004068:	2b01      	cmp	r3, #1
 800406a:	d110      	bne.n	800408e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004070:	687a      	ldr	r2, [r7, #4]
 8004072:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004074:	9202      	str	r2, [sp, #8]
 8004076:	9301      	str	r3, [sp, #4]
 8004078:	69fb      	ldr	r3, [r7, #28]
 800407a:	9300      	str	r3, [sp, #0]
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	6a3a      	ldr	r2, [r7, #32]
 8004080:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004082:	68f8      	ldr	r0, [r7, #12]
 8004084:	f000 ff82 	bl	8004f8c <xTaskCreateStatic>
 8004088:	4603      	mov	r3, r0
 800408a:	613b      	str	r3, [r7, #16]
 800408c:	e013      	b.n	80040b6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800408e:	69bb      	ldr	r3, [r7, #24]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d110      	bne.n	80040b6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004094:	6a3b      	ldr	r3, [r7, #32]
 8004096:	b29a      	uxth	r2, r3
 8004098:	f107 0310 	add.w	r3, r7, #16
 800409c:	9301      	str	r3, [sp, #4]
 800409e:	69fb      	ldr	r3, [r7, #28]
 80040a0:	9300      	str	r3, [sp, #0]
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80040a6:	68f8      	ldr	r0, [r7, #12]
 80040a8:	f000 ffcd 	bl	8005046 <xTaskCreate>
 80040ac:	4603      	mov	r3, r0
 80040ae:	2b01      	cmp	r3, #1
 80040b0:	d001      	beq.n	80040b6 <osThreadNew+0x11a>
            hTask = NULL;
 80040b2:	2300      	movs	r3, #0
 80040b4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80040b6:	693b      	ldr	r3, [r7, #16]
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	3728      	adds	r7, #40	; 0x28
 80040bc:	46bd      	mov	sp, r7
 80040be:	bd80      	pop	{r7, pc}

080040c0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b084      	sub	sp, #16
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80040c8:	f3ef 8305 	mrs	r3, IPSR
 80040cc:	60bb      	str	r3, [r7, #8]
  return(result);
 80040ce:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d003      	beq.n	80040dc <osDelay+0x1c>
    stat = osErrorISR;
 80040d4:	f06f 0305 	mvn.w	r3, #5
 80040d8:	60fb      	str	r3, [r7, #12]
 80040da:	e007      	b.n	80040ec <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80040dc:	2300      	movs	r3, #0
 80040de:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d002      	beq.n	80040ec <osDelay+0x2c>
      vTaskDelay(ticks);
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f001 f910 	bl	800530c <vTaskDelay>
    }
  }

  return (stat);
 80040ec:	68fb      	ldr	r3, [r7, #12]
}
 80040ee:	4618      	mov	r0, r3
 80040f0:	3710      	adds	r7, #16
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}
	...

080040f8 <osMessageQueueGet>:
  }

  return (stat);
}

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b088      	sub	sp, #32
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	60f8      	str	r0, [r7, #12]
 8004100:	60b9      	str	r1, [r7, #8]
 8004102:	607a      	str	r2, [r7, #4]
 8004104:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800410a:	2300      	movs	r3, #0
 800410c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800410e:	f3ef 8305 	mrs	r3, IPSR
 8004112:	617b      	str	r3, [r7, #20]
  return(result);
 8004114:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8004116:	2b00      	cmp	r3, #0
 8004118:	d028      	beq.n	800416c <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800411a:	69bb      	ldr	r3, [r7, #24]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d005      	beq.n	800412c <osMessageQueueGet+0x34>
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d002      	beq.n	800412c <osMessageQueueGet+0x34>
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d003      	beq.n	8004134 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800412c:	f06f 0303 	mvn.w	r3, #3
 8004130:	61fb      	str	r3, [r7, #28]
 8004132:	e037      	b.n	80041a4 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8004134:	2300      	movs	r3, #0
 8004136:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8004138:	f107 0310 	add.w	r3, r7, #16
 800413c:	461a      	mov	r2, r3
 800413e:	68b9      	ldr	r1, [r7, #8]
 8004140:	69b8      	ldr	r0, [r7, #24]
 8004142:	f000 fd0f 	bl	8004b64 <xQueueReceiveFromISR>
 8004146:	4603      	mov	r3, r0
 8004148:	2b01      	cmp	r3, #1
 800414a:	d003      	beq.n	8004154 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800414c:	f06f 0302 	mvn.w	r3, #2
 8004150:	61fb      	str	r3, [r7, #28]
 8004152:	e027      	b.n	80041a4 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d024      	beq.n	80041a4 <osMessageQueueGet+0xac>
 800415a:	4b15      	ldr	r3, [pc, #84]	; (80041b0 <osMessageQueueGet+0xb8>)
 800415c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004160:	601a      	str	r2, [r3, #0]
 8004162:	f3bf 8f4f 	dsb	sy
 8004166:	f3bf 8f6f 	isb	sy
 800416a:	e01b      	b.n	80041a4 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800416c:	69bb      	ldr	r3, [r7, #24]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d002      	beq.n	8004178 <osMessageQueueGet+0x80>
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d103      	bne.n	8004180 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8004178:	f06f 0303 	mvn.w	r3, #3
 800417c:	61fb      	str	r3, [r7, #28]
 800417e:	e011      	b.n	80041a4 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8004180:	683a      	ldr	r2, [r7, #0]
 8004182:	68b9      	ldr	r1, [r7, #8]
 8004184:	69b8      	ldr	r0, [r7, #24]
 8004186:	f000 fbdd 	bl	8004944 <xQueueReceive>
 800418a:	4603      	mov	r3, r0
 800418c:	2b01      	cmp	r3, #1
 800418e:	d009      	beq.n	80041a4 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d003      	beq.n	800419e <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8004196:	f06f 0301 	mvn.w	r3, #1
 800419a:	61fb      	str	r3, [r7, #28]
 800419c:	e002      	b.n	80041a4 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800419e:	f06f 0302 	mvn.w	r3, #2
 80041a2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80041a4:	69fb      	ldr	r3, [r7, #28]
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	3720      	adds	r7, #32
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}
 80041ae:	bf00      	nop
 80041b0:	e000ed04 	.word	0xe000ed04

080041b4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80041b4:	b480      	push	{r7}
 80041b6:	b085      	sub	sp, #20
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	60f8      	str	r0, [r7, #12]
 80041bc:	60b9      	str	r1, [r7, #8]
 80041be:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	4a07      	ldr	r2, [pc, #28]	; (80041e0 <vApplicationGetIdleTaskMemory+0x2c>)
 80041c4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	4a06      	ldr	r2, [pc, #24]	; (80041e4 <vApplicationGetIdleTaskMemory+0x30>)
 80041ca:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2280      	movs	r2, #128	; 0x80
 80041d0:	601a      	str	r2, [r3, #0]
}
 80041d2:	bf00      	nop
 80041d4:	3714      	adds	r7, #20
 80041d6:	46bd      	mov	sp, r7
 80041d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041dc:	4770      	bx	lr
 80041de:	bf00      	nop
 80041e0:	20000190 	.word	0x20000190
 80041e4:	200001ec 	.word	0x200001ec

080041e8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80041e8:	b480      	push	{r7}
 80041ea:	b085      	sub	sp, #20
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	60f8      	str	r0, [r7, #12]
 80041f0:	60b9      	str	r1, [r7, #8]
 80041f2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	4a07      	ldr	r2, [pc, #28]	; (8004214 <vApplicationGetTimerTaskMemory+0x2c>)
 80041f8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	4a06      	ldr	r2, [pc, #24]	; (8004218 <vApplicationGetTimerTaskMemory+0x30>)
 80041fe:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004206:	601a      	str	r2, [r3, #0]
}
 8004208:	bf00      	nop
 800420a:	3714      	adds	r7, #20
 800420c:	46bd      	mov	sp, r7
 800420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004212:	4770      	bx	lr
 8004214:	200003ec 	.word	0x200003ec
 8004218:	20000448 	.word	0x20000448

0800421c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800421c:	b480      	push	{r7}
 800421e:	b083      	sub	sp, #12
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	f103 0208 	add.w	r2, r3, #8
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	f04f 32ff 	mov.w	r2, #4294967295
 8004234:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	f103 0208 	add.w	r2, r3, #8
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	f103 0208 	add.w	r2, r3, #8
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2200      	movs	r2, #0
 800424e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004250:	bf00      	nop
 8004252:	370c      	adds	r7, #12
 8004254:	46bd      	mov	sp, r7
 8004256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425a:	4770      	bx	lr

0800425c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800425c:	b480      	push	{r7}
 800425e:	b083      	sub	sp, #12
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2200      	movs	r2, #0
 8004268:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800426a:	bf00      	nop
 800426c:	370c      	adds	r7, #12
 800426e:	46bd      	mov	sp, r7
 8004270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004274:	4770      	bx	lr

08004276 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004276:	b480      	push	{r7}
 8004278:	b085      	sub	sp, #20
 800427a:	af00      	add	r7, sp, #0
 800427c:	6078      	str	r0, [r7, #4]
 800427e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	68fa      	ldr	r2, [r7, #12]
 800428a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	689a      	ldr	r2, [r3, #8]
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	683a      	ldr	r2, [r7, #0]
 800429a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	683a      	ldr	r2, [r7, #0]
 80042a0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	687a      	ldr	r2, [r7, #4]
 80042a6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	1c5a      	adds	r2, r3, #1
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	601a      	str	r2, [r3, #0]
}
 80042b2:	bf00      	nop
 80042b4:	3714      	adds	r7, #20
 80042b6:	46bd      	mov	sp, r7
 80042b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042bc:	4770      	bx	lr

080042be <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80042be:	b480      	push	{r7}
 80042c0:	b085      	sub	sp, #20
 80042c2:	af00      	add	r7, sp, #0
 80042c4:	6078      	str	r0, [r7, #4]
 80042c6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042d4:	d103      	bne.n	80042de <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	691b      	ldr	r3, [r3, #16]
 80042da:	60fb      	str	r3, [r7, #12]
 80042dc:	e00c      	b.n	80042f8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	3308      	adds	r3, #8
 80042e2:	60fb      	str	r3, [r7, #12]
 80042e4:	e002      	b.n	80042ec <vListInsert+0x2e>
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	60fb      	str	r3, [r7, #12]
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	68ba      	ldr	r2, [r7, #8]
 80042f4:	429a      	cmp	r2, r3
 80042f6:	d2f6      	bcs.n	80042e6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	685a      	ldr	r2, [r3, #4]
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	683a      	ldr	r2, [r7, #0]
 8004306:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	68fa      	ldr	r2, [r7, #12]
 800430c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	683a      	ldr	r2, [r7, #0]
 8004312:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	687a      	ldr	r2, [r7, #4]
 8004318:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	1c5a      	adds	r2, r3, #1
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	601a      	str	r2, [r3, #0]
}
 8004324:	bf00      	nop
 8004326:	3714      	adds	r7, #20
 8004328:	46bd      	mov	sp, r7
 800432a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432e:	4770      	bx	lr

08004330 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004330:	b480      	push	{r7}
 8004332:	b085      	sub	sp, #20
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	691b      	ldr	r3, [r3, #16]
 800433c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	687a      	ldr	r2, [r7, #4]
 8004344:	6892      	ldr	r2, [r2, #8]
 8004346:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	687a      	ldr	r2, [r7, #4]
 800434e:	6852      	ldr	r2, [r2, #4]
 8004350:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	687a      	ldr	r2, [r7, #4]
 8004358:	429a      	cmp	r2, r3
 800435a:	d103      	bne.n	8004364 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	689a      	ldr	r2, [r3, #8]
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2200      	movs	r2, #0
 8004368:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	1e5a      	subs	r2, r3, #1
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
}
 8004378:	4618      	mov	r0, r3
 800437a:	3714      	adds	r7, #20
 800437c:	46bd      	mov	sp, r7
 800437e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004382:	4770      	bx	lr

08004384 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b084      	sub	sp, #16
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
 800438c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d10a      	bne.n	80043ae <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800439c:	f383 8811 	msr	BASEPRI, r3
 80043a0:	f3bf 8f6f 	isb	sy
 80043a4:	f3bf 8f4f 	dsb	sy
 80043a8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80043aa:	bf00      	nop
 80043ac:	e7fe      	b.n	80043ac <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80043ae:	f002 fa21 	bl	80067f4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681a      	ldr	r2, [r3, #0]
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043ba:	68f9      	ldr	r1, [r7, #12]
 80043bc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80043be:	fb01 f303 	mul.w	r3, r1, r3
 80043c2:	441a      	add	r2, r3
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	2200      	movs	r2, #0
 80043cc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681a      	ldr	r2, [r3, #0]
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681a      	ldr	r2, [r3, #0]
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043de:	3b01      	subs	r3, #1
 80043e0:	68f9      	ldr	r1, [r7, #12]
 80043e2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80043e4:	fb01 f303 	mul.w	r3, r1, r3
 80043e8:	441a      	add	r2, r3
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	22ff      	movs	r2, #255	; 0xff
 80043f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	22ff      	movs	r2, #255	; 0xff
 80043fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d114      	bne.n	800442e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	691b      	ldr	r3, [r3, #16]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d01a      	beq.n	8004442 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	3310      	adds	r3, #16
 8004410:	4618      	mov	r0, r3
 8004412:	f001 fa81 	bl	8005918 <xTaskRemoveFromEventList>
 8004416:	4603      	mov	r3, r0
 8004418:	2b00      	cmp	r3, #0
 800441a:	d012      	beq.n	8004442 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800441c:	4b0c      	ldr	r3, [pc, #48]	; (8004450 <xQueueGenericReset+0xcc>)
 800441e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004422:	601a      	str	r2, [r3, #0]
 8004424:	f3bf 8f4f 	dsb	sy
 8004428:	f3bf 8f6f 	isb	sy
 800442c:	e009      	b.n	8004442 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	3310      	adds	r3, #16
 8004432:	4618      	mov	r0, r3
 8004434:	f7ff fef2 	bl	800421c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	3324      	adds	r3, #36	; 0x24
 800443c:	4618      	mov	r0, r3
 800443e:	f7ff feed 	bl	800421c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004442:	f002 fa07 	bl	8006854 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004446:	2301      	movs	r3, #1
}
 8004448:	4618      	mov	r0, r3
 800444a:	3710      	adds	r7, #16
 800444c:	46bd      	mov	sp, r7
 800444e:	bd80      	pop	{r7, pc}
 8004450:	e000ed04 	.word	0xe000ed04

08004454 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004454:	b580      	push	{r7, lr}
 8004456:	b08e      	sub	sp, #56	; 0x38
 8004458:	af02      	add	r7, sp, #8
 800445a:	60f8      	str	r0, [r7, #12]
 800445c:	60b9      	str	r1, [r7, #8]
 800445e:	607a      	str	r2, [r7, #4]
 8004460:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d10a      	bne.n	800447e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800446c:	f383 8811 	msr	BASEPRI, r3
 8004470:	f3bf 8f6f 	isb	sy
 8004474:	f3bf 8f4f 	dsb	sy
 8004478:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800447a:	bf00      	nop
 800447c:	e7fe      	b.n	800447c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d10a      	bne.n	800449a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004488:	f383 8811 	msr	BASEPRI, r3
 800448c:	f3bf 8f6f 	isb	sy
 8004490:	f3bf 8f4f 	dsb	sy
 8004494:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004496:	bf00      	nop
 8004498:	e7fe      	b.n	8004498 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d002      	beq.n	80044a6 <xQueueGenericCreateStatic+0x52>
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d001      	beq.n	80044aa <xQueueGenericCreateStatic+0x56>
 80044a6:	2301      	movs	r3, #1
 80044a8:	e000      	b.n	80044ac <xQueueGenericCreateStatic+0x58>
 80044aa:	2300      	movs	r3, #0
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d10a      	bne.n	80044c6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80044b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044b4:	f383 8811 	msr	BASEPRI, r3
 80044b8:	f3bf 8f6f 	isb	sy
 80044bc:	f3bf 8f4f 	dsb	sy
 80044c0:	623b      	str	r3, [r7, #32]
}
 80044c2:	bf00      	nop
 80044c4:	e7fe      	b.n	80044c4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d102      	bne.n	80044d2 <xQueueGenericCreateStatic+0x7e>
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d101      	bne.n	80044d6 <xQueueGenericCreateStatic+0x82>
 80044d2:	2301      	movs	r3, #1
 80044d4:	e000      	b.n	80044d8 <xQueueGenericCreateStatic+0x84>
 80044d6:	2300      	movs	r3, #0
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d10a      	bne.n	80044f2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80044dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044e0:	f383 8811 	msr	BASEPRI, r3
 80044e4:	f3bf 8f6f 	isb	sy
 80044e8:	f3bf 8f4f 	dsb	sy
 80044ec:	61fb      	str	r3, [r7, #28]
}
 80044ee:	bf00      	nop
 80044f0:	e7fe      	b.n	80044f0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80044f2:	2350      	movs	r3, #80	; 0x50
 80044f4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	2b50      	cmp	r3, #80	; 0x50
 80044fa:	d00a      	beq.n	8004512 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80044fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004500:	f383 8811 	msr	BASEPRI, r3
 8004504:	f3bf 8f6f 	isb	sy
 8004508:	f3bf 8f4f 	dsb	sy
 800450c:	61bb      	str	r3, [r7, #24]
}
 800450e:	bf00      	nop
 8004510:	e7fe      	b.n	8004510 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004512:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800451a:	2b00      	cmp	r3, #0
 800451c:	d00d      	beq.n	800453a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800451e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004520:	2201      	movs	r2, #1
 8004522:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004526:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800452a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800452c:	9300      	str	r3, [sp, #0]
 800452e:	4613      	mov	r3, r2
 8004530:	687a      	ldr	r2, [r7, #4]
 8004532:	68b9      	ldr	r1, [r7, #8]
 8004534:	68f8      	ldr	r0, [r7, #12]
 8004536:	f000 f805 	bl	8004544 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800453a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800453c:	4618      	mov	r0, r3
 800453e:	3730      	adds	r7, #48	; 0x30
 8004540:	46bd      	mov	sp, r7
 8004542:	bd80      	pop	{r7, pc}

08004544 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b084      	sub	sp, #16
 8004548:	af00      	add	r7, sp, #0
 800454a:	60f8      	str	r0, [r7, #12]
 800454c:	60b9      	str	r1, [r7, #8]
 800454e:	607a      	str	r2, [r7, #4]
 8004550:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d103      	bne.n	8004560 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004558:	69bb      	ldr	r3, [r7, #24]
 800455a:	69ba      	ldr	r2, [r7, #24]
 800455c:	601a      	str	r2, [r3, #0]
 800455e:	e002      	b.n	8004566 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004560:	69bb      	ldr	r3, [r7, #24]
 8004562:	687a      	ldr	r2, [r7, #4]
 8004564:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004566:	69bb      	ldr	r3, [r7, #24]
 8004568:	68fa      	ldr	r2, [r7, #12]
 800456a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800456c:	69bb      	ldr	r3, [r7, #24]
 800456e:	68ba      	ldr	r2, [r7, #8]
 8004570:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004572:	2101      	movs	r1, #1
 8004574:	69b8      	ldr	r0, [r7, #24]
 8004576:	f7ff ff05 	bl	8004384 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800457a:	69bb      	ldr	r3, [r7, #24]
 800457c:	78fa      	ldrb	r2, [r7, #3]
 800457e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	{
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
 8004582:	78fb      	ldrb	r3, [r7, #3]
 8004584:	68ba      	ldr	r2, [r7, #8]
 8004586:	68f9      	ldr	r1, [r7, #12]
 8004588:	2073      	movs	r0, #115	; 0x73
 800458a:	f003 fb29 	bl	8007be0 <SEGGER_SYSVIEW_RecordU32x3>
}
 800458e:	bf00      	nop
 8004590:	3710      	adds	r7, #16
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}
	...

08004598 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b090      	sub	sp, #64	; 0x40
 800459c:	af02      	add	r7, sp, #8
 800459e:	60f8      	str	r0, [r7, #12]
 80045a0:	60b9      	str	r1, [r7, #8]
 80045a2:	607a      	str	r2, [r7, #4]
 80045a4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80045a6:	2300      	movs	r3, #0
 80045a8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80045ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d10a      	bne.n	80045ca <xQueueGenericSend+0x32>
	__asm volatile
 80045b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045b8:	f383 8811 	msr	BASEPRI, r3
 80045bc:	f3bf 8f6f 	isb	sy
 80045c0:	f3bf 8f4f 	dsb	sy
 80045c4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80045c6:	bf00      	nop
 80045c8:	e7fe      	b.n	80045c8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d103      	bne.n	80045d8 <xQueueGenericSend+0x40>
 80045d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d101      	bne.n	80045dc <xQueueGenericSend+0x44>
 80045d8:	2301      	movs	r3, #1
 80045da:	e000      	b.n	80045de <xQueueGenericSend+0x46>
 80045dc:	2300      	movs	r3, #0
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d10a      	bne.n	80045f8 <xQueueGenericSend+0x60>
	__asm volatile
 80045e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045e6:	f383 8811 	msr	BASEPRI, r3
 80045ea:	f3bf 8f6f 	isb	sy
 80045ee:	f3bf 8f4f 	dsb	sy
 80045f2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80045f4:	bf00      	nop
 80045f6:	e7fe      	b.n	80045f6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	2b02      	cmp	r3, #2
 80045fc:	d103      	bne.n	8004606 <xQueueGenericSend+0x6e>
 80045fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004600:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004602:	2b01      	cmp	r3, #1
 8004604:	d101      	bne.n	800460a <xQueueGenericSend+0x72>
 8004606:	2301      	movs	r3, #1
 8004608:	e000      	b.n	800460c <xQueueGenericSend+0x74>
 800460a:	2300      	movs	r3, #0
 800460c:	2b00      	cmp	r3, #0
 800460e:	d10a      	bne.n	8004626 <xQueueGenericSend+0x8e>
	__asm volatile
 8004610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004614:	f383 8811 	msr	BASEPRI, r3
 8004618:	f3bf 8f6f 	isb	sy
 800461c:	f3bf 8f4f 	dsb	sy
 8004620:	623b      	str	r3, [r7, #32]
}
 8004622:	bf00      	nop
 8004624:	e7fe      	b.n	8004624 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004626:	f001 fb71 	bl	8005d0c <xTaskGetSchedulerState>
 800462a:	4603      	mov	r3, r0
 800462c:	2b00      	cmp	r3, #0
 800462e:	d102      	bne.n	8004636 <xQueueGenericSend+0x9e>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d101      	bne.n	800463a <xQueueGenericSend+0xa2>
 8004636:	2301      	movs	r3, #1
 8004638:	e000      	b.n	800463c <xQueueGenericSend+0xa4>
 800463a:	2300      	movs	r3, #0
 800463c:	2b00      	cmp	r3, #0
 800463e:	d10a      	bne.n	8004656 <xQueueGenericSend+0xbe>
	__asm volatile
 8004640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004644:	f383 8811 	msr	BASEPRI, r3
 8004648:	f3bf 8f6f 	isb	sy
 800464c:	f3bf 8f4f 	dsb	sy
 8004650:	61fb      	str	r3, [r7, #28]
}
 8004652:	bf00      	nop
 8004654:	e7fe      	b.n	8004654 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004656:	f002 f8cd 	bl	80067f4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800465a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800465c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800465e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004660:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004662:	429a      	cmp	r2, r3
 8004664:	d302      	bcc.n	800466c <xQueueGenericSend+0xd4>
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	2b02      	cmp	r3, #2
 800466a:	d136      	bne.n	80046da <xQueueGenericSend+0x142>
			{
				traceQUEUE_SEND( pxQueue );
 800466c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800466e:	4618      	mov	r0, r3
 8004670:	f004 f84c 	bl	800870c <SEGGER_SYSVIEW_ShrinkId>
 8004674:	68ba      	ldr	r2, [r7, #8]
 8004676:	6879      	ldr	r1, [r7, #4]
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	9300      	str	r3, [sp, #0]
 800467c:	460b      	mov	r3, r1
 800467e:	4601      	mov	r1, r0
 8004680:	205a      	movs	r0, #90	; 0x5a
 8004682:	f003 fb23 	bl	8007ccc <SEGGER_SYSVIEW_RecordU32x4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004686:	683a      	ldr	r2, [r7, #0]
 8004688:	68b9      	ldr	r1, [r7, #8]
 800468a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800468c:	f000 fb08 	bl	8004ca0 <prvCopyDataToQueue>
 8004690:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004696:	2b00      	cmp	r3, #0
 8004698:	d010      	beq.n	80046bc <xQueueGenericSend+0x124>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800469a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800469c:	3324      	adds	r3, #36	; 0x24
 800469e:	4618      	mov	r0, r3
 80046a0:	f001 f93a 	bl	8005918 <xTaskRemoveFromEventList>
 80046a4:	4603      	mov	r3, r0
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d013      	beq.n	80046d2 <xQueueGenericSend+0x13a>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80046aa:	4b4d      	ldr	r3, [pc, #308]	; (80047e0 <xQueueGenericSend+0x248>)
 80046ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046b0:	601a      	str	r2, [r3, #0]
 80046b2:	f3bf 8f4f 	dsb	sy
 80046b6:	f3bf 8f6f 	isb	sy
 80046ba:	e00a      	b.n	80046d2 <xQueueGenericSend+0x13a>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80046bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d007      	beq.n	80046d2 <xQueueGenericSend+0x13a>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80046c2:	4b47      	ldr	r3, [pc, #284]	; (80047e0 <xQueueGenericSend+0x248>)
 80046c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046c8:	601a      	str	r2, [r3, #0]
 80046ca:	f3bf 8f4f 	dsb	sy
 80046ce:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80046d2:	f002 f8bf 	bl	8006854 <vPortExitCritical>
				return pdPASS;
 80046d6:	2301      	movs	r3, #1
 80046d8:	e07d      	b.n	80047d6 <xQueueGenericSend+0x23e>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d110      	bne.n	8004702 <xQueueGenericSend+0x16a>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80046e0:	f002 f8b8 	bl	8006854 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
 80046e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046e6:	4618      	mov	r0, r3
 80046e8:	f004 f810 	bl	800870c <SEGGER_SYSVIEW_ShrinkId>
 80046ec:	68ba      	ldr	r2, [r7, #8]
 80046ee:	6879      	ldr	r1, [r7, #4]
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	9300      	str	r3, [sp, #0]
 80046f4:	460b      	mov	r3, r1
 80046f6:	4601      	mov	r1, r0
 80046f8:	205a      	movs	r0, #90	; 0x5a
 80046fa:	f003 fae7 	bl	8007ccc <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_FULL;
 80046fe:	2300      	movs	r3, #0
 8004700:	e069      	b.n	80047d6 <xQueueGenericSend+0x23e>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004702:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004704:	2b00      	cmp	r3, #0
 8004706:	d106      	bne.n	8004716 <xQueueGenericSend+0x17e>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004708:	f107 0314 	add.w	r3, r7, #20
 800470c:	4618      	mov	r0, r3
 800470e:	f001 f96b 	bl	80059e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004712:	2301      	movs	r3, #1
 8004714:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004716:	f002 f89d 	bl	8006854 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800471a:	f000 feab 	bl	8005474 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800471e:	f002 f869 	bl	80067f4 <vPortEnterCritical>
 8004722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004724:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004728:	b25b      	sxtb	r3, r3
 800472a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800472e:	d103      	bne.n	8004738 <xQueueGenericSend+0x1a0>
 8004730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004732:	2200      	movs	r2, #0
 8004734:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800473a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800473e:	b25b      	sxtb	r3, r3
 8004740:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004744:	d103      	bne.n	800474e <xQueueGenericSend+0x1b6>
 8004746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004748:	2200      	movs	r2, #0
 800474a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800474e:	f002 f881 	bl	8006854 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004752:	1d3a      	adds	r2, r7, #4
 8004754:	f107 0314 	add.w	r3, r7, #20
 8004758:	4611      	mov	r1, r2
 800475a:	4618      	mov	r0, r3
 800475c:	f001 f95a 	bl	8005a14 <xTaskCheckForTimeOut>
 8004760:	4603      	mov	r3, r0
 8004762:	2b00      	cmp	r3, #0
 8004764:	d124      	bne.n	80047b0 <xQueueGenericSend+0x218>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004766:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004768:	f000 fb92 	bl	8004e90 <prvIsQueueFull>
 800476c:	4603      	mov	r3, r0
 800476e:	2b00      	cmp	r3, #0
 8004770:	d018      	beq.n	80047a4 <xQueueGenericSend+0x20c>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004774:	3310      	adds	r3, #16
 8004776:	687a      	ldr	r2, [r7, #4]
 8004778:	4611      	mov	r1, r2
 800477a:	4618      	mov	r0, r3
 800477c:	f001 f87a 	bl	8005874 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004780:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004782:	f000 fb1d 	bl	8004dc0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004786:	f000 fe83 	bl	8005490 <xTaskResumeAll>
 800478a:	4603      	mov	r3, r0
 800478c:	2b00      	cmp	r3, #0
 800478e:	f47f af62 	bne.w	8004656 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004792:	4b13      	ldr	r3, [pc, #76]	; (80047e0 <xQueueGenericSend+0x248>)
 8004794:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004798:	601a      	str	r2, [r3, #0]
 800479a:	f3bf 8f4f 	dsb	sy
 800479e:	f3bf 8f6f 	isb	sy
 80047a2:	e758      	b.n	8004656 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80047a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80047a6:	f000 fb0b 	bl	8004dc0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80047aa:	f000 fe71 	bl	8005490 <xTaskResumeAll>
 80047ae:	e752      	b.n	8004656 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80047b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80047b2:	f000 fb05 	bl	8004dc0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80047b6:	f000 fe6b 	bl	8005490 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
 80047ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047bc:	4618      	mov	r0, r3
 80047be:	f003 ffa5 	bl	800870c <SEGGER_SYSVIEW_ShrinkId>
 80047c2:	68ba      	ldr	r2, [r7, #8]
 80047c4:	6879      	ldr	r1, [r7, #4]
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	9300      	str	r3, [sp, #0]
 80047ca:	460b      	mov	r3, r1
 80047cc:	4601      	mov	r1, r0
 80047ce:	205a      	movs	r0, #90	; 0x5a
 80047d0:	f003 fa7c 	bl	8007ccc <SEGGER_SYSVIEW_RecordU32x4>
			return errQUEUE_FULL;
 80047d4:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80047d6:	4618      	mov	r0, r3
 80047d8:	3738      	adds	r7, #56	; 0x38
 80047da:	46bd      	mov	sp, r7
 80047dc:	bd80      	pop	{r7, pc}
 80047de:	bf00      	nop
 80047e0:	e000ed04 	.word	0xe000ed04

080047e4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b090      	sub	sp, #64	; 0x40
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	60f8      	str	r0, [r7, #12]
 80047ec:	60b9      	str	r1, [r7, #8]
 80047ee:	607a      	str	r2, [r7, #4]
 80047f0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80047f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d10a      	bne.n	8004812 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80047fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004800:	f383 8811 	msr	BASEPRI, r3
 8004804:	f3bf 8f6f 	isb	sy
 8004808:	f3bf 8f4f 	dsb	sy
 800480c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800480e:	bf00      	nop
 8004810:	e7fe      	b.n	8004810 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d103      	bne.n	8004820 <xQueueGenericSendFromISR+0x3c>
 8004818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800481a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800481c:	2b00      	cmp	r3, #0
 800481e:	d101      	bne.n	8004824 <xQueueGenericSendFromISR+0x40>
 8004820:	2301      	movs	r3, #1
 8004822:	e000      	b.n	8004826 <xQueueGenericSendFromISR+0x42>
 8004824:	2300      	movs	r3, #0
 8004826:	2b00      	cmp	r3, #0
 8004828:	d10a      	bne.n	8004840 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800482a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800482e:	f383 8811 	msr	BASEPRI, r3
 8004832:	f3bf 8f6f 	isb	sy
 8004836:	f3bf 8f4f 	dsb	sy
 800483a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800483c:	bf00      	nop
 800483e:	e7fe      	b.n	800483e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	2b02      	cmp	r3, #2
 8004844:	d103      	bne.n	800484e <xQueueGenericSendFromISR+0x6a>
 8004846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004848:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800484a:	2b01      	cmp	r3, #1
 800484c:	d101      	bne.n	8004852 <xQueueGenericSendFromISR+0x6e>
 800484e:	2301      	movs	r3, #1
 8004850:	e000      	b.n	8004854 <xQueueGenericSendFromISR+0x70>
 8004852:	2300      	movs	r3, #0
 8004854:	2b00      	cmp	r3, #0
 8004856:	d10a      	bne.n	800486e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800485c:	f383 8811 	msr	BASEPRI, r3
 8004860:	f3bf 8f6f 	isb	sy
 8004864:	f3bf 8f4f 	dsb	sy
 8004868:	623b      	str	r3, [r7, #32]
}
 800486a:	bf00      	nop
 800486c:	e7fe      	b.n	800486c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800486e:	f002 f8ab 	bl	80069c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004872:	f3ef 8211 	mrs	r2, BASEPRI
 8004876:	f04f 0350 	mov.w	r3, #80	; 0x50
 800487a:	f383 8811 	msr	BASEPRI, r3
 800487e:	f3bf 8f6f 	isb	sy
 8004882:	f3bf 8f4f 	dsb	sy
 8004886:	61fa      	str	r2, [r7, #28]
 8004888:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800488a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800488c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800488e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004890:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004894:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004896:	429a      	cmp	r2, r3
 8004898:	d302      	bcc.n	80048a0 <xQueueGenericSendFromISR+0xbc>
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	2b02      	cmp	r3, #2
 800489e:	d139      	bne.n	8004914 <xQueueGenericSendFromISR+0x130>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80048a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80048a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80048aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ae:	62fb      	str	r3, [r7, #44]	; 0x2c

			traceQUEUE_SEND_FROM_ISR( pxQueue );
 80048b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048b2:	4618      	mov	r0, r3
 80048b4:	f003 ff2a 	bl	800870c <SEGGER_SYSVIEW_ShrinkId>
 80048b8:	4601      	mov	r1, r0
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	461a      	mov	r2, r3
 80048be:	2060      	movs	r0, #96	; 0x60
 80048c0:	f003 f934 	bl	8007b2c <SEGGER_SYSVIEW_RecordU32x2>
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80048c4:	683a      	ldr	r2, [r7, #0]
 80048c6:	68b9      	ldr	r1, [r7, #8]
 80048c8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80048ca:	f000 f9e9 	bl	8004ca0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80048ce:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80048d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048d6:	d112      	bne.n	80048fe <xQueueGenericSendFromISR+0x11a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80048d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d016      	beq.n	800490e <xQueueGenericSendFromISR+0x12a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80048e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048e2:	3324      	adds	r3, #36	; 0x24
 80048e4:	4618      	mov	r0, r3
 80048e6:	f001 f817 	bl	8005918 <xTaskRemoveFromEventList>
 80048ea:	4603      	mov	r3, r0
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d00e      	beq.n	800490e <xQueueGenericSendFromISR+0x12a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d00b      	beq.n	800490e <xQueueGenericSendFromISR+0x12a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2201      	movs	r2, #1
 80048fa:	601a      	str	r2, [r3, #0]
 80048fc:	e007      	b.n	800490e <xQueueGenericSendFromISR+0x12a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80048fe:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004902:	3301      	adds	r3, #1
 8004904:	b2db      	uxtb	r3, r3
 8004906:	b25a      	sxtb	r2, r3
 8004908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800490a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800490e:	2301      	movs	r3, #1
 8004910:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8004912:	e00b      	b.n	800492c <xQueueGenericSendFromISR+0x148>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8004914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004916:	4618      	mov	r0, r3
 8004918:	f003 fef8 	bl	800870c <SEGGER_SYSVIEW_ShrinkId>
 800491c:	4601      	mov	r1, r0
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	461a      	mov	r2, r3
 8004922:	2060      	movs	r0, #96	; 0x60
 8004924:	f003 f902 	bl	8007b2c <SEGGER_SYSVIEW_RecordU32x2>
			xReturn = errQUEUE_FULL;
 8004928:	2300      	movs	r3, #0
 800492a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800492c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800492e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004930:	697b      	ldr	r3, [r7, #20]
 8004932:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004936:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004938:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800493a:	4618      	mov	r0, r3
 800493c:	3740      	adds	r7, #64	; 0x40
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}
	...

08004944 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004944:	b590      	push	{r4, r7, lr}
 8004946:	b08f      	sub	sp, #60	; 0x3c
 8004948:	af02      	add	r7, sp, #8
 800494a:	60f8      	str	r0, [r7, #12]
 800494c:	60b9      	str	r1, [r7, #8]
 800494e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004950:	2300      	movs	r3, #0
 8004952:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800495a:	2b00      	cmp	r3, #0
 800495c:	d10a      	bne.n	8004974 <xQueueReceive+0x30>
	__asm volatile
 800495e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004962:	f383 8811 	msr	BASEPRI, r3
 8004966:	f3bf 8f6f 	isb	sy
 800496a:	f3bf 8f4f 	dsb	sy
 800496e:	623b      	str	r3, [r7, #32]
}
 8004970:	bf00      	nop
 8004972:	e7fe      	b.n	8004972 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d103      	bne.n	8004982 <xQueueReceive+0x3e>
 800497a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800497c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800497e:	2b00      	cmp	r3, #0
 8004980:	d101      	bne.n	8004986 <xQueueReceive+0x42>
 8004982:	2301      	movs	r3, #1
 8004984:	e000      	b.n	8004988 <xQueueReceive+0x44>
 8004986:	2300      	movs	r3, #0
 8004988:	2b00      	cmp	r3, #0
 800498a:	d10a      	bne.n	80049a2 <xQueueReceive+0x5e>
	__asm volatile
 800498c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004990:	f383 8811 	msr	BASEPRI, r3
 8004994:	f3bf 8f6f 	isb	sy
 8004998:	f3bf 8f4f 	dsb	sy
 800499c:	61fb      	str	r3, [r7, #28]
}
 800499e:	bf00      	nop
 80049a0:	e7fe      	b.n	80049a0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80049a2:	f001 f9b3 	bl	8005d0c <xTaskGetSchedulerState>
 80049a6:	4603      	mov	r3, r0
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d102      	bne.n	80049b2 <xQueueReceive+0x6e>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d101      	bne.n	80049b6 <xQueueReceive+0x72>
 80049b2:	2301      	movs	r3, #1
 80049b4:	e000      	b.n	80049b8 <xQueueReceive+0x74>
 80049b6:	2300      	movs	r3, #0
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d10a      	bne.n	80049d2 <xQueueReceive+0x8e>
	__asm volatile
 80049bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049c0:	f383 8811 	msr	BASEPRI, r3
 80049c4:	f3bf 8f6f 	isb	sy
 80049c8:	f3bf 8f4f 	dsb	sy
 80049cc:	61bb      	str	r3, [r7, #24]
}
 80049ce:	bf00      	nop
 80049d0:	e7fe      	b.n	80049d0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80049d2:	f001 ff0f 	bl	80067f4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80049d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049da:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80049dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d02f      	beq.n	8004a42 <xQueueReceive+0xfe>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80049e2:	68b9      	ldr	r1, [r7, #8]
 80049e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049e6:	f000 f9c5 	bl	8004d74 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
 80049ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049ec:	4618      	mov	r0, r3
 80049ee:	f003 fe8d 	bl	800870c <SEGGER_SYSVIEW_ShrinkId>
 80049f2:	4604      	mov	r4, r0
 80049f4:	2000      	movs	r0, #0
 80049f6:	f003 fe89 	bl	800870c <SEGGER_SYSVIEW_ShrinkId>
 80049fa:	4602      	mov	r2, r0
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2101      	movs	r1, #1
 8004a00:	9100      	str	r1, [sp, #0]
 8004a02:	4621      	mov	r1, r4
 8004a04:	205c      	movs	r0, #92	; 0x5c
 8004a06:	f003 f961 	bl	8007ccc <SEGGER_SYSVIEW_RecordU32x4>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a0c:	1e5a      	subs	r2, r3, #1
 8004a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a10:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a14:	691b      	ldr	r3, [r3, #16]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d00f      	beq.n	8004a3a <xQueueReceive+0xf6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a1c:	3310      	adds	r3, #16
 8004a1e:	4618      	mov	r0, r3
 8004a20:	f000 ff7a 	bl	8005918 <xTaskRemoveFromEventList>
 8004a24:	4603      	mov	r3, r0
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d007      	beq.n	8004a3a <xQueueReceive+0xf6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004a2a:	4b4d      	ldr	r3, [pc, #308]	; (8004b60 <xQueueReceive+0x21c>)
 8004a2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a30:	601a      	str	r2, [r3, #0]
 8004a32:	f3bf 8f4f 	dsb	sy
 8004a36:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004a3a:	f001 ff0b 	bl	8006854 <vPortExitCritical>
				return pdPASS;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	e08a      	b.n	8004b58 <xQueueReceive+0x214>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d113      	bne.n	8004a70 <xQueueReceive+0x12c>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004a48:	f001 ff04 	bl	8006854 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
 8004a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f003 fe5c 	bl	800870c <SEGGER_SYSVIEW_ShrinkId>
 8004a54:	4604      	mov	r4, r0
 8004a56:	2000      	movs	r0, #0
 8004a58:	f003 fe58 	bl	800870c <SEGGER_SYSVIEW_ShrinkId>
 8004a5c:	4602      	mov	r2, r0
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2101      	movs	r1, #1
 8004a62:	9100      	str	r1, [sp, #0]
 8004a64:	4621      	mov	r1, r4
 8004a66:	205c      	movs	r0, #92	; 0x5c
 8004a68:	f003 f930 	bl	8007ccc <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_EMPTY;
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	e073      	b.n	8004b58 <xQueueReceive+0x214>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004a70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d106      	bne.n	8004a84 <xQueueReceive+0x140>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004a76:	f107 0310 	add.w	r3, r7, #16
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	f000 ffb4 	bl	80059e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004a80:	2301      	movs	r3, #1
 8004a82:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004a84:	f001 fee6 	bl	8006854 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004a88:	f000 fcf4 	bl	8005474 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004a8c:	f001 feb2 	bl	80067f4 <vPortEnterCritical>
 8004a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a92:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004a96:	b25b      	sxtb	r3, r3
 8004a98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a9c:	d103      	bne.n	8004aa6 <xQueueReceive+0x162>
 8004a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aa8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004aac:	b25b      	sxtb	r3, r3
 8004aae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ab2:	d103      	bne.n	8004abc <xQueueReceive+0x178>
 8004ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004abc:	f001 feca 	bl	8006854 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004ac0:	1d3a      	adds	r2, r7, #4
 8004ac2:	f107 0310 	add.w	r3, r7, #16
 8004ac6:	4611      	mov	r1, r2
 8004ac8:	4618      	mov	r0, r3
 8004aca:	f000 ffa3 	bl	8005a14 <xTaskCheckForTimeOut>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d124      	bne.n	8004b1e <xQueueReceive+0x1da>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004ad4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ad6:	f000 f9c5 	bl	8004e64 <prvIsQueueEmpty>
 8004ada:	4603      	mov	r3, r0
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d018      	beq.n	8004b12 <xQueueReceive+0x1ce>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ae2:	3324      	adds	r3, #36	; 0x24
 8004ae4:	687a      	ldr	r2, [r7, #4]
 8004ae6:	4611      	mov	r1, r2
 8004ae8:	4618      	mov	r0, r3
 8004aea:	f000 fec3 	bl	8005874 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004aee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004af0:	f000 f966 	bl	8004dc0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004af4:	f000 fccc 	bl	8005490 <xTaskResumeAll>
 8004af8:	4603      	mov	r3, r0
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	f47f af69 	bne.w	80049d2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004b00:	4b17      	ldr	r3, [pc, #92]	; (8004b60 <xQueueReceive+0x21c>)
 8004b02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b06:	601a      	str	r2, [r3, #0]
 8004b08:	f3bf 8f4f 	dsb	sy
 8004b0c:	f3bf 8f6f 	isb	sy
 8004b10:	e75f      	b.n	80049d2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004b12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b14:	f000 f954 	bl	8004dc0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004b18:	f000 fcba 	bl	8005490 <xTaskResumeAll>
 8004b1c:	e759      	b.n	80049d2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004b1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b20:	f000 f94e 	bl	8004dc0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004b24:	f000 fcb4 	bl	8005490 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004b28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b2a:	f000 f99b 	bl	8004e64 <prvIsQueueEmpty>
 8004b2e:	4603      	mov	r3, r0
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	f43f af4e 	beq.w	80049d2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
 8004b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b38:	4618      	mov	r0, r3
 8004b3a:	f003 fde7 	bl	800870c <SEGGER_SYSVIEW_ShrinkId>
 8004b3e:	4604      	mov	r4, r0
 8004b40:	2000      	movs	r0, #0
 8004b42:	f003 fde3 	bl	800870c <SEGGER_SYSVIEW_ShrinkId>
 8004b46:	4602      	mov	r2, r0
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2101      	movs	r1, #1
 8004b4c:	9100      	str	r1, [sp, #0]
 8004b4e:	4621      	mov	r1, r4
 8004b50:	205c      	movs	r0, #92	; 0x5c
 8004b52:	f003 f8bb 	bl	8007ccc <SEGGER_SYSVIEW_RecordU32x4>
				return errQUEUE_EMPTY;
 8004b56:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	3734      	adds	r7, #52	; 0x34
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bd90      	pop	{r4, r7, pc}
 8004b60:	e000ed04 	.word	0xe000ed04

08004b64 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004b64:	b590      	push	{r4, r7, lr}
 8004b66:	b08f      	sub	sp, #60	; 0x3c
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	60f8      	str	r0, [r7, #12]
 8004b6c:	60b9      	str	r1, [r7, #8]
 8004b6e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d10a      	bne.n	8004b90 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8004b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b7e:	f383 8811 	msr	BASEPRI, r3
 8004b82:	f3bf 8f6f 	isb	sy
 8004b86:	f3bf 8f4f 	dsb	sy
 8004b8a:	623b      	str	r3, [r7, #32]
}
 8004b8c:	bf00      	nop
 8004b8e:	e7fe      	b.n	8004b8e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d103      	bne.n	8004b9e <xQueueReceiveFromISR+0x3a>
 8004b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d101      	bne.n	8004ba2 <xQueueReceiveFromISR+0x3e>
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	e000      	b.n	8004ba4 <xQueueReceiveFromISR+0x40>
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d10a      	bne.n	8004bbe <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8004ba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bac:	f383 8811 	msr	BASEPRI, r3
 8004bb0:	f3bf 8f6f 	isb	sy
 8004bb4:	f3bf 8f4f 	dsb	sy
 8004bb8:	61fb      	str	r3, [r7, #28]
}
 8004bba:	bf00      	nop
 8004bbc:	e7fe      	b.n	8004bbc <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004bbe:	f001 ff03 	bl	80069c8 <vPortValidateInterruptPriority>
	__asm volatile
 8004bc2:	f3ef 8211 	mrs	r2, BASEPRI
 8004bc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bca:	f383 8811 	msr	BASEPRI, r3
 8004bce:	f3bf 8f6f 	isb	sy
 8004bd2:	f3bf 8f4f 	dsb	sy
 8004bd6:	61ba      	str	r2, [r7, #24]
 8004bd8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8004bda:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004bdc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004be0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004be2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d03e      	beq.n	8004c68 <xQueueReceiveFromISR+0x104>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8004bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004bf0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );
 8004bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	f003 fd88 	bl	800870c <SEGGER_SYSVIEW_ShrinkId>
 8004bfc:	4604      	mov	r4, r0
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	4618      	mov	r0, r3
 8004c02:	f003 fd83 	bl	800870c <SEGGER_SYSVIEW_ShrinkId>
 8004c06:	4602      	mov	r2, r0
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	4621      	mov	r1, r4
 8004c0c:	2062      	movs	r0, #98	; 0x62
 8004c0e:	f002 ffe7 	bl	8007be0 <SEGGER_SYSVIEW_RecordU32x3>

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004c12:	68b9      	ldr	r1, [r7, #8]
 8004c14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004c16:	f000 f8ad 	bl	8004d74 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c1c:	1e5a      	subs	r2, r3, #1
 8004c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c20:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8004c22:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004c26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c2a:	d112      	bne.n	8004c52 <xQueueReceiveFromISR+0xee>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c2e:	691b      	ldr	r3, [r3, #16]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d016      	beq.n	8004c62 <xQueueReceiveFromISR+0xfe>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c36:	3310      	adds	r3, #16
 8004c38:	4618      	mov	r0, r3
 8004c3a:	f000 fe6d 	bl	8005918 <xTaskRemoveFromEventList>
 8004c3e:	4603      	mov	r3, r0
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d00e      	beq.n	8004c62 <xQueueReceiveFromISR+0xfe>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d00b      	beq.n	8004c62 <xQueueReceiveFromISR+0xfe>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2201      	movs	r2, #1
 8004c4e:	601a      	str	r2, [r3, #0]
 8004c50:	e007      	b.n	8004c62 <xQueueReceiveFromISR+0xfe>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004c52:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004c56:	3301      	adds	r3, #1
 8004c58:	b2db      	uxtb	r3, r3
 8004c5a:	b25a      	sxtb	r2, r3
 8004c5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8004c62:	2301      	movs	r3, #1
 8004c64:	637b      	str	r3, [r7, #52]	; 0x34
 8004c66:	e010      	b.n	8004c8a <xQueueReceiveFromISR+0x126>
		}
		else
		{
			xReturn = pdFAIL;
 8004c68:	2300      	movs	r3, #0
 8004c6a:	637b      	str	r3, [r7, #52]	; 0x34
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
 8004c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c6e:	4618      	mov	r0, r3
 8004c70:	f003 fd4c 	bl	800870c <SEGGER_SYSVIEW_ShrinkId>
 8004c74:	4604      	mov	r4, r0
 8004c76:	68bb      	ldr	r3, [r7, #8]
 8004c78:	4618      	mov	r0, r3
 8004c7a:	f003 fd47 	bl	800870c <SEGGER_SYSVIEW_ShrinkId>
 8004c7e:	4602      	mov	r2, r0
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	4621      	mov	r1, r4
 8004c84:	2062      	movs	r0, #98	; 0x62
 8004c86:	f002 ffab 	bl	8007be0 <SEGGER_SYSVIEW_RecordU32x3>
 8004c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c8c:	613b      	str	r3, [r7, #16]
	__asm volatile
 8004c8e:	693b      	ldr	r3, [r7, #16]
 8004c90:	f383 8811 	msr	BASEPRI, r3
}
 8004c94:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004c96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	373c      	adds	r7, #60	; 0x3c
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd90      	pop	{r4, r7, pc}

08004ca0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b086      	sub	sp, #24
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	60f8      	str	r0, [r7, #12]
 8004ca8:	60b9      	str	r1, [r7, #8]
 8004caa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004cac:	2300      	movs	r3, #0
 8004cae:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cb4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d10d      	bne.n	8004cda <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d14d      	bne.n	8004d62 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	689b      	ldr	r3, [r3, #8]
 8004cca:	4618      	mov	r0, r3
 8004ccc:	f001 f83c 	bl	8005d48 <xTaskPriorityDisinherit>
 8004cd0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	609a      	str	r2, [r3, #8]
 8004cd8:	e043      	b.n	8004d62 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d119      	bne.n	8004d14 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	6858      	ldr	r0, [r3, #4]
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ce8:	461a      	mov	r2, r3
 8004cea:	68b9      	ldr	r1, [r7, #8]
 8004cec:	f003 febc 	bl	8008a68 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	685a      	ldr	r2, [r3, #4]
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cf8:	441a      	add	r2, r3
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	685a      	ldr	r2, [r3, #4]
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	689b      	ldr	r3, [r3, #8]
 8004d06:	429a      	cmp	r2, r3
 8004d08:	d32b      	bcc.n	8004d62 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681a      	ldr	r2, [r3, #0]
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	605a      	str	r2, [r3, #4]
 8004d12:	e026      	b.n	8004d62 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	68d8      	ldr	r0, [r3, #12]
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d1c:	461a      	mov	r2, r3
 8004d1e:	68b9      	ldr	r1, [r7, #8]
 8004d20:	f003 fea2 	bl	8008a68 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	68da      	ldr	r2, [r3, #12]
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d2c:	425b      	negs	r3, r3
 8004d2e:	441a      	add	r2, r3
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	68da      	ldr	r2, [r3, #12]
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	429a      	cmp	r2, r3
 8004d3e:	d207      	bcs.n	8004d50 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	689a      	ldr	r2, [r3, #8]
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d48:	425b      	negs	r3, r3
 8004d4a:	441a      	add	r2, r3
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2b02      	cmp	r3, #2
 8004d54:	d105      	bne.n	8004d62 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004d56:	693b      	ldr	r3, [r7, #16]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d002      	beq.n	8004d62 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004d5c:	693b      	ldr	r3, [r7, #16]
 8004d5e:	3b01      	subs	r3, #1
 8004d60:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	1c5a      	adds	r2, r3, #1
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004d6a:	697b      	ldr	r3, [r7, #20]
}
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	3718      	adds	r7, #24
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bd80      	pop	{r7, pc}

08004d74 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b082      	sub	sp, #8
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
 8004d7c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d018      	beq.n	8004db8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	68da      	ldr	r2, [r3, #12]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d8e:	441a      	add	r2, r3
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	68da      	ldr	r2, [r3, #12]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	689b      	ldr	r3, [r3, #8]
 8004d9c:	429a      	cmp	r2, r3
 8004d9e:	d303      	bcc.n	8004da8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681a      	ldr	r2, [r3, #0]
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	68d9      	ldr	r1, [r3, #12]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004db0:	461a      	mov	r2, r3
 8004db2:	6838      	ldr	r0, [r7, #0]
 8004db4:	f003 fe58 	bl	8008a68 <memcpy>
	}
}
 8004db8:	bf00      	nop
 8004dba:	3708      	adds	r7, #8
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	bd80      	pop	{r7, pc}

08004dc0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b084      	sub	sp, #16
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004dc8:	f001 fd14 	bl	80067f4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004dd2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004dd4:	e011      	b.n	8004dfa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d012      	beq.n	8004e04 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	3324      	adds	r3, #36	; 0x24
 8004de2:	4618      	mov	r0, r3
 8004de4:	f000 fd98 	bl	8005918 <xTaskRemoveFromEventList>
 8004de8:	4603      	mov	r3, r0
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d001      	beq.n	8004df2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004dee:	f000 fe73 	bl	8005ad8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004df2:	7bfb      	ldrb	r3, [r7, #15]
 8004df4:	3b01      	subs	r3, #1
 8004df6:	b2db      	uxtb	r3, r3
 8004df8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004dfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	dce9      	bgt.n	8004dd6 <prvUnlockQueue+0x16>
 8004e02:	e000      	b.n	8004e06 <prvUnlockQueue+0x46>
					break;
 8004e04:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	22ff      	movs	r2, #255	; 0xff
 8004e0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004e0e:	f001 fd21 	bl	8006854 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004e12:	f001 fcef 	bl	80067f4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004e1c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004e1e:	e011      	b.n	8004e44 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	691b      	ldr	r3, [r3, #16]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d012      	beq.n	8004e4e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	3310      	adds	r3, #16
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	f000 fd73 	bl	8005918 <xTaskRemoveFromEventList>
 8004e32:	4603      	mov	r3, r0
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d001      	beq.n	8004e3c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004e38:	f000 fe4e 	bl	8005ad8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004e3c:	7bbb      	ldrb	r3, [r7, #14]
 8004e3e:	3b01      	subs	r3, #1
 8004e40:	b2db      	uxtb	r3, r3
 8004e42:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004e44:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	dce9      	bgt.n	8004e20 <prvUnlockQueue+0x60>
 8004e4c:	e000      	b.n	8004e50 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004e4e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	22ff      	movs	r2, #255	; 0xff
 8004e54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004e58:	f001 fcfc 	bl	8006854 <vPortExitCritical>
}
 8004e5c:	bf00      	nop
 8004e5e:	3710      	adds	r7, #16
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bd80      	pop	{r7, pc}

08004e64 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b084      	sub	sp, #16
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004e6c:	f001 fcc2 	bl	80067f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d102      	bne.n	8004e7e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004e78:	2301      	movs	r3, #1
 8004e7a:	60fb      	str	r3, [r7, #12]
 8004e7c:	e001      	b.n	8004e82 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004e7e:	2300      	movs	r3, #0
 8004e80:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004e82:	f001 fce7 	bl	8006854 <vPortExitCritical>

	return xReturn;
 8004e86:	68fb      	ldr	r3, [r7, #12]
}
 8004e88:	4618      	mov	r0, r3
 8004e8a:	3710      	adds	r7, #16
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bd80      	pop	{r7, pc}

08004e90 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b084      	sub	sp, #16
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004e98:	f001 fcac 	bl	80067f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ea4:	429a      	cmp	r2, r3
 8004ea6:	d102      	bne.n	8004eae <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	60fb      	str	r3, [r7, #12]
 8004eac:	e001      	b.n	8004eb2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004eae:	2300      	movs	r3, #0
 8004eb0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004eb2:	f001 fccf 	bl	8006854 <vPortExitCritical>

	return xReturn;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	3710      	adds	r7, #16
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bd80      	pop	{r7, pc}

08004ec0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b084      	sub	sp, #16
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
 8004ec8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004eca:	2300      	movs	r3, #0
 8004ecc:	60fb      	str	r3, [r7, #12]
 8004ece:	e01e      	b.n	8004f0e <vQueueAddToRegistry+0x4e>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004ed0:	4a13      	ldr	r2, [pc, #76]	; (8004f20 <vQueueAddToRegistry+0x60>)
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d115      	bne.n	8004f08 <vQueueAddToRegistry+0x48>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004edc:	4910      	ldr	r1, [pc, #64]	; (8004f20 <vQueueAddToRegistry+0x60>)
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	683a      	ldr	r2, [r7, #0]
 8004ee2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004ee6:	4a0e      	ldr	r2, [pc, #56]	; (8004f20 <vQueueAddToRegistry+0x60>)
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	00db      	lsls	r3, r3, #3
 8004eec:	4413      	add	r3, r2
 8004eee:	687a      	ldr	r2, [r7, #4]
 8004ef0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	f003 fc09 	bl	800870c <SEGGER_SYSVIEW_ShrinkId>
 8004efa:	4601      	mov	r1, r0
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	461a      	mov	r2, r3
 8004f00:	2071      	movs	r0, #113	; 0x71
 8004f02:	f002 fe13 	bl	8007b2c <SEGGER_SYSVIEW_RecordU32x2>
				break;
 8004f06:	e006      	b.n	8004f16 <vQueueAddToRegistry+0x56>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	3301      	adds	r3, #1
 8004f0c:	60fb      	str	r3, [r7, #12]
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	2b07      	cmp	r3, #7
 8004f12:	d9dd      	bls.n	8004ed0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004f14:	bf00      	nop
 8004f16:	bf00      	nop
 8004f18:	3710      	adds	r7, #16
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}
 8004f1e:	bf00      	nop
 8004f20:	20000848 	.word	0x20000848

08004f24 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b086      	sub	sp, #24
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	60f8      	str	r0, [r7, #12]
 8004f2c:	60b9      	str	r1, [r7, #8]
 8004f2e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004f34:	f001 fc5e 	bl	80067f4 <vPortEnterCritical>
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004f3e:	b25b      	sxtb	r3, r3
 8004f40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f44:	d103      	bne.n	8004f4e <vQueueWaitForMessageRestricted+0x2a>
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f4e:	697b      	ldr	r3, [r7, #20]
 8004f50:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004f54:	b25b      	sxtb	r3, r3
 8004f56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f5a:	d103      	bne.n	8004f64 <vQueueWaitForMessageRestricted+0x40>
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004f64:	f001 fc76 	bl	8006854 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d106      	bne.n	8004f7e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004f70:	697b      	ldr	r3, [r7, #20]
 8004f72:	3324      	adds	r3, #36	; 0x24
 8004f74:	687a      	ldr	r2, [r7, #4]
 8004f76:	68b9      	ldr	r1, [r7, #8]
 8004f78:	4618      	mov	r0, r3
 8004f7a:	f000 fc9f 	bl	80058bc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004f7e:	6978      	ldr	r0, [r7, #20]
 8004f80:	f7ff ff1e 	bl	8004dc0 <prvUnlockQueue>
	}
 8004f84:	bf00      	nop
 8004f86:	3718      	adds	r7, #24
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	bd80      	pop	{r7, pc}

08004f8c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b08e      	sub	sp, #56	; 0x38
 8004f90:	af04      	add	r7, sp, #16
 8004f92:	60f8      	str	r0, [r7, #12]
 8004f94:	60b9      	str	r1, [r7, #8]
 8004f96:	607a      	str	r2, [r7, #4]
 8004f98:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004f9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d10a      	bne.n	8004fb6 <xTaskCreateStatic+0x2a>
	__asm volatile
 8004fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fa4:	f383 8811 	msr	BASEPRI, r3
 8004fa8:	f3bf 8f6f 	isb	sy
 8004fac:	f3bf 8f4f 	dsb	sy
 8004fb0:	623b      	str	r3, [r7, #32]
}
 8004fb2:	bf00      	nop
 8004fb4:	e7fe      	b.n	8004fb4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004fb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d10a      	bne.n	8004fd2 <xTaskCreateStatic+0x46>
	__asm volatile
 8004fbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fc0:	f383 8811 	msr	BASEPRI, r3
 8004fc4:	f3bf 8f6f 	isb	sy
 8004fc8:	f3bf 8f4f 	dsb	sy
 8004fcc:	61fb      	str	r3, [r7, #28]
}
 8004fce:	bf00      	nop
 8004fd0:	e7fe      	b.n	8004fd0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004fd2:	235c      	movs	r3, #92	; 0x5c
 8004fd4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	2b5c      	cmp	r3, #92	; 0x5c
 8004fda:	d00a      	beq.n	8004ff2 <xTaskCreateStatic+0x66>
	__asm volatile
 8004fdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fe0:	f383 8811 	msr	BASEPRI, r3
 8004fe4:	f3bf 8f6f 	isb	sy
 8004fe8:	f3bf 8f4f 	dsb	sy
 8004fec:	61bb      	str	r3, [r7, #24]
}
 8004fee:	bf00      	nop
 8004ff0:	e7fe      	b.n	8004ff0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004ff2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004ff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d01e      	beq.n	8005038 <xTaskCreateStatic+0xac>
 8004ffa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d01b      	beq.n	8005038 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005002:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005006:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005008:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800500a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800500c:	2202      	movs	r2, #2
 800500e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005012:	2300      	movs	r3, #0
 8005014:	9303      	str	r3, [sp, #12]
 8005016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005018:	9302      	str	r3, [sp, #8]
 800501a:	f107 0314 	add.w	r3, r7, #20
 800501e:	9301      	str	r3, [sp, #4]
 8005020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005022:	9300      	str	r3, [sp, #0]
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	687a      	ldr	r2, [r7, #4]
 8005028:	68b9      	ldr	r1, [r7, #8]
 800502a:	68f8      	ldr	r0, [r7, #12]
 800502c:	f000 f850 	bl	80050d0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005030:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005032:	f000 f8dd 	bl	80051f0 <prvAddNewTaskToReadyList>
 8005036:	e001      	b.n	800503c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005038:	2300      	movs	r3, #0
 800503a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800503c:	697b      	ldr	r3, [r7, #20]
	}
 800503e:	4618      	mov	r0, r3
 8005040:	3728      	adds	r7, #40	; 0x28
 8005042:	46bd      	mov	sp, r7
 8005044:	bd80      	pop	{r7, pc}

08005046 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005046:	b580      	push	{r7, lr}
 8005048:	b08c      	sub	sp, #48	; 0x30
 800504a:	af04      	add	r7, sp, #16
 800504c:	60f8      	str	r0, [r7, #12]
 800504e:	60b9      	str	r1, [r7, #8]
 8005050:	603b      	str	r3, [r7, #0]
 8005052:	4613      	mov	r3, r2
 8005054:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005056:	88fb      	ldrh	r3, [r7, #6]
 8005058:	009b      	lsls	r3, r3, #2
 800505a:	4618      	mov	r0, r3
 800505c:	f001 fd4c 	bl	8006af8 <pvPortMalloc>
 8005060:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005062:	697b      	ldr	r3, [r7, #20]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d00e      	beq.n	8005086 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005068:	205c      	movs	r0, #92	; 0x5c
 800506a:	f001 fd45 	bl	8006af8 <pvPortMalloc>
 800506e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005070:	69fb      	ldr	r3, [r7, #28]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d003      	beq.n	800507e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005076:	69fb      	ldr	r3, [r7, #28]
 8005078:	697a      	ldr	r2, [r7, #20]
 800507a:	631a      	str	r2, [r3, #48]	; 0x30
 800507c:	e005      	b.n	800508a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800507e:	6978      	ldr	r0, [r7, #20]
 8005080:	f001 fe06 	bl	8006c90 <vPortFree>
 8005084:	e001      	b.n	800508a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005086:	2300      	movs	r3, #0
 8005088:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800508a:	69fb      	ldr	r3, [r7, #28]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d017      	beq.n	80050c0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005090:	69fb      	ldr	r3, [r7, #28]
 8005092:	2200      	movs	r2, #0
 8005094:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005098:	88fa      	ldrh	r2, [r7, #6]
 800509a:	2300      	movs	r3, #0
 800509c:	9303      	str	r3, [sp, #12]
 800509e:	69fb      	ldr	r3, [r7, #28]
 80050a0:	9302      	str	r3, [sp, #8]
 80050a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050a4:	9301      	str	r3, [sp, #4]
 80050a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050a8:	9300      	str	r3, [sp, #0]
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	68b9      	ldr	r1, [r7, #8]
 80050ae:	68f8      	ldr	r0, [r7, #12]
 80050b0:	f000 f80e 	bl	80050d0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80050b4:	69f8      	ldr	r0, [r7, #28]
 80050b6:	f000 f89b 	bl	80051f0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80050ba:	2301      	movs	r3, #1
 80050bc:	61bb      	str	r3, [r7, #24]
 80050be:	e002      	b.n	80050c6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80050c0:	f04f 33ff 	mov.w	r3, #4294967295
 80050c4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80050c6:	69bb      	ldr	r3, [r7, #24]
	}
 80050c8:	4618      	mov	r0, r3
 80050ca:	3720      	adds	r7, #32
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bd80      	pop	{r7, pc}

080050d0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b088      	sub	sp, #32
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	60f8      	str	r0, [r7, #12]
 80050d8:	60b9      	str	r1, [r7, #8]
 80050da:	607a      	str	r2, [r7, #4]
 80050dc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80050de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050e0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	009b      	lsls	r3, r3, #2
 80050e6:	461a      	mov	r2, r3
 80050e8:	21a5      	movs	r1, #165	; 0xa5
 80050ea:	f003 fc89 	bl	8008a00 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80050ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80050f8:	3b01      	subs	r3, #1
 80050fa:	009b      	lsls	r3, r3, #2
 80050fc:	4413      	add	r3, r2
 80050fe:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005100:	69bb      	ldr	r3, [r7, #24]
 8005102:	f023 0307 	bic.w	r3, r3, #7
 8005106:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005108:	69bb      	ldr	r3, [r7, #24]
 800510a:	f003 0307 	and.w	r3, r3, #7
 800510e:	2b00      	cmp	r3, #0
 8005110:	d00a      	beq.n	8005128 <prvInitialiseNewTask+0x58>
	__asm volatile
 8005112:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005116:	f383 8811 	msr	BASEPRI, r3
 800511a:	f3bf 8f6f 	isb	sy
 800511e:	f3bf 8f4f 	dsb	sy
 8005122:	617b      	str	r3, [r7, #20]
}
 8005124:	bf00      	nop
 8005126:	e7fe      	b.n	8005126 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d01f      	beq.n	800516e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800512e:	2300      	movs	r3, #0
 8005130:	61fb      	str	r3, [r7, #28]
 8005132:	e012      	b.n	800515a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005134:	68ba      	ldr	r2, [r7, #8]
 8005136:	69fb      	ldr	r3, [r7, #28]
 8005138:	4413      	add	r3, r2
 800513a:	7819      	ldrb	r1, [r3, #0]
 800513c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800513e:	69fb      	ldr	r3, [r7, #28]
 8005140:	4413      	add	r3, r2
 8005142:	3334      	adds	r3, #52	; 0x34
 8005144:	460a      	mov	r2, r1
 8005146:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005148:	68ba      	ldr	r2, [r7, #8]
 800514a:	69fb      	ldr	r3, [r7, #28]
 800514c:	4413      	add	r3, r2
 800514e:	781b      	ldrb	r3, [r3, #0]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d006      	beq.n	8005162 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005154:	69fb      	ldr	r3, [r7, #28]
 8005156:	3301      	adds	r3, #1
 8005158:	61fb      	str	r3, [r7, #28]
 800515a:	69fb      	ldr	r3, [r7, #28]
 800515c:	2b0f      	cmp	r3, #15
 800515e:	d9e9      	bls.n	8005134 <prvInitialiseNewTask+0x64>
 8005160:	e000      	b.n	8005164 <prvInitialiseNewTask+0x94>
			{
				break;
 8005162:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005166:	2200      	movs	r2, #0
 8005168:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800516c:	e003      	b.n	8005176 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800516e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005170:	2200      	movs	r2, #0
 8005172:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005178:	2b37      	cmp	r3, #55	; 0x37
 800517a:	d901      	bls.n	8005180 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800517c:	2337      	movs	r3, #55	; 0x37
 800517e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005182:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005184:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005188:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800518a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800518c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800518e:	2200      	movs	r2, #0
 8005190:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005194:	3304      	adds	r3, #4
 8005196:	4618      	mov	r0, r3
 8005198:	f7ff f860 	bl	800425c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800519c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800519e:	3318      	adds	r3, #24
 80051a0:	4618      	mov	r0, r3
 80051a2:	f7ff f85b 	bl	800425c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80051a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051aa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80051ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ae:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80051b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051b4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80051b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051ba:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80051bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051be:	2200      	movs	r2, #0
 80051c0:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80051c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051c4:	2200      	movs	r2, #0
 80051c6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80051ca:	683a      	ldr	r2, [r7, #0]
 80051cc:	68f9      	ldr	r1, [r7, #12]
 80051ce:	69b8      	ldr	r0, [r7, #24]
 80051d0:	f001 f9e0 	bl	8006594 <pxPortInitialiseStack>
 80051d4:	4602      	mov	r2, r0
 80051d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051d8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80051da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d002      	beq.n	80051e6 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80051e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80051e6:	bf00      	nop
 80051e8:	3720      	adds	r7, #32
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bd80      	pop	{r7, pc}
	...

080051f0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80051f0:	b5b0      	push	{r4, r5, r7, lr}
 80051f2:	b084      	sub	sp, #16
 80051f4:	af02      	add	r7, sp, #8
 80051f6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80051f8:	f001 fafc 	bl	80067f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80051fc:	4b3c      	ldr	r3, [pc, #240]	; (80052f0 <prvAddNewTaskToReadyList+0x100>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	3301      	adds	r3, #1
 8005202:	4a3b      	ldr	r2, [pc, #236]	; (80052f0 <prvAddNewTaskToReadyList+0x100>)
 8005204:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005206:	4b3b      	ldr	r3, [pc, #236]	; (80052f4 <prvAddNewTaskToReadyList+0x104>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d109      	bne.n	8005222 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800520e:	4a39      	ldr	r2, [pc, #228]	; (80052f4 <prvAddNewTaskToReadyList+0x104>)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005214:	4b36      	ldr	r3, [pc, #216]	; (80052f0 <prvAddNewTaskToReadyList+0x100>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	2b01      	cmp	r3, #1
 800521a:	d110      	bne.n	800523e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800521c:	f000 fc80 	bl	8005b20 <prvInitialiseTaskLists>
 8005220:	e00d      	b.n	800523e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005222:	4b35      	ldr	r3, [pc, #212]	; (80052f8 <prvAddNewTaskToReadyList+0x108>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d109      	bne.n	800523e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800522a:	4b32      	ldr	r3, [pc, #200]	; (80052f4 <prvAddNewTaskToReadyList+0x104>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005234:	429a      	cmp	r2, r3
 8005236:	d802      	bhi.n	800523e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005238:	4a2e      	ldr	r2, [pc, #184]	; (80052f4 <prvAddNewTaskToReadyList+0x104>)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800523e:	4b2f      	ldr	r3, [pc, #188]	; (80052fc <prvAddNewTaskToReadyList+0x10c>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	3301      	adds	r3, #1
 8005244:	4a2d      	ldr	r2, [pc, #180]	; (80052fc <prvAddNewTaskToReadyList+0x10c>)
 8005246:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005248:	4b2c      	ldr	r3, [pc, #176]	; (80052fc <prvAddNewTaskToReadyList+0x10c>)
 800524a:	681a      	ldr	r2, [r3, #0]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d016      	beq.n	8005284 <prvAddNewTaskToReadyList+0x94>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	4618      	mov	r0, r3
 800525a:	f003 f92b 	bl	80084b4 <SEGGER_SYSVIEW_OnTaskCreate>
 800525e:	6878      	ldr	r0, [r7, #4]
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800526e:	461d      	mov	r5, r3
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	461c      	mov	r4, r3
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800527a:	1ae3      	subs	r3, r4, r3
 800527c:	9300      	str	r3, [sp, #0]
 800527e:	462b      	mov	r3, r5
 8005280:	f001 feea 	bl	8007058 <SYSVIEW_AddTask>

		prvAddTaskToReadyList( pxNewTCB );
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	4618      	mov	r0, r3
 8005288:	f003 f99c 	bl	80085c4 <SEGGER_SYSVIEW_OnTaskStartReady>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005290:	4b1b      	ldr	r3, [pc, #108]	; (8005300 <prvAddNewTaskToReadyList+0x110>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	429a      	cmp	r2, r3
 8005296:	d903      	bls.n	80052a0 <prvAddNewTaskToReadyList+0xb0>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800529c:	4a18      	ldr	r2, [pc, #96]	; (8005300 <prvAddNewTaskToReadyList+0x110>)
 800529e:	6013      	str	r3, [r2, #0]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052a4:	4613      	mov	r3, r2
 80052a6:	009b      	lsls	r3, r3, #2
 80052a8:	4413      	add	r3, r2
 80052aa:	009b      	lsls	r3, r3, #2
 80052ac:	4a15      	ldr	r2, [pc, #84]	; (8005304 <prvAddNewTaskToReadyList+0x114>)
 80052ae:	441a      	add	r2, r3
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	3304      	adds	r3, #4
 80052b4:	4619      	mov	r1, r3
 80052b6:	4610      	mov	r0, r2
 80052b8:	f7fe ffdd 	bl	8004276 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80052bc:	f001 faca 	bl	8006854 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80052c0:	4b0d      	ldr	r3, [pc, #52]	; (80052f8 <prvAddNewTaskToReadyList+0x108>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d00e      	beq.n	80052e6 <prvAddNewTaskToReadyList+0xf6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80052c8:	4b0a      	ldr	r3, [pc, #40]	; (80052f4 <prvAddNewTaskToReadyList+0x104>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052d2:	429a      	cmp	r2, r3
 80052d4:	d207      	bcs.n	80052e6 <prvAddNewTaskToReadyList+0xf6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80052d6:	4b0c      	ldr	r3, [pc, #48]	; (8005308 <prvAddNewTaskToReadyList+0x118>)
 80052d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052dc:	601a      	str	r2, [r3, #0]
 80052de:	f3bf 8f4f 	dsb	sy
 80052e2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80052e6:	bf00      	nop
 80052e8:	3708      	adds	r7, #8
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bdb0      	pop	{r4, r5, r7, pc}
 80052ee:	bf00      	nop
 80052f0:	20000d5c 	.word	0x20000d5c
 80052f4:	20000888 	.word	0x20000888
 80052f8:	20000d68 	.word	0x20000d68
 80052fc:	20000d78 	.word	0x20000d78
 8005300:	20000d64 	.word	0x20000d64
 8005304:	2000088c 	.word	0x2000088c
 8005308:	e000ed04 	.word	0xe000ed04

0800530c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800530c:	b580      	push	{r7, lr}
 800530e:	b084      	sub	sp, #16
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005314:	2300      	movs	r3, #0
 8005316:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d01b      	beq.n	8005356 <vTaskDelay+0x4a>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800531e:	4b15      	ldr	r3, [pc, #84]	; (8005374 <vTaskDelay+0x68>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d00a      	beq.n	800533c <vTaskDelay+0x30>
	__asm volatile
 8005326:	f04f 0350 	mov.w	r3, #80	; 0x50
 800532a:	f383 8811 	msr	BASEPRI, r3
 800532e:	f3bf 8f6f 	isb	sy
 8005332:	f3bf 8f4f 	dsb	sy
 8005336:	60bb      	str	r3, [r7, #8]
}
 8005338:	bf00      	nop
 800533a:	e7fe      	b.n	800533a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800533c:	f000 f89a 	bl	8005474 <vTaskSuspendAll>
			{
				traceTASK_DELAY();
 8005340:	6879      	ldr	r1, [r7, #4]
 8005342:	2023      	movs	r0, #35	; 0x23
 8005344:	f002 fbb6 	bl	8007ab4 <SEGGER_SYSVIEW_RecordU32>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005348:	2100      	movs	r1, #0
 800534a:	6878      	ldr	r0, [r7, #4]
 800534c:	f000 fd6e 	bl	8005e2c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005350:	f000 f89e 	bl	8005490 <xTaskResumeAll>
 8005354:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d107      	bne.n	800536c <vTaskDelay+0x60>
		{
			portYIELD_WITHIN_API();
 800535c:	4b06      	ldr	r3, [pc, #24]	; (8005378 <vTaskDelay+0x6c>)
 800535e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005362:	601a      	str	r2, [r3, #0]
 8005364:	f3bf 8f4f 	dsb	sy
 8005368:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800536c:	bf00      	nop
 800536e:	3710      	adds	r7, #16
 8005370:	46bd      	mov	sp, r7
 8005372:	bd80      	pop	{r7, pc}
 8005374:	20000d84 	.word	0x20000d84
 8005378:	e000ed04 	.word	0xe000ed04

0800537c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b08a      	sub	sp, #40	; 0x28
 8005380:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005382:	2300      	movs	r3, #0
 8005384:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005386:	2300      	movs	r3, #0
 8005388:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800538a:	463a      	mov	r2, r7
 800538c:	1d39      	adds	r1, r7, #4
 800538e:	f107 0308 	add.w	r3, r7, #8
 8005392:	4618      	mov	r0, r3
 8005394:	f7fe ff0e 	bl	80041b4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005398:	6839      	ldr	r1, [r7, #0]
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	68ba      	ldr	r2, [r7, #8]
 800539e:	9202      	str	r2, [sp, #8]
 80053a0:	9301      	str	r3, [sp, #4]
 80053a2:	2300      	movs	r3, #0
 80053a4:	9300      	str	r3, [sp, #0]
 80053a6:	2300      	movs	r3, #0
 80053a8:	460a      	mov	r2, r1
 80053aa:	492b      	ldr	r1, [pc, #172]	; (8005458 <vTaskStartScheduler+0xdc>)
 80053ac:	482b      	ldr	r0, [pc, #172]	; (800545c <vTaskStartScheduler+0xe0>)
 80053ae:	f7ff fded 	bl	8004f8c <xTaskCreateStatic>
 80053b2:	4603      	mov	r3, r0
 80053b4:	4a2a      	ldr	r2, [pc, #168]	; (8005460 <vTaskStartScheduler+0xe4>)
 80053b6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80053b8:	4b29      	ldr	r3, [pc, #164]	; (8005460 <vTaskStartScheduler+0xe4>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d002      	beq.n	80053c6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80053c0:	2301      	movs	r3, #1
 80053c2:	617b      	str	r3, [r7, #20]
 80053c4:	e001      	b.n	80053ca <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80053c6:	2300      	movs	r3, #0
 80053c8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	2b01      	cmp	r3, #1
 80053ce:	d102      	bne.n	80053d6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80053d0:	f000 fd92 	bl	8005ef8 <xTimerCreateTimerTask>
 80053d4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80053d6:	697b      	ldr	r3, [r7, #20]
 80053d8:	2b01      	cmp	r3, #1
 80053da:	d129      	bne.n	8005430 <vTaskStartScheduler+0xb4>
	__asm volatile
 80053dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053e0:	f383 8811 	msr	BASEPRI, r3
 80053e4:	f3bf 8f6f 	isb	sy
 80053e8:	f3bf 8f4f 	dsb	sy
 80053ec:	613b      	str	r3, [r7, #16]
}
 80053ee:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80053f0:	4b1c      	ldr	r3, [pc, #112]	; (8005464 <vTaskStartScheduler+0xe8>)
 80053f2:	f04f 32ff 	mov.w	r2, #4294967295
 80053f6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80053f8:	4b1b      	ldr	r3, [pc, #108]	; (8005468 <vTaskStartScheduler+0xec>)
 80053fa:	2201      	movs	r2, #1
 80053fc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80053fe:	4b1b      	ldr	r3, [pc, #108]	; (800546c <vTaskStartScheduler+0xf0>)
 8005400:	2200      	movs	r2, #0
 8005402:	601a      	str	r2, [r3, #0]
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		traceTASK_SWITCHED_IN();
 8005404:	4b1a      	ldr	r3, [pc, #104]	; (8005470 <vTaskStartScheduler+0xf4>)
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	3334      	adds	r3, #52	; 0x34
 800540a:	2205      	movs	r2, #5
 800540c:	4912      	ldr	r1, [pc, #72]	; (8005458 <vTaskStartScheduler+0xdc>)
 800540e:	4618      	mov	r0, r3
 8005410:	f003 fae6 	bl	80089e0 <memcmp>
 8005414:	4603      	mov	r3, r0
 8005416:	2b00      	cmp	r3, #0
 8005418:	d005      	beq.n	8005426 <vTaskStartScheduler+0xaa>
 800541a:	4b15      	ldr	r3, [pc, #84]	; (8005470 <vTaskStartScheduler+0xf4>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4618      	mov	r0, r3
 8005420:	f003 f88c 	bl	800853c <SEGGER_SYSVIEW_OnTaskStartExec>
 8005424:	e001      	b.n	800542a <vTaskStartScheduler+0xae>
 8005426:	f003 f829 	bl	800847c <SEGGER_SYSVIEW_OnIdle>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800542a:	f001 f941 	bl	80066b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800542e:	e00e      	b.n	800544e <vTaskStartScheduler+0xd2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005436:	d10a      	bne.n	800544e <vTaskStartScheduler+0xd2>
	__asm volatile
 8005438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800543c:	f383 8811 	msr	BASEPRI, r3
 8005440:	f3bf 8f6f 	isb	sy
 8005444:	f3bf 8f4f 	dsb	sy
 8005448:	60fb      	str	r3, [r7, #12]
}
 800544a:	bf00      	nop
 800544c:	e7fe      	b.n	800544c <vTaskStartScheduler+0xd0>
}
 800544e:	bf00      	nop
 8005450:	3718      	adds	r7, #24
 8005452:	46bd      	mov	sp, r7
 8005454:	bd80      	pop	{r7, pc}
 8005456:	bf00      	nop
 8005458:	08009394 	.word	0x08009394
 800545c:	08005af1 	.word	0x08005af1
 8005460:	20000d80 	.word	0x20000d80
 8005464:	20000d7c 	.word	0x20000d7c
 8005468:	20000d68 	.word	0x20000d68
 800546c:	20000d60 	.word	0x20000d60
 8005470:	20000888 	.word	0x20000888

08005474 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005474:	b480      	push	{r7}
 8005476:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005478:	4b04      	ldr	r3, [pc, #16]	; (800548c <vTaskSuspendAll+0x18>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	3301      	adds	r3, #1
 800547e:	4a03      	ldr	r2, [pc, #12]	; (800548c <vTaskSuspendAll+0x18>)
 8005480:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005482:	bf00      	nop
 8005484:	46bd      	mov	sp, r7
 8005486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548a:	4770      	bx	lr
 800548c:	20000d84 	.word	0x20000d84

08005490 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b084      	sub	sp, #16
 8005494:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005496:	2300      	movs	r3, #0
 8005498:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800549a:	2300      	movs	r3, #0
 800549c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800549e:	4b44      	ldr	r3, [pc, #272]	; (80055b0 <xTaskResumeAll+0x120>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d10a      	bne.n	80054bc <xTaskResumeAll+0x2c>
	__asm volatile
 80054a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054aa:	f383 8811 	msr	BASEPRI, r3
 80054ae:	f3bf 8f6f 	isb	sy
 80054b2:	f3bf 8f4f 	dsb	sy
 80054b6:	603b      	str	r3, [r7, #0]
}
 80054b8:	bf00      	nop
 80054ba:	e7fe      	b.n	80054ba <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80054bc:	f001 f99a 	bl	80067f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80054c0:	4b3b      	ldr	r3, [pc, #236]	; (80055b0 <xTaskResumeAll+0x120>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	3b01      	subs	r3, #1
 80054c6:	4a3a      	ldr	r2, [pc, #232]	; (80055b0 <xTaskResumeAll+0x120>)
 80054c8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80054ca:	4b39      	ldr	r3, [pc, #228]	; (80055b0 <xTaskResumeAll+0x120>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d166      	bne.n	80055a0 <xTaskResumeAll+0x110>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80054d2:	4b38      	ldr	r3, [pc, #224]	; (80055b4 <xTaskResumeAll+0x124>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d062      	beq.n	80055a0 <xTaskResumeAll+0x110>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80054da:	e033      	b.n	8005544 <xTaskResumeAll+0xb4>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80054dc:	4b36      	ldr	r3, [pc, #216]	; (80055b8 <xTaskResumeAll+0x128>)
 80054de:	68db      	ldr	r3, [r3, #12]
 80054e0:	68db      	ldr	r3, [r3, #12]
 80054e2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	3318      	adds	r3, #24
 80054e8:	4618      	mov	r0, r3
 80054ea:	f7fe ff21 	bl	8004330 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	3304      	adds	r3, #4
 80054f2:	4618      	mov	r0, r3
 80054f4:	f7fe ff1c 	bl	8004330 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	4618      	mov	r0, r3
 80054fc:	f003 f862 	bl	80085c4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005504:	4b2d      	ldr	r3, [pc, #180]	; (80055bc <xTaskResumeAll+0x12c>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	429a      	cmp	r2, r3
 800550a:	d903      	bls.n	8005514 <xTaskResumeAll+0x84>
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005510:	4a2a      	ldr	r2, [pc, #168]	; (80055bc <xTaskResumeAll+0x12c>)
 8005512:	6013      	str	r3, [r2, #0]
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005518:	4613      	mov	r3, r2
 800551a:	009b      	lsls	r3, r3, #2
 800551c:	4413      	add	r3, r2
 800551e:	009b      	lsls	r3, r3, #2
 8005520:	4a27      	ldr	r2, [pc, #156]	; (80055c0 <xTaskResumeAll+0x130>)
 8005522:	441a      	add	r2, r3
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	3304      	adds	r3, #4
 8005528:	4619      	mov	r1, r3
 800552a:	4610      	mov	r0, r2
 800552c:	f7fe fea3 	bl	8004276 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005534:	4b23      	ldr	r3, [pc, #140]	; (80055c4 <xTaskResumeAll+0x134>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800553a:	429a      	cmp	r2, r3
 800553c:	d302      	bcc.n	8005544 <xTaskResumeAll+0xb4>
					{
						xYieldPending = pdTRUE;
 800553e:	4b22      	ldr	r3, [pc, #136]	; (80055c8 <xTaskResumeAll+0x138>)
 8005540:	2201      	movs	r2, #1
 8005542:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005544:	4b1c      	ldr	r3, [pc, #112]	; (80055b8 <xTaskResumeAll+0x128>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d1c7      	bne.n	80054dc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d001      	beq.n	8005556 <xTaskResumeAll+0xc6>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005552:	f000 fbbb 	bl	8005ccc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005556:	4b1d      	ldr	r3, [pc, #116]	; (80055cc <xTaskResumeAll+0x13c>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d010      	beq.n	8005584 <xTaskResumeAll+0xf4>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005562:	f000 f859 	bl	8005618 <xTaskIncrementTick>
 8005566:	4603      	mov	r3, r0
 8005568:	2b00      	cmp	r3, #0
 800556a:	d002      	beq.n	8005572 <xTaskResumeAll+0xe2>
							{
								xYieldPending = pdTRUE;
 800556c:	4b16      	ldr	r3, [pc, #88]	; (80055c8 <xTaskResumeAll+0x138>)
 800556e:	2201      	movs	r2, #1
 8005570:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	3b01      	subs	r3, #1
 8005576:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d1f1      	bne.n	8005562 <xTaskResumeAll+0xd2>

						xPendedTicks = 0;
 800557e:	4b13      	ldr	r3, [pc, #76]	; (80055cc <xTaskResumeAll+0x13c>)
 8005580:	2200      	movs	r2, #0
 8005582:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005584:	4b10      	ldr	r3, [pc, #64]	; (80055c8 <xTaskResumeAll+0x138>)
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d009      	beq.n	80055a0 <xTaskResumeAll+0x110>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800558c:	2301      	movs	r3, #1
 800558e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005590:	4b0f      	ldr	r3, [pc, #60]	; (80055d0 <xTaskResumeAll+0x140>)
 8005592:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005596:	601a      	str	r2, [r3, #0]
 8005598:	f3bf 8f4f 	dsb	sy
 800559c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80055a0:	f001 f958 	bl	8006854 <vPortExitCritical>

	return xAlreadyYielded;
 80055a4:	68bb      	ldr	r3, [r7, #8]
}
 80055a6:	4618      	mov	r0, r3
 80055a8:	3710      	adds	r7, #16
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}
 80055ae:	bf00      	nop
 80055b0:	20000d84 	.word	0x20000d84
 80055b4:	20000d5c 	.word	0x20000d5c
 80055b8:	20000d1c 	.word	0x20000d1c
 80055bc:	20000d64 	.word	0x20000d64
 80055c0:	2000088c 	.word	0x2000088c
 80055c4:	20000888 	.word	0x20000888
 80055c8:	20000d70 	.word	0x20000d70
 80055cc:	20000d6c 	.word	0x20000d6c
 80055d0:	e000ed04 	.word	0xe000ed04

080055d4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80055d4:	b480      	push	{r7}
 80055d6:	b083      	sub	sp, #12
 80055d8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80055da:	4b05      	ldr	r3, [pc, #20]	; (80055f0 <xTaskGetTickCount+0x1c>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80055e0:	687b      	ldr	r3, [r7, #4]
}
 80055e2:	4618      	mov	r0, r3
 80055e4:	370c      	adds	r7, #12
 80055e6:	46bd      	mov	sp, r7
 80055e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ec:	4770      	bx	lr
 80055ee:	bf00      	nop
 80055f0:	20000d60 	.word	0x20000d60

080055f4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b082      	sub	sp, #8
 80055f8:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80055fa:	f001 f9e5 	bl	80069c8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80055fe:	2300      	movs	r3, #0
 8005600:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8005602:	4b04      	ldr	r3, [pc, #16]	; (8005614 <xTaskGetTickCountFromISR+0x20>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005608:	683b      	ldr	r3, [r7, #0]
}
 800560a:	4618      	mov	r0, r3
 800560c:	3708      	adds	r7, #8
 800560e:	46bd      	mov	sp, r7
 8005610:	bd80      	pop	{r7, pc}
 8005612:	bf00      	nop
 8005614:	20000d60 	.word	0x20000d60

08005618 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b086      	sub	sp, #24
 800561c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800561e:	2300      	movs	r3, #0
 8005620:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005622:	4b51      	ldr	r3, [pc, #324]	; (8005768 <xTaskIncrementTick+0x150>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	2b00      	cmp	r3, #0
 8005628:	f040 8093 	bne.w	8005752 <xTaskIncrementTick+0x13a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800562c:	4b4f      	ldr	r3, [pc, #316]	; (800576c <xTaskIncrementTick+0x154>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	3301      	adds	r3, #1
 8005632:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005634:	4a4d      	ldr	r2, [pc, #308]	; (800576c <xTaskIncrementTick+0x154>)
 8005636:	693b      	ldr	r3, [r7, #16]
 8005638:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800563a:	693b      	ldr	r3, [r7, #16]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d120      	bne.n	8005682 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005640:	4b4b      	ldr	r3, [pc, #300]	; (8005770 <xTaskIncrementTick+0x158>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d00a      	beq.n	8005660 <xTaskIncrementTick+0x48>
	__asm volatile
 800564a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800564e:	f383 8811 	msr	BASEPRI, r3
 8005652:	f3bf 8f6f 	isb	sy
 8005656:	f3bf 8f4f 	dsb	sy
 800565a:	603b      	str	r3, [r7, #0]
}
 800565c:	bf00      	nop
 800565e:	e7fe      	b.n	800565e <xTaskIncrementTick+0x46>
 8005660:	4b43      	ldr	r3, [pc, #268]	; (8005770 <xTaskIncrementTick+0x158>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	60fb      	str	r3, [r7, #12]
 8005666:	4b43      	ldr	r3, [pc, #268]	; (8005774 <xTaskIncrementTick+0x15c>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4a41      	ldr	r2, [pc, #260]	; (8005770 <xTaskIncrementTick+0x158>)
 800566c:	6013      	str	r3, [r2, #0]
 800566e:	4a41      	ldr	r2, [pc, #260]	; (8005774 <xTaskIncrementTick+0x15c>)
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	6013      	str	r3, [r2, #0]
 8005674:	4b40      	ldr	r3, [pc, #256]	; (8005778 <xTaskIncrementTick+0x160>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	3301      	adds	r3, #1
 800567a:	4a3f      	ldr	r2, [pc, #252]	; (8005778 <xTaskIncrementTick+0x160>)
 800567c:	6013      	str	r3, [r2, #0]
 800567e:	f000 fb25 	bl	8005ccc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005682:	4b3e      	ldr	r3, [pc, #248]	; (800577c <xTaskIncrementTick+0x164>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	693a      	ldr	r2, [r7, #16]
 8005688:	429a      	cmp	r2, r3
 800568a:	d34d      	bcc.n	8005728 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800568c:	4b38      	ldr	r3, [pc, #224]	; (8005770 <xTaskIncrementTick+0x158>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d104      	bne.n	80056a0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005696:	4b39      	ldr	r3, [pc, #228]	; (800577c <xTaskIncrementTick+0x164>)
 8005698:	f04f 32ff 	mov.w	r2, #4294967295
 800569c:	601a      	str	r2, [r3, #0]
					break;
 800569e:	e043      	b.n	8005728 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80056a0:	4b33      	ldr	r3, [pc, #204]	; (8005770 <xTaskIncrementTick+0x158>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	68db      	ldr	r3, [r3, #12]
 80056a6:	68db      	ldr	r3, [r3, #12]
 80056a8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	685b      	ldr	r3, [r3, #4]
 80056ae:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80056b0:	693a      	ldr	r2, [r7, #16]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	429a      	cmp	r2, r3
 80056b6:	d203      	bcs.n	80056c0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80056b8:	4a30      	ldr	r2, [pc, #192]	; (800577c <xTaskIncrementTick+0x164>)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80056be:	e033      	b.n	8005728 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	3304      	adds	r3, #4
 80056c4:	4618      	mov	r0, r3
 80056c6:	f7fe fe33 	bl	8004330 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80056ca:	68bb      	ldr	r3, [r7, #8]
 80056cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d004      	beq.n	80056dc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	3318      	adds	r3, #24
 80056d6:	4618      	mov	r0, r3
 80056d8:	f7fe fe2a 	bl	8004330 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	4618      	mov	r0, r3
 80056e0:	f002 ff70 	bl	80085c4 <SEGGER_SYSVIEW_OnTaskStartReady>
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056e8:	4b25      	ldr	r3, [pc, #148]	; (8005780 <xTaskIncrementTick+0x168>)
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	429a      	cmp	r2, r3
 80056ee:	d903      	bls.n	80056f8 <xTaskIncrementTick+0xe0>
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056f4:	4a22      	ldr	r2, [pc, #136]	; (8005780 <xTaskIncrementTick+0x168>)
 80056f6:	6013      	str	r3, [r2, #0]
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056fc:	4613      	mov	r3, r2
 80056fe:	009b      	lsls	r3, r3, #2
 8005700:	4413      	add	r3, r2
 8005702:	009b      	lsls	r3, r3, #2
 8005704:	4a1f      	ldr	r2, [pc, #124]	; (8005784 <xTaskIncrementTick+0x16c>)
 8005706:	441a      	add	r2, r3
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	3304      	adds	r3, #4
 800570c:	4619      	mov	r1, r3
 800570e:	4610      	mov	r0, r2
 8005710:	f7fe fdb1 	bl	8004276 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005718:	4b1b      	ldr	r3, [pc, #108]	; (8005788 <xTaskIncrementTick+0x170>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800571e:	429a      	cmp	r2, r3
 8005720:	d3b4      	bcc.n	800568c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005722:	2301      	movs	r3, #1
 8005724:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005726:	e7b1      	b.n	800568c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005728:	4b17      	ldr	r3, [pc, #92]	; (8005788 <xTaskIncrementTick+0x170>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800572e:	4915      	ldr	r1, [pc, #84]	; (8005784 <xTaskIncrementTick+0x16c>)
 8005730:	4613      	mov	r3, r2
 8005732:	009b      	lsls	r3, r3, #2
 8005734:	4413      	add	r3, r2
 8005736:	009b      	lsls	r3, r3, #2
 8005738:	440b      	add	r3, r1
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	2b01      	cmp	r3, #1
 800573e:	d901      	bls.n	8005744 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8005740:	2301      	movs	r3, #1
 8005742:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005744:	4b11      	ldr	r3, [pc, #68]	; (800578c <xTaskIncrementTick+0x174>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d007      	beq.n	800575c <xTaskIncrementTick+0x144>
			{
				xSwitchRequired = pdTRUE;
 800574c:	2301      	movs	r3, #1
 800574e:	617b      	str	r3, [r7, #20]
 8005750:	e004      	b.n	800575c <xTaskIncrementTick+0x144>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005752:	4b0f      	ldr	r3, [pc, #60]	; (8005790 <xTaskIncrementTick+0x178>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	3301      	adds	r3, #1
 8005758:	4a0d      	ldr	r2, [pc, #52]	; (8005790 <xTaskIncrementTick+0x178>)
 800575a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800575c:	697b      	ldr	r3, [r7, #20]
}
 800575e:	4618      	mov	r0, r3
 8005760:	3718      	adds	r7, #24
 8005762:	46bd      	mov	sp, r7
 8005764:	bd80      	pop	{r7, pc}
 8005766:	bf00      	nop
 8005768:	20000d84 	.word	0x20000d84
 800576c:	20000d60 	.word	0x20000d60
 8005770:	20000d14 	.word	0x20000d14
 8005774:	20000d18 	.word	0x20000d18
 8005778:	20000d74 	.word	0x20000d74
 800577c:	20000d7c 	.word	0x20000d7c
 8005780:	20000d64 	.word	0x20000d64
 8005784:	2000088c 	.word	0x2000088c
 8005788:	20000888 	.word	0x20000888
 800578c:	20000d70 	.word	0x20000d70
 8005790:	20000d6c 	.word	0x20000d6c

08005794 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b084      	sub	sp, #16
 8005798:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800579a:	4b30      	ldr	r3, [pc, #192]	; (800585c <vTaskSwitchContext+0xc8>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d003      	beq.n	80057aa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80057a2:	4b2f      	ldr	r3, [pc, #188]	; (8005860 <vTaskSwitchContext+0xcc>)
 80057a4:	2201      	movs	r2, #1
 80057a6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80057a8:	e054      	b.n	8005854 <vTaskSwitchContext+0xc0>
		xYieldPending = pdFALSE;
 80057aa:	4b2d      	ldr	r3, [pc, #180]	; (8005860 <vTaskSwitchContext+0xcc>)
 80057ac:	2200      	movs	r2, #0
 80057ae:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80057b0:	4b2c      	ldr	r3, [pc, #176]	; (8005864 <vTaskSwitchContext+0xd0>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	60fb      	str	r3, [r7, #12]
 80057b6:	e010      	b.n	80057da <vTaskSwitchContext+0x46>
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d10a      	bne.n	80057d4 <vTaskSwitchContext+0x40>
	__asm volatile
 80057be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057c2:	f383 8811 	msr	BASEPRI, r3
 80057c6:	f3bf 8f6f 	isb	sy
 80057ca:	f3bf 8f4f 	dsb	sy
 80057ce:	607b      	str	r3, [r7, #4]
}
 80057d0:	bf00      	nop
 80057d2:	e7fe      	b.n	80057d2 <vTaskSwitchContext+0x3e>
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	3b01      	subs	r3, #1
 80057d8:	60fb      	str	r3, [r7, #12]
 80057da:	4923      	ldr	r1, [pc, #140]	; (8005868 <vTaskSwitchContext+0xd4>)
 80057dc:	68fa      	ldr	r2, [r7, #12]
 80057de:	4613      	mov	r3, r2
 80057e0:	009b      	lsls	r3, r3, #2
 80057e2:	4413      	add	r3, r2
 80057e4:	009b      	lsls	r3, r3, #2
 80057e6:	440b      	add	r3, r1
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d0e4      	beq.n	80057b8 <vTaskSwitchContext+0x24>
 80057ee:	68fa      	ldr	r2, [r7, #12]
 80057f0:	4613      	mov	r3, r2
 80057f2:	009b      	lsls	r3, r3, #2
 80057f4:	4413      	add	r3, r2
 80057f6:	009b      	lsls	r3, r3, #2
 80057f8:	4a1b      	ldr	r2, [pc, #108]	; (8005868 <vTaskSwitchContext+0xd4>)
 80057fa:	4413      	add	r3, r2
 80057fc:	60bb      	str	r3, [r7, #8]
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	685b      	ldr	r3, [r3, #4]
 8005802:	685a      	ldr	r2, [r3, #4]
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	605a      	str	r2, [r3, #4]
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	685a      	ldr	r2, [r3, #4]
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	3308      	adds	r3, #8
 8005810:	429a      	cmp	r2, r3
 8005812:	d104      	bne.n	800581e <vTaskSwitchContext+0x8a>
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	685a      	ldr	r2, [r3, #4]
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	605a      	str	r2, [r3, #4]
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	68db      	ldr	r3, [r3, #12]
 8005824:	4a11      	ldr	r2, [pc, #68]	; (800586c <vTaskSwitchContext+0xd8>)
 8005826:	6013      	str	r3, [r2, #0]
 8005828:	4a0e      	ldr	r2, [pc, #56]	; (8005864 <vTaskSwitchContext+0xd0>)
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 800582e:	4b0f      	ldr	r3, [pc, #60]	; (800586c <vTaskSwitchContext+0xd8>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	3334      	adds	r3, #52	; 0x34
 8005834:	2205      	movs	r2, #5
 8005836:	490e      	ldr	r1, [pc, #56]	; (8005870 <vTaskSwitchContext+0xdc>)
 8005838:	4618      	mov	r0, r3
 800583a:	f003 f8d1 	bl	80089e0 <memcmp>
 800583e:	4603      	mov	r3, r0
 8005840:	2b00      	cmp	r3, #0
 8005842:	d005      	beq.n	8005850 <vTaskSwitchContext+0xbc>
 8005844:	4b09      	ldr	r3, [pc, #36]	; (800586c <vTaskSwitchContext+0xd8>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4618      	mov	r0, r3
 800584a:	f002 fe77 	bl	800853c <SEGGER_SYSVIEW_OnTaskStartExec>
}
 800584e:	e001      	b.n	8005854 <vTaskSwitchContext+0xc0>
		traceTASK_SWITCHED_IN();
 8005850:	f002 fe14 	bl	800847c <SEGGER_SYSVIEW_OnIdle>
}
 8005854:	bf00      	nop
 8005856:	3710      	adds	r7, #16
 8005858:	46bd      	mov	sp, r7
 800585a:	bd80      	pop	{r7, pc}
 800585c:	20000d84 	.word	0x20000d84
 8005860:	20000d70 	.word	0x20000d70
 8005864:	20000d64 	.word	0x20000d64
 8005868:	2000088c 	.word	0x2000088c
 800586c:	20000888 	.word	0x20000888
 8005870:	08009394 	.word	0x08009394

08005874 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b084      	sub	sp, #16
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
 800587c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d10a      	bne.n	800589a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005884:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005888:	f383 8811 	msr	BASEPRI, r3
 800588c:	f3bf 8f6f 	isb	sy
 8005890:	f3bf 8f4f 	dsb	sy
 8005894:	60fb      	str	r3, [r7, #12]
}
 8005896:	bf00      	nop
 8005898:	e7fe      	b.n	8005898 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800589a:	4b07      	ldr	r3, [pc, #28]	; (80058b8 <vTaskPlaceOnEventList+0x44>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	3318      	adds	r3, #24
 80058a0:	4619      	mov	r1, r3
 80058a2:	6878      	ldr	r0, [r7, #4]
 80058a4:	f7fe fd0b 	bl	80042be <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80058a8:	2101      	movs	r1, #1
 80058aa:	6838      	ldr	r0, [r7, #0]
 80058ac:	f000 fabe 	bl	8005e2c <prvAddCurrentTaskToDelayedList>
}
 80058b0:	bf00      	nop
 80058b2:	3710      	adds	r7, #16
 80058b4:	46bd      	mov	sp, r7
 80058b6:	bd80      	pop	{r7, pc}
 80058b8:	20000888 	.word	0x20000888

080058bc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b086      	sub	sp, #24
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	60f8      	str	r0, [r7, #12]
 80058c4:	60b9      	str	r1, [r7, #8]
 80058c6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d10a      	bne.n	80058e4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80058ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058d2:	f383 8811 	msr	BASEPRI, r3
 80058d6:	f3bf 8f6f 	isb	sy
 80058da:	f3bf 8f4f 	dsb	sy
 80058de:	617b      	str	r3, [r7, #20]
}
 80058e0:	bf00      	nop
 80058e2:	e7fe      	b.n	80058e2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80058e4:	4b0b      	ldr	r3, [pc, #44]	; (8005914 <vTaskPlaceOnEventListRestricted+0x58>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	3318      	adds	r3, #24
 80058ea:	4619      	mov	r1, r3
 80058ec:	68f8      	ldr	r0, [r7, #12]
 80058ee:	f7fe fcc2 	bl	8004276 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d002      	beq.n	80058fe <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80058f8:	f04f 33ff 	mov.w	r3, #4294967295
 80058fc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 80058fe:	2024      	movs	r0, #36	; 0x24
 8005900:	f002 f8ba 	bl	8007a78 <SEGGER_SYSVIEW_RecordVoid>
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005904:	6879      	ldr	r1, [r7, #4]
 8005906:	68b8      	ldr	r0, [r7, #8]
 8005908:	f000 fa90 	bl	8005e2c <prvAddCurrentTaskToDelayedList>
	}
 800590c:	bf00      	nop
 800590e:	3718      	adds	r7, #24
 8005910:	46bd      	mov	sp, r7
 8005912:	bd80      	pop	{r7, pc}
 8005914:	20000888 	.word	0x20000888

08005918 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b086      	sub	sp, #24
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	68db      	ldr	r3, [r3, #12]
 8005924:	68db      	ldr	r3, [r3, #12]
 8005926:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005928:	693b      	ldr	r3, [r7, #16]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d10a      	bne.n	8005944 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800592e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005932:	f383 8811 	msr	BASEPRI, r3
 8005936:	f3bf 8f6f 	isb	sy
 800593a:	f3bf 8f4f 	dsb	sy
 800593e:	60fb      	str	r3, [r7, #12]
}
 8005940:	bf00      	nop
 8005942:	e7fe      	b.n	8005942 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005944:	693b      	ldr	r3, [r7, #16]
 8005946:	3318      	adds	r3, #24
 8005948:	4618      	mov	r0, r3
 800594a:	f7fe fcf1 	bl	8004330 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800594e:	4b20      	ldr	r3, [pc, #128]	; (80059d0 <xTaskRemoveFromEventList+0xb8>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d121      	bne.n	800599a <xTaskRemoveFromEventList+0x82>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005956:	693b      	ldr	r3, [r7, #16]
 8005958:	3304      	adds	r3, #4
 800595a:	4618      	mov	r0, r3
 800595c:	f7fe fce8 	bl	8004330 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005960:	693b      	ldr	r3, [r7, #16]
 8005962:	4618      	mov	r0, r3
 8005964:	f002 fe2e 	bl	80085c4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8005968:	693b      	ldr	r3, [r7, #16]
 800596a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800596c:	4b19      	ldr	r3, [pc, #100]	; (80059d4 <xTaskRemoveFromEventList+0xbc>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	429a      	cmp	r2, r3
 8005972:	d903      	bls.n	800597c <xTaskRemoveFromEventList+0x64>
 8005974:	693b      	ldr	r3, [r7, #16]
 8005976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005978:	4a16      	ldr	r2, [pc, #88]	; (80059d4 <xTaskRemoveFromEventList+0xbc>)
 800597a:	6013      	str	r3, [r2, #0]
 800597c:	693b      	ldr	r3, [r7, #16]
 800597e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005980:	4613      	mov	r3, r2
 8005982:	009b      	lsls	r3, r3, #2
 8005984:	4413      	add	r3, r2
 8005986:	009b      	lsls	r3, r3, #2
 8005988:	4a13      	ldr	r2, [pc, #76]	; (80059d8 <xTaskRemoveFromEventList+0xc0>)
 800598a:	441a      	add	r2, r3
 800598c:	693b      	ldr	r3, [r7, #16]
 800598e:	3304      	adds	r3, #4
 8005990:	4619      	mov	r1, r3
 8005992:	4610      	mov	r0, r2
 8005994:	f7fe fc6f 	bl	8004276 <vListInsertEnd>
 8005998:	e005      	b.n	80059a6 <xTaskRemoveFromEventList+0x8e>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800599a:	693b      	ldr	r3, [r7, #16]
 800599c:	3318      	adds	r3, #24
 800599e:	4619      	mov	r1, r3
 80059a0:	480e      	ldr	r0, [pc, #56]	; (80059dc <xTaskRemoveFromEventList+0xc4>)
 80059a2:	f7fe fc68 	bl	8004276 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80059a6:	693b      	ldr	r3, [r7, #16]
 80059a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059aa:	4b0d      	ldr	r3, [pc, #52]	; (80059e0 <xTaskRemoveFromEventList+0xc8>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059b0:	429a      	cmp	r2, r3
 80059b2:	d905      	bls.n	80059c0 <xTaskRemoveFromEventList+0xa8>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80059b4:	2301      	movs	r3, #1
 80059b6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80059b8:	4b0a      	ldr	r3, [pc, #40]	; (80059e4 <xTaskRemoveFromEventList+0xcc>)
 80059ba:	2201      	movs	r2, #1
 80059bc:	601a      	str	r2, [r3, #0]
 80059be:	e001      	b.n	80059c4 <xTaskRemoveFromEventList+0xac>
	}
	else
	{
		xReturn = pdFALSE;
 80059c0:	2300      	movs	r3, #0
 80059c2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80059c4:	697b      	ldr	r3, [r7, #20]
}
 80059c6:	4618      	mov	r0, r3
 80059c8:	3718      	adds	r7, #24
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}
 80059ce:	bf00      	nop
 80059d0:	20000d84 	.word	0x20000d84
 80059d4:	20000d64 	.word	0x20000d64
 80059d8:	2000088c 	.word	0x2000088c
 80059dc:	20000d1c 	.word	0x20000d1c
 80059e0:	20000888 	.word	0x20000888
 80059e4:	20000d70 	.word	0x20000d70

080059e8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80059e8:	b480      	push	{r7}
 80059ea:	b083      	sub	sp, #12
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80059f0:	4b06      	ldr	r3, [pc, #24]	; (8005a0c <vTaskInternalSetTimeOutState+0x24>)
 80059f2:	681a      	ldr	r2, [r3, #0]
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80059f8:	4b05      	ldr	r3, [pc, #20]	; (8005a10 <vTaskInternalSetTimeOutState+0x28>)
 80059fa:	681a      	ldr	r2, [r3, #0]
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	605a      	str	r2, [r3, #4]
}
 8005a00:	bf00      	nop
 8005a02:	370c      	adds	r7, #12
 8005a04:	46bd      	mov	sp, r7
 8005a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0a:	4770      	bx	lr
 8005a0c:	20000d74 	.word	0x20000d74
 8005a10:	20000d60 	.word	0x20000d60

08005a14 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b088      	sub	sp, #32
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
 8005a1c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d10a      	bne.n	8005a3a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a28:	f383 8811 	msr	BASEPRI, r3
 8005a2c:	f3bf 8f6f 	isb	sy
 8005a30:	f3bf 8f4f 	dsb	sy
 8005a34:	613b      	str	r3, [r7, #16]
}
 8005a36:	bf00      	nop
 8005a38:	e7fe      	b.n	8005a38 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d10a      	bne.n	8005a56 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a44:	f383 8811 	msr	BASEPRI, r3
 8005a48:	f3bf 8f6f 	isb	sy
 8005a4c:	f3bf 8f4f 	dsb	sy
 8005a50:	60fb      	str	r3, [r7, #12]
}
 8005a52:	bf00      	nop
 8005a54:	e7fe      	b.n	8005a54 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005a56:	f000 fecd 	bl	80067f4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005a5a:	4b1d      	ldr	r3, [pc, #116]	; (8005ad0 <xTaskCheckForTimeOut+0xbc>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	685b      	ldr	r3, [r3, #4]
 8005a64:	69ba      	ldr	r2, [r7, #24]
 8005a66:	1ad3      	subs	r3, r2, r3
 8005a68:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a72:	d102      	bne.n	8005a7a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005a74:	2300      	movs	r3, #0
 8005a76:	61fb      	str	r3, [r7, #28]
 8005a78:	e023      	b.n	8005ac2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681a      	ldr	r2, [r3, #0]
 8005a7e:	4b15      	ldr	r3, [pc, #84]	; (8005ad4 <xTaskCheckForTimeOut+0xc0>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	429a      	cmp	r2, r3
 8005a84:	d007      	beq.n	8005a96 <xTaskCheckForTimeOut+0x82>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	685b      	ldr	r3, [r3, #4]
 8005a8a:	69ba      	ldr	r2, [r7, #24]
 8005a8c:	429a      	cmp	r2, r3
 8005a8e:	d302      	bcc.n	8005a96 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005a90:	2301      	movs	r3, #1
 8005a92:	61fb      	str	r3, [r7, #28]
 8005a94:	e015      	b.n	8005ac2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	697a      	ldr	r2, [r7, #20]
 8005a9c:	429a      	cmp	r2, r3
 8005a9e:	d20b      	bcs.n	8005ab8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	681a      	ldr	r2, [r3, #0]
 8005aa4:	697b      	ldr	r3, [r7, #20]
 8005aa6:	1ad2      	subs	r2, r2, r3
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005aac:	6878      	ldr	r0, [r7, #4]
 8005aae:	f7ff ff9b 	bl	80059e8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	61fb      	str	r3, [r7, #28]
 8005ab6:	e004      	b.n	8005ac2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	2200      	movs	r2, #0
 8005abc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005abe:	2301      	movs	r3, #1
 8005ac0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005ac2:	f000 fec7 	bl	8006854 <vPortExitCritical>

	return xReturn;
 8005ac6:	69fb      	ldr	r3, [r7, #28]
}
 8005ac8:	4618      	mov	r0, r3
 8005aca:	3720      	adds	r7, #32
 8005acc:	46bd      	mov	sp, r7
 8005ace:	bd80      	pop	{r7, pc}
 8005ad0:	20000d60 	.word	0x20000d60
 8005ad4:	20000d74 	.word	0x20000d74

08005ad8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005ad8:	b480      	push	{r7}
 8005ada:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005adc:	4b03      	ldr	r3, [pc, #12]	; (8005aec <vTaskMissedYield+0x14>)
 8005ade:	2201      	movs	r2, #1
 8005ae0:	601a      	str	r2, [r3, #0]
}
 8005ae2:	bf00      	nop
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aea:	4770      	bx	lr
 8005aec:	20000d70 	.word	0x20000d70

08005af0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b082      	sub	sp, #8
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005af8:	f000 f852 	bl	8005ba0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005afc:	4b06      	ldr	r3, [pc, #24]	; (8005b18 <prvIdleTask+0x28>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	2b01      	cmp	r3, #1
 8005b02:	d9f9      	bls.n	8005af8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005b04:	4b05      	ldr	r3, [pc, #20]	; (8005b1c <prvIdleTask+0x2c>)
 8005b06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b0a:	601a      	str	r2, [r3, #0]
 8005b0c:	f3bf 8f4f 	dsb	sy
 8005b10:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005b14:	e7f0      	b.n	8005af8 <prvIdleTask+0x8>
 8005b16:	bf00      	nop
 8005b18:	2000088c 	.word	0x2000088c
 8005b1c:	e000ed04 	.word	0xe000ed04

08005b20 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b082      	sub	sp, #8
 8005b24:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005b26:	2300      	movs	r3, #0
 8005b28:	607b      	str	r3, [r7, #4]
 8005b2a:	e00c      	b.n	8005b46 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005b2c:	687a      	ldr	r2, [r7, #4]
 8005b2e:	4613      	mov	r3, r2
 8005b30:	009b      	lsls	r3, r3, #2
 8005b32:	4413      	add	r3, r2
 8005b34:	009b      	lsls	r3, r3, #2
 8005b36:	4a12      	ldr	r2, [pc, #72]	; (8005b80 <prvInitialiseTaskLists+0x60>)
 8005b38:	4413      	add	r3, r2
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	f7fe fb6e 	bl	800421c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	3301      	adds	r3, #1
 8005b44:	607b      	str	r3, [r7, #4]
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2b37      	cmp	r3, #55	; 0x37
 8005b4a:	d9ef      	bls.n	8005b2c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005b4c:	480d      	ldr	r0, [pc, #52]	; (8005b84 <prvInitialiseTaskLists+0x64>)
 8005b4e:	f7fe fb65 	bl	800421c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005b52:	480d      	ldr	r0, [pc, #52]	; (8005b88 <prvInitialiseTaskLists+0x68>)
 8005b54:	f7fe fb62 	bl	800421c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005b58:	480c      	ldr	r0, [pc, #48]	; (8005b8c <prvInitialiseTaskLists+0x6c>)
 8005b5a:	f7fe fb5f 	bl	800421c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005b5e:	480c      	ldr	r0, [pc, #48]	; (8005b90 <prvInitialiseTaskLists+0x70>)
 8005b60:	f7fe fb5c 	bl	800421c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005b64:	480b      	ldr	r0, [pc, #44]	; (8005b94 <prvInitialiseTaskLists+0x74>)
 8005b66:	f7fe fb59 	bl	800421c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005b6a:	4b0b      	ldr	r3, [pc, #44]	; (8005b98 <prvInitialiseTaskLists+0x78>)
 8005b6c:	4a05      	ldr	r2, [pc, #20]	; (8005b84 <prvInitialiseTaskLists+0x64>)
 8005b6e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005b70:	4b0a      	ldr	r3, [pc, #40]	; (8005b9c <prvInitialiseTaskLists+0x7c>)
 8005b72:	4a05      	ldr	r2, [pc, #20]	; (8005b88 <prvInitialiseTaskLists+0x68>)
 8005b74:	601a      	str	r2, [r3, #0]
}
 8005b76:	bf00      	nop
 8005b78:	3708      	adds	r7, #8
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bd80      	pop	{r7, pc}
 8005b7e:	bf00      	nop
 8005b80:	2000088c 	.word	0x2000088c
 8005b84:	20000cec 	.word	0x20000cec
 8005b88:	20000d00 	.word	0x20000d00
 8005b8c:	20000d1c 	.word	0x20000d1c
 8005b90:	20000d30 	.word	0x20000d30
 8005b94:	20000d48 	.word	0x20000d48
 8005b98:	20000d14 	.word	0x20000d14
 8005b9c:	20000d18 	.word	0x20000d18

08005ba0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b082      	sub	sp, #8
 8005ba4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005ba6:	e019      	b.n	8005bdc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005ba8:	f000 fe24 	bl	80067f4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005bac:	4b10      	ldr	r3, [pc, #64]	; (8005bf0 <prvCheckTasksWaitingTermination+0x50>)
 8005bae:	68db      	ldr	r3, [r3, #12]
 8005bb0:	68db      	ldr	r3, [r3, #12]
 8005bb2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	3304      	adds	r3, #4
 8005bb8:	4618      	mov	r0, r3
 8005bba:	f7fe fbb9 	bl	8004330 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005bbe:	4b0d      	ldr	r3, [pc, #52]	; (8005bf4 <prvCheckTasksWaitingTermination+0x54>)
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	3b01      	subs	r3, #1
 8005bc4:	4a0b      	ldr	r2, [pc, #44]	; (8005bf4 <prvCheckTasksWaitingTermination+0x54>)
 8005bc6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005bc8:	4b0b      	ldr	r3, [pc, #44]	; (8005bf8 <prvCheckTasksWaitingTermination+0x58>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	3b01      	subs	r3, #1
 8005bce:	4a0a      	ldr	r2, [pc, #40]	; (8005bf8 <prvCheckTasksWaitingTermination+0x58>)
 8005bd0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005bd2:	f000 fe3f 	bl	8006854 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005bd6:	6878      	ldr	r0, [r7, #4]
 8005bd8:	f000 f848 	bl	8005c6c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005bdc:	4b06      	ldr	r3, [pc, #24]	; (8005bf8 <prvCheckTasksWaitingTermination+0x58>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d1e1      	bne.n	8005ba8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005be4:	bf00      	nop
 8005be6:	bf00      	nop
 8005be8:	3708      	adds	r7, #8
 8005bea:	46bd      	mov	sp, r7
 8005bec:	bd80      	pop	{r7, pc}
 8005bee:	bf00      	nop
 8005bf0:	20000d30 	.word	0x20000d30
 8005bf4:	20000d5c 	.word	0x20000d5c
 8005bf8:	20000d44 	.word	0x20000d44

08005bfc <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 8005bfc:	b480      	push	{r7}
 8005bfe:	b085      	sub	sp, #20
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 8005c04:	2300      	movs	r3, #0
 8005c06:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8005c08:	e005      	b.n	8005c16 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	3301      	adds	r3, #1
 8005c0e:	607b      	str	r3, [r7, #4]
			ulCount++;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	3301      	adds	r3, #1
 8005c14:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	781b      	ldrb	r3, [r3, #0]
 8005c1a:	2ba5      	cmp	r3, #165	; 0xa5
 8005c1c:	d0f5      	beq.n	8005c0a <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	089b      	lsrs	r3, r3, #2
 8005c22:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	b29b      	uxth	r3, r3
	}
 8005c28:	4618      	mov	r0, r3
 8005c2a:	3714      	adds	r7, #20
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c32:	4770      	bx	lr

08005c34 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b086      	sub	sp, #24
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d102      	bne.n	8005c48 <uxTaskGetStackHighWaterMark+0x14>
 8005c42:	4b09      	ldr	r3, [pc, #36]	; (8005c68 <uxTaskGetStackHighWaterMark+0x34>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	e000      	b.n	8005c4a <uxTaskGetStackHighWaterMark+0x16>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 8005c4c:	697b      	ldr	r3, [r7, #20]
 8005c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c50:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 8005c52:	6938      	ldr	r0, [r7, #16]
 8005c54:	f7ff ffd2 	bl	8005bfc <prvTaskCheckFreeStackSpace>
 8005c58:	4603      	mov	r3, r0
 8005c5a:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
	}
 8005c5e:	4618      	mov	r0, r3
 8005c60:	3718      	adds	r7, #24
 8005c62:	46bd      	mov	sp, r7
 8005c64:	bd80      	pop	{r7, pc}
 8005c66:	bf00      	nop
 8005c68:	20000888 	.word	0x20000888

08005c6c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b084      	sub	sp, #16
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d108      	bne.n	8005c90 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c82:	4618      	mov	r0, r3
 8005c84:	f001 f804 	bl	8006c90 <vPortFree>
				vPortFree( pxTCB );
 8005c88:	6878      	ldr	r0, [r7, #4]
 8005c8a:	f001 f801 	bl	8006c90 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005c8e:	e018      	b.n	8005cc2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005c96:	2b01      	cmp	r3, #1
 8005c98:	d103      	bne.n	8005ca2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	f000 fff8 	bl	8006c90 <vPortFree>
	}
 8005ca0:	e00f      	b.n	8005cc2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005ca8:	2b02      	cmp	r3, #2
 8005caa:	d00a      	beq.n	8005cc2 <prvDeleteTCB+0x56>
	__asm volatile
 8005cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cb0:	f383 8811 	msr	BASEPRI, r3
 8005cb4:	f3bf 8f6f 	isb	sy
 8005cb8:	f3bf 8f4f 	dsb	sy
 8005cbc:	60fb      	str	r3, [r7, #12]
}
 8005cbe:	bf00      	nop
 8005cc0:	e7fe      	b.n	8005cc0 <prvDeleteTCB+0x54>
	}
 8005cc2:	bf00      	nop
 8005cc4:	3710      	adds	r7, #16
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bd80      	pop	{r7, pc}
	...

08005ccc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005ccc:	b480      	push	{r7}
 8005cce:	b083      	sub	sp, #12
 8005cd0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005cd2:	4b0c      	ldr	r3, [pc, #48]	; (8005d04 <prvResetNextTaskUnblockTime+0x38>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d104      	bne.n	8005ce6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005cdc:	4b0a      	ldr	r3, [pc, #40]	; (8005d08 <prvResetNextTaskUnblockTime+0x3c>)
 8005cde:	f04f 32ff 	mov.w	r2, #4294967295
 8005ce2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005ce4:	e008      	b.n	8005cf8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ce6:	4b07      	ldr	r3, [pc, #28]	; (8005d04 <prvResetNextTaskUnblockTime+0x38>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	68db      	ldr	r3, [r3, #12]
 8005cec:	68db      	ldr	r3, [r3, #12]
 8005cee:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	685b      	ldr	r3, [r3, #4]
 8005cf4:	4a04      	ldr	r2, [pc, #16]	; (8005d08 <prvResetNextTaskUnblockTime+0x3c>)
 8005cf6:	6013      	str	r3, [r2, #0]
}
 8005cf8:	bf00      	nop
 8005cfa:	370c      	adds	r7, #12
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d02:	4770      	bx	lr
 8005d04:	20000d14 	.word	0x20000d14
 8005d08:	20000d7c 	.word	0x20000d7c

08005d0c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005d0c:	b480      	push	{r7}
 8005d0e:	b083      	sub	sp, #12
 8005d10:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005d12:	4b0b      	ldr	r3, [pc, #44]	; (8005d40 <xTaskGetSchedulerState+0x34>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d102      	bne.n	8005d20 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	607b      	str	r3, [r7, #4]
 8005d1e:	e008      	b.n	8005d32 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d20:	4b08      	ldr	r3, [pc, #32]	; (8005d44 <xTaskGetSchedulerState+0x38>)
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d102      	bne.n	8005d2e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005d28:	2302      	movs	r3, #2
 8005d2a:	607b      	str	r3, [r7, #4]
 8005d2c:	e001      	b.n	8005d32 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005d2e:	2300      	movs	r3, #0
 8005d30:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005d32:	687b      	ldr	r3, [r7, #4]
	}
 8005d34:	4618      	mov	r0, r3
 8005d36:	370c      	adds	r7, #12
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3e:	4770      	bx	lr
 8005d40:	20000d68 	.word	0x20000d68
 8005d44:	20000d84 	.word	0x20000d84

08005d48 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b086      	sub	sp, #24
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005d54:	2300      	movs	r3, #0
 8005d56:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d05b      	beq.n	8005e16 <xTaskPriorityDisinherit+0xce>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005d5e:	4b30      	ldr	r3, [pc, #192]	; (8005e20 <xTaskPriorityDisinherit+0xd8>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	693a      	ldr	r2, [r7, #16]
 8005d64:	429a      	cmp	r2, r3
 8005d66:	d00a      	beq.n	8005d7e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005d68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d6c:	f383 8811 	msr	BASEPRI, r3
 8005d70:	f3bf 8f6f 	isb	sy
 8005d74:	f3bf 8f4f 	dsb	sy
 8005d78:	60fb      	str	r3, [r7, #12]
}
 8005d7a:	bf00      	nop
 8005d7c:	e7fe      	b.n	8005d7c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005d7e:	693b      	ldr	r3, [r7, #16]
 8005d80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d10a      	bne.n	8005d9c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005d86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d8a:	f383 8811 	msr	BASEPRI, r3
 8005d8e:	f3bf 8f6f 	isb	sy
 8005d92:	f3bf 8f4f 	dsb	sy
 8005d96:	60bb      	str	r3, [r7, #8]
}
 8005d98:	bf00      	nop
 8005d9a:	e7fe      	b.n	8005d9a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005d9c:	693b      	ldr	r3, [r7, #16]
 8005d9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005da0:	1e5a      	subs	r2, r3, #1
 8005da2:	693b      	ldr	r3, [r7, #16]
 8005da4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005da6:	693b      	ldr	r3, [r7, #16]
 8005da8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005daa:	693b      	ldr	r3, [r7, #16]
 8005dac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005dae:	429a      	cmp	r2, r3
 8005db0:	d031      	beq.n	8005e16 <xTaskPriorityDisinherit+0xce>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005db2:	693b      	ldr	r3, [r7, #16]
 8005db4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d12d      	bne.n	8005e16 <xTaskPriorityDisinherit+0xce>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005dba:	693b      	ldr	r3, [r7, #16]
 8005dbc:	3304      	adds	r3, #4
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	f7fe fab6 	bl	8004330 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	4619      	mov	r1, r3
 8005dc8:	204a      	movs	r0, #74	; 0x4a
 8005dca:	f001 fe73 	bl	8007ab4 <SEGGER_SYSVIEW_RecordU32>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005dce:	693b      	ldr	r3, [r7, #16]
 8005dd0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005dd2:	693b      	ldr	r3, [r7, #16]
 8005dd4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005dd6:	693b      	ldr	r3, [r7, #16]
 8005dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dda:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005dde:	693b      	ldr	r3, [r7, #16]
 8005de0:	619a      	str	r2, [r3, #24]
					prvReaddTaskToReadyList( pxTCB );
 8005de2:	693b      	ldr	r3, [r7, #16]
 8005de4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005de6:	4b0f      	ldr	r3, [pc, #60]	; (8005e24 <xTaskPriorityDisinherit+0xdc>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	429a      	cmp	r2, r3
 8005dec:	d903      	bls.n	8005df6 <xTaskPriorityDisinherit+0xae>
 8005dee:	693b      	ldr	r3, [r7, #16]
 8005df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005df2:	4a0c      	ldr	r2, [pc, #48]	; (8005e24 <xTaskPriorityDisinherit+0xdc>)
 8005df4:	6013      	str	r3, [r2, #0]
 8005df6:	693b      	ldr	r3, [r7, #16]
 8005df8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dfa:	4613      	mov	r3, r2
 8005dfc:	009b      	lsls	r3, r3, #2
 8005dfe:	4413      	add	r3, r2
 8005e00:	009b      	lsls	r3, r3, #2
 8005e02:	4a09      	ldr	r2, [pc, #36]	; (8005e28 <xTaskPriorityDisinherit+0xe0>)
 8005e04:	441a      	add	r2, r3
 8005e06:	693b      	ldr	r3, [r7, #16]
 8005e08:	3304      	adds	r3, #4
 8005e0a:	4619      	mov	r1, r3
 8005e0c:	4610      	mov	r0, r2
 8005e0e:	f7fe fa32 	bl	8004276 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005e12:	2301      	movs	r3, #1
 8005e14:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005e16:	697b      	ldr	r3, [r7, #20]
	}
 8005e18:	4618      	mov	r0, r3
 8005e1a:	3718      	adds	r7, #24
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	bd80      	pop	{r7, pc}
 8005e20:	20000888 	.word	0x20000888
 8005e24:	20000d64 	.word	0x20000d64
 8005e28:	2000088c 	.word	0x2000088c

08005e2c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b084      	sub	sp, #16
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
 8005e34:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005e36:	4b2a      	ldr	r3, [pc, #168]	; (8005ee0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005e3c:	4b29      	ldr	r3, [pc, #164]	; (8005ee4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	3304      	adds	r3, #4
 8005e42:	4618      	mov	r0, r3
 8005e44:	f7fe fa74 	bl	8004330 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e4e:	d110      	bne.n	8005e72 <prvAddCurrentTaskToDelayedList+0x46>
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d00d      	beq.n	8005e72 <prvAddCurrentTaskToDelayedList+0x46>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
      traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8005e56:	4b23      	ldr	r3, [pc, #140]	; (8005ee4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	211b      	movs	r1, #27
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	f002 fbf5 	bl	800864c <SEGGER_SYSVIEW_OnTaskStopReady>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005e62:	4b20      	ldr	r3, [pc, #128]	; (8005ee4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	3304      	adds	r3, #4
 8005e68:	4619      	mov	r1, r3
 8005e6a:	481f      	ldr	r0, [pc, #124]	; (8005ee8 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005e6c:	f7fe fa03 	bl	8004276 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005e70:	e032      	b.n	8005ed8 <prvAddCurrentTaskToDelayedList+0xac>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005e72:	68fa      	ldr	r2, [r7, #12]
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	4413      	add	r3, r2
 8005e78:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005e7a:	4b1a      	ldr	r3, [pc, #104]	; (8005ee4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	68ba      	ldr	r2, [r7, #8]
 8005e80:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005e82:	68ba      	ldr	r2, [r7, #8]
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	429a      	cmp	r2, r3
 8005e88:	d20f      	bcs.n	8005eaa <prvAddCurrentTaskToDelayedList+0x7e>
        traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8005e8a:	4b16      	ldr	r3, [pc, #88]	; (8005ee4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	2104      	movs	r1, #4
 8005e90:	4618      	mov	r0, r3
 8005e92:	f002 fbdb 	bl	800864c <SEGGER_SYSVIEW_OnTaskStopReady>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005e96:	4b15      	ldr	r3, [pc, #84]	; (8005eec <prvAddCurrentTaskToDelayedList+0xc0>)
 8005e98:	681a      	ldr	r2, [r3, #0]
 8005e9a:	4b12      	ldr	r3, [pc, #72]	; (8005ee4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	3304      	adds	r3, #4
 8005ea0:	4619      	mov	r1, r3
 8005ea2:	4610      	mov	r0, r2
 8005ea4:	f7fe fa0b 	bl	80042be <vListInsert>
}
 8005ea8:	e016      	b.n	8005ed8 <prvAddCurrentTaskToDelayedList+0xac>
        traceMOVED_TASK_TO_DELAYED_LIST();
 8005eaa:	4b0e      	ldr	r3, [pc, #56]	; (8005ee4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	2104      	movs	r1, #4
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	f002 fbcb 	bl	800864c <SEGGER_SYSVIEW_OnTaskStopReady>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005eb6:	4b0e      	ldr	r3, [pc, #56]	; (8005ef0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005eb8:	681a      	ldr	r2, [r3, #0]
 8005eba:	4b0a      	ldr	r3, [pc, #40]	; (8005ee4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	3304      	adds	r3, #4
 8005ec0:	4619      	mov	r1, r3
 8005ec2:	4610      	mov	r0, r2
 8005ec4:	f7fe f9fb 	bl	80042be <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005ec8:	4b0a      	ldr	r3, [pc, #40]	; (8005ef4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	68ba      	ldr	r2, [r7, #8]
 8005ece:	429a      	cmp	r2, r3
 8005ed0:	d202      	bcs.n	8005ed8 <prvAddCurrentTaskToDelayedList+0xac>
					xNextTaskUnblockTime = xTimeToWake;
 8005ed2:	4a08      	ldr	r2, [pc, #32]	; (8005ef4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	6013      	str	r3, [r2, #0]
}
 8005ed8:	bf00      	nop
 8005eda:	3710      	adds	r7, #16
 8005edc:	46bd      	mov	sp, r7
 8005ede:	bd80      	pop	{r7, pc}
 8005ee0:	20000d60 	.word	0x20000d60
 8005ee4:	20000888 	.word	0x20000888
 8005ee8:	20000d48 	.word	0x20000d48
 8005eec:	20000d18 	.word	0x20000d18
 8005ef0:	20000d14 	.word	0x20000d14
 8005ef4:	20000d7c 	.word	0x20000d7c

08005ef8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b08a      	sub	sp, #40	; 0x28
 8005efc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005efe:	2300      	movs	r3, #0
 8005f00:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005f02:	f000 fb07 	bl	8006514 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005f06:	4b1c      	ldr	r3, [pc, #112]	; (8005f78 <xTimerCreateTimerTask+0x80>)
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d021      	beq.n	8005f52 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005f0e:	2300      	movs	r3, #0
 8005f10:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005f12:	2300      	movs	r3, #0
 8005f14:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005f16:	1d3a      	adds	r2, r7, #4
 8005f18:	f107 0108 	add.w	r1, r7, #8
 8005f1c:	f107 030c 	add.w	r3, r7, #12
 8005f20:	4618      	mov	r0, r3
 8005f22:	f7fe f961 	bl	80041e8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005f26:	6879      	ldr	r1, [r7, #4]
 8005f28:	68bb      	ldr	r3, [r7, #8]
 8005f2a:	68fa      	ldr	r2, [r7, #12]
 8005f2c:	9202      	str	r2, [sp, #8]
 8005f2e:	9301      	str	r3, [sp, #4]
 8005f30:	2302      	movs	r3, #2
 8005f32:	9300      	str	r3, [sp, #0]
 8005f34:	2300      	movs	r3, #0
 8005f36:	460a      	mov	r2, r1
 8005f38:	4910      	ldr	r1, [pc, #64]	; (8005f7c <xTimerCreateTimerTask+0x84>)
 8005f3a:	4811      	ldr	r0, [pc, #68]	; (8005f80 <xTimerCreateTimerTask+0x88>)
 8005f3c:	f7ff f826 	bl	8004f8c <xTaskCreateStatic>
 8005f40:	4603      	mov	r3, r0
 8005f42:	4a10      	ldr	r2, [pc, #64]	; (8005f84 <xTimerCreateTimerTask+0x8c>)
 8005f44:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005f46:	4b0f      	ldr	r3, [pc, #60]	; (8005f84 <xTimerCreateTimerTask+0x8c>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d001      	beq.n	8005f52 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005f4e:	2301      	movs	r3, #1
 8005f50:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005f52:	697b      	ldr	r3, [r7, #20]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d10a      	bne.n	8005f6e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005f58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f5c:	f383 8811 	msr	BASEPRI, r3
 8005f60:	f3bf 8f6f 	isb	sy
 8005f64:	f3bf 8f4f 	dsb	sy
 8005f68:	613b      	str	r3, [r7, #16]
}
 8005f6a:	bf00      	nop
 8005f6c:	e7fe      	b.n	8005f6c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005f6e:	697b      	ldr	r3, [r7, #20]
}
 8005f70:	4618      	mov	r0, r3
 8005f72:	3718      	adds	r7, #24
 8005f74:	46bd      	mov	sp, r7
 8005f76:	bd80      	pop	{r7, pc}
 8005f78:	20000db8 	.word	0x20000db8
 8005f7c:	0800939c 	.word	0x0800939c
 8005f80:	080060bd 	.word	0x080060bd
 8005f84:	20000dbc 	.word	0x20000dbc

08005f88 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b08a      	sub	sp, #40	; 0x28
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	60f8      	str	r0, [r7, #12]
 8005f90:	60b9      	str	r1, [r7, #8]
 8005f92:	607a      	str	r2, [r7, #4]
 8005f94:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005f96:	2300      	movs	r3, #0
 8005f98:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d10a      	bne.n	8005fb6 <xTimerGenericCommand+0x2e>
	__asm volatile
 8005fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fa4:	f383 8811 	msr	BASEPRI, r3
 8005fa8:	f3bf 8f6f 	isb	sy
 8005fac:	f3bf 8f4f 	dsb	sy
 8005fb0:	623b      	str	r3, [r7, #32]
}
 8005fb2:	bf00      	nop
 8005fb4:	e7fe      	b.n	8005fb4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005fb6:	4b1a      	ldr	r3, [pc, #104]	; (8006020 <xTimerGenericCommand+0x98>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d02a      	beq.n	8006014 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	2b05      	cmp	r3, #5
 8005fce:	dc18      	bgt.n	8006002 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005fd0:	f7ff fe9c 	bl	8005d0c <xTaskGetSchedulerState>
 8005fd4:	4603      	mov	r3, r0
 8005fd6:	2b02      	cmp	r3, #2
 8005fd8:	d109      	bne.n	8005fee <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005fda:	4b11      	ldr	r3, [pc, #68]	; (8006020 <xTimerGenericCommand+0x98>)
 8005fdc:	6818      	ldr	r0, [r3, #0]
 8005fde:	f107 0110 	add.w	r1, r7, #16
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fe6:	f7fe fad7 	bl	8004598 <xQueueGenericSend>
 8005fea:	6278      	str	r0, [r7, #36]	; 0x24
 8005fec:	e012      	b.n	8006014 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005fee:	4b0c      	ldr	r3, [pc, #48]	; (8006020 <xTimerGenericCommand+0x98>)
 8005ff0:	6818      	ldr	r0, [r3, #0]
 8005ff2:	f107 0110 	add.w	r1, r7, #16
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	f7fe facd 	bl	8004598 <xQueueGenericSend>
 8005ffe:	6278      	str	r0, [r7, #36]	; 0x24
 8006000:	e008      	b.n	8006014 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006002:	4b07      	ldr	r3, [pc, #28]	; (8006020 <xTimerGenericCommand+0x98>)
 8006004:	6818      	ldr	r0, [r3, #0]
 8006006:	f107 0110 	add.w	r1, r7, #16
 800600a:	2300      	movs	r3, #0
 800600c:	683a      	ldr	r2, [r7, #0]
 800600e:	f7fe fbe9 	bl	80047e4 <xQueueGenericSendFromISR>
 8006012:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006016:	4618      	mov	r0, r3
 8006018:	3728      	adds	r7, #40	; 0x28
 800601a:	46bd      	mov	sp, r7
 800601c:	bd80      	pop	{r7, pc}
 800601e:	bf00      	nop
 8006020:	20000db8 	.word	0x20000db8

08006024 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b088      	sub	sp, #32
 8006028:	af02      	add	r7, sp, #8
 800602a:	6078      	str	r0, [r7, #4]
 800602c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800602e:	4b22      	ldr	r3, [pc, #136]	; (80060b8 <prvProcessExpiredTimer+0x94>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	68db      	ldr	r3, [r3, #12]
 8006034:	68db      	ldr	r3, [r3, #12]
 8006036:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006038:	697b      	ldr	r3, [r7, #20]
 800603a:	3304      	adds	r3, #4
 800603c:	4618      	mov	r0, r3
 800603e:	f7fe f977 	bl	8004330 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006042:	697b      	ldr	r3, [r7, #20]
 8006044:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006048:	f003 0304 	and.w	r3, r3, #4
 800604c:	2b00      	cmp	r3, #0
 800604e:	d022      	beq.n	8006096 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006050:	697b      	ldr	r3, [r7, #20]
 8006052:	699a      	ldr	r2, [r3, #24]
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	18d1      	adds	r1, r2, r3
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	683a      	ldr	r2, [r7, #0]
 800605c:	6978      	ldr	r0, [r7, #20]
 800605e:	f000 f8d1 	bl	8006204 <prvInsertTimerInActiveList>
 8006062:	4603      	mov	r3, r0
 8006064:	2b00      	cmp	r3, #0
 8006066:	d01f      	beq.n	80060a8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006068:	2300      	movs	r3, #0
 800606a:	9300      	str	r3, [sp, #0]
 800606c:	2300      	movs	r3, #0
 800606e:	687a      	ldr	r2, [r7, #4]
 8006070:	2100      	movs	r1, #0
 8006072:	6978      	ldr	r0, [r7, #20]
 8006074:	f7ff ff88 	bl	8005f88 <xTimerGenericCommand>
 8006078:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800607a:	693b      	ldr	r3, [r7, #16]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d113      	bne.n	80060a8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8006080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006084:	f383 8811 	msr	BASEPRI, r3
 8006088:	f3bf 8f6f 	isb	sy
 800608c:	f3bf 8f4f 	dsb	sy
 8006090:	60fb      	str	r3, [r7, #12]
}
 8006092:	bf00      	nop
 8006094:	e7fe      	b.n	8006094 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006096:	697b      	ldr	r3, [r7, #20]
 8006098:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800609c:	f023 0301 	bic.w	r3, r3, #1
 80060a0:	b2da      	uxtb	r2, r3
 80060a2:	697b      	ldr	r3, [r7, #20]
 80060a4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80060a8:	697b      	ldr	r3, [r7, #20]
 80060aa:	6a1b      	ldr	r3, [r3, #32]
 80060ac:	6978      	ldr	r0, [r7, #20]
 80060ae:	4798      	blx	r3
}
 80060b0:	bf00      	nop
 80060b2:	3718      	adds	r7, #24
 80060b4:	46bd      	mov	sp, r7
 80060b6:	bd80      	pop	{r7, pc}
 80060b8:	20000db0 	.word	0x20000db0

080060bc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b084      	sub	sp, #16
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80060c4:	f107 0308 	add.w	r3, r7, #8
 80060c8:	4618      	mov	r0, r3
 80060ca:	f000 f857 	bl	800617c <prvGetNextExpireTime>
 80060ce:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	4619      	mov	r1, r3
 80060d4:	68f8      	ldr	r0, [r7, #12]
 80060d6:	f000 f803 	bl	80060e0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80060da:	f000 f8d5 	bl	8006288 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80060de:	e7f1      	b.n	80060c4 <prvTimerTask+0x8>

080060e0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b084      	sub	sp, #16
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
 80060e8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80060ea:	f7ff f9c3 	bl	8005474 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80060ee:	f107 0308 	add.w	r3, r7, #8
 80060f2:	4618      	mov	r0, r3
 80060f4:	f000 f866 	bl	80061c4 <prvSampleTimeNow>
 80060f8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d130      	bne.n	8006162 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d10a      	bne.n	800611c <prvProcessTimerOrBlockTask+0x3c>
 8006106:	687a      	ldr	r2, [r7, #4]
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	429a      	cmp	r2, r3
 800610c:	d806      	bhi.n	800611c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800610e:	f7ff f9bf 	bl	8005490 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006112:	68f9      	ldr	r1, [r7, #12]
 8006114:	6878      	ldr	r0, [r7, #4]
 8006116:	f7ff ff85 	bl	8006024 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800611a:	e024      	b.n	8006166 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d008      	beq.n	8006134 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006122:	4b13      	ldr	r3, [pc, #76]	; (8006170 <prvProcessTimerOrBlockTask+0x90>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d101      	bne.n	8006130 <prvProcessTimerOrBlockTask+0x50>
 800612c:	2301      	movs	r3, #1
 800612e:	e000      	b.n	8006132 <prvProcessTimerOrBlockTask+0x52>
 8006130:	2300      	movs	r3, #0
 8006132:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006134:	4b0f      	ldr	r3, [pc, #60]	; (8006174 <prvProcessTimerOrBlockTask+0x94>)
 8006136:	6818      	ldr	r0, [r3, #0]
 8006138:	687a      	ldr	r2, [r7, #4]
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	1ad3      	subs	r3, r2, r3
 800613e:	683a      	ldr	r2, [r7, #0]
 8006140:	4619      	mov	r1, r3
 8006142:	f7fe feef 	bl	8004f24 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006146:	f7ff f9a3 	bl	8005490 <xTaskResumeAll>
 800614a:	4603      	mov	r3, r0
 800614c:	2b00      	cmp	r3, #0
 800614e:	d10a      	bne.n	8006166 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006150:	4b09      	ldr	r3, [pc, #36]	; (8006178 <prvProcessTimerOrBlockTask+0x98>)
 8006152:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006156:	601a      	str	r2, [r3, #0]
 8006158:	f3bf 8f4f 	dsb	sy
 800615c:	f3bf 8f6f 	isb	sy
}
 8006160:	e001      	b.n	8006166 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006162:	f7ff f995 	bl	8005490 <xTaskResumeAll>
}
 8006166:	bf00      	nop
 8006168:	3710      	adds	r7, #16
 800616a:	46bd      	mov	sp, r7
 800616c:	bd80      	pop	{r7, pc}
 800616e:	bf00      	nop
 8006170:	20000db4 	.word	0x20000db4
 8006174:	20000db8 	.word	0x20000db8
 8006178:	e000ed04 	.word	0xe000ed04

0800617c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800617c:	b480      	push	{r7}
 800617e:	b085      	sub	sp, #20
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006184:	4b0e      	ldr	r3, [pc, #56]	; (80061c0 <prvGetNextExpireTime+0x44>)
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d101      	bne.n	8006192 <prvGetNextExpireTime+0x16>
 800618e:	2201      	movs	r2, #1
 8006190:	e000      	b.n	8006194 <prvGetNextExpireTime+0x18>
 8006192:	2200      	movs	r2, #0
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d105      	bne.n	80061ac <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80061a0:	4b07      	ldr	r3, [pc, #28]	; (80061c0 <prvGetNextExpireTime+0x44>)
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	68db      	ldr	r3, [r3, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	60fb      	str	r3, [r7, #12]
 80061aa:	e001      	b.n	80061b0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80061ac:	2300      	movs	r3, #0
 80061ae:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80061b0:	68fb      	ldr	r3, [r7, #12]
}
 80061b2:	4618      	mov	r0, r3
 80061b4:	3714      	adds	r7, #20
 80061b6:	46bd      	mov	sp, r7
 80061b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061bc:	4770      	bx	lr
 80061be:	bf00      	nop
 80061c0:	20000db0 	.word	0x20000db0

080061c4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b084      	sub	sp, #16
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80061cc:	f7ff fa02 	bl	80055d4 <xTaskGetTickCount>
 80061d0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80061d2:	4b0b      	ldr	r3, [pc, #44]	; (8006200 <prvSampleTimeNow+0x3c>)
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	68fa      	ldr	r2, [r7, #12]
 80061d8:	429a      	cmp	r2, r3
 80061da:	d205      	bcs.n	80061e8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80061dc:	f000 f936 	bl	800644c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2201      	movs	r2, #1
 80061e4:	601a      	str	r2, [r3, #0]
 80061e6:	e002      	b.n	80061ee <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2200      	movs	r2, #0
 80061ec:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80061ee:	4a04      	ldr	r2, [pc, #16]	; (8006200 <prvSampleTimeNow+0x3c>)
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80061f4:	68fb      	ldr	r3, [r7, #12]
}
 80061f6:	4618      	mov	r0, r3
 80061f8:	3710      	adds	r7, #16
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bd80      	pop	{r7, pc}
 80061fe:	bf00      	nop
 8006200:	20000dc0 	.word	0x20000dc0

08006204 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b086      	sub	sp, #24
 8006208:	af00      	add	r7, sp, #0
 800620a:	60f8      	str	r0, [r7, #12]
 800620c:	60b9      	str	r1, [r7, #8]
 800620e:	607a      	str	r2, [r7, #4]
 8006210:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006212:	2300      	movs	r3, #0
 8006214:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	68ba      	ldr	r2, [r7, #8]
 800621a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	68fa      	ldr	r2, [r7, #12]
 8006220:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006222:	68ba      	ldr	r2, [r7, #8]
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	429a      	cmp	r2, r3
 8006228:	d812      	bhi.n	8006250 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800622a:	687a      	ldr	r2, [r7, #4]
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	1ad2      	subs	r2, r2, r3
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	699b      	ldr	r3, [r3, #24]
 8006234:	429a      	cmp	r2, r3
 8006236:	d302      	bcc.n	800623e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006238:	2301      	movs	r3, #1
 800623a:	617b      	str	r3, [r7, #20]
 800623c:	e01b      	b.n	8006276 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800623e:	4b10      	ldr	r3, [pc, #64]	; (8006280 <prvInsertTimerInActiveList+0x7c>)
 8006240:	681a      	ldr	r2, [r3, #0]
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	3304      	adds	r3, #4
 8006246:	4619      	mov	r1, r3
 8006248:	4610      	mov	r0, r2
 800624a:	f7fe f838 	bl	80042be <vListInsert>
 800624e:	e012      	b.n	8006276 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006250:	687a      	ldr	r2, [r7, #4]
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	429a      	cmp	r2, r3
 8006256:	d206      	bcs.n	8006266 <prvInsertTimerInActiveList+0x62>
 8006258:	68ba      	ldr	r2, [r7, #8]
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	429a      	cmp	r2, r3
 800625e:	d302      	bcc.n	8006266 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006260:	2301      	movs	r3, #1
 8006262:	617b      	str	r3, [r7, #20]
 8006264:	e007      	b.n	8006276 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006266:	4b07      	ldr	r3, [pc, #28]	; (8006284 <prvInsertTimerInActiveList+0x80>)
 8006268:	681a      	ldr	r2, [r3, #0]
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	3304      	adds	r3, #4
 800626e:	4619      	mov	r1, r3
 8006270:	4610      	mov	r0, r2
 8006272:	f7fe f824 	bl	80042be <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006276:	697b      	ldr	r3, [r7, #20]
}
 8006278:	4618      	mov	r0, r3
 800627a:	3718      	adds	r7, #24
 800627c:	46bd      	mov	sp, r7
 800627e:	bd80      	pop	{r7, pc}
 8006280:	20000db4 	.word	0x20000db4
 8006284:	20000db0 	.word	0x20000db0

08006288 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b08e      	sub	sp, #56	; 0x38
 800628c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800628e:	e0ca      	b.n	8006426 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2b00      	cmp	r3, #0
 8006294:	da18      	bge.n	80062c8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006296:	1d3b      	adds	r3, r7, #4
 8006298:	3304      	adds	r3, #4
 800629a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800629c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d10a      	bne.n	80062b8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80062a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062a6:	f383 8811 	msr	BASEPRI, r3
 80062aa:	f3bf 8f6f 	isb	sy
 80062ae:	f3bf 8f4f 	dsb	sy
 80062b2:	61fb      	str	r3, [r7, #28]
}
 80062b4:	bf00      	nop
 80062b6:	e7fe      	b.n	80062b6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80062b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80062be:	6850      	ldr	r0, [r2, #4]
 80062c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80062c2:	6892      	ldr	r2, [r2, #8]
 80062c4:	4611      	mov	r1, r2
 80062c6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	f2c0 80ab 	blt.w	8006426 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80062d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062d6:	695b      	ldr	r3, [r3, #20]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d004      	beq.n	80062e6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80062dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062de:	3304      	adds	r3, #4
 80062e0:	4618      	mov	r0, r3
 80062e2:	f7fe f825 	bl	8004330 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80062e6:	463b      	mov	r3, r7
 80062e8:	4618      	mov	r0, r3
 80062ea:	f7ff ff6b 	bl	80061c4 <prvSampleTimeNow>
 80062ee:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2b09      	cmp	r3, #9
 80062f4:	f200 8096 	bhi.w	8006424 <prvProcessReceivedCommands+0x19c>
 80062f8:	a201      	add	r2, pc, #4	; (adr r2, 8006300 <prvProcessReceivedCommands+0x78>)
 80062fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062fe:	bf00      	nop
 8006300:	08006329 	.word	0x08006329
 8006304:	08006329 	.word	0x08006329
 8006308:	08006329 	.word	0x08006329
 800630c:	0800639d 	.word	0x0800639d
 8006310:	080063b1 	.word	0x080063b1
 8006314:	080063fb 	.word	0x080063fb
 8006318:	08006329 	.word	0x08006329
 800631c:	08006329 	.word	0x08006329
 8006320:	0800639d 	.word	0x0800639d
 8006324:	080063b1 	.word	0x080063b1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800632a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800632e:	f043 0301 	orr.w	r3, r3, #1
 8006332:	b2da      	uxtb	r2, r3
 8006334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006336:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800633a:	68ba      	ldr	r2, [r7, #8]
 800633c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800633e:	699b      	ldr	r3, [r3, #24]
 8006340:	18d1      	adds	r1, r2, r3
 8006342:	68bb      	ldr	r3, [r7, #8]
 8006344:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006346:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006348:	f7ff ff5c 	bl	8006204 <prvInsertTimerInActiveList>
 800634c:	4603      	mov	r3, r0
 800634e:	2b00      	cmp	r3, #0
 8006350:	d069      	beq.n	8006426 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006354:	6a1b      	ldr	r3, [r3, #32]
 8006356:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006358:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800635a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800635c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006360:	f003 0304 	and.w	r3, r3, #4
 8006364:	2b00      	cmp	r3, #0
 8006366:	d05e      	beq.n	8006426 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006368:	68ba      	ldr	r2, [r7, #8]
 800636a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800636c:	699b      	ldr	r3, [r3, #24]
 800636e:	441a      	add	r2, r3
 8006370:	2300      	movs	r3, #0
 8006372:	9300      	str	r3, [sp, #0]
 8006374:	2300      	movs	r3, #0
 8006376:	2100      	movs	r1, #0
 8006378:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800637a:	f7ff fe05 	bl	8005f88 <xTimerGenericCommand>
 800637e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006380:	6a3b      	ldr	r3, [r7, #32]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d14f      	bne.n	8006426 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8006386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800638a:	f383 8811 	msr	BASEPRI, r3
 800638e:	f3bf 8f6f 	isb	sy
 8006392:	f3bf 8f4f 	dsb	sy
 8006396:	61bb      	str	r3, [r7, #24]
}
 8006398:	bf00      	nop
 800639a:	e7fe      	b.n	800639a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800639c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800639e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80063a2:	f023 0301 	bic.w	r3, r3, #1
 80063a6:	b2da      	uxtb	r2, r3
 80063a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80063ae:	e03a      	b.n	8006426 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80063b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80063b6:	f043 0301 	orr.w	r3, r3, #1
 80063ba:	b2da      	uxtb	r2, r3
 80063bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80063c2:	68ba      	ldr	r2, [r7, #8]
 80063c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063c6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80063c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063ca:	699b      	ldr	r3, [r3, #24]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d10a      	bne.n	80063e6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80063d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063d4:	f383 8811 	msr	BASEPRI, r3
 80063d8:	f3bf 8f6f 	isb	sy
 80063dc:	f3bf 8f4f 	dsb	sy
 80063e0:	617b      	str	r3, [r7, #20]
}
 80063e2:	bf00      	nop
 80063e4:	e7fe      	b.n	80063e4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80063e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063e8:	699a      	ldr	r2, [r3, #24]
 80063ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ec:	18d1      	adds	r1, r2, r3
 80063ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80063f4:	f7ff ff06 	bl	8006204 <prvInsertTimerInActiveList>
					break;
 80063f8:	e015      	b.n	8006426 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80063fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006400:	f003 0302 	and.w	r3, r3, #2
 8006404:	2b00      	cmp	r3, #0
 8006406:	d103      	bne.n	8006410 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8006408:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800640a:	f000 fc41 	bl	8006c90 <vPortFree>
 800640e:	e00a      	b.n	8006426 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006412:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006416:	f023 0301 	bic.w	r3, r3, #1
 800641a:	b2da      	uxtb	r2, r3
 800641c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800641e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006422:	e000      	b.n	8006426 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8006424:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006426:	4b08      	ldr	r3, [pc, #32]	; (8006448 <prvProcessReceivedCommands+0x1c0>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	1d39      	adds	r1, r7, #4
 800642c:	2200      	movs	r2, #0
 800642e:	4618      	mov	r0, r3
 8006430:	f7fe fa88 	bl	8004944 <xQueueReceive>
 8006434:	4603      	mov	r3, r0
 8006436:	2b00      	cmp	r3, #0
 8006438:	f47f af2a 	bne.w	8006290 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800643c:	bf00      	nop
 800643e:	bf00      	nop
 8006440:	3730      	adds	r7, #48	; 0x30
 8006442:	46bd      	mov	sp, r7
 8006444:	bd80      	pop	{r7, pc}
 8006446:	bf00      	nop
 8006448:	20000db8 	.word	0x20000db8

0800644c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800644c:	b580      	push	{r7, lr}
 800644e:	b088      	sub	sp, #32
 8006450:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006452:	e048      	b.n	80064e6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006454:	4b2d      	ldr	r3, [pc, #180]	; (800650c <prvSwitchTimerLists+0xc0>)
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	68db      	ldr	r3, [r3, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800645e:	4b2b      	ldr	r3, [pc, #172]	; (800650c <prvSwitchTimerLists+0xc0>)
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	68db      	ldr	r3, [r3, #12]
 8006464:	68db      	ldr	r3, [r3, #12]
 8006466:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	3304      	adds	r3, #4
 800646c:	4618      	mov	r0, r3
 800646e:	f7fd ff5f 	bl	8004330 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	6a1b      	ldr	r3, [r3, #32]
 8006476:	68f8      	ldr	r0, [r7, #12]
 8006478:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006480:	f003 0304 	and.w	r3, r3, #4
 8006484:	2b00      	cmp	r3, #0
 8006486:	d02e      	beq.n	80064e6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	699b      	ldr	r3, [r3, #24]
 800648c:	693a      	ldr	r2, [r7, #16]
 800648e:	4413      	add	r3, r2
 8006490:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006492:	68ba      	ldr	r2, [r7, #8]
 8006494:	693b      	ldr	r3, [r7, #16]
 8006496:	429a      	cmp	r2, r3
 8006498:	d90e      	bls.n	80064b8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	68ba      	ldr	r2, [r7, #8]
 800649e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	68fa      	ldr	r2, [r7, #12]
 80064a4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80064a6:	4b19      	ldr	r3, [pc, #100]	; (800650c <prvSwitchTimerLists+0xc0>)
 80064a8:	681a      	ldr	r2, [r3, #0]
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	3304      	adds	r3, #4
 80064ae:	4619      	mov	r1, r3
 80064b0:	4610      	mov	r0, r2
 80064b2:	f7fd ff04 	bl	80042be <vListInsert>
 80064b6:	e016      	b.n	80064e6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80064b8:	2300      	movs	r3, #0
 80064ba:	9300      	str	r3, [sp, #0]
 80064bc:	2300      	movs	r3, #0
 80064be:	693a      	ldr	r2, [r7, #16]
 80064c0:	2100      	movs	r1, #0
 80064c2:	68f8      	ldr	r0, [r7, #12]
 80064c4:	f7ff fd60 	bl	8005f88 <xTimerGenericCommand>
 80064c8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d10a      	bne.n	80064e6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80064d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064d4:	f383 8811 	msr	BASEPRI, r3
 80064d8:	f3bf 8f6f 	isb	sy
 80064dc:	f3bf 8f4f 	dsb	sy
 80064e0:	603b      	str	r3, [r7, #0]
}
 80064e2:	bf00      	nop
 80064e4:	e7fe      	b.n	80064e4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80064e6:	4b09      	ldr	r3, [pc, #36]	; (800650c <prvSwitchTimerLists+0xc0>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d1b1      	bne.n	8006454 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80064f0:	4b06      	ldr	r3, [pc, #24]	; (800650c <prvSwitchTimerLists+0xc0>)
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80064f6:	4b06      	ldr	r3, [pc, #24]	; (8006510 <prvSwitchTimerLists+0xc4>)
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4a04      	ldr	r2, [pc, #16]	; (800650c <prvSwitchTimerLists+0xc0>)
 80064fc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80064fe:	4a04      	ldr	r2, [pc, #16]	; (8006510 <prvSwitchTimerLists+0xc4>)
 8006500:	697b      	ldr	r3, [r7, #20]
 8006502:	6013      	str	r3, [r2, #0]
}
 8006504:	bf00      	nop
 8006506:	3718      	adds	r7, #24
 8006508:	46bd      	mov	sp, r7
 800650a:	bd80      	pop	{r7, pc}
 800650c:	20000db0 	.word	0x20000db0
 8006510:	20000db4 	.word	0x20000db4

08006514 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006514:	b580      	push	{r7, lr}
 8006516:	b082      	sub	sp, #8
 8006518:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800651a:	f000 f96b 	bl	80067f4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800651e:	4b15      	ldr	r3, [pc, #84]	; (8006574 <prvCheckForValidListAndQueue+0x60>)
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d120      	bne.n	8006568 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006526:	4814      	ldr	r0, [pc, #80]	; (8006578 <prvCheckForValidListAndQueue+0x64>)
 8006528:	f7fd fe78 	bl	800421c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800652c:	4813      	ldr	r0, [pc, #76]	; (800657c <prvCheckForValidListAndQueue+0x68>)
 800652e:	f7fd fe75 	bl	800421c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006532:	4b13      	ldr	r3, [pc, #76]	; (8006580 <prvCheckForValidListAndQueue+0x6c>)
 8006534:	4a10      	ldr	r2, [pc, #64]	; (8006578 <prvCheckForValidListAndQueue+0x64>)
 8006536:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006538:	4b12      	ldr	r3, [pc, #72]	; (8006584 <prvCheckForValidListAndQueue+0x70>)
 800653a:	4a10      	ldr	r2, [pc, #64]	; (800657c <prvCheckForValidListAndQueue+0x68>)
 800653c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800653e:	2300      	movs	r3, #0
 8006540:	9300      	str	r3, [sp, #0]
 8006542:	4b11      	ldr	r3, [pc, #68]	; (8006588 <prvCheckForValidListAndQueue+0x74>)
 8006544:	4a11      	ldr	r2, [pc, #68]	; (800658c <prvCheckForValidListAndQueue+0x78>)
 8006546:	2110      	movs	r1, #16
 8006548:	200a      	movs	r0, #10
 800654a:	f7fd ff83 	bl	8004454 <xQueueGenericCreateStatic>
 800654e:	4603      	mov	r3, r0
 8006550:	4a08      	ldr	r2, [pc, #32]	; (8006574 <prvCheckForValidListAndQueue+0x60>)
 8006552:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006554:	4b07      	ldr	r3, [pc, #28]	; (8006574 <prvCheckForValidListAndQueue+0x60>)
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d005      	beq.n	8006568 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800655c:	4b05      	ldr	r3, [pc, #20]	; (8006574 <prvCheckForValidListAndQueue+0x60>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	490b      	ldr	r1, [pc, #44]	; (8006590 <prvCheckForValidListAndQueue+0x7c>)
 8006562:	4618      	mov	r0, r3
 8006564:	f7fe fcac 	bl	8004ec0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006568:	f000 f974 	bl	8006854 <vPortExitCritical>
}
 800656c:	bf00      	nop
 800656e:	46bd      	mov	sp, r7
 8006570:	bd80      	pop	{r7, pc}
 8006572:	bf00      	nop
 8006574:	20000db8 	.word	0x20000db8
 8006578:	20000d88 	.word	0x20000d88
 800657c:	20000d9c 	.word	0x20000d9c
 8006580:	20000db0 	.word	0x20000db0
 8006584:	20000db4 	.word	0x20000db4
 8006588:	20000e64 	.word	0x20000e64
 800658c:	20000dc4 	.word	0x20000dc4
 8006590:	080093a4 	.word	0x080093a4

08006594 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006594:	b480      	push	{r7}
 8006596:	b085      	sub	sp, #20
 8006598:	af00      	add	r7, sp, #0
 800659a:	60f8      	str	r0, [r7, #12]
 800659c:	60b9      	str	r1, [r7, #8]
 800659e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	3b04      	subs	r3, #4
 80065a4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80065ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	3b04      	subs	r3, #4
 80065b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	f023 0201 	bic.w	r2, r3, #1
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	3b04      	subs	r3, #4
 80065c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80065c4:	4a0c      	ldr	r2, [pc, #48]	; (80065f8 <pxPortInitialiseStack+0x64>)
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	3b14      	subs	r3, #20
 80065ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80065d0:	687a      	ldr	r2, [r7, #4]
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	3b04      	subs	r3, #4
 80065da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	f06f 0202 	mvn.w	r2, #2
 80065e2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	3b20      	subs	r3, #32
 80065e8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80065ea:	68fb      	ldr	r3, [r7, #12]
}
 80065ec:	4618      	mov	r0, r3
 80065ee:	3714      	adds	r7, #20
 80065f0:	46bd      	mov	sp, r7
 80065f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f6:	4770      	bx	lr
 80065f8:	080065fd 	.word	0x080065fd

080065fc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80065fc:	b480      	push	{r7}
 80065fe:	b085      	sub	sp, #20
 8006600:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006602:	2300      	movs	r3, #0
 8006604:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006606:	4b12      	ldr	r3, [pc, #72]	; (8006650 <prvTaskExitError+0x54>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800660e:	d00a      	beq.n	8006626 <prvTaskExitError+0x2a>
	__asm volatile
 8006610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006614:	f383 8811 	msr	BASEPRI, r3
 8006618:	f3bf 8f6f 	isb	sy
 800661c:	f3bf 8f4f 	dsb	sy
 8006620:	60fb      	str	r3, [r7, #12]
}
 8006622:	bf00      	nop
 8006624:	e7fe      	b.n	8006624 <prvTaskExitError+0x28>
	__asm volatile
 8006626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800662a:	f383 8811 	msr	BASEPRI, r3
 800662e:	f3bf 8f6f 	isb	sy
 8006632:	f3bf 8f4f 	dsb	sy
 8006636:	60bb      	str	r3, [r7, #8]
}
 8006638:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800663a:	bf00      	nop
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d0fc      	beq.n	800663c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006642:	bf00      	nop
 8006644:	bf00      	nop
 8006646:	3714      	adds	r7, #20
 8006648:	46bd      	mov	sp, r7
 800664a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664e:	4770      	bx	lr
 8006650:	2000000c 	.word	0x2000000c
	...

08006660 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006660:	4b07      	ldr	r3, [pc, #28]	; (8006680 <pxCurrentTCBConst2>)
 8006662:	6819      	ldr	r1, [r3, #0]
 8006664:	6808      	ldr	r0, [r1, #0]
 8006666:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800666a:	f380 8809 	msr	PSP, r0
 800666e:	f3bf 8f6f 	isb	sy
 8006672:	f04f 0000 	mov.w	r0, #0
 8006676:	f380 8811 	msr	BASEPRI, r0
 800667a:	4770      	bx	lr
 800667c:	f3af 8000 	nop.w

08006680 <pxCurrentTCBConst2>:
 8006680:	20000888 	.word	0x20000888
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006684:	bf00      	nop
 8006686:	bf00      	nop

08006688 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006688:	4808      	ldr	r0, [pc, #32]	; (80066ac <prvPortStartFirstTask+0x24>)
 800668a:	6800      	ldr	r0, [r0, #0]
 800668c:	6800      	ldr	r0, [r0, #0]
 800668e:	f380 8808 	msr	MSP, r0
 8006692:	f04f 0000 	mov.w	r0, #0
 8006696:	f380 8814 	msr	CONTROL, r0
 800669a:	b662      	cpsie	i
 800669c:	b661      	cpsie	f
 800669e:	f3bf 8f4f 	dsb	sy
 80066a2:	f3bf 8f6f 	isb	sy
 80066a6:	df00      	svc	0
 80066a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80066aa:	bf00      	nop
 80066ac:	e000ed08 	.word	0xe000ed08

080066b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b086      	sub	sp, #24
 80066b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80066b6:	4b46      	ldr	r3, [pc, #280]	; (80067d0 <xPortStartScheduler+0x120>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	4a46      	ldr	r2, [pc, #280]	; (80067d4 <xPortStartScheduler+0x124>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	d10a      	bne.n	80066d6 <xPortStartScheduler+0x26>
	__asm volatile
 80066c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066c4:	f383 8811 	msr	BASEPRI, r3
 80066c8:	f3bf 8f6f 	isb	sy
 80066cc:	f3bf 8f4f 	dsb	sy
 80066d0:	613b      	str	r3, [r7, #16]
}
 80066d2:	bf00      	nop
 80066d4:	e7fe      	b.n	80066d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80066d6:	4b3e      	ldr	r3, [pc, #248]	; (80067d0 <xPortStartScheduler+0x120>)
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	4a3f      	ldr	r2, [pc, #252]	; (80067d8 <xPortStartScheduler+0x128>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	d10a      	bne.n	80066f6 <xPortStartScheduler+0x46>
	__asm volatile
 80066e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066e4:	f383 8811 	msr	BASEPRI, r3
 80066e8:	f3bf 8f6f 	isb	sy
 80066ec:	f3bf 8f4f 	dsb	sy
 80066f0:	60fb      	str	r3, [r7, #12]
}
 80066f2:	bf00      	nop
 80066f4:	e7fe      	b.n	80066f4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80066f6:	4b39      	ldr	r3, [pc, #228]	; (80067dc <xPortStartScheduler+0x12c>)
 80066f8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80066fa:	697b      	ldr	r3, [r7, #20]
 80066fc:	781b      	ldrb	r3, [r3, #0]
 80066fe:	b2db      	uxtb	r3, r3
 8006700:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006702:	697b      	ldr	r3, [r7, #20]
 8006704:	22ff      	movs	r2, #255	; 0xff
 8006706:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006708:	697b      	ldr	r3, [r7, #20]
 800670a:	781b      	ldrb	r3, [r3, #0]
 800670c:	b2db      	uxtb	r3, r3
 800670e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006710:	78fb      	ldrb	r3, [r7, #3]
 8006712:	b2db      	uxtb	r3, r3
 8006714:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006718:	b2da      	uxtb	r2, r3
 800671a:	4b31      	ldr	r3, [pc, #196]	; (80067e0 <xPortStartScheduler+0x130>)
 800671c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800671e:	4b31      	ldr	r3, [pc, #196]	; (80067e4 <xPortStartScheduler+0x134>)
 8006720:	2207      	movs	r2, #7
 8006722:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006724:	e009      	b.n	800673a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006726:	4b2f      	ldr	r3, [pc, #188]	; (80067e4 <xPortStartScheduler+0x134>)
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	3b01      	subs	r3, #1
 800672c:	4a2d      	ldr	r2, [pc, #180]	; (80067e4 <xPortStartScheduler+0x134>)
 800672e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006730:	78fb      	ldrb	r3, [r7, #3]
 8006732:	b2db      	uxtb	r3, r3
 8006734:	005b      	lsls	r3, r3, #1
 8006736:	b2db      	uxtb	r3, r3
 8006738:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800673a:	78fb      	ldrb	r3, [r7, #3]
 800673c:	b2db      	uxtb	r3, r3
 800673e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006742:	2b80      	cmp	r3, #128	; 0x80
 8006744:	d0ef      	beq.n	8006726 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006746:	4b27      	ldr	r3, [pc, #156]	; (80067e4 <xPortStartScheduler+0x134>)
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f1c3 0307 	rsb	r3, r3, #7
 800674e:	2b04      	cmp	r3, #4
 8006750:	d00a      	beq.n	8006768 <xPortStartScheduler+0xb8>
	__asm volatile
 8006752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006756:	f383 8811 	msr	BASEPRI, r3
 800675a:	f3bf 8f6f 	isb	sy
 800675e:	f3bf 8f4f 	dsb	sy
 8006762:	60bb      	str	r3, [r7, #8]
}
 8006764:	bf00      	nop
 8006766:	e7fe      	b.n	8006766 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006768:	4b1e      	ldr	r3, [pc, #120]	; (80067e4 <xPortStartScheduler+0x134>)
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	021b      	lsls	r3, r3, #8
 800676e:	4a1d      	ldr	r2, [pc, #116]	; (80067e4 <xPortStartScheduler+0x134>)
 8006770:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006772:	4b1c      	ldr	r3, [pc, #112]	; (80067e4 <xPortStartScheduler+0x134>)
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800677a:	4a1a      	ldr	r2, [pc, #104]	; (80067e4 <xPortStartScheduler+0x134>)
 800677c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	b2da      	uxtb	r2, r3
 8006782:	697b      	ldr	r3, [r7, #20]
 8006784:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006786:	4b18      	ldr	r3, [pc, #96]	; (80067e8 <xPortStartScheduler+0x138>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	4a17      	ldr	r2, [pc, #92]	; (80067e8 <xPortStartScheduler+0x138>)
 800678c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006790:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006792:	4b15      	ldr	r3, [pc, #84]	; (80067e8 <xPortStartScheduler+0x138>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	4a14      	ldr	r2, [pc, #80]	; (80067e8 <xPortStartScheduler+0x138>)
 8006798:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800679c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800679e:	f000 f8e5 	bl	800696c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80067a2:	4b12      	ldr	r3, [pc, #72]	; (80067ec <xPortStartScheduler+0x13c>)
 80067a4:	2200      	movs	r2, #0
 80067a6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80067a8:	f000 f904 	bl	80069b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80067ac:	4b10      	ldr	r3, [pc, #64]	; (80067f0 <xPortStartScheduler+0x140>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	4a0f      	ldr	r2, [pc, #60]	; (80067f0 <xPortStartScheduler+0x140>)
 80067b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80067b6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80067b8:	f7ff ff66 	bl	8006688 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80067bc:	f7fe ffea 	bl	8005794 <vTaskSwitchContext>
	prvTaskExitError();
 80067c0:	f7ff ff1c 	bl	80065fc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80067c4:	2300      	movs	r3, #0
}
 80067c6:	4618      	mov	r0, r3
 80067c8:	3718      	adds	r7, #24
 80067ca:	46bd      	mov	sp, r7
 80067cc:	bd80      	pop	{r7, pc}
 80067ce:	bf00      	nop
 80067d0:	e000ed00 	.word	0xe000ed00
 80067d4:	410fc271 	.word	0x410fc271
 80067d8:	410fc270 	.word	0x410fc270
 80067dc:	e000e400 	.word	0xe000e400
 80067e0:	20000eb4 	.word	0x20000eb4
 80067e4:	20000eb8 	.word	0x20000eb8
 80067e8:	e000ed20 	.word	0xe000ed20
 80067ec:	2000000c 	.word	0x2000000c
 80067f0:	e000ef34 	.word	0xe000ef34

080067f4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80067f4:	b480      	push	{r7}
 80067f6:	b083      	sub	sp, #12
 80067f8:	af00      	add	r7, sp, #0
	__asm volatile
 80067fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067fe:	f383 8811 	msr	BASEPRI, r3
 8006802:	f3bf 8f6f 	isb	sy
 8006806:	f3bf 8f4f 	dsb	sy
 800680a:	607b      	str	r3, [r7, #4]
}
 800680c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800680e:	4b0f      	ldr	r3, [pc, #60]	; (800684c <vPortEnterCritical+0x58>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	3301      	adds	r3, #1
 8006814:	4a0d      	ldr	r2, [pc, #52]	; (800684c <vPortEnterCritical+0x58>)
 8006816:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006818:	4b0c      	ldr	r3, [pc, #48]	; (800684c <vPortEnterCritical+0x58>)
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	2b01      	cmp	r3, #1
 800681e:	d10f      	bne.n	8006840 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006820:	4b0b      	ldr	r3, [pc, #44]	; (8006850 <vPortEnterCritical+0x5c>)
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	b2db      	uxtb	r3, r3
 8006826:	2b00      	cmp	r3, #0
 8006828:	d00a      	beq.n	8006840 <vPortEnterCritical+0x4c>
	__asm volatile
 800682a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800682e:	f383 8811 	msr	BASEPRI, r3
 8006832:	f3bf 8f6f 	isb	sy
 8006836:	f3bf 8f4f 	dsb	sy
 800683a:	603b      	str	r3, [r7, #0]
}
 800683c:	bf00      	nop
 800683e:	e7fe      	b.n	800683e <vPortEnterCritical+0x4a>
	}
}
 8006840:	bf00      	nop
 8006842:	370c      	adds	r7, #12
 8006844:	46bd      	mov	sp, r7
 8006846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684a:	4770      	bx	lr
 800684c:	2000000c 	.word	0x2000000c
 8006850:	e000ed04 	.word	0xe000ed04

08006854 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006854:	b480      	push	{r7}
 8006856:	b083      	sub	sp, #12
 8006858:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800685a:	4b12      	ldr	r3, [pc, #72]	; (80068a4 <vPortExitCritical+0x50>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d10a      	bne.n	8006878 <vPortExitCritical+0x24>
	__asm volatile
 8006862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006866:	f383 8811 	msr	BASEPRI, r3
 800686a:	f3bf 8f6f 	isb	sy
 800686e:	f3bf 8f4f 	dsb	sy
 8006872:	607b      	str	r3, [r7, #4]
}
 8006874:	bf00      	nop
 8006876:	e7fe      	b.n	8006876 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006878:	4b0a      	ldr	r3, [pc, #40]	; (80068a4 <vPortExitCritical+0x50>)
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	3b01      	subs	r3, #1
 800687e:	4a09      	ldr	r2, [pc, #36]	; (80068a4 <vPortExitCritical+0x50>)
 8006880:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006882:	4b08      	ldr	r3, [pc, #32]	; (80068a4 <vPortExitCritical+0x50>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d105      	bne.n	8006896 <vPortExitCritical+0x42>
 800688a:	2300      	movs	r3, #0
 800688c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	f383 8811 	msr	BASEPRI, r3
}
 8006894:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006896:	bf00      	nop
 8006898:	370c      	adds	r7, #12
 800689a:	46bd      	mov	sp, r7
 800689c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a0:	4770      	bx	lr
 80068a2:	bf00      	nop
 80068a4:	2000000c 	.word	0x2000000c
	...

080068b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80068b0:	f3ef 8009 	mrs	r0, PSP
 80068b4:	f3bf 8f6f 	isb	sy
 80068b8:	4b15      	ldr	r3, [pc, #84]	; (8006910 <pxCurrentTCBConst>)
 80068ba:	681a      	ldr	r2, [r3, #0]
 80068bc:	f01e 0f10 	tst.w	lr, #16
 80068c0:	bf08      	it	eq
 80068c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80068c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068ca:	6010      	str	r0, [r2, #0]
 80068cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80068d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80068d4:	f380 8811 	msr	BASEPRI, r0
 80068d8:	f3bf 8f4f 	dsb	sy
 80068dc:	f3bf 8f6f 	isb	sy
 80068e0:	f7fe ff58 	bl	8005794 <vTaskSwitchContext>
 80068e4:	f04f 0000 	mov.w	r0, #0
 80068e8:	f380 8811 	msr	BASEPRI, r0
 80068ec:	bc09      	pop	{r0, r3}
 80068ee:	6819      	ldr	r1, [r3, #0]
 80068f0:	6808      	ldr	r0, [r1, #0]
 80068f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068f6:	f01e 0f10 	tst.w	lr, #16
 80068fa:	bf08      	it	eq
 80068fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006900:	f380 8809 	msr	PSP, r0
 8006904:	f3bf 8f6f 	isb	sy
 8006908:	4770      	bx	lr
 800690a:	bf00      	nop
 800690c:	f3af 8000 	nop.w

08006910 <pxCurrentTCBConst>:
 8006910:	20000888 	.word	0x20000888
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006914:	bf00      	nop
 8006916:	bf00      	nop

08006918 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b082      	sub	sp, #8
 800691c:	af00      	add	r7, sp, #0
	__asm volatile
 800691e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006922:	f383 8811 	msr	BASEPRI, r3
 8006926:	f3bf 8f6f 	isb	sy
 800692a:	f3bf 8f4f 	dsb	sy
 800692e:	607b      	str	r3, [r7, #4]
}
 8006930:	bf00      	nop
	/* The SysTick runs at the lowest interrupt priority, so when this interrupt
	executes all interrupts must be unmasked.  There is therefore no need to
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
  traceISR_ENTER();
 8006932:	f001 fd29 	bl	8008388 <SEGGER_SYSVIEW_RecordEnterISR>
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006936:	f7fe fe6f 	bl	8005618 <xTaskIncrementTick>
 800693a:	4603      	mov	r3, r0
 800693c:	2b00      	cmp	r3, #0
 800693e:	d006      	beq.n	800694e <xPortSysTickHandler+0x36>
		{
			traceISR_EXIT_TO_SCHEDULER();
 8006940:	f001 fd80 	bl	8008444 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006944:	4b08      	ldr	r3, [pc, #32]	; (8006968 <xPortSysTickHandler+0x50>)
 8006946:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800694a:	601a      	str	r2, [r3, #0]
 800694c:	e001      	b.n	8006952 <xPortSysTickHandler+0x3a>
		}
		else
		{
			traceISR_EXIT();
 800694e:	f001 fd5d 	bl	800840c <SEGGER_SYSVIEW_RecordExitISR>
 8006952:	2300      	movs	r3, #0
 8006954:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	f383 8811 	msr	BASEPRI, r3
}
 800695c:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800695e:	bf00      	nop
 8006960:	3708      	adds	r7, #8
 8006962:	46bd      	mov	sp, r7
 8006964:	bd80      	pop	{r7, pc}
 8006966:	bf00      	nop
 8006968:	e000ed04 	.word	0xe000ed04

0800696c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800696c:	b480      	push	{r7}
 800696e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006970:	4b0b      	ldr	r3, [pc, #44]	; (80069a0 <vPortSetupTimerInterrupt+0x34>)
 8006972:	2200      	movs	r2, #0
 8006974:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006976:	4b0b      	ldr	r3, [pc, #44]	; (80069a4 <vPortSetupTimerInterrupt+0x38>)
 8006978:	2200      	movs	r2, #0
 800697a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800697c:	4b0a      	ldr	r3, [pc, #40]	; (80069a8 <vPortSetupTimerInterrupt+0x3c>)
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	4a0a      	ldr	r2, [pc, #40]	; (80069ac <vPortSetupTimerInterrupt+0x40>)
 8006982:	fba2 2303 	umull	r2, r3, r2, r3
 8006986:	099b      	lsrs	r3, r3, #6
 8006988:	4a09      	ldr	r2, [pc, #36]	; (80069b0 <vPortSetupTimerInterrupt+0x44>)
 800698a:	3b01      	subs	r3, #1
 800698c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800698e:	4b04      	ldr	r3, [pc, #16]	; (80069a0 <vPortSetupTimerInterrupt+0x34>)
 8006990:	2207      	movs	r2, #7
 8006992:	601a      	str	r2, [r3, #0]
}
 8006994:	bf00      	nop
 8006996:	46bd      	mov	sp, r7
 8006998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699c:	4770      	bx	lr
 800699e:	bf00      	nop
 80069a0:	e000e010 	.word	0xe000e010
 80069a4:	e000e018 	.word	0xe000e018
 80069a8:	20000000 	.word	0x20000000
 80069ac:	10624dd3 	.word	0x10624dd3
 80069b0:	e000e014 	.word	0xe000e014

080069b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80069b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80069c4 <vPortEnableVFP+0x10>
 80069b8:	6801      	ldr	r1, [r0, #0]
 80069ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80069be:	6001      	str	r1, [r0, #0]
 80069c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80069c2:	bf00      	nop
 80069c4:	e000ed88 	.word	0xe000ed88

080069c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80069c8:	b480      	push	{r7}
 80069ca:	b085      	sub	sp, #20
 80069cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80069ce:	f3ef 8305 	mrs	r3, IPSR
 80069d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	2b0f      	cmp	r3, #15
 80069d8:	d914      	bls.n	8006a04 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80069da:	4a17      	ldr	r2, [pc, #92]	; (8006a38 <vPortValidateInterruptPriority+0x70>)
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	4413      	add	r3, r2
 80069e0:	781b      	ldrb	r3, [r3, #0]
 80069e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80069e4:	4b15      	ldr	r3, [pc, #84]	; (8006a3c <vPortValidateInterruptPriority+0x74>)
 80069e6:	781b      	ldrb	r3, [r3, #0]
 80069e8:	7afa      	ldrb	r2, [r7, #11]
 80069ea:	429a      	cmp	r2, r3
 80069ec:	d20a      	bcs.n	8006a04 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80069ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069f2:	f383 8811 	msr	BASEPRI, r3
 80069f6:	f3bf 8f6f 	isb	sy
 80069fa:	f3bf 8f4f 	dsb	sy
 80069fe:	607b      	str	r3, [r7, #4]
}
 8006a00:	bf00      	nop
 8006a02:	e7fe      	b.n	8006a02 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006a04:	4b0e      	ldr	r3, [pc, #56]	; (8006a40 <vPortValidateInterruptPriority+0x78>)
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006a0c:	4b0d      	ldr	r3, [pc, #52]	; (8006a44 <vPortValidateInterruptPriority+0x7c>)
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	429a      	cmp	r2, r3
 8006a12:	d90a      	bls.n	8006a2a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006a14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a18:	f383 8811 	msr	BASEPRI, r3
 8006a1c:	f3bf 8f6f 	isb	sy
 8006a20:	f3bf 8f4f 	dsb	sy
 8006a24:	603b      	str	r3, [r7, #0]
}
 8006a26:	bf00      	nop
 8006a28:	e7fe      	b.n	8006a28 <vPortValidateInterruptPriority+0x60>
	}
 8006a2a:	bf00      	nop
 8006a2c:	3714      	adds	r7, #20
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a34:	4770      	bx	lr
 8006a36:	bf00      	nop
 8006a38:	e000e3f0 	.word	0xe000e3f0
 8006a3c:	20000eb4 	.word	0x20000eb4
 8006a40:	e000ed0c 	.word	0xe000ed0c
 8006a44:	20000eb8 	.word	0x20000eb8

08006a48 <vSetVarulMaxPRIGROUPValue>:
#if( configASSERT_DEFINED == 1 )

void vSetVarulMaxPRIGROUPValue( void )
{
 8006a48:	b480      	push	{r7}
 8006a4a:	b085      	sub	sp, #20
 8006a4c:	af00      	add	r7, sp, #0
#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006a4e:	4b27      	ldr	r3, [pc, #156]	; (8006aec <vSetVarulMaxPRIGROUPValue+0xa4>)
 8006a50:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	781b      	ldrb	r3, [r3, #0]
 8006a56:	b2db      	uxtb	r3, r3
 8006a58:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	22ff      	movs	r2, #255	; 0xff
 8006a5e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	781b      	ldrb	r3, [r3, #0]
 8006a64:	b2db      	uxtb	r3, r3
 8006a66:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006a68:	78fb      	ldrb	r3, [r7, #3]
 8006a6a:	b2db      	uxtb	r3, r3
 8006a6c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006a70:	b2da      	uxtb	r2, r3
 8006a72:	4b1f      	ldr	r3, [pc, #124]	; (8006af0 <vSetVarulMaxPRIGROUPValue+0xa8>)
 8006a74:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006a76:	4b1f      	ldr	r3, [pc, #124]	; (8006af4 <vSetVarulMaxPRIGROUPValue+0xac>)
 8006a78:	2207      	movs	r2, #7
 8006a7a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006a7c:	e009      	b.n	8006a92 <vSetVarulMaxPRIGROUPValue+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8006a7e:	4b1d      	ldr	r3, [pc, #116]	; (8006af4 <vSetVarulMaxPRIGROUPValue+0xac>)
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	3b01      	subs	r3, #1
 8006a84:	4a1b      	ldr	r2, [pc, #108]	; (8006af4 <vSetVarulMaxPRIGROUPValue+0xac>)
 8006a86:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006a88:	78fb      	ldrb	r3, [r7, #3]
 8006a8a:	b2db      	uxtb	r3, r3
 8006a8c:	005b      	lsls	r3, r3, #1
 8006a8e:	b2db      	uxtb	r3, r3
 8006a90:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006a92:	78fb      	ldrb	r3, [r7, #3]
 8006a94:	b2db      	uxtb	r3, r3
 8006a96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a9a:	2b80      	cmp	r3, #128	; 0x80
 8006a9c:	d0ef      	beq.n	8006a7e <vSetVarulMaxPRIGROUPValue+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006a9e:	4b15      	ldr	r3, [pc, #84]	; (8006af4 <vSetVarulMaxPRIGROUPValue+0xac>)
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f1c3 0307 	rsb	r3, r3, #7
 8006aa6:	2b04      	cmp	r3, #4
 8006aa8:	d00a      	beq.n	8006ac0 <vSetVarulMaxPRIGROUPValue+0x78>
	__asm volatile
 8006aaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aae:	f383 8811 	msr	BASEPRI, r3
 8006ab2:	f3bf 8f6f 	isb	sy
 8006ab6:	f3bf 8f4f 	dsb	sy
 8006aba:	60bb      	str	r3, [r7, #8]
}
 8006abc:	bf00      	nop
 8006abe:	e7fe      	b.n	8006abe <vSetVarulMaxPRIGROUPValue+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006ac0:	4b0c      	ldr	r3, [pc, #48]	; (8006af4 <vSetVarulMaxPRIGROUPValue+0xac>)
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	021b      	lsls	r3, r3, #8
 8006ac6:	4a0b      	ldr	r2, [pc, #44]	; (8006af4 <vSetVarulMaxPRIGROUPValue+0xac>)
 8006ac8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006aca:	4b0a      	ldr	r3, [pc, #40]	; (8006af4 <vSetVarulMaxPRIGROUPValue+0xac>)
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006ad2:	4a08      	ldr	r2, [pc, #32]	; (8006af4 <vSetVarulMaxPRIGROUPValue+0xac>)
 8006ad4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	b2da      	uxtb	r2, r3
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */
// copy code from “port.c” line number 299 to 359 and paste it here

}
 8006ade:	bf00      	nop
 8006ae0:	3714      	adds	r7, #20
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae8:	4770      	bx	lr
 8006aea:	bf00      	nop
 8006aec:	e000e400 	.word	0xe000e400
 8006af0:	20000eb4 	.word	0x20000eb4
 8006af4:	20000eb8 	.word	0x20000eb8

08006af8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b08a      	sub	sp, #40	; 0x28
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006b00:	2300      	movs	r3, #0
 8006b02:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006b04:	f7fe fcb6 	bl	8005474 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006b08:	4b5b      	ldr	r3, [pc, #364]	; (8006c78 <pvPortMalloc+0x180>)
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d101      	bne.n	8006b14 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006b10:	f000 f920 	bl	8006d54 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006b14:	4b59      	ldr	r3, [pc, #356]	; (8006c7c <pvPortMalloc+0x184>)
 8006b16:	681a      	ldr	r2, [r3, #0]
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	4013      	ands	r3, r2
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	f040 8093 	bne.w	8006c48 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d01d      	beq.n	8006b64 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006b28:	2208      	movs	r2, #8
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	4413      	add	r3, r2
 8006b2e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	f003 0307 	and.w	r3, r3, #7
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d014      	beq.n	8006b64 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	f023 0307 	bic.w	r3, r3, #7
 8006b40:	3308      	adds	r3, #8
 8006b42:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	f003 0307 	and.w	r3, r3, #7
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d00a      	beq.n	8006b64 <pvPortMalloc+0x6c>
	__asm volatile
 8006b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b52:	f383 8811 	msr	BASEPRI, r3
 8006b56:	f3bf 8f6f 	isb	sy
 8006b5a:	f3bf 8f4f 	dsb	sy
 8006b5e:	617b      	str	r3, [r7, #20]
}
 8006b60:	bf00      	nop
 8006b62:	e7fe      	b.n	8006b62 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d06e      	beq.n	8006c48 <pvPortMalloc+0x150>
 8006b6a:	4b45      	ldr	r3, [pc, #276]	; (8006c80 <pvPortMalloc+0x188>)
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	687a      	ldr	r2, [r7, #4]
 8006b70:	429a      	cmp	r2, r3
 8006b72:	d869      	bhi.n	8006c48 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006b74:	4b43      	ldr	r3, [pc, #268]	; (8006c84 <pvPortMalloc+0x18c>)
 8006b76:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006b78:	4b42      	ldr	r3, [pc, #264]	; (8006c84 <pvPortMalloc+0x18c>)
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006b7e:	e004      	b.n	8006b8a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b82:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b8c:	685b      	ldr	r3, [r3, #4]
 8006b8e:	687a      	ldr	r2, [r7, #4]
 8006b90:	429a      	cmp	r2, r3
 8006b92:	d903      	bls.n	8006b9c <pvPortMalloc+0xa4>
 8006b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d1f1      	bne.n	8006b80 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006b9c:	4b36      	ldr	r3, [pc, #216]	; (8006c78 <pvPortMalloc+0x180>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ba2:	429a      	cmp	r2, r3
 8006ba4:	d050      	beq.n	8006c48 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006ba6:	6a3b      	ldr	r3, [r7, #32]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	2208      	movs	r2, #8
 8006bac:	4413      	add	r3, r2
 8006bae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bb2:	681a      	ldr	r2, [r3, #0]
 8006bb4:	6a3b      	ldr	r3, [r7, #32]
 8006bb6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bba:	685a      	ldr	r2, [r3, #4]
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	1ad2      	subs	r2, r2, r3
 8006bc0:	2308      	movs	r3, #8
 8006bc2:	005b      	lsls	r3, r3, #1
 8006bc4:	429a      	cmp	r2, r3
 8006bc6:	d91f      	bls.n	8006c08 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006bc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	4413      	add	r3, r2
 8006bce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006bd0:	69bb      	ldr	r3, [r7, #24]
 8006bd2:	f003 0307 	and.w	r3, r3, #7
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d00a      	beq.n	8006bf0 <pvPortMalloc+0xf8>
	__asm volatile
 8006bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bde:	f383 8811 	msr	BASEPRI, r3
 8006be2:	f3bf 8f6f 	isb	sy
 8006be6:	f3bf 8f4f 	dsb	sy
 8006bea:	613b      	str	r3, [r7, #16]
}
 8006bec:	bf00      	nop
 8006bee:	e7fe      	b.n	8006bee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bf2:	685a      	ldr	r2, [r3, #4]
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	1ad2      	subs	r2, r2, r3
 8006bf8:	69bb      	ldr	r3, [r7, #24]
 8006bfa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bfe:	687a      	ldr	r2, [r7, #4]
 8006c00:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006c02:	69b8      	ldr	r0, [r7, #24]
 8006c04:	f000 f908 	bl	8006e18 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006c08:	4b1d      	ldr	r3, [pc, #116]	; (8006c80 <pvPortMalloc+0x188>)
 8006c0a:	681a      	ldr	r2, [r3, #0]
 8006c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c0e:	685b      	ldr	r3, [r3, #4]
 8006c10:	1ad3      	subs	r3, r2, r3
 8006c12:	4a1b      	ldr	r2, [pc, #108]	; (8006c80 <pvPortMalloc+0x188>)
 8006c14:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006c16:	4b1a      	ldr	r3, [pc, #104]	; (8006c80 <pvPortMalloc+0x188>)
 8006c18:	681a      	ldr	r2, [r3, #0]
 8006c1a:	4b1b      	ldr	r3, [pc, #108]	; (8006c88 <pvPortMalloc+0x190>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	429a      	cmp	r2, r3
 8006c20:	d203      	bcs.n	8006c2a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006c22:	4b17      	ldr	r3, [pc, #92]	; (8006c80 <pvPortMalloc+0x188>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	4a18      	ldr	r2, [pc, #96]	; (8006c88 <pvPortMalloc+0x190>)
 8006c28:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c2c:	685a      	ldr	r2, [r3, #4]
 8006c2e:	4b13      	ldr	r3, [pc, #76]	; (8006c7c <pvPortMalloc+0x184>)
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	431a      	orrs	r2, r3
 8006c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c36:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006c3e:	4b13      	ldr	r3, [pc, #76]	; (8006c8c <pvPortMalloc+0x194>)
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	3301      	adds	r3, #1
 8006c44:	4a11      	ldr	r2, [pc, #68]	; (8006c8c <pvPortMalloc+0x194>)
 8006c46:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006c48:	f7fe fc22 	bl	8005490 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006c4c:	69fb      	ldr	r3, [r7, #28]
 8006c4e:	f003 0307 	and.w	r3, r3, #7
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d00a      	beq.n	8006c6c <pvPortMalloc+0x174>
	__asm volatile
 8006c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c5a:	f383 8811 	msr	BASEPRI, r3
 8006c5e:	f3bf 8f6f 	isb	sy
 8006c62:	f3bf 8f4f 	dsb	sy
 8006c66:	60fb      	str	r3, [r7, #12]
}
 8006c68:	bf00      	nop
 8006c6a:	e7fe      	b.n	8006c6a <pvPortMalloc+0x172>
	return pvReturn;
 8006c6c:	69fb      	ldr	r3, [r7, #28]
}
 8006c6e:	4618      	mov	r0, r3
 8006c70:	3728      	adds	r7, #40	; 0x28
 8006c72:	46bd      	mov	sp, r7
 8006c74:	bd80      	pop	{r7, pc}
 8006c76:	bf00      	nop
 8006c78:	20004ac4 	.word	0x20004ac4
 8006c7c:	20004ad8 	.word	0x20004ad8
 8006c80:	20004ac8 	.word	0x20004ac8
 8006c84:	20004abc 	.word	0x20004abc
 8006c88:	20004acc 	.word	0x20004acc
 8006c8c:	20004ad0 	.word	0x20004ad0

08006c90 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b086      	sub	sp, #24
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d04d      	beq.n	8006d3e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006ca2:	2308      	movs	r3, #8
 8006ca4:	425b      	negs	r3, r3
 8006ca6:	697a      	ldr	r2, [r7, #20]
 8006ca8:	4413      	add	r3, r2
 8006caa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006cac:	697b      	ldr	r3, [r7, #20]
 8006cae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006cb0:	693b      	ldr	r3, [r7, #16]
 8006cb2:	685a      	ldr	r2, [r3, #4]
 8006cb4:	4b24      	ldr	r3, [pc, #144]	; (8006d48 <vPortFree+0xb8>)
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	4013      	ands	r3, r2
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d10a      	bne.n	8006cd4 <vPortFree+0x44>
	__asm volatile
 8006cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cc2:	f383 8811 	msr	BASEPRI, r3
 8006cc6:	f3bf 8f6f 	isb	sy
 8006cca:	f3bf 8f4f 	dsb	sy
 8006cce:	60fb      	str	r3, [r7, #12]
}
 8006cd0:	bf00      	nop
 8006cd2:	e7fe      	b.n	8006cd2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006cd4:	693b      	ldr	r3, [r7, #16]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d00a      	beq.n	8006cf2 <vPortFree+0x62>
	__asm volatile
 8006cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ce0:	f383 8811 	msr	BASEPRI, r3
 8006ce4:	f3bf 8f6f 	isb	sy
 8006ce8:	f3bf 8f4f 	dsb	sy
 8006cec:	60bb      	str	r3, [r7, #8]
}
 8006cee:	bf00      	nop
 8006cf0:	e7fe      	b.n	8006cf0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006cf2:	693b      	ldr	r3, [r7, #16]
 8006cf4:	685a      	ldr	r2, [r3, #4]
 8006cf6:	4b14      	ldr	r3, [pc, #80]	; (8006d48 <vPortFree+0xb8>)
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	4013      	ands	r3, r2
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d01e      	beq.n	8006d3e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006d00:	693b      	ldr	r3, [r7, #16]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d11a      	bne.n	8006d3e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006d08:	693b      	ldr	r3, [r7, #16]
 8006d0a:	685a      	ldr	r2, [r3, #4]
 8006d0c:	4b0e      	ldr	r3, [pc, #56]	; (8006d48 <vPortFree+0xb8>)
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	43db      	mvns	r3, r3
 8006d12:	401a      	ands	r2, r3
 8006d14:	693b      	ldr	r3, [r7, #16]
 8006d16:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006d18:	f7fe fbac 	bl	8005474 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006d1c:	693b      	ldr	r3, [r7, #16]
 8006d1e:	685a      	ldr	r2, [r3, #4]
 8006d20:	4b0a      	ldr	r3, [pc, #40]	; (8006d4c <vPortFree+0xbc>)
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	4413      	add	r3, r2
 8006d26:	4a09      	ldr	r2, [pc, #36]	; (8006d4c <vPortFree+0xbc>)
 8006d28:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006d2a:	6938      	ldr	r0, [r7, #16]
 8006d2c:	f000 f874 	bl	8006e18 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006d30:	4b07      	ldr	r3, [pc, #28]	; (8006d50 <vPortFree+0xc0>)
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	3301      	adds	r3, #1
 8006d36:	4a06      	ldr	r2, [pc, #24]	; (8006d50 <vPortFree+0xc0>)
 8006d38:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006d3a:	f7fe fba9 	bl	8005490 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006d3e:	bf00      	nop
 8006d40:	3718      	adds	r7, #24
 8006d42:	46bd      	mov	sp, r7
 8006d44:	bd80      	pop	{r7, pc}
 8006d46:	bf00      	nop
 8006d48:	20004ad8 	.word	0x20004ad8
 8006d4c:	20004ac8 	.word	0x20004ac8
 8006d50:	20004ad4 	.word	0x20004ad4

08006d54 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006d54:	b480      	push	{r7}
 8006d56:	b085      	sub	sp, #20
 8006d58:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006d5a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006d5e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006d60:	4b27      	ldr	r3, [pc, #156]	; (8006e00 <prvHeapInit+0xac>)
 8006d62:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	f003 0307 	and.w	r3, r3, #7
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d00c      	beq.n	8006d88 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	3307      	adds	r3, #7
 8006d72:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	f023 0307 	bic.w	r3, r3, #7
 8006d7a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006d7c:	68ba      	ldr	r2, [r7, #8]
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	1ad3      	subs	r3, r2, r3
 8006d82:	4a1f      	ldr	r2, [pc, #124]	; (8006e00 <prvHeapInit+0xac>)
 8006d84:	4413      	add	r3, r2
 8006d86:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006d8c:	4a1d      	ldr	r2, [pc, #116]	; (8006e04 <prvHeapInit+0xb0>)
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006d92:	4b1c      	ldr	r3, [pc, #112]	; (8006e04 <prvHeapInit+0xb0>)
 8006d94:	2200      	movs	r2, #0
 8006d96:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	68ba      	ldr	r2, [r7, #8]
 8006d9c:	4413      	add	r3, r2
 8006d9e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006da0:	2208      	movs	r2, #8
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	1a9b      	subs	r3, r3, r2
 8006da6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	f023 0307 	bic.w	r3, r3, #7
 8006dae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	4a15      	ldr	r2, [pc, #84]	; (8006e08 <prvHeapInit+0xb4>)
 8006db4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006db6:	4b14      	ldr	r3, [pc, #80]	; (8006e08 <prvHeapInit+0xb4>)
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	2200      	movs	r2, #0
 8006dbc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006dbe:	4b12      	ldr	r3, [pc, #72]	; (8006e08 <prvHeapInit+0xb4>)
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	68fa      	ldr	r2, [r7, #12]
 8006dce:	1ad2      	subs	r2, r2, r3
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006dd4:	4b0c      	ldr	r3, [pc, #48]	; (8006e08 <prvHeapInit+0xb4>)
 8006dd6:	681a      	ldr	r2, [r3, #0]
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	685b      	ldr	r3, [r3, #4]
 8006de0:	4a0a      	ldr	r2, [pc, #40]	; (8006e0c <prvHeapInit+0xb8>)
 8006de2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	685b      	ldr	r3, [r3, #4]
 8006de8:	4a09      	ldr	r2, [pc, #36]	; (8006e10 <prvHeapInit+0xbc>)
 8006dea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006dec:	4b09      	ldr	r3, [pc, #36]	; (8006e14 <prvHeapInit+0xc0>)
 8006dee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006df2:	601a      	str	r2, [r3, #0]
}
 8006df4:	bf00      	nop
 8006df6:	3714      	adds	r7, #20
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfe:	4770      	bx	lr
 8006e00:	20000ebc 	.word	0x20000ebc
 8006e04:	20004abc 	.word	0x20004abc
 8006e08:	20004ac4 	.word	0x20004ac4
 8006e0c:	20004acc 	.word	0x20004acc
 8006e10:	20004ac8 	.word	0x20004ac8
 8006e14:	20004ad8 	.word	0x20004ad8

08006e18 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006e18:	b480      	push	{r7}
 8006e1a:	b085      	sub	sp, #20
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006e20:	4b28      	ldr	r3, [pc, #160]	; (8006ec4 <prvInsertBlockIntoFreeList+0xac>)
 8006e22:	60fb      	str	r3, [r7, #12]
 8006e24:	e002      	b.n	8006e2c <prvInsertBlockIntoFreeList+0x14>
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	60fb      	str	r3, [r7, #12]
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	687a      	ldr	r2, [r7, #4]
 8006e32:	429a      	cmp	r2, r3
 8006e34:	d8f7      	bhi.n	8006e26 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	685b      	ldr	r3, [r3, #4]
 8006e3e:	68ba      	ldr	r2, [r7, #8]
 8006e40:	4413      	add	r3, r2
 8006e42:	687a      	ldr	r2, [r7, #4]
 8006e44:	429a      	cmp	r2, r3
 8006e46:	d108      	bne.n	8006e5a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	685a      	ldr	r2, [r3, #4]
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	685b      	ldr	r3, [r3, #4]
 8006e50:	441a      	add	r2, r3
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	685b      	ldr	r3, [r3, #4]
 8006e62:	68ba      	ldr	r2, [r7, #8]
 8006e64:	441a      	add	r2, r3
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	429a      	cmp	r2, r3
 8006e6c:	d118      	bne.n	8006ea0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	681a      	ldr	r2, [r3, #0]
 8006e72:	4b15      	ldr	r3, [pc, #84]	; (8006ec8 <prvInsertBlockIntoFreeList+0xb0>)
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	429a      	cmp	r2, r3
 8006e78:	d00d      	beq.n	8006e96 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	685a      	ldr	r2, [r3, #4]
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	685b      	ldr	r3, [r3, #4]
 8006e84:	441a      	add	r2, r3
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	681a      	ldr	r2, [r3, #0]
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	601a      	str	r2, [r3, #0]
 8006e94:	e008      	b.n	8006ea8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006e96:	4b0c      	ldr	r3, [pc, #48]	; (8006ec8 <prvInsertBlockIntoFreeList+0xb0>)
 8006e98:	681a      	ldr	r2, [r3, #0]
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	601a      	str	r2, [r3, #0]
 8006e9e:	e003      	b.n	8006ea8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	681a      	ldr	r2, [r3, #0]
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006ea8:	68fa      	ldr	r2, [r7, #12]
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	429a      	cmp	r2, r3
 8006eae:	d002      	beq.n	8006eb6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	687a      	ldr	r2, [r7, #4]
 8006eb4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006eb6:	bf00      	nop
 8006eb8:	3714      	adds	r7, #20
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec0:	4770      	bx	lr
 8006ec2:	bf00      	nop
 8006ec4:	20004abc 	.word	0x20004abc
 8006ec8:	20004ac4 	.word	0x20004ac4

08006ecc <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8006ed0:	4803      	ldr	r0, [pc, #12]	; (8006ee0 <_cbSendSystemDesc+0x14>)
 8006ed2:	f001 fa03 	bl	80082dc <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8006ed6:	4803      	ldr	r0, [pc, #12]	; (8006ee4 <_cbSendSystemDesc+0x18>)
 8006ed8:	f001 fa00 	bl	80082dc <SEGGER_SYSVIEW_SendSysDesc>
}
 8006edc:	bf00      	nop
 8006ede:	bd80      	pop	{r7, pc}
 8006ee0:	080093ac 	.word	0x080093ac
 8006ee4:	080093e0 	.word	0x080093e0

08006ee8 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8006eec:	4b06      	ldr	r3, [pc, #24]	; (8006f08 <SEGGER_SYSVIEW_Conf+0x20>)
 8006eee:	6818      	ldr	r0, [r3, #0]
 8006ef0:	4b05      	ldr	r3, [pc, #20]	; (8006f08 <SEGGER_SYSVIEW_Conf+0x20>)
 8006ef2:	6819      	ldr	r1, [r3, #0]
 8006ef4:	4b05      	ldr	r3, [pc, #20]	; (8006f0c <SEGGER_SYSVIEW_Conf+0x24>)
 8006ef6:	4a06      	ldr	r2, [pc, #24]	; (8006f10 <SEGGER_SYSVIEW_Conf+0x28>)
 8006ef8:	f000 fd70 	bl	80079dc <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8006efc:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8006f00:	f000 fdaa 	bl	8007a58 <SEGGER_SYSVIEW_SetRAMBase>
}
 8006f04:	bf00      	nop
 8006f06:	bd80      	pop	{r7, pc}
 8006f08:	20000000 	.word	0x20000000
 8006f0c:	08006ecd 	.word	0x08006ecd
 8006f10:	08009558 	.word	0x08009558

08006f14 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8006f14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f16:	b085      	sub	sp, #20
 8006f18:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	607b      	str	r3, [r7, #4]
 8006f1e:	e048      	b.n	8006fb2 <_cbSendTaskList+0x9e>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
 8006f20:	4929      	ldr	r1, [pc, #164]	; (8006fc8 <_cbSendTaskList+0xb4>)
 8006f22:	687a      	ldr	r2, [r7, #4]
 8006f24:	4613      	mov	r3, r2
 8006f26:	009b      	lsls	r3, r3, #2
 8006f28:	4413      	add	r3, r2
 8006f2a:	009b      	lsls	r3, r3, #2
 8006f2c:	440b      	add	r3, r1
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	4618      	mov	r0, r3
 8006f32:	f7fe fe7f 	bl	8005c34 <uxTaskGetStackHighWaterMark>
 8006f36:	4601      	mov	r1, r0
 8006f38:	4823      	ldr	r0, [pc, #140]	; (8006fc8 <_cbSendTaskList+0xb4>)
 8006f3a:	687a      	ldr	r2, [r7, #4]
 8006f3c:	4613      	mov	r3, r2
 8006f3e:	009b      	lsls	r3, r3, #2
 8006f40:	4413      	add	r3, r2
 8006f42:	009b      	lsls	r3, r3, #2
 8006f44:	4403      	add	r3, r0
 8006f46:	3310      	adds	r3, #16
 8006f48:	6019      	str	r1, [r3, #0]
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8006f4a:	491f      	ldr	r1, [pc, #124]	; (8006fc8 <_cbSendTaskList+0xb4>)
 8006f4c:	687a      	ldr	r2, [r7, #4]
 8006f4e:	4613      	mov	r3, r2
 8006f50:	009b      	lsls	r3, r3, #2
 8006f52:	4413      	add	r3, r2
 8006f54:	009b      	lsls	r3, r3, #2
 8006f56:	440b      	add	r3, r1
 8006f58:	6818      	ldr	r0, [r3, #0]
 8006f5a:	491b      	ldr	r1, [pc, #108]	; (8006fc8 <_cbSendTaskList+0xb4>)
 8006f5c:	687a      	ldr	r2, [r7, #4]
 8006f5e:	4613      	mov	r3, r2
 8006f60:	009b      	lsls	r3, r3, #2
 8006f62:	4413      	add	r3, r2
 8006f64:	009b      	lsls	r3, r3, #2
 8006f66:	440b      	add	r3, r1
 8006f68:	3304      	adds	r3, #4
 8006f6a:	6819      	ldr	r1, [r3, #0]
 8006f6c:	4c16      	ldr	r4, [pc, #88]	; (8006fc8 <_cbSendTaskList+0xb4>)
 8006f6e:	687a      	ldr	r2, [r7, #4]
 8006f70:	4613      	mov	r3, r2
 8006f72:	009b      	lsls	r3, r3, #2
 8006f74:	4413      	add	r3, r2
 8006f76:	009b      	lsls	r3, r3, #2
 8006f78:	4423      	add	r3, r4
 8006f7a:	3308      	adds	r3, #8
 8006f7c:	681c      	ldr	r4, [r3, #0]
 8006f7e:	4d12      	ldr	r5, [pc, #72]	; (8006fc8 <_cbSendTaskList+0xb4>)
 8006f80:	687a      	ldr	r2, [r7, #4]
 8006f82:	4613      	mov	r3, r2
 8006f84:	009b      	lsls	r3, r3, #2
 8006f86:	4413      	add	r3, r2
 8006f88:	009b      	lsls	r3, r3, #2
 8006f8a:	442b      	add	r3, r5
 8006f8c:	330c      	adds	r3, #12
 8006f8e:	681d      	ldr	r5, [r3, #0]
 8006f90:	4e0d      	ldr	r6, [pc, #52]	; (8006fc8 <_cbSendTaskList+0xb4>)
 8006f92:	687a      	ldr	r2, [r7, #4]
 8006f94:	4613      	mov	r3, r2
 8006f96:	009b      	lsls	r3, r3, #2
 8006f98:	4413      	add	r3, r2
 8006f9a:	009b      	lsls	r3, r3, #2
 8006f9c:	4433      	add	r3, r6
 8006f9e:	3310      	adds	r3, #16
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	9300      	str	r3, [sp, #0]
 8006fa4:	462b      	mov	r3, r5
 8006fa6:	4622      	mov	r2, r4
 8006fa8:	f000 f8be 	bl	8007128 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	3301      	adds	r3, #1
 8006fb0:	607b      	str	r3, [r7, #4]
 8006fb2:	4b06      	ldr	r3, [pc, #24]	; (8006fcc <_cbSendTaskList+0xb8>)
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	687a      	ldr	r2, [r7, #4]
 8006fb8:	429a      	cmp	r2, r3
 8006fba:	d3b1      	bcc.n	8006f20 <_cbSendTaskList+0xc>
  }
}
 8006fbc:	bf00      	nop
 8006fbe:	bf00      	nop
 8006fc0:	370c      	adds	r7, #12
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006fc6:	bf00      	nop
 8006fc8:	20004adc 	.word	0x20004adc
 8006fcc:	20004b7c 	.word	0x20004b7c

08006fd0 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8006fd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006fd4:	b082      	sub	sp, #8
 8006fd6:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8006fd8:	f7fe fb0c 	bl	80055f4 <xTaskGetTickCountFromISR>
 8006fdc:	4603      	mov	r3, r0
 8006fde:	2200      	movs	r2, #0
 8006fe0:	469a      	mov	sl, r3
 8006fe2:	4693      	mov	fp, r2
 8006fe4:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8006fe8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006fec:	4602      	mov	r2, r0
 8006fee:	460b      	mov	r3, r1
 8006ff0:	f04f 0a00 	mov.w	sl, #0
 8006ff4:	f04f 0b00 	mov.w	fp, #0
 8006ff8:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8006ffc:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8007000:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8007004:	4652      	mov	r2, sl
 8007006:	465b      	mov	r3, fp
 8007008:	1a14      	subs	r4, r2, r0
 800700a:	eb63 0501 	sbc.w	r5, r3, r1
 800700e:	f04f 0200 	mov.w	r2, #0
 8007012:	f04f 0300 	mov.w	r3, #0
 8007016:	00ab      	lsls	r3, r5, #2
 8007018:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800701c:	00a2      	lsls	r2, r4, #2
 800701e:	4614      	mov	r4, r2
 8007020:	461d      	mov	r5, r3
 8007022:	eb14 0800 	adds.w	r8, r4, r0
 8007026:	eb45 0901 	adc.w	r9, r5, r1
 800702a:	f04f 0200 	mov.w	r2, #0
 800702e:	f04f 0300 	mov.w	r3, #0
 8007032:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007036:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800703a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800703e:	4690      	mov	r8, r2
 8007040:	4699      	mov	r9, r3
 8007042:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8007046:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 800704a:	4610      	mov	r0, r2
 800704c:	4619      	mov	r1, r3
 800704e:	3708      	adds	r7, #8
 8007050:	46bd      	mov	sp, r7
 8007052:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08007058 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8007058:	b580      	push	{r7, lr}
 800705a:	b086      	sub	sp, #24
 800705c:	af02      	add	r7, sp, #8
 800705e:	60f8      	str	r0, [r7, #12]
 8007060:	60b9      	str	r1, [r7, #8]
 8007062:	607a      	str	r2, [r7, #4]
 8007064:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8007066:	2205      	movs	r2, #5
 8007068:	492b      	ldr	r1, [pc, #172]	; (8007118 <SYSVIEW_AddTask+0xc0>)
 800706a:	68b8      	ldr	r0, [r7, #8]
 800706c:	f001 fcb8 	bl	80089e0 <memcmp>
 8007070:	4603      	mov	r3, r0
 8007072:	2b00      	cmp	r3, #0
 8007074:	d04b      	beq.n	800710e <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8007076:	4b29      	ldr	r3, [pc, #164]	; (800711c <SYSVIEW_AddTask+0xc4>)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	2b07      	cmp	r3, #7
 800707c:	d903      	bls.n	8007086 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800707e:	4828      	ldr	r0, [pc, #160]	; (8007120 <SYSVIEW_AddTask+0xc8>)
 8007080:	f001 fc32 	bl	80088e8 <SEGGER_SYSVIEW_Warn>
    return;
 8007084:	e044      	b.n	8007110 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8007086:	4b25      	ldr	r3, [pc, #148]	; (800711c <SYSVIEW_AddTask+0xc4>)
 8007088:	681a      	ldr	r2, [r3, #0]
 800708a:	4926      	ldr	r1, [pc, #152]	; (8007124 <SYSVIEW_AddTask+0xcc>)
 800708c:	4613      	mov	r3, r2
 800708e:	009b      	lsls	r3, r3, #2
 8007090:	4413      	add	r3, r2
 8007092:	009b      	lsls	r3, r3, #2
 8007094:	440b      	add	r3, r1
 8007096:	68fa      	ldr	r2, [r7, #12]
 8007098:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800709a:	4b20      	ldr	r3, [pc, #128]	; (800711c <SYSVIEW_AddTask+0xc4>)
 800709c:	681a      	ldr	r2, [r3, #0]
 800709e:	4921      	ldr	r1, [pc, #132]	; (8007124 <SYSVIEW_AddTask+0xcc>)
 80070a0:	4613      	mov	r3, r2
 80070a2:	009b      	lsls	r3, r3, #2
 80070a4:	4413      	add	r3, r2
 80070a6:	009b      	lsls	r3, r3, #2
 80070a8:	440b      	add	r3, r1
 80070aa:	3304      	adds	r3, #4
 80070ac:	68ba      	ldr	r2, [r7, #8]
 80070ae:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 80070b0:	4b1a      	ldr	r3, [pc, #104]	; (800711c <SYSVIEW_AddTask+0xc4>)
 80070b2:	681a      	ldr	r2, [r3, #0]
 80070b4:	491b      	ldr	r1, [pc, #108]	; (8007124 <SYSVIEW_AddTask+0xcc>)
 80070b6:	4613      	mov	r3, r2
 80070b8:	009b      	lsls	r3, r3, #2
 80070ba:	4413      	add	r3, r2
 80070bc:	009b      	lsls	r3, r3, #2
 80070be:	440b      	add	r3, r1
 80070c0:	3308      	adds	r3, #8
 80070c2:	687a      	ldr	r2, [r7, #4]
 80070c4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 80070c6:	4b15      	ldr	r3, [pc, #84]	; (800711c <SYSVIEW_AddTask+0xc4>)
 80070c8:	681a      	ldr	r2, [r3, #0]
 80070ca:	4916      	ldr	r1, [pc, #88]	; (8007124 <SYSVIEW_AddTask+0xcc>)
 80070cc:	4613      	mov	r3, r2
 80070ce:	009b      	lsls	r3, r3, #2
 80070d0:	4413      	add	r3, r2
 80070d2:	009b      	lsls	r3, r3, #2
 80070d4:	440b      	add	r3, r1
 80070d6:	330c      	adds	r3, #12
 80070d8:	683a      	ldr	r2, [r7, #0]
 80070da:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 80070dc:	4b0f      	ldr	r3, [pc, #60]	; (800711c <SYSVIEW_AddTask+0xc4>)
 80070de:	681a      	ldr	r2, [r3, #0]
 80070e0:	4910      	ldr	r1, [pc, #64]	; (8007124 <SYSVIEW_AddTask+0xcc>)
 80070e2:	4613      	mov	r3, r2
 80070e4:	009b      	lsls	r3, r3, #2
 80070e6:	4413      	add	r3, r2
 80070e8:	009b      	lsls	r3, r3, #2
 80070ea:	440b      	add	r3, r1
 80070ec:	3310      	adds	r3, #16
 80070ee:	69ba      	ldr	r2, [r7, #24]
 80070f0:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 80070f2:	4b0a      	ldr	r3, [pc, #40]	; (800711c <SYSVIEW_AddTask+0xc4>)
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	3301      	adds	r3, #1
 80070f8:	4a08      	ldr	r2, [pc, #32]	; (800711c <SYSVIEW_AddTask+0xc4>)
 80070fa:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 80070fc:	69bb      	ldr	r3, [r7, #24]
 80070fe:	9300      	str	r3, [sp, #0]
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	687a      	ldr	r2, [r7, #4]
 8007104:	68b9      	ldr	r1, [r7, #8]
 8007106:	68f8      	ldr	r0, [r7, #12]
 8007108:	f000 f80e 	bl	8007128 <SYSVIEW_SendTaskInfo>
 800710c:	e000      	b.n	8007110 <SYSVIEW_AddTask+0xb8>
    return;
 800710e:	bf00      	nop

}
 8007110:	3710      	adds	r7, #16
 8007112:	46bd      	mov	sp, r7
 8007114:	bd80      	pop	{r7, pc}
 8007116:	bf00      	nop
 8007118:	080093f0 	.word	0x080093f0
 800711c:	20004b7c 	.word	0x20004b7c
 8007120:	080093f8 	.word	0x080093f8
 8007124:	20004adc 	.word	0x20004adc

08007128 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8007128:	b580      	push	{r7, lr}
 800712a:	b08a      	sub	sp, #40	; 0x28
 800712c:	af00      	add	r7, sp, #0
 800712e:	60f8      	str	r0, [r7, #12]
 8007130:	60b9      	str	r1, [r7, #8]
 8007132:	607a      	str	r2, [r7, #4]
 8007134:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8007136:	f107 0314 	add.w	r3, r7, #20
 800713a:	2214      	movs	r2, #20
 800713c:	2100      	movs	r1, #0
 800713e:	4618      	mov	r0, r3
 8007140:	f001 fc5e 	bl	8008a00 <memset>
  TaskInfo.TaskID     = TaskID;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8007148:	68bb      	ldr	r3, [r7, #8]
 800714a:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8007154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007156:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8007158:	f107 0314 	add.w	r3, r7, #20
 800715c:	4618      	mov	r0, r3
 800715e:	f000 ffc3 	bl	80080e8 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8007162:	bf00      	nop
 8007164:	3728      	adds	r7, #40	; 0x28
 8007166:	46bd      	mov	sp, r7
 8007168:	bd80      	pop	{r7, pc}
	...

0800716c <_DoInit>:
*
*/
#define INIT()  do {                                            \
                  if (_SEGGER_RTT.acID[0] == '\0') { _DoInit(); }  \
                } while (0)
static void _DoInit(void) {
 800716c:	b480      	push	{r7}
 800716e:	b083      	sub	sp, #12
 8007170:	af00      	add	r7, sp, #0
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
 8007172:	4b21      	ldr	r3, [pc, #132]	; (80071f8 <_DoInit+0x8c>)
 8007174:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	2203      	movs	r2, #3
 800717a:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2203      	movs	r2, #3
 8007180:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	4a1d      	ldr	r2, [pc, #116]	; (80071fc <_DoInit+0x90>)
 8007186:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	4a1d      	ldr	r2, [pc, #116]	; (8007200 <_DoInit+0x94>)
 800718c:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007194:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2200      	movs	r2, #0
 800719a:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2200      	movs	r2, #0
 80071a0:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2200      	movs	r2, #0
 80071a6:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	4a14      	ldr	r2, [pc, #80]	; (80071fc <_DoInit+0x90>)
 80071ac:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	4a14      	ldr	r2, [pc, #80]	; (8007204 <_DoInit+0x98>)
 80071b2:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2210      	movs	r2, #16
 80071b8:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2200      	movs	r2, #0
 80071be:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2200      	movs	r2, #0
 80071c4:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2200      	movs	r2, #0
 80071ca:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  strcpy(&p->acID[7], "RTT");
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	3307      	adds	r3, #7
 80071d0:	4a0d      	ldr	r2, [pc, #52]	; (8007208 <_DoInit+0x9c>)
 80071d2:	6810      	ldr	r0, [r2, #0]
 80071d4:	6018      	str	r0, [r3, #0]
  strcpy(&p->acID[0], "SEGGER");
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	4a0c      	ldr	r2, [pc, #48]	; (800720c <_DoInit+0xa0>)
 80071da:	6810      	ldr	r0, [r2, #0]
 80071dc:	6018      	str	r0, [r3, #0]
 80071de:	8891      	ldrh	r1, [r2, #4]
 80071e0:	7992      	ldrb	r2, [r2, #6]
 80071e2:	8099      	strh	r1, [r3, #4]
 80071e4:	719a      	strb	r2, [r3, #6]
  p->acID[6] = ' ';
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2220      	movs	r2, #32
 80071ea:	719a      	strb	r2, [r3, #6]
}
 80071ec:	bf00      	nop
 80071ee:	370c      	adds	r7, #12
 80071f0:	46bd      	mov	sp, r7
 80071f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f6:	4770      	bx	lr
 80071f8:	20004b80 	.word	0x20004b80
 80071fc:	08009448 	.word	0x08009448
 8007200:	20004c28 	.word	0x20004c28
 8007204:	20005028 	.word	0x20005028
 8007208:	08009454 	.word	0x08009454
 800720c:	08009458 	.word	0x08009458

08007210 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8007210:	b580      	push	{r7, lr}
 8007212:	b08a      	sub	sp, #40	; 0x28
 8007214:	af00      	add	r7, sp, #0
 8007216:	60f8      	str	r0, [r7, #12]
 8007218:	60b9      	str	r1, [r7, #8]
 800721a:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_DOWN* pRing;
#if SEGGER_RTT_MEMCPY_USE_BYTELOOP
  const char*             pSrc;
#endif
  //
  INIT();
 800721c:	4b3c      	ldr	r3, [pc, #240]	; (8007310 <SEGGER_RTT_ReadNoLock+0x100>)
 800721e:	781b      	ldrb	r3, [r3, #0]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d101      	bne.n	8007228 <SEGGER_RTT_ReadNoLock+0x18>
 8007224:	f7ff ffa2 	bl	800716c <_DoInit>
  pRing = &_SEGGER_RTT.aDown[BufferIndex];
 8007228:	68fa      	ldr	r2, [r7, #12]
 800722a:	4613      	mov	r3, r2
 800722c:	005b      	lsls	r3, r3, #1
 800722e:	4413      	add	r3, r2
 8007230:	00db      	lsls	r3, r3, #3
 8007232:	3360      	adds	r3, #96	; 0x60
 8007234:	4a36      	ldr	r2, [pc, #216]	; (8007310 <SEGGER_RTT_ReadNoLock+0x100>)
 8007236:	4413      	add	r3, r2
 8007238:	61bb      	str	r3, [r7, #24]
  pBuffer = (unsigned char*)pData;
 800723a:	68bb      	ldr	r3, [r7, #8]
 800723c:	61fb      	str	r3, [r7, #28]
  RdOff = pRing->RdOff;
 800723e:	69bb      	ldr	r3, [r7, #24]
 8007240:	691b      	ldr	r3, [r3, #16]
 8007242:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8007244:	69bb      	ldr	r3, [r7, #24]
 8007246:	68db      	ldr	r3, [r3, #12]
 8007248:	617b      	str	r3, [r7, #20]
  NumBytesRead = 0u;
 800724a:	2300      	movs	r3, #0
 800724c:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 800724e:	6a3a      	ldr	r2, [r7, #32]
 8007250:	697b      	ldr	r3, [r7, #20]
 8007252:	429a      	cmp	r2, r3
 8007254:	d92a      	bls.n	80072ac <SEGGER_RTT_ReadNoLock+0x9c>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8007256:	69bb      	ldr	r3, [r7, #24]
 8007258:	689a      	ldr	r2, [r3, #8]
 800725a:	6a3b      	ldr	r3, [r7, #32]
 800725c:	1ad3      	subs	r3, r2, r3
 800725e:	613b      	str	r3, [r7, #16]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8007260:	693a      	ldr	r2, [r7, #16]
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	4293      	cmp	r3, r2
 8007266:	bf28      	it	cs
 8007268:	4613      	movcs	r3, r2
 800726a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 800726c:	69bb      	ldr	r3, [r7, #24]
 800726e:	685a      	ldr	r2, [r3, #4]
 8007270:	6a3b      	ldr	r3, [r7, #32]
 8007272:	4413      	add	r3, r2
 8007274:	693a      	ldr	r2, [r7, #16]
 8007276:	4619      	mov	r1, r3
 8007278:	69f8      	ldr	r0, [r7, #28]
 800727a:	f001 fbf5 	bl	8008a68 <memcpy>
    NumBytesRead += NumBytesRem;
 800727e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007280:	693b      	ldr	r3, [r7, #16]
 8007282:	4413      	add	r3, r2
 8007284:	627b      	str	r3, [r7, #36]	; 0x24
    pBuffer      += NumBytesRem;
 8007286:	69fa      	ldr	r2, [r7, #28]
 8007288:	693b      	ldr	r3, [r7, #16]
 800728a:	4413      	add	r3, r2
 800728c:	61fb      	str	r3, [r7, #28]
    BufferSize   -= NumBytesRem;
 800728e:	687a      	ldr	r2, [r7, #4]
 8007290:	693b      	ldr	r3, [r7, #16]
 8007292:	1ad3      	subs	r3, r2, r3
 8007294:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8007296:	6a3a      	ldr	r2, [r7, #32]
 8007298:	693b      	ldr	r3, [r7, #16]
 800729a:	4413      	add	r3, r2
 800729c:	623b      	str	r3, [r7, #32]
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800729e:	69bb      	ldr	r3, [r7, #24]
 80072a0:	689b      	ldr	r3, [r3, #8]
 80072a2:	6a3a      	ldr	r2, [r7, #32]
 80072a4:	429a      	cmp	r2, r3
 80072a6:	d101      	bne.n	80072ac <SEGGER_RTT_ReadNoLock+0x9c>
      RdOff = 0u;
 80072a8:	2300      	movs	r3, #0
 80072aa:	623b      	str	r3, [r7, #32]
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80072ac:	697a      	ldr	r2, [r7, #20]
 80072ae:	6a3b      	ldr	r3, [r7, #32]
 80072b0:	1ad3      	subs	r3, r2, r3
 80072b2:	613b      	str	r3, [r7, #16]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80072b4:	693a      	ldr	r2, [r7, #16]
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	4293      	cmp	r3, r2
 80072ba:	bf28      	it	cs
 80072bc:	4613      	movcs	r3, r2
 80072be:	613b      	str	r3, [r7, #16]
  if (NumBytesRem > 0u) {
 80072c0:	693b      	ldr	r3, [r7, #16]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d018      	beq.n	80072f8 <SEGGER_RTT_ReadNoLock+0xe8>
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 80072c6:	69bb      	ldr	r3, [r7, #24]
 80072c8:	685a      	ldr	r2, [r3, #4]
 80072ca:	6a3b      	ldr	r3, [r7, #32]
 80072cc:	4413      	add	r3, r2
 80072ce:	693a      	ldr	r2, [r7, #16]
 80072d0:	4619      	mov	r1, r3
 80072d2:	69f8      	ldr	r0, [r7, #28]
 80072d4:	f001 fbc8 	bl	8008a68 <memcpy>
    NumBytesRead += NumBytesRem;
 80072d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072da:	693b      	ldr	r3, [r7, #16]
 80072dc:	4413      	add	r3, r2
 80072de:	627b      	str	r3, [r7, #36]	; 0x24
    pBuffer      += NumBytesRem;
 80072e0:	69fa      	ldr	r2, [r7, #28]
 80072e2:	693b      	ldr	r3, [r7, #16]
 80072e4:	4413      	add	r3, r2
 80072e6:	61fb      	str	r3, [r7, #28]
    BufferSize   -= NumBytesRem;
 80072e8:	687a      	ldr	r2, [r7, #4]
 80072ea:	693b      	ldr	r3, [r7, #16]
 80072ec:	1ad3      	subs	r3, r2, r3
 80072ee:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80072f0:	6a3a      	ldr	r2, [r7, #32]
 80072f2:	693b      	ldr	r3, [r7, #16]
 80072f4:	4413      	add	r3, r2
 80072f6:	623b      	str	r3, [r7, #32]
#endif
  }
  if (NumBytesRead) {
 80072f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d002      	beq.n	8007304 <SEGGER_RTT_ReadNoLock+0xf4>
    pRing->RdOff = RdOff;
 80072fe:	69bb      	ldr	r3, [r7, #24]
 8007300:	6a3a      	ldr	r2, [r7, #32]
 8007302:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8007304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007306:	4618      	mov	r0, r3
 8007308:	3728      	adds	r7, #40	; 0x28
 800730a:	46bd      	mov	sp, r7
 800730c:	bd80      	pop	{r7, pc}
 800730e:	bf00      	nop
 8007310:	20004b80 	.word	0x20004b80

08007314 <SEGGER_RTT_WriteSkipNoLock>:
*    (1) If there is not enough space in the "Up"-buffer, all data is dropped.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8007314:	b580      	push	{r7, lr}
 8007316:	b08a      	sub	sp, #40	; 0x28
 8007318:	af00      	add	r7, sp, #0
 800731a:	60f8      	str	r0, [r7, #12]
 800731c:	60b9      	str	r1, [r7, #8]
 800731e:	607a      	str	r2, [r7, #4]
  unsigned              Rem;
#if SEGGER_RTT_MEMCPY_USE_BYTELOOP
  char*                 pDst;
#endif

  pData = (const char *)pBuffer;
 8007320:	68bb      	ldr	r3, [r7, #8]
 8007322:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get "to-host" ring buffer and copy some elements into local variables.
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	1c5a      	adds	r2, r3, #1
 8007328:	4613      	mov	r3, r2
 800732a:	005b      	lsls	r3, r3, #1
 800732c:	4413      	add	r3, r2
 800732e:	00db      	lsls	r3, r3, #3
 8007330:	4a3f      	ldr	r2, [pc, #252]	; (8007430 <SEGGER_RTT_WriteSkipNoLock+0x11c>)
 8007332:	4413      	add	r3, r2
 8007334:	623b      	str	r3, [r7, #32]
  RdOff = pRing->RdOff;
 8007336:	6a3b      	ldr	r3, [r7, #32]
 8007338:	691b      	ldr	r3, [r3, #16]
 800733a:	61fb      	str	r3, [r7, #28]
  WrOff = pRing->WrOff;
 800733c:	6a3b      	ldr	r3, [r7, #32]
 800733e:	68db      	ldr	r3, [r3, #12]
 8007340:	61bb      	str	r3, [r7, #24]
  //
  //    RdOff > WrOff -> Space until RdOff - 1 is free.
  //  AND
  //    WrOff + NumBytes < RdOff -> Data fits into buffer
  //
  if (RdOff <= WrOff) {
 8007342:	69fa      	ldr	r2, [r7, #28]
 8007344:	69bb      	ldr	r3, [r7, #24]
 8007346:	429a      	cmp	r2, r3
 8007348:	d854      	bhi.n	80073f4 <SEGGER_RTT_WriteSkipNoLock+0xe0>
    //
    // Get space until WrOff will be at wrap around.
    //
    Avail = pRing->SizeOfBuffer - 1u - WrOff ;
 800734a:	6a3b      	ldr	r3, [r7, #32]
 800734c:	689a      	ldr	r2, [r3, #8]
 800734e:	69bb      	ldr	r3, [r7, #24]
 8007350:	1ad3      	subs	r3, r2, r3
 8007352:	3b01      	subs	r3, #1
 8007354:	617b      	str	r3, [r7, #20]
    if (Avail >= NumBytes) {
 8007356:	697a      	ldr	r2, [r7, #20]
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	429a      	cmp	r2, r3
 800735c:	d30f      	bcc.n	800737e <SEGGER_RTT_WriteSkipNoLock+0x6a>
      while (NumBytes--) {
        *pDst++ = *pData++;
      };
      pRing->WrOff = WrOff;
#else
      SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 800735e:	6a3b      	ldr	r3, [r7, #32]
 8007360:	685a      	ldr	r2, [r3, #4]
 8007362:	69bb      	ldr	r3, [r7, #24]
 8007364:	4413      	add	r3, r2
 8007366:	687a      	ldr	r2, [r7, #4]
 8007368:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800736a:	4618      	mov	r0, r3
 800736c:	f001 fb7c 	bl	8008a68 <memcpy>
      pRing->WrOff = WrOff + NumBytes;
 8007370:	69ba      	ldr	r2, [r7, #24]
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	441a      	add	r2, r3
 8007376:	6a3b      	ldr	r3, [r7, #32]
 8007378:	60da      	str	r2, [r3, #12]
#endif
      return 1;
 800737a:	2301      	movs	r3, #1
 800737c:	e054      	b.n	8007428 <SEGGER_RTT_WriteSkipNoLock+0x114>
    }
    //
    // If data did not fit into space until wrap around calculate complete space in buffer.
    //
    Avail += RdOff;
 800737e:	697a      	ldr	r2, [r7, #20]
 8007380:	69fb      	ldr	r3, [r7, #28]
 8007382:	4413      	add	r3, r2
 8007384:	617b      	str	r3, [r7, #20]
    //
    // If there is still no space for the whole of this output, don't bother.
    //
    if (Avail >= NumBytes) {
 8007386:	697a      	ldr	r2, [r7, #20]
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	429a      	cmp	r2, r3
 800738c:	d34b      	bcc.n	8007426 <SEGGER_RTT_WriteSkipNoLock+0x112>
      //
      //  OK, we have enough space in buffer. Copy in one or 2 chunks
      //
      Rem = pRing->SizeOfBuffer - WrOff;      // Space until end of buffer
 800738e:	6a3b      	ldr	r3, [r7, #32]
 8007390:	689a      	ldr	r2, [r3, #8]
 8007392:	69bb      	ldr	r3, [r7, #24]
 8007394:	1ad3      	subs	r3, r2, r3
 8007396:	613b      	str	r3, [r7, #16]
      if (Rem > NumBytes) {
 8007398:	693a      	ldr	r2, [r7, #16]
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	429a      	cmp	r2, r3
 800739e:	d90e      	bls.n	80073be <SEGGER_RTT_WriteSkipNoLock+0xaa>
        while (NumBytes--) {
          *pDst++ = *pData++;
        };
        pRing->WrOff = WrOff;
#else
        SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 80073a0:	6a3b      	ldr	r3, [r7, #32]
 80073a2:	685a      	ldr	r2, [r3, #4]
 80073a4:	69bb      	ldr	r3, [r7, #24]
 80073a6:	4413      	add	r3, r2
 80073a8:	687a      	ldr	r2, [r7, #4]
 80073aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80073ac:	4618      	mov	r0, r3
 80073ae:	f001 fb5b 	bl	8008a68 <memcpy>
        pRing->WrOff = WrOff + NumBytes;
 80073b2:	69ba      	ldr	r2, [r7, #24]
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	441a      	add	r2, r3
 80073b8:	6a3b      	ldr	r3, [r7, #32]
 80073ba:	60da      	str	r2, [r3, #12]
 80073bc:	e018      	b.n	80073f0 <SEGGER_RTT_WriteSkipNoLock+0xdc>
        while (NumBytes--) {
          *pDst++ = *pData++;
        };
        pRing->WrOff = WrOff;
#else
        SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, Rem);
 80073be:	6a3b      	ldr	r3, [r7, #32]
 80073c0:	685a      	ldr	r2, [r3, #4]
 80073c2:	69bb      	ldr	r3, [r7, #24]
 80073c4:	4413      	add	r3, r2
 80073c6:	693a      	ldr	r2, [r7, #16]
 80073c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80073ca:	4618      	mov	r0, r3
 80073cc:	f001 fb4c 	bl	8008a68 <memcpy>
        SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytes - Rem);
 80073d0:	6a3b      	ldr	r3, [r7, #32]
 80073d2:	6858      	ldr	r0, [r3, #4]
 80073d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073d6:	693b      	ldr	r3, [r7, #16]
 80073d8:	18d1      	adds	r1, r2, r3
 80073da:	687a      	ldr	r2, [r7, #4]
 80073dc:	693b      	ldr	r3, [r7, #16]
 80073de:	1ad3      	subs	r3, r2, r3
 80073e0:	461a      	mov	r2, r3
 80073e2:	f001 fb41 	bl	8008a68 <memcpy>
        pRing->WrOff = NumBytes - Rem;
 80073e6:	687a      	ldr	r2, [r7, #4]
 80073e8:	693b      	ldr	r3, [r7, #16]
 80073ea:	1ad2      	subs	r2, r2, r3
 80073ec:	6a3b      	ldr	r3, [r7, #32]
 80073ee:	60da      	str	r2, [r3, #12]
#endif
      }
      return 1;
 80073f0:	2301      	movs	r3, #1
 80073f2:	e019      	b.n	8007428 <SEGGER_RTT_WriteSkipNoLock+0x114>
    }
  } else {
    Avail = RdOff - WrOff - 1u;
 80073f4:	69fa      	ldr	r2, [r7, #28]
 80073f6:	69bb      	ldr	r3, [r7, #24]
 80073f8:	1ad3      	subs	r3, r2, r3
 80073fa:	3b01      	subs	r3, #1
 80073fc:	617b      	str	r3, [r7, #20]
    if (Avail >= NumBytes) {
 80073fe:	697a      	ldr	r2, [r7, #20]
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	429a      	cmp	r2, r3
 8007404:	d30f      	bcc.n	8007426 <SEGGER_RTT_WriteSkipNoLock+0x112>
      while (NumBytes--) {
        *pDst++ = *pData++;
      };
      pRing->WrOff = WrOff;
#else
      SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 8007406:	6a3b      	ldr	r3, [r7, #32]
 8007408:	685a      	ldr	r2, [r3, #4]
 800740a:	69bb      	ldr	r3, [r7, #24]
 800740c:	4413      	add	r3, r2
 800740e:	687a      	ldr	r2, [r7, #4]
 8007410:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007412:	4618      	mov	r0, r3
 8007414:	f001 fb28 	bl	8008a68 <memcpy>
      pRing->WrOff = WrOff + NumBytes;
 8007418:	69ba      	ldr	r2, [r7, #24]
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	441a      	add	r2, r3
 800741e:	6a3b      	ldr	r3, [r7, #32]
 8007420:	60da      	str	r2, [r3, #12]
#endif
      return 1;
 8007422:	2301      	movs	r3, #1
 8007424:	e000      	b.n	8007428 <SEGGER_RTT_WriteSkipNoLock+0x114>
    }
  }
  //
  // If we reach this point no data has been written
  //
  return 0;
 8007426:	2300      	movs	r3, #0
}
 8007428:	4618      	mov	r0, r3
 800742a:	3728      	adds	r7, #40	; 0x28
 800742c:	46bd      	mov	sp, r7
 800742e:	bd80      	pop	{r7, pc}
 8007430:	20004b80 	.word	0x20004b80

08007434 <SEGGER_RTT_ConfigUpBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigUpBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8007434:	b580      	push	{r7, lr}
 8007436:	b086      	sub	sp, #24
 8007438:	af00      	add	r7, sp, #0
 800743a:	60f8      	str	r0, [r7, #12]
 800743c:	60b9      	str	r1, [r7, #8]
 800743e:	607a      	str	r2, [r7, #4]
 8007440:	603b      	str	r3, [r7, #0]
  int r;

  INIT();
 8007442:	4b30      	ldr	r3, [pc, #192]	; (8007504 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8007444:	781b      	ldrb	r3, [r3, #0]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d101      	bne.n	800744e <SEGGER_RTT_ConfigUpBuffer+0x1a>
 800744a:	f7ff fe8f 	bl	800716c <_DoInit>
  if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumUpBuffers) {
 800744e:	4b2d      	ldr	r3, [pc, #180]	; (8007504 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8007450:	691b      	ldr	r3, [r3, #16]
 8007452:	461a      	mov	r2, r3
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	4293      	cmp	r3, r2
 8007458:	d24c      	bcs.n	80074f4 <SEGGER_RTT_ConfigUpBuffer+0xc0>
    SEGGER_RTT_LOCK();
 800745a:	f3ef 8311 	mrs	r3, BASEPRI
 800745e:	f04f 0120 	mov.w	r1, #32
 8007462:	f381 8811 	msr	BASEPRI, r1
 8007466:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d032      	beq.n	80074d4 <SEGGER_RTT_ConfigUpBuffer+0xa0>
      _SEGGER_RTT.aUp[BufferIndex].sName        = sName;
 800746e:	4925      	ldr	r1, [pc, #148]	; (8007504 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	1c5a      	adds	r2, r3, #1
 8007474:	4613      	mov	r3, r2
 8007476:	005b      	lsls	r3, r3, #1
 8007478:	4413      	add	r3, r2
 800747a:	00db      	lsls	r3, r3, #3
 800747c:	440b      	add	r3, r1
 800747e:	68ba      	ldr	r2, [r7, #8]
 8007480:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8007482:	4920      	ldr	r1, [pc, #128]	; (8007504 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	1c5a      	adds	r2, r3, #1
 8007488:	4613      	mov	r3, r2
 800748a:	005b      	lsls	r3, r3, #1
 800748c:	4413      	add	r3, r2
 800748e:	00db      	lsls	r3, r3, #3
 8007490:	440b      	add	r3, r1
 8007492:	3304      	adds	r3, #4
 8007494:	687a      	ldr	r2, [r7, #4]
 8007496:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8007498:	491a      	ldr	r1, [pc, #104]	; (8007504 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 800749a:	68fa      	ldr	r2, [r7, #12]
 800749c:	4613      	mov	r3, r2
 800749e:	005b      	lsls	r3, r3, #1
 80074a0:	4413      	add	r3, r2
 80074a2:	00db      	lsls	r3, r3, #3
 80074a4:	440b      	add	r3, r1
 80074a6:	3320      	adds	r3, #32
 80074a8:	683a      	ldr	r2, [r7, #0]
 80074aa:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].RdOff        = 0u;
 80074ac:	4915      	ldr	r1, [pc, #84]	; (8007504 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 80074ae:	68fa      	ldr	r2, [r7, #12]
 80074b0:	4613      	mov	r3, r2
 80074b2:	005b      	lsls	r3, r3, #1
 80074b4:	4413      	add	r3, r2
 80074b6:	00db      	lsls	r3, r3, #3
 80074b8:	440b      	add	r3, r1
 80074ba:	3328      	adds	r3, #40	; 0x28
 80074bc:	2200      	movs	r2, #0
 80074be:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].WrOff        = 0u;
 80074c0:	4910      	ldr	r1, [pc, #64]	; (8007504 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 80074c2:	68fa      	ldr	r2, [r7, #12]
 80074c4:	4613      	mov	r3, r2
 80074c6:	005b      	lsls	r3, r3, #1
 80074c8:	4413      	add	r3, r2
 80074ca:	00db      	lsls	r3, r3, #3
 80074cc:	440b      	add	r3, r1
 80074ce:	3324      	adds	r3, #36	; 0x24
 80074d0:	2200      	movs	r2, #0
 80074d2:	601a      	str	r2, [r3, #0]
    }
    _SEGGER_RTT.aUp[BufferIndex].Flags          = Flags;
 80074d4:	490b      	ldr	r1, [pc, #44]	; (8007504 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 80074d6:	68fa      	ldr	r2, [r7, #12]
 80074d8:	4613      	mov	r3, r2
 80074da:	005b      	lsls	r3, r3, #1
 80074dc:	4413      	add	r3, r2
 80074de:	00db      	lsls	r3, r3, #3
 80074e0:	440b      	add	r3, r1
 80074e2:	332c      	adds	r3, #44	; 0x2c
 80074e4:	6a3a      	ldr	r2, [r7, #32]
 80074e6:	601a      	str	r2, [r3, #0]
    SEGGER_RTT_UNLOCK();
 80074e8:	693b      	ldr	r3, [r7, #16]
 80074ea:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 80074ee:	2300      	movs	r3, #0
 80074f0:	617b      	str	r3, [r7, #20]
 80074f2:	e002      	b.n	80074fa <SEGGER_RTT_ConfigUpBuffer+0xc6>
  } else {
    r = -1;
 80074f4:	f04f 33ff 	mov.w	r3, #4294967295
 80074f8:	617b      	str	r3, [r7, #20]
  }
  return r;
 80074fa:	697b      	ldr	r3, [r7, #20]
}
 80074fc:	4618      	mov	r0, r3
 80074fe:	3718      	adds	r7, #24
 8007500:	46bd      	mov	sp, r7
 8007502:	bd80      	pop	{r7, pc}
 8007504:	20004b80 	.word	0x20004b80

08007508 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8007508:	b580      	push	{r7, lr}
 800750a:	b086      	sub	sp, #24
 800750c:	af00      	add	r7, sp, #0
 800750e:	60f8      	str	r0, [r7, #12]
 8007510:	60b9      	str	r1, [r7, #8]
 8007512:	607a      	str	r2, [r7, #4]
 8007514:	603b      	str	r3, [r7, #0]
  int r;

  INIT();
 8007516:	4b30      	ldr	r3, [pc, #192]	; (80075d8 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8007518:	781b      	ldrb	r3, [r3, #0]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d101      	bne.n	8007522 <SEGGER_RTT_ConfigDownBuffer+0x1a>
 800751e:	f7ff fe25 	bl	800716c <_DoInit>
  if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumDownBuffers) {
 8007522:	4b2d      	ldr	r3, [pc, #180]	; (80075d8 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8007524:	695b      	ldr	r3, [r3, #20]
 8007526:	461a      	mov	r2, r3
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	4293      	cmp	r3, r2
 800752c:	d24b      	bcs.n	80075c6 <SEGGER_RTT_ConfigDownBuffer+0xbe>
    SEGGER_RTT_LOCK();
 800752e:	f3ef 8311 	mrs	r3, BASEPRI
 8007532:	f04f 0120 	mov.w	r1, #32
 8007536:	f381 8811 	msr	BASEPRI, r1
 800753a:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d031      	beq.n	80075a6 <SEGGER_RTT_ConfigDownBuffer+0x9e>
      _SEGGER_RTT.aDown[BufferIndex].sName        = sName;
 8007542:	4925      	ldr	r1, [pc, #148]	; (80075d8 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8007544:	68fa      	ldr	r2, [r7, #12]
 8007546:	4613      	mov	r3, r2
 8007548:	005b      	lsls	r3, r3, #1
 800754a:	4413      	add	r3, r2
 800754c:	00db      	lsls	r3, r3, #3
 800754e:	440b      	add	r3, r1
 8007550:	3360      	adds	r3, #96	; 0x60
 8007552:	68ba      	ldr	r2, [r7, #8]
 8007554:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8007556:	4920      	ldr	r1, [pc, #128]	; (80075d8 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8007558:	68fa      	ldr	r2, [r7, #12]
 800755a:	4613      	mov	r3, r2
 800755c:	005b      	lsls	r3, r3, #1
 800755e:	4413      	add	r3, r2
 8007560:	00db      	lsls	r3, r3, #3
 8007562:	440b      	add	r3, r1
 8007564:	3364      	adds	r3, #100	; 0x64
 8007566:	687a      	ldr	r2, [r7, #4]
 8007568:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].SizeOfBuffer = BufferSize;
 800756a:	491b      	ldr	r1, [pc, #108]	; (80075d8 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 800756c:	68fa      	ldr	r2, [r7, #12]
 800756e:	4613      	mov	r3, r2
 8007570:	005b      	lsls	r3, r3, #1
 8007572:	4413      	add	r3, r2
 8007574:	00db      	lsls	r3, r3, #3
 8007576:	440b      	add	r3, r1
 8007578:	3368      	adds	r3, #104	; 0x68
 800757a:	683a      	ldr	r2, [r7, #0]
 800757c:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].RdOff        = 0u;
 800757e:	4916      	ldr	r1, [pc, #88]	; (80075d8 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8007580:	68fa      	ldr	r2, [r7, #12]
 8007582:	4613      	mov	r3, r2
 8007584:	005b      	lsls	r3, r3, #1
 8007586:	4413      	add	r3, r2
 8007588:	00db      	lsls	r3, r3, #3
 800758a:	440b      	add	r3, r1
 800758c:	3370      	adds	r3, #112	; 0x70
 800758e:	2200      	movs	r2, #0
 8007590:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].WrOff        = 0u;
 8007592:	4911      	ldr	r1, [pc, #68]	; (80075d8 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8007594:	68fa      	ldr	r2, [r7, #12]
 8007596:	4613      	mov	r3, r2
 8007598:	005b      	lsls	r3, r3, #1
 800759a:	4413      	add	r3, r2
 800759c:	00db      	lsls	r3, r3, #3
 800759e:	440b      	add	r3, r1
 80075a0:	336c      	adds	r3, #108	; 0x6c
 80075a2:	2200      	movs	r2, #0
 80075a4:	601a      	str	r2, [r3, #0]
    }
    _SEGGER_RTT.aDown[BufferIndex].Flags          = Flags;
 80075a6:	490c      	ldr	r1, [pc, #48]	; (80075d8 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 80075a8:	68fa      	ldr	r2, [r7, #12]
 80075aa:	4613      	mov	r3, r2
 80075ac:	005b      	lsls	r3, r3, #1
 80075ae:	4413      	add	r3, r2
 80075b0:	00db      	lsls	r3, r3, #3
 80075b2:	440b      	add	r3, r1
 80075b4:	3374      	adds	r3, #116	; 0x74
 80075b6:	6a3a      	ldr	r2, [r7, #32]
 80075b8:	601a      	str	r2, [r3, #0]
    SEGGER_RTT_UNLOCK();
 80075ba:	693b      	ldr	r3, [r7, #16]
 80075bc:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 80075c0:	2300      	movs	r3, #0
 80075c2:	617b      	str	r3, [r7, #20]
 80075c4:	e002      	b.n	80075cc <SEGGER_RTT_ConfigDownBuffer+0xc4>
  } else {
    r = -1;
 80075c6:	f04f 33ff 	mov.w	r3, #4294967295
 80075ca:	617b      	str	r3, [r7, #20]
  }
  return r;
 80075cc:	697b      	ldr	r3, [r7, #20]
}
 80075ce:	4618      	mov	r0, r3
 80075d0:	3718      	adds	r7, #24
 80075d2:	46bd      	mov	sp, r7
 80075d4:	bd80      	pop	{r7, pc}
 80075d6:	bf00      	nop
 80075d8:	20004b80 	.word	0x20004b80

080075dc <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 80075dc:	b480      	push	{r7}
 80075de:	b087      	sub	sp, #28
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	60f8      	str	r0, [r7, #12]
 80075e4:	60b9      	str	r1, [r7, #8]
 80075e6:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 80075e8:	2300      	movs	r3, #0
 80075ea:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 80075ec:	e002      	b.n	80075f4 <_EncodeStr+0x18>
    Len++;
 80075ee:	693b      	ldr	r3, [r7, #16]
 80075f0:	3301      	adds	r3, #1
 80075f2:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 80075f4:	68ba      	ldr	r2, [r7, #8]
 80075f6:	693b      	ldr	r3, [r7, #16]
 80075f8:	4413      	add	r3, r2
 80075fa:	781b      	ldrb	r3, [r3, #0]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d1f6      	bne.n	80075ee <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8007600:	693a      	ldr	r2, [r7, #16]
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	429a      	cmp	r2, r3
 8007606:	d901      	bls.n	800760c <_EncodeStr+0x30>
    Len = Limit;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 800760c:	693b      	ldr	r3, [r7, #16]
 800760e:	2bfe      	cmp	r3, #254	; 0xfe
 8007610:	d806      	bhi.n	8007620 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	1c5a      	adds	r2, r3, #1
 8007616:	60fa      	str	r2, [r7, #12]
 8007618:	693a      	ldr	r2, [r7, #16]
 800761a:	b2d2      	uxtb	r2, r2
 800761c:	701a      	strb	r2, [r3, #0]
 800761e:	e011      	b.n	8007644 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	1c5a      	adds	r2, r3, #1
 8007624:	60fa      	str	r2, [r7, #12]
 8007626:	22ff      	movs	r2, #255	; 0xff
 8007628:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	1c5a      	adds	r2, r3, #1
 800762e:	60fa      	str	r2, [r7, #12]
 8007630:	693a      	ldr	r2, [r7, #16]
 8007632:	b2d2      	uxtb	r2, r2
 8007634:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8007636:	693b      	ldr	r3, [r7, #16]
 8007638:	0a19      	lsrs	r1, r3, #8
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	1c5a      	adds	r2, r3, #1
 800763e:	60fa      	str	r2, [r7, #12]
 8007640:	b2ca      	uxtb	r2, r1
 8007642:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8007644:	2300      	movs	r3, #0
 8007646:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8007648:	e00a      	b.n	8007660 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 800764a:	68ba      	ldr	r2, [r7, #8]
 800764c:	1c53      	adds	r3, r2, #1
 800764e:	60bb      	str	r3, [r7, #8]
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	1c59      	adds	r1, r3, #1
 8007654:	60f9      	str	r1, [r7, #12]
 8007656:	7812      	ldrb	r2, [r2, #0]
 8007658:	701a      	strb	r2, [r3, #0]
    n++;
 800765a:	697b      	ldr	r3, [r7, #20]
 800765c:	3301      	adds	r3, #1
 800765e:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8007660:	697a      	ldr	r2, [r7, #20]
 8007662:	693b      	ldr	r3, [r7, #16]
 8007664:	429a      	cmp	r2, r3
 8007666:	d3f0      	bcc.n	800764a <_EncodeStr+0x6e>
  }
  return pPayload;
 8007668:	68fb      	ldr	r3, [r7, #12]
}
 800766a:	4618      	mov	r0, r3
 800766c:	371c      	adds	r7, #28
 800766e:	46bd      	mov	sp, r7
 8007670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007674:	4770      	bx	lr

08007676 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8007676:	b480      	push	{r7}
 8007678:	b083      	sub	sp, #12
 800767a:	af00      	add	r7, sp, #0
 800767c:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	3304      	adds	r3, #4
}
 8007682:	4618      	mov	r0, r3
 8007684:	370c      	adds	r7, #12
 8007686:	46bd      	mov	sp, r7
 8007688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768c:	4770      	bx	lr
	...

08007690 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8007690:	b580      	push	{r7, lr}
 8007692:	b082      	sub	sp, #8
 8007694:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8007696:	1cfb      	adds	r3, r7, #3
 8007698:	2201      	movs	r2, #1
 800769a:	4619      	mov	r1, r3
 800769c:	2001      	movs	r0, #1
 800769e:	f7ff fdb7 	bl	8007210 <SEGGER_RTT_ReadNoLock>
 80076a2:	4603      	mov	r3, r0
 80076a4:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	dd4f      	ble.n	800774c <_HandleIncomingPacket+0xbc>
    switch (Cmd) {
 80076ac:	78fb      	ldrb	r3, [r7, #3]
 80076ae:	2b07      	cmp	r3, #7
 80076b0:	dc16      	bgt.n	80076e0 <_HandleIncomingPacket+0x50>
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	dd3c      	ble.n	8007730 <_HandleIncomingPacket+0xa0>
 80076b6:	3b01      	subs	r3, #1
 80076b8:	2b06      	cmp	r3, #6
 80076ba:	d839      	bhi.n	8007730 <_HandleIncomingPacket+0xa0>
 80076bc:	a201      	add	r2, pc, #4	; (adr r2, 80076c4 <_HandleIncomingPacket+0x34>)
 80076be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076c2:	bf00      	nop
 80076c4:	080076e7 	.word	0x080076e7
 80076c8:	080076ed 	.word	0x080076ed
 80076cc:	080076f3 	.word	0x080076f3
 80076d0:	080076f9 	.word	0x080076f9
 80076d4:	080076ff 	.word	0x080076ff
 80076d8:	08007705 	.word	0x08007705
 80076dc:	0800770b 	.word	0x0800770b
 80076e0:	2b80      	cmp	r3, #128	; 0x80
 80076e2:	d015      	beq.n	8007710 <_HandleIncomingPacket+0x80>
 80076e4:	e024      	b.n	8007730 <_HandleIncomingPacket+0xa0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80076e6:	f000 fb83 	bl	8007df0 <SEGGER_SYSVIEW_Start>
      break;
 80076ea:	e02f      	b.n	800774c <_HandleIncomingPacket+0xbc>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 80076ec:	f000 fc3c 	bl	8007f68 <SEGGER_SYSVIEW_Stop>
      break;
 80076f0:	e02c      	b.n	800774c <_HandleIncomingPacket+0xbc>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 80076f2:	f000 fe17 	bl	8008324 <SEGGER_SYSVIEW_RecordSystime>
      break;
 80076f6:	e029      	b.n	800774c <_HandleIncomingPacket+0xbc>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 80076f8:	f000 fddc 	bl	80082b4 <SEGGER_SYSVIEW_SendTaskList>
      break;
 80076fc:	e026      	b.n	800774c <_HandleIncomingPacket+0xbc>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 80076fe:	f000 fc59 	bl	8007fb4 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8007702:	e023      	b.n	800774c <_HandleIncomingPacket+0xbc>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8007704:	f001 f8b2 	bl	800886c <SEGGER_SYSVIEW_SendNumModules>
      break;
 8007708:	e020      	b.n	800774c <_HandleIncomingPacket+0xbc>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800770a:	f001 f891 	bl	8008830 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800770e:	e01d      	b.n	800774c <_HandleIncomingPacket+0xbc>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8007710:	1cfb      	adds	r3, r7, #3
 8007712:	2201      	movs	r2, #1
 8007714:	4619      	mov	r1, r3
 8007716:	2001      	movs	r0, #1
 8007718:	f7ff fd7a 	bl	8007210 <SEGGER_RTT_ReadNoLock>
 800771c:	4603      	mov	r3, r0
 800771e:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2b00      	cmp	r3, #0
 8007724:	dd0f      	ble.n	8007746 <_HandleIncomingPacket+0xb6>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8007726:	78fb      	ldrb	r3, [r7, #3]
 8007728:	4618      	mov	r0, r3
 800772a:	f001 f801 	bl	8008730 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 800772e:	e00a      	b.n	8007746 <_HandleIncomingPacket+0xb6>
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8007730:	78fb      	ldrb	r3, [r7, #3]
 8007732:	b25b      	sxtb	r3, r3
 8007734:	2b00      	cmp	r3, #0
 8007736:	da08      	bge.n	800774a <_HandleIncomingPacket+0xba>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8007738:	1cfb      	adds	r3, r7, #3
 800773a:	2201      	movs	r2, #1
 800773c:	4619      	mov	r1, r3
 800773e:	2001      	movs	r0, #1
 8007740:	f7ff fd66 	bl	8007210 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8007744:	e001      	b.n	800774a <_HandleIncomingPacket+0xba>
      break;
 8007746:	bf00      	nop
 8007748:	e000      	b.n	800774c <_HandleIncomingPacket+0xbc>
      break;
 800774a:	bf00      	nop
    }
  }
}
 800774c:	bf00      	nop
 800774e:	3708      	adds	r7, #8
 8007750:	46bd      	mov	sp, r7
 8007752:	bd80      	pop	{r7, pc}

08007754 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8007754:	b580      	push	{r7, lr}
 8007756:	b08c      	sub	sp, #48	; 0x30
 8007758:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800775a:	2301      	movs	r3, #1
 800775c:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800775e:	1d3b      	adds	r3, r7, #4
 8007760:	3301      	adds	r3, #1
 8007762:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8007764:	69fb      	ldr	r3, [r7, #28]
 8007766:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007768:	4b30      	ldr	r3, [pc, #192]	; (800782c <_TrySendOverflowPacket+0xd8>)
 800776a:	695b      	ldr	r3, [r3, #20]
 800776c:	62bb      	str	r3, [r7, #40]	; 0x28
 800776e:	e00b      	b.n	8007788 <_TrySendOverflowPacket+0x34>
 8007770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007772:	b2da      	uxtb	r2, r3
 8007774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007776:	1c59      	adds	r1, r3, #1
 8007778:	62f9      	str	r1, [r7, #44]	; 0x2c
 800777a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800777e:	b2d2      	uxtb	r2, r2
 8007780:	701a      	strb	r2, [r3, #0]
 8007782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007784:	09db      	lsrs	r3, r3, #7
 8007786:	62bb      	str	r3, [r7, #40]	; 0x28
 8007788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800778a:	2b7f      	cmp	r3, #127	; 0x7f
 800778c:	d8f0      	bhi.n	8007770 <_TrySendOverflowPacket+0x1c>
 800778e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007790:	1c5a      	adds	r2, r3, #1
 8007792:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007794:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007796:	b2d2      	uxtb	r2, r2
 8007798:	701a      	strb	r2, [r3, #0]
 800779a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800779c:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800779e:	4b24      	ldr	r3, [pc, #144]	; (8007830 <_TrySendOverflowPacket+0xdc>)
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80077a4:	4b21      	ldr	r3, [pc, #132]	; (800782c <_TrySendOverflowPacket+0xd8>)
 80077a6:	68db      	ldr	r3, [r3, #12]
 80077a8:	69ba      	ldr	r2, [r7, #24]
 80077aa:	1ad3      	subs	r3, r2, r3
 80077ac:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 80077ae:	69fb      	ldr	r3, [r7, #28]
 80077b0:	627b      	str	r3, [r7, #36]	; 0x24
 80077b2:	697b      	ldr	r3, [r7, #20]
 80077b4:	623b      	str	r3, [r7, #32]
 80077b6:	e00b      	b.n	80077d0 <_TrySendOverflowPacket+0x7c>
 80077b8:	6a3b      	ldr	r3, [r7, #32]
 80077ba:	b2da      	uxtb	r2, r3
 80077bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077be:	1c59      	adds	r1, r3, #1
 80077c0:	6279      	str	r1, [r7, #36]	; 0x24
 80077c2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80077c6:	b2d2      	uxtb	r2, r2
 80077c8:	701a      	strb	r2, [r3, #0]
 80077ca:	6a3b      	ldr	r3, [r7, #32]
 80077cc:	09db      	lsrs	r3, r3, #7
 80077ce:	623b      	str	r3, [r7, #32]
 80077d0:	6a3b      	ldr	r3, [r7, #32]
 80077d2:	2b7f      	cmp	r3, #127	; 0x7f
 80077d4:	d8f0      	bhi.n	80077b8 <_TrySendOverflowPacket+0x64>
 80077d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077d8:	1c5a      	adds	r2, r3, #1
 80077da:	627a      	str	r2, [r7, #36]	; 0x24
 80077dc:	6a3a      	ldr	r2, [r7, #32]
 80077de:	b2d2      	uxtb	r2, r2
 80077e0:	701a      	strb	r2, [r3, #0]
 80077e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077e4:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 80077e6:	1d3b      	adds	r3, r7, #4
 80077e8:	69fa      	ldr	r2, [r7, #28]
 80077ea:	1ad3      	subs	r3, r2, r3
 80077ec:	461a      	mov	r2, r3
 80077ee:	1d3b      	adds	r3, r7, #4
 80077f0:	4619      	mov	r1, r3
 80077f2:	2001      	movs	r0, #1
 80077f4:	f7ff fd8e 	bl	8007314 <SEGGER_RTT_WriteSkipNoLock>
 80077f8:	4603      	mov	r3, r0
 80077fa:	613b      	str	r3, [r7, #16]
  if (Status) {
 80077fc:	693b      	ldr	r3, [r7, #16]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d009      	beq.n	8007816 <_TrySendOverflowPacket+0xc2>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8007802:	4a0a      	ldr	r2, [pc, #40]	; (800782c <_TrySendOverflowPacket+0xd8>)
 8007804:	69bb      	ldr	r3, [r7, #24]
 8007806:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8007808:	4b08      	ldr	r3, [pc, #32]	; (800782c <_TrySendOverflowPacket+0xd8>)
 800780a:	781b      	ldrb	r3, [r3, #0]
 800780c:	3b01      	subs	r3, #1
 800780e:	b2da      	uxtb	r2, r3
 8007810:	4b06      	ldr	r3, [pc, #24]	; (800782c <_TrySendOverflowPacket+0xd8>)
 8007812:	701a      	strb	r2, [r3, #0]
 8007814:	e004      	b.n	8007820 <_TrySendOverflowPacket+0xcc>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8007816:	4b05      	ldr	r3, [pc, #20]	; (800782c <_TrySendOverflowPacket+0xd8>)
 8007818:	695b      	ldr	r3, [r3, #20]
 800781a:	3301      	adds	r3, #1
 800781c:	4a03      	ldr	r2, [pc, #12]	; (800782c <_TrySendOverflowPacket+0xd8>)
 800781e:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8007820:	693b      	ldr	r3, [r7, #16]
}
 8007822:	4618      	mov	r0, r3
 8007824:	3730      	adds	r7, #48	; 0x30
 8007826:	46bd      	mov	sp, r7
 8007828:	bd80      	pop	{r7, pc}
 800782a:	bf00      	nop
 800782c:	20007040 	.word	0x20007040
 8007830:	e0001004 	.word	0xe0001004

08007834 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8007834:	b580      	push	{r7, lr}
 8007836:	b08a      	sub	sp, #40	; 0x28
 8007838:	af00      	add	r7, sp, #0
 800783a:	60f8      	str	r0, [r7, #12]
 800783c:	60b9      	str	r1, [r7, #8]
 800783e:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8007840:	4b63      	ldr	r3, [pc, #396]	; (80079d0 <_SendPacket+0x19c>)
 8007842:	781b      	ldrb	r3, [r3, #0]
 8007844:	2b01      	cmp	r3, #1
 8007846:	d010      	beq.n	800786a <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8007848:	4b61      	ldr	r3, [pc, #388]	; (80079d0 <_SendPacket+0x19c>)
 800784a:	781b      	ldrb	r3, [r3, #0]
 800784c:	2b00      	cmp	r3, #0
 800784e:	f000 80a1 	beq.w	8007994 <_SendPacket+0x160>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8007852:	4b5f      	ldr	r3, [pc, #380]	; (80079d0 <_SendPacket+0x19c>)
 8007854:	781b      	ldrb	r3, [r3, #0]
 8007856:	2b02      	cmp	r3, #2
 8007858:	d109      	bne.n	800786e <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800785a:	f7ff ff7b 	bl	8007754 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800785e:	4b5c      	ldr	r3, [pc, #368]	; (80079d0 <_SendPacket+0x19c>)
 8007860:	781b      	ldrb	r3, [r3, #0]
 8007862:	2b01      	cmp	r3, #1
 8007864:	f040 8098 	bne.w	8007998 <_SendPacket+0x164>
      goto SendDone;
    }
  }
Send:
 8007868:	e001      	b.n	800786e <_SendPacket+0x3a>
    goto Send;
 800786a:	bf00      	nop
 800786c:	e000      	b.n	8007870 <_SendPacket+0x3c>
Send:
 800786e:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2b1f      	cmp	r3, #31
 8007874:	d809      	bhi.n	800788a <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8007876:	4b56      	ldr	r3, [pc, #344]	; (80079d0 <_SendPacket+0x19c>)
 8007878:	69da      	ldr	r2, [r3, #28]
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	fa22 f303 	lsr.w	r3, r2, r3
 8007880:	f003 0301 	and.w	r3, r3, #1
 8007884:	2b00      	cmp	r3, #0
 8007886:	f040 8089 	bne.w	800799c <_SendPacket+0x168>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	2b17      	cmp	r3, #23
 800788e:	d807      	bhi.n	80078a0 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	3b01      	subs	r3, #1
 8007894:	60fb      	str	r3, [r7, #12]
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	b2da      	uxtb	r2, r3
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	701a      	strb	r2, [r3, #0]
 800789e:	e03d      	b.n	800791c <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 80078a0:	68ba      	ldr	r2, [r7, #8]
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	1ad3      	subs	r3, r2, r3
 80078a6:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 80078a8:	69fb      	ldr	r3, [r7, #28]
 80078aa:	2b7f      	cmp	r3, #127	; 0x7f
 80078ac:	d912      	bls.n	80078d4 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 80078ae:	69fb      	ldr	r3, [r7, #28]
 80078b0:	09da      	lsrs	r2, r3, #7
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	3b01      	subs	r3, #1
 80078b6:	60fb      	str	r3, [r7, #12]
 80078b8:	b2d2      	uxtb	r2, r2
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 80078be:	69fb      	ldr	r3, [r7, #28]
 80078c0:	b2db      	uxtb	r3, r3
 80078c2:	68fa      	ldr	r2, [r7, #12]
 80078c4:	3a01      	subs	r2, #1
 80078c6:	60fa      	str	r2, [r7, #12]
 80078c8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80078cc:	b2da      	uxtb	r2, r3
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	701a      	strb	r2, [r3, #0]
 80078d2:	e006      	b.n	80078e2 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	3b01      	subs	r3, #1
 80078d8:	60fb      	str	r3, [r7, #12]
 80078da:	69fb      	ldr	r3, [r7, #28]
 80078dc:	b2da      	uxtb	r2, r3
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	2b7f      	cmp	r3, #127	; 0x7f
 80078e6:	d912      	bls.n	800790e <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	09da      	lsrs	r2, r3, #7
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	3b01      	subs	r3, #1
 80078f0:	60fb      	str	r3, [r7, #12]
 80078f2:	b2d2      	uxtb	r2, r2
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	b2db      	uxtb	r3, r3
 80078fc:	68fa      	ldr	r2, [r7, #12]
 80078fe:	3a01      	subs	r2, #1
 8007900:	60fa      	str	r2, [r7, #12]
 8007902:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007906:	b2da      	uxtb	r2, r3
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	701a      	strb	r2, [r3, #0]
 800790c:	e006      	b.n	800791c <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	3b01      	subs	r3, #1
 8007912:	60fb      	str	r3, [r7, #12]
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	b2da      	uxtb	r2, r3
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800791c:	4b2d      	ldr	r3, [pc, #180]	; (80079d4 <_SendPacket+0x1a0>)
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8007922:	4b2b      	ldr	r3, [pc, #172]	; (80079d0 <_SendPacket+0x19c>)
 8007924:	68db      	ldr	r3, [r3, #12]
 8007926:	69ba      	ldr	r2, [r7, #24]
 8007928:	1ad3      	subs	r3, r2, r3
 800792a:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 800792c:	68bb      	ldr	r3, [r7, #8]
 800792e:	627b      	str	r3, [r7, #36]	; 0x24
 8007930:	697b      	ldr	r3, [r7, #20]
 8007932:	623b      	str	r3, [r7, #32]
 8007934:	e00b      	b.n	800794e <_SendPacket+0x11a>
 8007936:	6a3b      	ldr	r3, [r7, #32]
 8007938:	b2da      	uxtb	r2, r3
 800793a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800793c:	1c59      	adds	r1, r3, #1
 800793e:	6279      	str	r1, [r7, #36]	; 0x24
 8007940:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007944:	b2d2      	uxtb	r2, r2
 8007946:	701a      	strb	r2, [r3, #0]
 8007948:	6a3b      	ldr	r3, [r7, #32]
 800794a:	09db      	lsrs	r3, r3, #7
 800794c:	623b      	str	r3, [r7, #32]
 800794e:	6a3b      	ldr	r3, [r7, #32]
 8007950:	2b7f      	cmp	r3, #127	; 0x7f
 8007952:	d8f0      	bhi.n	8007936 <_SendPacket+0x102>
 8007954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007956:	1c5a      	adds	r2, r3, #1
 8007958:	627a      	str	r2, [r7, #36]	; 0x24
 800795a:	6a3a      	ldr	r2, [r7, #32]
 800795c:	b2d2      	uxtb	r2, r2
 800795e:	701a      	strb	r2, [r3, #0]
 8007960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007962:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8007964:	68ba      	ldr	r2, [r7, #8]
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	1ad3      	subs	r3, r2, r3
 800796a:	461a      	mov	r2, r3
 800796c:	68f9      	ldr	r1, [r7, #12]
 800796e:	2001      	movs	r0, #1
 8007970:	f7ff fcd0 	bl	8007314 <SEGGER_RTT_WriteSkipNoLock>
 8007974:	4603      	mov	r3, r0
 8007976:	613b      	str	r3, [r7, #16]
  if (Status) {
 8007978:	693b      	ldr	r3, [r7, #16]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d003      	beq.n	8007986 <_SendPacket+0x152>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800797e:	4a14      	ldr	r2, [pc, #80]	; (80079d0 <_SendPacket+0x19c>)
 8007980:	69bb      	ldr	r3, [r7, #24]
 8007982:	60d3      	str	r3, [r2, #12]
 8007984:	e00b      	b.n	800799e <_SendPacket+0x16a>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8007986:	4b12      	ldr	r3, [pc, #72]	; (80079d0 <_SendPacket+0x19c>)
 8007988:	781b      	ldrb	r3, [r3, #0]
 800798a:	3301      	adds	r3, #1
 800798c:	b2da      	uxtb	r2, r3
 800798e:	4b10      	ldr	r3, [pc, #64]	; (80079d0 <_SendPacket+0x19c>)
 8007990:	701a      	strb	r2, [r3, #0]
 8007992:	e004      	b.n	800799e <_SendPacket+0x16a>
    goto SendDone;
 8007994:	bf00      	nop
 8007996:	e002      	b.n	800799e <_SendPacket+0x16a>
      goto SendDone;
 8007998:	bf00      	nop
 800799a:	e000      	b.n	800799e <_SendPacket+0x16a>
      goto SendDone;
 800799c:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800799e:	4b0e      	ldr	r3, [pc, #56]	; (80079d8 <_SendPacket+0x1a4>)
 80079a0:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80079a4:	4b0c      	ldr	r3, [pc, #48]	; (80079d8 <_SendPacket+0x1a4>)
 80079a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079aa:	429a      	cmp	r2, r3
 80079ac:	d00b      	beq.n	80079c6 <_SendPacket+0x192>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80079ae:	4b08      	ldr	r3, [pc, #32]	; (80079d0 <_SendPacket+0x19c>)
 80079b0:	789b      	ldrb	r3, [r3, #2]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d107      	bne.n	80079c6 <_SendPacket+0x192>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80079b6:	4b06      	ldr	r3, [pc, #24]	; (80079d0 <_SendPacket+0x19c>)
 80079b8:	2201      	movs	r2, #1
 80079ba:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80079bc:	f7ff fe68 	bl	8007690 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80079c0:	4b03      	ldr	r3, [pc, #12]	; (80079d0 <_SendPacket+0x19c>)
 80079c2:	2200      	movs	r2, #0
 80079c4:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 80079c6:	bf00      	nop
 80079c8:	3728      	adds	r7, #40	; 0x28
 80079ca:	46bd      	mov	sp, r7
 80079cc:	bd80      	pop	{r7, pc}
 80079ce:	bf00      	nop
 80079d0:	20007040 	.word	0x20007040
 80079d4:	e0001004 	.word	0xe0001004
 80079d8:	20004b80 	.word	0x20004b80

080079dc <SEGGER_SYSVIEW_Init>:
*    to identify the SystemView channel.
*
*  Notes
*    The channel is configured by the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 80079dc:	b580      	push	{r7, lr}
 80079de:	b086      	sub	sp, #24
 80079e0:	af02      	add	r7, sp, #8
 80079e2:	60f8      	str	r0, [r7, #12]
 80079e4:	60b9      	str	r1, [r7, #8]
 80079e6:	607a      	str	r2, [r7, #4]
 80079e8:	603b      	str	r3, [r7, #0]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
  _SYSVIEW_Globals.EnableState      = 0;
  _SYSVIEW_Globals.PacketCount      = 0;
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80079ea:	2300      	movs	r3, #0
 80079ec:	9300      	str	r3, [sp, #0]
 80079ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80079f2:	4a14      	ldr	r2, [pc, #80]	; (8007a44 <SEGGER_SYSVIEW_Init+0x68>)
 80079f4:	4914      	ldr	r1, [pc, #80]	; (8007a48 <SEGGER_SYSVIEW_Init+0x6c>)
 80079f6:	2001      	movs	r0, #1
 80079f8:	f7ff fd1c 	bl	8007434 <SEGGER_RTT_ConfigUpBuffer>
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80079fc:	2300      	movs	r3, #0
 80079fe:	9300      	str	r3, [sp, #0]
 8007a00:	2308      	movs	r3, #8
 8007a02:	4a12      	ldr	r2, [pc, #72]	; (8007a4c <SEGGER_SYSVIEW_Init+0x70>)
 8007a04:	4910      	ldr	r1, [pc, #64]	; (8007a48 <SEGGER_SYSVIEW_Init+0x6c>)
 8007a06:	2001      	movs	r0, #1
 8007a08:	f7ff fd7e 	bl	8007508 <SEGGER_RTT_ConfigDownBuffer>
  // TODO: Use SEGGER_RTT_AllocDownBuffer when SystemViewer is able to handle another Down Channel than Up Channel.
  //
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8007a0c:	4b10      	ldr	r3, [pc, #64]	; (8007a50 <SEGGER_SYSVIEW_Init+0x74>)
 8007a0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a12:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8007a14:	4b0f      	ldr	r3, [pc, #60]	; (8007a54 <SEGGER_SYSVIEW_Init+0x78>)
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	4a0d      	ldr	r2, [pc, #52]	; (8007a50 <SEGGER_SYSVIEW_Init+0x74>)
 8007a1a:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8007a1c:	4a0c      	ldr	r2, [pc, #48]	; (8007a50 <SEGGER_SYSVIEW_Init+0x74>)
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8007a22:	4a0b      	ldr	r2, [pc, #44]	; (8007a50 <SEGGER_SYSVIEW_Init+0x74>)
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8007a28:	4a09      	ldr	r2, [pc, #36]	; (8007a50 <SEGGER_SYSVIEW_Init+0x74>)
 8007a2a:	68bb      	ldr	r3, [r7, #8]
 8007a2c:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8007a2e:	4a08      	ldr	r2, [pc, #32]	; (8007a50 <SEGGER_SYSVIEW_Init+0x74>)
 8007a30:	683b      	ldr	r3, [r7, #0]
 8007a32:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8007a34:	4b06      	ldr	r3, [pc, #24]	; (8007a50 <SEGGER_SYSVIEW_Init+0x74>)
 8007a36:	2200      	movs	r2, #0
 8007a38:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8007a3a:	bf00      	nop
 8007a3c:	3710      	adds	r7, #16
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	bd80      	pop	{r7, pc}
 8007a42:	bf00      	nop
 8007a44:	20005038 	.word	0x20005038
 8007a48:	08009460 	.word	0x08009460
 8007a4c:	20007038 	.word	0x20007038
 8007a50:	20007040 	.word	0x20007040
 8007a54:	e0001004 	.word	0xe0001004

08007a58 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8007a58:	b480      	push	{r7}
 8007a5a:	b083      	sub	sp, #12
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8007a60:	4a04      	ldr	r2, [pc, #16]	; (8007a74 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	6113      	str	r3, [r2, #16]
}
 8007a66:	bf00      	nop
 8007a68:	370c      	adds	r7, #12
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a70:	4770      	bx	lr
 8007a72:	bf00      	nop
 8007a74:	20007040 	.word	0x20007040

08007a78 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b084      	sub	sp, #16
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8007a80:	f3ef 8311 	mrs	r3, BASEPRI
 8007a84:	f04f 0120 	mov.w	r1, #32
 8007a88:	f381 8811 	msr	BASEPRI, r1
 8007a8c:	60fb      	str	r3, [r7, #12]
 8007a8e:	4808      	ldr	r0, [pc, #32]	; (8007ab0 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8007a90:	f7ff fdf1 	bl	8007676 <_PreparePacket>
 8007a94:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8007a96:	687a      	ldr	r2, [r7, #4]
 8007a98:	68b9      	ldr	r1, [r7, #8]
 8007a9a:	68b8      	ldr	r0, [r7, #8]
 8007a9c:	f7ff feca 	bl	8007834 <_SendPacket>
  RECORD_END();
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	f383 8811 	msr	BASEPRI, r3
}
 8007aa6:	bf00      	nop
 8007aa8:	3710      	adds	r7, #16
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	bd80      	pop	{r7, pc}
 8007aae:	bf00      	nop
 8007ab0:	20007070 	.word	0x20007070

08007ab4 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b088      	sub	sp, #32
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]
 8007abc:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007abe:	f3ef 8311 	mrs	r3, BASEPRI
 8007ac2:	f04f 0120 	mov.w	r1, #32
 8007ac6:	f381 8811 	msr	BASEPRI, r1
 8007aca:	617b      	str	r3, [r7, #20]
 8007acc:	4816      	ldr	r0, [pc, #88]	; (8007b28 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8007ace:	f7ff fdd2 	bl	8007676 <_PreparePacket>
 8007ad2:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007ad4:	693b      	ldr	r3, [r7, #16]
 8007ad6:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	61fb      	str	r3, [r7, #28]
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	61bb      	str	r3, [r7, #24]
 8007ae0:	e00b      	b.n	8007afa <SEGGER_SYSVIEW_RecordU32+0x46>
 8007ae2:	69bb      	ldr	r3, [r7, #24]
 8007ae4:	b2da      	uxtb	r2, r3
 8007ae6:	69fb      	ldr	r3, [r7, #28]
 8007ae8:	1c59      	adds	r1, r3, #1
 8007aea:	61f9      	str	r1, [r7, #28]
 8007aec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007af0:	b2d2      	uxtb	r2, r2
 8007af2:	701a      	strb	r2, [r3, #0]
 8007af4:	69bb      	ldr	r3, [r7, #24]
 8007af6:	09db      	lsrs	r3, r3, #7
 8007af8:	61bb      	str	r3, [r7, #24]
 8007afa:	69bb      	ldr	r3, [r7, #24]
 8007afc:	2b7f      	cmp	r3, #127	; 0x7f
 8007afe:	d8f0      	bhi.n	8007ae2 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8007b00:	69fb      	ldr	r3, [r7, #28]
 8007b02:	1c5a      	adds	r2, r3, #1
 8007b04:	61fa      	str	r2, [r7, #28]
 8007b06:	69ba      	ldr	r2, [r7, #24]
 8007b08:	b2d2      	uxtb	r2, r2
 8007b0a:	701a      	strb	r2, [r3, #0]
 8007b0c:	69fb      	ldr	r3, [r7, #28]
 8007b0e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8007b10:	687a      	ldr	r2, [r7, #4]
 8007b12:	68f9      	ldr	r1, [r7, #12]
 8007b14:	6938      	ldr	r0, [r7, #16]
 8007b16:	f7ff fe8d 	bl	8007834 <_SendPacket>
  RECORD_END();
 8007b1a:	697b      	ldr	r3, [r7, #20]
 8007b1c:	f383 8811 	msr	BASEPRI, r3
}
 8007b20:	bf00      	nop
 8007b22:	3720      	adds	r7, #32
 8007b24:	46bd      	mov	sp, r7
 8007b26:	bd80      	pop	{r7, pc}
 8007b28:	20007070 	.word	0x20007070

08007b2c <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b08c      	sub	sp, #48	; 0x30
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	60f8      	str	r0, [r7, #12]
 8007b34:	60b9      	str	r1, [r7, #8]
 8007b36:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8007b38:	f3ef 8311 	mrs	r3, BASEPRI
 8007b3c:	f04f 0120 	mov.w	r1, #32
 8007b40:	f381 8811 	msr	BASEPRI, r1
 8007b44:	61fb      	str	r3, [r7, #28]
 8007b46:	4825      	ldr	r0, [pc, #148]	; (8007bdc <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8007b48:	f7ff fd95 	bl	8007676 <_PreparePacket>
 8007b4c:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8007b4e:	69bb      	ldr	r3, [r7, #24]
 8007b50:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8007b52:	697b      	ldr	r3, [r7, #20]
 8007b54:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007b56:	68bb      	ldr	r3, [r7, #8]
 8007b58:	62bb      	str	r3, [r7, #40]	; 0x28
 8007b5a:	e00b      	b.n	8007b74 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8007b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b5e:	b2da      	uxtb	r2, r3
 8007b60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b62:	1c59      	adds	r1, r3, #1
 8007b64:	62f9      	str	r1, [r7, #44]	; 0x2c
 8007b66:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007b6a:	b2d2      	uxtb	r2, r2
 8007b6c:	701a      	strb	r2, [r3, #0]
 8007b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b70:	09db      	lsrs	r3, r3, #7
 8007b72:	62bb      	str	r3, [r7, #40]	; 0x28
 8007b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b76:	2b7f      	cmp	r3, #127	; 0x7f
 8007b78:	d8f0      	bhi.n	8007b5c <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8007b7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b7c:	1c5a      	adds	r2, r3, #1
 8007b7e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007b80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007b82:	b2d2      	uxtb	r2, r2
 8007b84:	701a      	strb	r2, [r3, #0]
 8007b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b88:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8007b8a:	697b      	ldr	r3, [r7, #20]
 8007b8c:	627b      	str	r3, [r7, #36]	; 0x24
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	623b      	str	r3, [r7, #32]
 8007b92:	e00b      	b.n	8007bac <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8007b94:	6a3b      	ldr	r3, [r7, #32]
 8007b96:	b2da      	uxtb	r2, r3
 8007b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b9a:	1c59      	adds	r1, r3, #1
 8007b9c:	6279      	str	r1, [r7, #36]	; 0x24
 8007b9e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007ba2:	b2d2      	uxtb	r2, r2
 8007ba4:	701a      	strb	r2, [r3, #0]
 8007ba6:	6a3b      	ldr	r3, [r7, #32]
 8007ba8:	09db      	lsrs	r3, r3, #7
 8007baa:	623b      	str	r3, [r7, #32]
 8007bac:	6a3b      	ldr	r3, [r7, #32]
 8007bae:	2b7f      	cmp	r3, #127	; 0x7f
 8007bb0:	d8f0      	bhi.n	8007b94 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8007bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bb4:	1c5a      	adds	r2, r3, #1
 8007bb6:	627a      	str	r2, [r7, #36]	; 0x24
 8007bb8:	6a3a      	ldr	r2, [r7, #32]
 8007bba:	b2d2      	uxtb	r2, r2
 8007bbc:	701a      	strb	r2, [r3, #0]
 8007bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bc0:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8007bc2:	68fa      	ldr	r2, [r7, #12]
 8007bc4:	6979      	ldr	r1, [r7, #20]
 8007bc6:	69b8      	ldr	r0, [r7, #24]
 8007bc8:	f7ff fe34 	bl	8007834 <_SendPacket>
  RECORD_END();
 8007bcc:	69fb      	ldr	r3, [r7, #28]
 8007bce:	f383 8811 	msr	BASEPRI, r3
}
 8007bd2:	bf00      	nop
 8007bd4:	3730      	adds	r7, #48	; 0x30
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	bd80      	pop	{r7, pc}
 8007bda:	bf00      	nop
 8007bdc:	20007070 	.word	0x20007070

08007be0 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b08e      	sub	sp, #56	; 0x38
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	60f8      	str	r0, [r7, #12]
 8007be8:	60b9      	str	r1, [r7, #8]
 8007bea:	607a      	str	r2, [r7, #4]
 8007bec:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8007bee:	f3ef 8311 	mrs	r3, BASEPRI
 8007bf2:	f04f 0120 	mov.w	r1, #32
 8007bf6:	f381 8811 	msr	BASEPRI, r1
 8007bfa:	61fb      	str	r3, [r7, #28]
 8007bfc:	4832      	ldr	r0, [pc, #200]	; (8007cc8 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8007bfe:	f7ff fd3a 	bl	8007676 <_PreparePacket>
 8007c02:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8007c04:	69bb      	ldr	r3, [r7, #24]
 8007c06:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8007c08:	697b      	ldr	r3, [r7, #20]
 8007c0a:	637b      	str	r3, [r7, #52]	; 0x34
 8007c0c:	68bb      	ldr	r3, [r7, #8]
 8007c0e:	633b      	str	r3, [r7, #48]	; 0x30
 8007c10:	e00b      	b.n	8007c2a <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8007c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c14:	b2da      	uxtb	r2, r3
 8007c16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c18:	1c59      	adds	r1, r3, #1
 8007c1a:	6379      	str	r1, [r7, #52]	; 0x34
 8007c1c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007c20:	b2d2      	uxtb	r2, r2
 8007c22:	701a      	strb	r2, [r3, #0]
 8007c24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c26:	09db      	lsrs	r3, r3, #7
 8007c28:	633b      	str	r3, [r7, #48]	; 0x30
 8007c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c2c:	2b7f      	cmp	r3, #127	; 0x7f
 8007c2e:	d8f0      	bhi.n	8007c12 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8007c30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c32:	1c5a      	adds	r2, r3, #1
 8007c34:	637a      	str	r2, [r7, #52]	; 0x34
 8007c36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c38:	b2d2      	uxtb	r2, r2
 8007c3a:	701a      	strb	r2, [r3, #0]
 8007c3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c3e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8007c40:	697b      	ldr	r3, [r7, #20]
 8007c42:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	62bb      	str	r3, [r7, #40]	; 0x28
 8007c48:	e00b      	b.n	8007c62 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8007c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c4c:	b2da      	uxtb	r2, r3
 8007c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c50:	1c59      	adds	r1, r3, #1
 8007c52:	62f9      	str	r1, [r7, #44]	; 0x2c
 8007c54:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007c58:	b2d2      	uxtb	r2, r2
 8007c5a:	701a      	strb	r2, [r3, #0]
 8007c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c5e:	09db      	lsrs	r3, r3, #7
 8007c60:	62bb      	str	r3, [r7, #40]	; 0x28
 8007c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c64:	2b7f      	cmp	r3, #127	; 0x7f
 8007c66:	d8f0      	bhi.n	8007c4a <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8007c68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c6a:	1c5a      	adds	r2, r3, #1
 8007c6c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007c6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007c70:	b2d2      	uxtb	r2, r2
 8007c72:	701a      	strb	r2, [r3, #0]
 8007c74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c76:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8007c78:	697b      	ldr	r3, [r7, #20]
 8007c7a:	627b      	str	r3, [r7, #36]	; 0x24
 8007c7c:	683b      	ldr	r3, [r7, #0]
 8007c7e:	623b      	str	r3, [r7, #32]
 8007c80:	e00b      	b.n	8007c9a <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8007c82:	6a3b      	ldr	r3, [r7, #32]
 8007c84:	b2da      	uxtb	r2, r3
 8007c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c88:	1c59      	adds	r1, r3, #1
 8007c8a:	6279      	str	r1, [r7, #36]	; 0x24
 8007c8c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007c90:	b2d2      	uxtb	r2, r2
 8007c92:	701a      	strb	r2, [r3, #0]
 8007c94:	6a3b      	ldr	r3, [r7, #32]
 8007c96:	09db      	lsrs	r3, r3, #7
 8007c98:	623b      	str	r3, [r7, #32]
 8007c9a:	6a3b      	ldr	r3, [r7, #32]
 8007c9c:	2b7f      	cmp	r3, #127	; 0x7f
 8007c9e:	d8f0      	bhi.n	8007c82 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8007ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ca2:	1c5a      	adds	r2, r3, #1
 8007ca4:	627a      	str	r2, [r7, #36]	; 0x24
 8007ca6:	6a3a      	ldr	r2, [r7, #32]
 8007ca8:	b2d2      	uxtb	r2, r2
 8007caa:	701a      	strb	r2, [r3, #0]
 8007cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cae:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8007cb0:	68fa      	ldr	r2, [r7, #12]
 8007cb2:	6979      	ldr	r1, [r7, #20]
 8007cb4:	69b8      	ldr	r0, [r7, #24]
 8007cb6:	f7ff fdbd 	bl	8007834 <_SendPacket>
  RECORD_END();
 8007cba:	69fb      	ldr	r3, [r7, #28]
 8007cbc:	f383 8811 	msr	BASEPRI, r3
}
 8007cc0:	bf00      	nop
 8007cc2:	3738      	adds	r7, #56	; 0x38
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	bd80      	pop	{r7, pc}
 8007cc8:	20007070 	.word	0x20007070

08007ccc <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b090      	sub	sp, #64	; 0x40
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	60f8      	str	r0, [r7, #12]
 8007cd4:	60b9      	str	r1, [r7, #8]
 8007cd6:	607a      	str	r2, [r7, #4]
 8007cd8:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8007cda:	f3ef 8311 	mrs	r3, BASEPRI
 8007cde:	f04f 0120 	mov.w	r1, #32
 8007ce2:	f381 8811 	msr	BASEPRI, r1
 8007ce6:	61fb      	str	r3, [r7, #28]
 8007ce8:	4840      	ldr	r0, [pc, #256]	; (8007dec <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8007cea:	f7ff fcc4 	bl	8007676 <_PreparePacket>
 8007cee:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8007cf0:	69bb      	ldr	r3, [r7, #24]
 8007cf2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8007cf4:	697b      	ldr	r3, [r7, #20]
 8007cf6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007cf8:	68bb      	ldr	r3, [r7, #8]
 8007cfa:	63bb      	str	r3, [r7, #56]	; 0x38
 8007cfc:	e00b      	b.n	8007d16 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8007cfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d00:	b2da      	uxtb	r2, r3
 8007d02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d04:	1c59      	adds	r1, r3, #1
 8007d06:	63f9      	str	r1, [r7, #60]	; 0x3c
 8007d08:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007d0c:	b2d2      	uxtb	r2, r2
 8007d0e:	701a      	strb	r2, [r3, #0]
 8007d10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d12:	09db      	lsrs	r3, r3, #7
 8007d14:	63bb      	str	r3, [r7, #56]	; 0x38
 8007d16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d18:	2b7f      	cmp	r3, #127	; 0x7f
 8007d1a:	d8f0      	bhi.n	8007cfe <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8007d1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d1e:	1c5a      	adds	r2, r3, #1
 8007d20:	63fa      	str	r2, [r7, #60]	; 0x3c
 8007d22:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007d24:	b2d2      	uxtb	r2, r2
 8007d26:	701a      	strb	r2, [r3, #0]
 8007d28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d2a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8007d2c:	697b      	ldr	r3, [r7, #20]
 8007d2e:	637b      	str	r3, [r7, #52]	; 0x34
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	633b      	str	r3, [r7, #48]	; 0x30
 8007d34:	e00b      	b.n	8007d4e <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8007d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d38:	b2da      	uxtb	r2, r3
 8007d3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d3c:	1c59      	adds	r1, r3, #1
 8007d3e:	6379      	str	r1, [r7, #52]	; 0x34
 8007d40:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007d44:	b2d2      	uxtb	r2, r2
 8007d46:	701a      	strb	r2, [r3, #0]
 8007d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d4a:	09db      	lsrs	r3, r3, #7
 8007d4c:	633b      	str	r3, [r7, #48]	; 0x30
 8007d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d50:	2b7f      	cmp	r3, #127	; 0x7f
 8007d52:	d8f0      	bhi.n	8007d36 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8007d54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d56:	1c5a      	adds	r2, r3, #1
 8007d58:	637a      	str	r2, [r7, #52]	; 0x34
 8007d5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d5c:	b2d2      	uxtb	r2, r2
 8007d5e:	701a      	strb	r2, [r3, #0]
 8007d60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d62:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8007d64:	697b      	ldr	r3, [r7, #20]
 8007d66:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007d68:	683b      	ldr	r3, [r7, #0]
 8007d6a:	62bb      	str	r3, [r7, #40]	; 0x28
 8007d6c:	e00b      	b.n	8007d86 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8007d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d70:	b2da      	uxtb	r2, r3
 8007d72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d74:	1c59      	adds	r1, r3, #1
 8007d76:	62f9      	str	r1, [r7, #44]	; 0x2c
 8007d78:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007d7c:	b2d2      	uxtb	r2, r2
 8007d7e:	701a      	strb	r2, [r3, #0]
 8007d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d82:	09db      	lsrs	r3, r3, #7
 8007d84:	62bb      	str	r3, [r7, #40]	; 0x28
 8007d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d88:	2b7f      	cmp	r3, #127	; 0x7f
 8007d8a:	d8f0      	bhi.n	8007d6e <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8007d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d8e:	1c5a      	adds	r2, r3, #1
 8007d90:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007d92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007d94:	b2d2      	uxtb	r2, r2
 8007d96:	701a      	strb	r2, [r3, #0]
 8007d98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d9a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8007d9c:	697b      	ldr	r3, [r7, #20]
 8007d9e:	627b      	str	r3, [r7, #36]	; 0x24
 8007da0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007da2:	623b      	str	r3, [r7, #32]
 8007da4:	e00b      	b.n	8007dbe <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8007da6:	6a3b      	ldr	r3, [r7, #32]
 8007da8:	b2da      	uxtb	r2, r3
 8007daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dac:	1c59      	adds	r1, r3, #1
 8007dae:	6279      	str	r1, [r7, #36]	; 0x24
 8007db0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007db4:	b2d2      	uxtb	r2, r2
 8007db6:	701a      	strb	r2, [r3, #0]
 8007db8:	6a3b      	ldr	r3, [r7, #32]
 8007dba:	09db      	lsrs	r3, r3, #7
 8007dbc:	623b      	str	r3, [r7, #32]
 8007dbe:	6a3b      	ldr	r3, [r7, #32]
 8007dc0:	2b7f      	cmp	r3, #127	; 0x7f
 8007dc2:	d8f0      	bhi.n	8007da6 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8007dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dc6:	1c5a      	adds	r2, r3, #1
 8007dc8:	627a      	str	r2, [r7, #36]	; 0x24
 8007dca:	6a3a      	ldr	r2, [r7, #32]
 8007dcc:	b2d2      	uxtb	r2, r2
 8007dce:	701a      	strb	r2, [r3, #0]
 8007dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dd2:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8007dd4:	68fa      	ldr	r2, [r7, #12]
 8007dd6:	6979      	ldr	r1, [r7, #20]
 8007dd8:	69b8      	ldr	r0, [r7, #24]
 8007dda:	f7ff fd2b 	bl	8007834 <_SendPacket>
  RECORD_END();
 8007dde:	69fb      	ldr	r3, [r7, #28]
 8007de0:	f383 8811 	msr	BASEPRI, r3
}
 8007de4:	bf00      	nop
 8007de6:	3740      	adds	r7, #64	; 0x40
 8007de8:	46bd      	mov	sp, r7
 8007dea:	bd80      	pop	{r7, pc}
 8007dec:	20007070 	.word	0x20007070

08007df0 <SEGGER_SYSVIEW_Start>:
*    system description string is sent, too.
*
*  Notes
*    SEGGER_SYSVIEW_Start and SEGGER_SYSVIEW_Stop do not nest.
*/
void SEGGER_SYSVIEW_Start(void) {
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b08c      	sub	sp, #48	; 0x30
 8007df4:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.EnableState == 0) {
 8007df6:	4b59      	ldr	r3, [pc, #356]	; (8007f5c <SEGGER_SYSVIEW_Start+0x16c>)
 8007df8:	781b      	ldrb	r3, [r3, #0]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	f040 80aa 	bne.w	8007f54 <SEGGER_SYSVIEW_Start+0x164>
    _SYSVIEW_Globals.EnableState = 1;
 8007e00:	4b56      	ldr	r3, [pc, #344]	; (8007f5c <SEGGER_SYSVIEW_Start+0x16c>)
 8007e02:	2201      	movs	r2, #1
 8007e04:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8007e06:	f3ef 8311 	mrs	r3, BASEPRI
 8007e0a:	f04f 0120 	mov.w	r1, #32
 8007e0e:	f381 8811 	msr	BASEPRI, r1
 8007e12:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8007e14:	220a      	movs	r2, #10
 8007e16:	4952      	ldr	r1, [pc, #328]	; (8007f60 <SEGGER_SYSVIEW_Start+0x170>)
 8007e18:	2001      	movs	r0, #1
 8007e1a:	f7ff fa7b 	bl	8007314 <SEGGER_RTT_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8007e24:	200a      	movs	r0, #10
 8007e26:	f7ff fe27 	bl	8007a78 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8007e2a:	f3ef 8311 	mrs	r3, BASEPRI
 8007e2e:	f04f 0120 	mov.w	r1, #32
 8007e32:	f381 8811 	msr	BASEPRI, r1
 8007e36:	60bb      	str	r3, [r7, #8]
 8007e38:	484a      	ldr	r0, [pc, #296]	; (8007f64 <SEGGER_SYSVIEW_Start+0x174>)
 8007e3a:	f7ff fc1c 	bl	8007676 <_PreparePacket>
 8007e3e:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8007e44:	683b      	ldr	r3, [r7, #0]
 8007e46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007e48:	4b44      	ldr	r3, [pc, #272]	; (8007f5c <SEGGER_SYSVIEW_Start+0x16c>)
 8007e4a:	685b      	ldr	r3, [r3, #4]
 8007e4c:	62bb      	str	r3, [r7, #40]	; 0x28
 8007e4e:	e00b      	b.n	8007e68 <SEGGER_SYSVIEW_Start+0x78>
 8007e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e52:	b2da      	uxtb	r2, r3
 8007e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e56:	1c59      	adds	r1, r3, #1
 8007e58:	62f9      	str	r1, [r7, #44]	; 0x2c
 8007e5a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007e5e:	b2d2      	uxtb	r2, r2
 8007e60:	701a      	strb	r2, [r3, #0]
 8007e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e64:	09db      	lsrs	r3, r3, #7
 8007e66:	62bb      	str	r3, [r7, #40]	; 0x28
 8007e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e6a:	2b7f      	cmp	r3, #127	; 0x7f
 8007e6c:	d8f0      	bhi.n	8007e50 <SEGGER_SYSVIEW_Start+0x60>
 8007e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e70:	1c5a      	adds	r2, r3, #1
 8007e72:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007e74:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007e76:	b2d2      	uxtb	r2, r2
 8007e78:	701a      	strb	r2, [r3, #0]
 8007e7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e7c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	627b      	str	r3, [r7, #36]	; 0x24
 8007e82:	4b36      	ldr	r3, [pc, #216]	; (8007f5c <SEGGER_SYSVIEW_Start+0x16c>)
 8007e84:	689b      	ldr	r3, [r3, #8]
 8007e86:	623b      	str	r3, [r7, #32]
 8007e88:	e00b      	b.n	8007ea2 <SEGGER_SYSVIEW_Start+0xb2>
 8007e8a:	6a3b      	ldr	r3, [r7, #32]
 8007e8c:	b2da      	uxtb	r2, r3
 8007e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e90:	1c59      	adds	r1, r3, #1
 8007e92:	6279      	str	r1, [r7, #36]	; 0x24
 8007e94:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007e98:	b2d2      	uxtb	r2, r2
 8007e9a:	701a      	strb	r2, [r3, #0]
 8007e9c:	6a3b      	ldr	r3, [r7, #32]
 8007e9e:	09db      	lsrs	r3, r3, #7
 8007ea0:	623b      	str	r3, [r7, #32]
 8007ea2:	6a3b      	ldr	r3, [r7, #32]
 8007ea4:	2b7f      	cmp	r3, #127	; 0x7f
 8007ea6:	d8f0      	bhi.n	8007e8a <SEGGER_SYSVIEW_Start+0x9a>
 8007ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eaa:	1c5a      	adds	r2, r3, #1
 8007eac:	627a      	str	r2, [r7, #36]	; 0x24
 8007eae:	6a3a      	ldr	r2, [r7, #32]
 8007eb0:	b2d2      	uxtb	r2, r2
 8007eb2:	701a      	strb	r2, [r3, #0]
 8007eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eb6:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	61fb      	str	r3, [r7, #28]
 8007ebc:	4b27      	ldr	r3, [pc, #156]	; (8007f5c <SEGGER_SYSVIEW_Start+0x16c>)
 8007ebe:	691b      	ldr	r3, [r3, #16]
 8007ec0:	61bb      	str	r3, [r7, #24]
 8007ec2:	e00b      	b.n	8007edc <SEGGER_SYSVIEW_Start+0xec>
 8007ec4:	69bb      	ldr	r3, [r7, #24]
 8007ec6:	b2da      	uxtb	r2, r3
 8007ec8:	69fb      	ldr	r3, [r7, #28]
 8007eca:	1c59      	adds	r1, r3, #1
 8007ecc:	61f9      	str	r1, [r7, #28]
 8007ece:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007ed2:	b2d2      	uxtb	r2, r2
 8007ed4:	701a      	strb	r2, [r3, #0]
 8007ed6:	69bb      	ldr	r3, [r7, #24]
 8007ed8:	09db      	lsrs	r3, r3, #7
 8007eda:	61bb      	str	r3, [r7, #24]
 8007edc:	69bb      	ldr	r3, [r7, #24]
 8007ede:	2b7f      	cmp	r3, #127	; 0x7f
 8007ee0:	d8f0      	bhi.n	8007ec4 <SEGGER_SYSVIEW_Start+0xd4>
 8007ee2:	69fb      	ldr	r3, [r7, #28]
 8007ee4:	1c5a      	adds	r2, r3, #1
 8007ee6:	61fa      	str	r2, [r7, #28]
 8007ee8:	69ba      	ldr	r2, [r7, #24]
 8007eea:	b2d2      	uxtb	r2, r2
 8007eec:	701a      	strb	r2, [r3, #0]
 8007eee:	69fb      	ldr	r3, [r7, #28]
 8007ef0:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8007ef2:	683b      	ldr	r3, [r7, #0]
 8007ef4:	617b      	str	r3, [r7, #20]
 8007ef6:	2302      	movs	r3, #2
 8007ef8:	613b      	str	r3, [r7, #16]
 8007efa:	e00b      	b.n	8007f14 <SEGGER_SYSVIEW_Start+0x124>
 8007efc:	693b      	ldr	r3, [r7, #16]
 8007efe:	b2da      	uxtb	r2, r3
 8007f00:	697b      	ldr	r3, [r7, #20]
 8007f02:	1c59      	adds	r1, r3, #1
 8007f04:	6179      	str	r1, [r7, #20]
 8007f06:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007f0a:	b2d2      	uxtb	r2, r2
 8007f0c:	701a      	strb	r2, [r3, #0]
 8007f0e:	693b      	ldr	r3, [r7, #16]
 8007f10:	09db      	lsrs	r3, r3, #7
 8007f12:	613b      	str	r3, [r7, #16]
 8007f14:	693b      	ldr	r3, [r7, #16]
 8007f16:	2b7f      	cmp	r3, #127	; 0x7f
 8007f18:	d8f0      	bhi.n	8007efc <SEGGER_SYSVIEW_Start+0x10c>
 8007f1a:	697b      	ldr	r3, [r7, #20]
 8007f1c:	1c5a      	adds	r2, r3, #1
 8007f1e:	617a      	str	r2, [r7, #20]
 8007f20:	693a      	ldr	r2, [r7, #16]
 8007f22:	b2d2      	uxtb	r2, r2
 8007f24:	701a      	strb	r2, [r3, #0]
 8007f26:	697b      	ldr	r3, [r7, #20]
 8007f28:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8007f2a:	2218      	movs	r2, #24
 8007f2c:	6839      	ldr	r1, [r7, #0]
 8007f2e:	6878      	ldr	r0, [r7, #4]
 8007f30:	f7ff fc80 	bl	8007834 <_SendPacket>
      RECORD_END();
 8007f34:	68bb      	ldr	r3, [r7, #8]
 8007f36:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8007f3a:	4b08      	ldr	r3, [pc, #32]	; (8007f5c <SEGGER_SYSVIEW_Start+0x16c>)
 8007f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d002      	beq.n	8007f48 <SEGGER_SYSVIEW_Start+0x158>
      _SYSVIEW_Globals.pfSendSysDesc();
 8007f42:	4b06      	ldr	r3, [pc, #24]	; (8007f5c <SEGGER_SYSVIEW_Start+0x16c>)
 8007f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f46:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8007f48:	f000 f9ec 	bl	8008324 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8007f4c:	f000 f9b2 	bl	80082b4 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8007f50:	f000 fc8c 	bl	800886c <SEGGER_SYSVIEW_SendNumModules>
#endif
  }
}
 8007f54:	bf00      	nop
 8007f56:	3730      	adds	r7, #48	; 0x30
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	bd80      	pop	{r7, pc}
 8007f5c:	20007040 	.word	0x20007040
 8007f60:	08009560 	.word	0x08009560
 8007f64:	20007070 	.word	0x20007070

08007f68 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b082      	sub	sp, #8
 8007f6c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8007f6e:	f3ef 8311 	mrs	r3, BASEPRI
 8007f72:	f04f 0120 	mov.w	r1, #32
 8007f76:	f381 8811 	msr	BASEPRI, r1
 8007f7a:	607b      	str	r3, [r7, #4]
 8007f7c:	480b      	ldr	r0, [pc, #44]	; (8007fac <SEGGER_SYSVIEW_Stop+0x44>)
 8007f7e:	f7ff fb7a 	bl	8007676 <_PreparePacket>
 8007f82:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8007f84:	4b0a      	ldr	r3, [pc, #40]	; (8007fb0 <SEGGER_SYSVIEW_Stop+0x48>)
 8007f86:	781b      	ldrb	r3, [r3, #0]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d007      	beq.n	8007f9c <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8007f8c:	220b      	movs	r2, #11
 8007f8e:	6839      	ldr	r1, [r7, #0]
 8007f90:	6838      	ldr	r0, [r7, #0]
 8007f92:	f7ff fc4f 	bl	8007834 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8007f96:	4b06      	ldr	r3, [pc, #24]	; (8007fb0 <SEGGER_SYSVIEW_Stop+0x48>)
 8007f98:	2200      	movs	r2, #0
 8007f9a:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	f383 8811 	msr	BASEPRI, r3
}
 8007fa2:	bf00      	nop
 8007fa4:	3708      	adds	r7, #8
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	bd80      	pop	{r7, pc}
 8007faa:	bf00      	nop
 8007fac:	20007070 	.word	0x20007070
 8007fb0:	20007040 	.word	0x20007040

08007fb4 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b08c      	sub	sp, #48	; 0x30
 8007fb8:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8007fba:	f3ef 8311 	mrs	r3, BASEPRI
 8007fbe:	f04f 0120 	mov.w	r1, #32
 8007fc2:	f381 8811 	msr	BASEPRI, r1
 8007fc6:	60fb      	str	r3, [r7, #12]
 8007fc8:	4845      	ldr	r0, [pc, #276]	; (80080e0 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8007fca:	f7ff fb54 	bl	8007676 <_PreparePacket>
 8007fce:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8007fd0:	68bb      	ldr	r3, [r7, #8]
 8007fd2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007fd8:	4b42      	ldr	r3, [pc, #264]	; (80080e4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8007fda:	685b      	ldr	r3, [r3, #4]
 8007fdc:	62bb      	str	r3, [r7, #40]	; 0x28
 8007fde:	e00b      	b.n	8007ff8 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8007fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fe2:	b2da      	uxtb	r2, r3
 8007fe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fe6:	1c59      	adds	r1, r3, #1
 8007fe8:	62f9      	str	r1, [r7, #44]	; 0x2c
 8007fea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007fee:	b2d2      	uxtb	r2, r2
 8007ff0:	701a      	strb	r2, [r3, #0]
 8007ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ff4:	09db      	lsrs	r3, r3, #7
 8007ff6:	62bb      	str	r3, [r7, #40]	; 0x28
 8007ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ffa:	2b7f      	cmp	r3, #127	; 0x7f
 8007ffc:	d8f0      	bhi.n	8007fe0 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8007ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008000:	1c5a      	adds	r2, r3, #1
 8008002:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008004:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008006:	b2d2      	uxtb	r2, r2
 8008008:	701a      	strb	r2, [r3, #0]
 800800a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800800c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	627b      	str	r3, [r7, #36]	; 0x24
 8008012:	4b34      	ldr	r3, [pc, #208]	; (80080e4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8008014:	689b      	ldr	r3, [r3, #8]
 8008016:	623b      	str	r3, [r7, #32]
 8008018:	e00b      	b.n	8008032 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800801a:	6a3b      	ldr	r3, [r7, #32]
 800801c:	b2da      	uxtb	r2, r3
 800801e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008020:	1c59      	adds	r1, r3, #1
 8008022:	6279      	str	r1, [r7, #36]	; 0x24
 8008024:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008028:	b2d2      	uxtb	r2, r2
 800802a:	701a      	strb	r2, [r3, #0]
 800802c:	6a3b      	ldr	r3, [r7, #32]
 800802e:	09db      	lsrs	r3, r3, #7
 8008030:	623b      	str	r3, [r7, #32]
 8008032:	6a3b      	ldr	r3, [r7, #32]
 8008034:	2b7f      	cmp	r3, #127	; 0x7f
 8008036:	d8f0      	bhi.n	800801a <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8008038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800803a:	1c5a      	adds	r2, r3, #1
 800803c:	627a      	str	r2, [r7, #36]	; 0x24
 800803e:	6a3a      	ldr	r2, [r7, #32]
 8008040:	b2d2      	uxtb	r2, r2
 8008042:	701a      	strb	r2, [r3, #0]
 8008044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008046:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	61fb      	str	r3, [r7, #28]
 800804c:	4b25      	ldr	r3, [pc, #148]	; (80080e4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800804e:	691b      	ldr	r3, [r3, #16]
 8008050:	61bb      	str	r3, [r7, #24]
 8008052:	e00b      	b.n	800806c <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8008054:	69bb      	ldr	r3, [r7, #24]
 8008056:	b2da      	uxtb	r2, r3
 8008058:	69fb      	ldr	r3, [r7, #28]
 800805a:	1c59      	adds	r1, r3, #1
 800805c:	61f9      	str	r1, [r7, #28]
 800805e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008062:	b2d2      	uxtb	r2, r2
 8008064:	701a      	strb	r2, [r3, #0]
 8008066:	69bb      	ldr	r3, [r7, #24]
 8008068:	09db      	lsrs	r3, r3, #7
 800806a:	61bb      	str	r3, [r7, #24]
 800806c:	69bb      	ldr	r3, [r7, #24]
 800806e:	2b7f      	cmp	r3, #127	; 0x7f
 8008070:	d8f0      	bhi.n	8008054 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8008072:	69fb      	ldr	r3, [r7, #28]
 8008074:	1c5a      	adds	r2, r3, #1
 8008076:	61fa      	str	r2, [r7, #28]
 8008078:	69ba      	ldr	r2, [r7, #24]
 800807a:	b2d2      	uxtb	r2, r2
 800807c:	701a      	strb	r2, [r3, #0]
 800807e:	69fb      	ldr	r3, [r7, #28]
 8008080:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	617b      	str	r3, [r7, #20]
 8008086:	2302      	movs	r3, #2
 8008088:	613b      	str	r3, [r7, #16]
 800808a:	e00b      	b.n	80080a4 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 800808c:	693b      	ldr	r3, [r7, #16]
 800808e:	b2da      	uxtb	r2, r3
 8008090:	697b      	ldr	r3, [r7, #20]
 8008092:	1c59      	adds	r1, r3, #1
 8008094:	6179      	str	r1, [r7, #20]
 8008096:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800809a:	b2d2      	uxtb	r2, r2
 800809c:	701a      	strb	r2, [r3, #0]
 800809e:	693b      	ldr	r3, [r7, #16]
 80080a0:	09db      	lsrs	r3, r3, #7
 80080a2:	613b      	str	r3, [r7, #16]
 80080a4:	693b      	ldr	r3, [r7, #16]
 80080a6:	2b7f      	cmp	r3, #127	; 0x7f
 80080a8:	d8f0      	bhi.n	800808c <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80080aa:	697b      	ldr	r3, [r7, #20]
 80080ac:	1c5a      	adds	r2, r3, #1
 80080ae:	617a      	str	r2, [r7, #20]
 80080b0:	693a      	ldr	r2, [r7, #16]
 80080b2:	b2d2      	uxtb	r2, r2
 80080b4:	701a      	strb	r2, [r3, #0]
 80080b6:	697b      	ldr	r3, [r7, #20]
 80080b8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80080ba:	2218      	movs	r2, #24
 80080bc:	6879      	ldr	r1, [r7, #4]
 80080be:	68b8      	ldr	r0, [r7, #8]
 80080c0:	f7ff fbb8 	bl	8007834 <_SendPacket>
  RECORD_END();
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80080ca:	4b06      	ldr	r3, [pc, #24]	; (80080e4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80080cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d002      	beq.n	80080d8 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80080d2:	4b04      	ldr	r3, [pc, #16]	; (80080e4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80080d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080d6:	4798      	blx	r3
  }
}
 80080d8:	bf00      	nop
 80080da:	3730      	adds	r7, #48	; 0x30
 80080dc:	46bd      	mov	sp, r7
 80080de:	bd80      	pop	{r7, pc}
 80080e0:	20007070 	.word	0x20007070
 80080e4:	20007040 	.word	0x20007040

080080e8 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b092      	sub	sp, #72	; 0x48
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 80080f0:	f3ef 8311 	mrs	r3, BASEPRI
 80080f4:	f04f 0120 	mov.w	r1, #32
 80080f8:	f381 8811 	msr	BASEPRI, r1
 80080fc:	617b      	str	r3, [r7, #20]
 80080fe:	486b      	ldr	r0, [pc, #428]	; (80082ac <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8008100:	f7ff fab9 	bl	8007676 <_PreparePacket>
 8008104:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8008106:	693b      	ldr	r3, [r7, #16]
 8008108:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	647b      	str	r3, [r7, #68]	; 0x44
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681a      	ldr	r2, [r3, #0]
 8008112:	4b67      	ldr	r3, [pc, #412]	; (80082b0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c8>)
 8008114:	691b      	ldr	r3, [r3, #16]
 8008116:	1ad3      	subs	r3, r2, r3
 8008118:	089b      	lsrs	r3, r3, #2
 800811a:	643b      	str	r3, [r7, #64]	; 0x40
 800811c:	e00b      	b.n	8008136 <SEGGER_SYSVIEW_SendTaskInfo+0x4e>
 800811e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008120:	b2da      	uxtb	r2, r3
 8008122:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008124:	1c59      	adds	r1, r3, #1
 8008126:	6479      	str	r1, [r7, #68]	; 0x44
 8008128:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800812c:	b2d2      	uxtb	r2, r2
 800812e:	701a      	strb	r2, [r3, #0]
 8008130:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008132:	09db      	lsrs	r3, r3, #7
 8008134:	643b      	str	r3, [r7, #64]	; 0x40
 8008136:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008138:	2b7f      	cmp	r3, #127	; 0x7f
 800813a:	d8f0      	bhi.n	800811e <SEGGER_SYSVIEW_SendTaskInfo+0x36>
 800813c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800813e:	1c5a      	adds	r2, r3, #1
 8008140:	647a      	str	r2, [r7, #68]	; 0x44
 8008142:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008144:	b2d2      	uxtb	r2, r2
 8008146:	701a      	strb	r2, [r3, #0]
 8008148:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800814a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	689b      	ldr	r3, [r3, #8]
 8008154:	63bb      	str	r3, [r7, #56]	; 0x38
 8008156:	e00b      	b.n	8008170 <SEGGER_SYSVIEW_SendTaskInfo+0x88>
 8008158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800815a:	b2da      	uxtb	r2, r3
 800815c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800815e:	1c59      	adds	r1, r3, #1
 8008160:	63f9      	str	r1, [r7, #60]	; 0x3c
 8008162:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008166:	b2d2      	uxtb	r2, r2
 8008168:	701a      	strb	r2, [r3, #0]
 800816a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800816c:	09db      	lsrs	r3, r3, #7
 800816e:	63bb      	str	r3, [r7, #56]	; 0x38
 8008170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008172:	2b7f      	cmp	r3, #127	; 0x7f
 8008174:	d8f0      	bhi.n	8008158 <SEGGER_SYSVIEW_SendTaskInfo+0x70>
 8008176:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008178:	1c5a      	adds	r2, r3, #1
 800817a:	63fa      	str	r2, [r7, #60]	; 0x3c
 800817c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800817e:	b2d2      	uxtb	r2, r2
 8008180:	701a      	strb	r2, [r3, #0]
 8008182:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008184:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	685b      	ldr	r3, [r3, #4]
 800818a:	2220      	movs	r2, #32
 800818c:	4619      	mov	r1, r3
 800818e:	68f8      	ldr	r0, [r7, #12]
 8008190:	f7ff fa24 	bl	80075dc <_EncodeStr>
 8008194:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8008196:	2209      	movs	r2, #9
 8008198:	68f9      	ldr	r1, [r7, #12]
 800819a:	6938      	ldr	r0, [r7, #16]
 800819c:	f7ff fb4a 	bl	8007834 <_SendPacket>
  //
  pPayload = pPayloadStart;
 80081a0:	693b      	ldr	r3, [r7, #16]
 80081a2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	637b      	str	r3, [r7, #52]	; 0x34
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681a      	ldr	r2, [r3, #0]
 80081ac:	4b40      	ldr	r3, [pc, #256]	; (80082b0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c8>)
 80081ae:	691b      	ldr	r3, [r3, #16]
 80081b0:	1ad3      	subs	r3, r2, r3
 80081b2:	089b      	lsrs	r3, r3, #2
 80081b4:	633b      	str	r3, [r7, #48]	; 0x30
 80081b6:	e00b      	b.n	80081d0 <SEGGER_SYSVIEW_SendTaskInfo+0xe8>
 80081b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081ba:	b2da      	uxtb	r2, r3
 80081bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081be:	1c59      	adds	r1, r3, #1
 80081c0:	6379      	str	r1, [r7, #52]	; 0x34
 80081c2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80081c6:	b2d2      	uxtb	r2, r2
 80081c8:	701a      	strb	r2, [r3, #0]
 80081ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081cc:	09db      	lsrs	r3, r3, #7
 80081ce:	633b      	str	r3, [r7, #48]	; 0x30
 80081d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081d2:	2b7f      	cmp	r3, #127	; 0x7f
 80081d4:	d8f0      	bhi.n	80081b8 <SEGGER_SYSVIEW_SendTaskInfo+0xd0>
 80081d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081d8:	1c5a      	adds	r2, r3, #1
 80081da:	637a      	str	r2, [r7, #52]	; 0x34
 80081dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80081de:	b2d2      	uxtb	r2, r2
 80081e0:	701a      	strb	r2, [r3, #0]
 80081e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081e4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	68db      	ldr	r3, [r3, #12]
 80081ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80081f0:	e00b      	b.n	800820a <SEGGER_SYSVIEW_SendTaskInfo+0x122>
 80081f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081f4:	b2da      	uxtb	r2, r3
 80081f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081f8:	1c59      	adds	r1, r3, #1
 80081fa:	62f9      	str	r1, [r7, #44]	; 0x2c
 80081fc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008200:	b2d2      	uxtb	r2, r2
 8008202:	701a      	strb	r2, [r3, #0]
 8008204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008206:	09db      	lsrs	r3, r3, #7
 8008208:	62bb      	str	r3, [r7, #40]	; 0x28
 800820a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800820c:	2b7f      	cmp	r3, #127	; 0x7f
 800820e:	d8f0      	bhi.n	80081f2 <SEGGER_SYSVIEW_SendTaskInfo+0x10a>
 8008210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008212:	1c5a      	adds	r2, r3, #1
 8008214:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008216:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008218:	b2d2      	uxtb	r2, r2
 800821a:	701a      	strb	r2, [r3, #0]
 800821c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800821e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	627b      	str	r3, [r7, #36]	; 0x24
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	691b      	ldr	r3, [r3, #16]
 8008228:	623b      	str	r3, [r7, #32]
 800822a:	e00b      	b.n	8008244 <SEGGER_SYSVIEW_SendTaskInfo+0x15c>
 800822c:	6a3b      	ldr	r3, [r7, #32]
 800822e:	b2da      	uxtb	r2, r3
 8008230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008232:	1c59      	adds	r1, r3, #1
 8008234:	6279      	str	r1, [r7, #36]	; 0x24
 8008236:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800823a:	b2d2      	uxtb	r2, r2
 800823c:	701a      	strb	r2, [r3, #0]
 800823e:	6a3b      	ldr	r3, [r7, #32]
 8008240:	09db      	lsrs	r3, r3, #7
 8008242:	623b      	str	r3, [r7, #32]
 8008244:	6a3b      	ldr	r3, [r7, #32]
 8008246:	2b7f      	cmp	r3, #127	; 0x7f
 8008248:	d8f0      	bhi.n	800822c <SEGGER_SYSVIEW_SendTaskInfo+0x144>
 800824a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800824c:	1c5a      	adds	r2, r3, #1
 800824e:	627a      	str	r2, [r7, #36]	; 0x24
 8008250:	6a3a      	ldr	r2, [r7, #32]
 8008252:	b2d2      	uxtb	r2, r2
 8008254:	701a      	strb	r2, [r3, #0]
 8008256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008258:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	61fb      	str	r3, [r7, #28]
 800825e:	2300      	movs	r3, #0
 8008260:	61bb      	str	r3, [r7, #24]
 8008262:	e00b      	b.n	800827c <SEGGER_SYSVIEW_SendTaskInfo+0x194>
 8008264:	69bb      	ldr	r3, [r7, #24]
 8008266:	b2da      	uxtb	r2, r3
 8008268:	69fb      	ldr	r3, [r7, #28]
 800826a:	1c59      	adds	r1, r3, #1
 800826c:	61f9      	str	r1, [r7, #28]
 800826e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008272:	b2d2      	uxtb	r2, r2
 8008274:	701a      	strb	r2, [r3, #0]
 8008276:	69bb      	ldr	r3, [r7, #24]
 8008278:	09db      	lsrs	r3, r3, #7
 800827a:	61bb      	str	r3, [r7, #24]
 800827c:	69bb      	ldr	r3, [r7, #24]
 800827e:	2b7f      	cmp	r3, #127	; 0x7f
 8008280:	d8f0      	bhi.n	8008264 <SEGGER_SYSVIEW_SendTaskInfo+0x17c>
 8008282:	69fb      	ldr	r3, [r7, #28]
 8008284:	1c5a      	adds	r2, r3, #1
 8008286:	61fa      	str	r2, [r7, #28]
 8008288:	69ba      	ldr	r2, [r7, #24]
 800828a:	b2d2      	uxtb	r2, r2
 800828c:	701a      	strb	r2, [r3, #0]
 800828e:	69fb      	ldr	r3, [r7, #28]
 8008290:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8008292:	2215      	movs	r2, #21
 8008294:	68f9      	ldr	r1, [r7, #12]
 8008296:	6938      	ldr	r0, [r7, #16]
 8008298:	f7ff facc 	bl	8007834 <_SendPacket>
  RECORD_END();
 800829c:	697b      	ldr	r3, [r7, #20]
 800829e:	f383 8811 	msr	BASEPRI, r3
}
 80082a2:	bf00      	nop
 80082a4:	3748      	adds	r7, #72	; 0x48
 80082a6:	46bd      	mov	sp, r7
 80082a8:	bd80      	pop	{r7, pc}
 80082aa:	bf00      	nop
 80082ac:	20007070 	.word	0x20007070
 80082b0:	20007040 	.word	0x20007040

080082b4 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 80082b4:	b580      	push	{r7, lr}
 80082b6:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80082b8:	4b07      	ldr	r3, [pc, #28]	; (80082d8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80082ba:	6a1b      	ldr	r3, [r3, #32]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d008      	beq.n	80082d2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80082c0:	4b05      	ldr	r3, [pc, #20]	; (80082d8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80082c2:	6a1b      	ldr	r3, [r3, #32]
 80082c4:	685b      	ldr	r3, [r3, #4]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d003      	beq.n	80082d2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80082ca:	4b03      	ldr	r3, [pc, #12]	; (80082d8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80082cc:	6a1b      	ldr	r3, [r3, #32]
 80082ce:	685b      	ldr	r3, [r3, #4]
 80082d0:	4798      	blx	r3
  }
}
 80082d2:	bf00      	nop
 80082d4:	bd80      	pop	{r7, pc}
 80082d6:	bf00      	nop
 80082d8:	20007040 	.word	0x20007040

080082dc <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 80082dc:	b580      	push	{r7, lr}
 80082de:	b086      	sub	sp, #24
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80082e4:	f3ef 8311 	mrs	r3, BASEPRI
 80082e8:	f04f 0120 	mov.w	r1, #32
 80082ec:	f381 8811 	msr	BASEPRI, r1
 80082f0:	617b      	str	r3, [r7, #20]
 80082f2:	480b      	ldr	r0, [pc, #44]	; (8008320 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 80082f4:	f7ff f9bf 	bl	8007676 <_PreparePacket>
 80082f8:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80082fa:	2280      	movs	r2, #128	; 0x80
 80082fc:	6879      	ldr	r1, [r7, #4]
 80082fe:	6938      	ldr	r0, [r7, #16]
 8008300:	f7ff f96c 	bl	80075dc <_EncodeStr>
 8008304:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8008306:	220e      	movs	r2, #14
 8008308:	68f9      	ldr	r1, [r7, #12]
 800830a:	6938      	ldr	r0, [r7, #16]
 800830c:	f7ff fa92 	bl	8007834 <_SendPacket>
  RECORD_END();
 8008310:	697b      	ldr	r3, [r7, #20]
 8008312:	f383 8811 	msr	BASEPRI, r3
}
 8008316:	bf00      	nop
 8008318:	3718      	adds	r7, #24
 800831a:	46bd      	mov	sp, r7
 800831c:	bd80      	pop	{r7, pc}
 800831e:	bf00      	nop
 8008320:	20007070 	.word	0x20007070

08008324 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8008324:	b590      	push	{r4, r7, lr}
 8008326:	b083      	sub	sp, #12
 8008328:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800832a:	4b15      	ldr	r3, [pc, #84]	; (8008380 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800832c:	6a1b      	ldr	r3, [r3, #32]
 800832e:	2b00      	cmp	r3, #0
 8008330:	d01a      	beq.n	8008368 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8008332:	4b13      	ldr	r3, [pc, #76]	; (8008380 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8008334:	6a1b      	ldr	r3, [r3, #32]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d015      	beq.n	8008368 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 800833c:	4b10      	ldr	r3, [pc, #64]	; (8008380 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800833e:	6a1b      	ldr	r3, [r3, #32]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	4798      	blx	r3
 8008344:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8008348:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800834a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800834e:	f04f 0200 	mov.w	r2, #0
 8008352:	f04f 0300 	mov.w	r3, #0
 8008356:	000a      	movs	r2, r1
 8008358:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800835a:	4613      	mov	r3, r2
 800835c:	461a      	mov	r2, r3
 800835e:	4621      	mov	r1, r4
 8008360:	200d      	movs	r0, #13
 8008362:	f7ff fbe3 	bl	8007b2c <SEGGER_SYSVIEW_RecordU32x2>
 8008366:	e006      	b.n	8008376 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8008368:	4b06      	ldr	r3, [pc, #24]	; (8008384 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	4619      	mov	r1, r3
 800836e:	200c      	movs	r0, #12
 8008370:	f7ff fba0 	bl	8007ab4 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8008374:	bf00      	nop
 8008376:	bf00      	nop
 8008378:	370c      	adds	r7, #12
 800837a:	46bd      	mov	sp, r7
 800837c:	bd90      	pop	{r4, r7, pc}
 800837e:	bf00      	nop
 8008380:	20007040 	.word	0x20007040
 8008384:	e0001004 	.word	0xe0001004

08008388 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8008388:	b580      	push	{r7, lr}
 800838a:	b086      	sub	sp, #24
 800838c:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800838e:	f3ef 8311 	mrs	r3, BASEPRI
 8008392:	f04f 0120 	mov.w	r1, #32
 8008396:	f381 8811 	msr	BASEPRI, r1
 800839a:	60fb      	str	r3, [r7, #12]
 800839c:	4819      	ldr	r0, [pc, #100]	; (8008404 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 800839e:	f7ff f96a 	bl	8007676 <_PreparePacket>
 80083a2:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80083a4:	68bb      	ldr	r3, [r7, #8]
 80083a6:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 80083a8:	4b17      	ldr	r3, [pc, #92]	; (8008408 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083b0:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	617b      	str	r3, [r7, #20]
 80083b6:	683b      	ldr	r3, [r7, #0]
 80083b8:	613b      	str	r3, [r7, #16]
 80083ba:	e00b      	b.n	80083d4 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 80083bc:	693b      	ldr	r3, [r7, #16]
 80083be:	b2da      	uxtb	r2, r3
 80083c0:	697b      	ldr	r3, [r7, #20]
 80083c2:	1c59      	adds	r1, r3, #1
 80083c4:	6179      	str	r1, [r7, #20]
 80083c6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80083ca:	b2d2      	uxtb	r2, r2
 80083cc:	701a      	strb	r2, [r3, #0]
 80083ce:	693b      	ldr	r3, [r7, #16]
 80083d0:	09db      	lsrs	r3, r3, #7
 80083d2:	613b      	str	r3, [r7, #16]
 80083d4:	693b      	ldr	r3, [r7, #16]
 80083d6:	2b7f      	cmp	r3, #127	; 0x7f
 80083d8:	d8f0      	bhi.n	80083bc <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 80083da:	697b      	ldr	r3, [r7, #20]
 80083dc:	1c5a      	adds	r2, r3, #1
 80083de:	617a      	str	r2, [r7, #20]
 80083e0:	693a      	ldr	r2, [r7, #16]
 80083e2:	b2d2      	uxtb	r2, r2
 80083e4:	701a      	strb	r2, [r3, #0]
 80083e6:	697b      	ldr	r3, [r7, #20]
 80083e8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 80083ea:	2202      	movs	r2, #2
 80083ec:	6879      	ldr	r1, [r7, #4]
 80083ee:	68b8      	ldr	r0, [r7, #8]
 80083f0:	f7ff fa20 	bl	8007834 <_SendPacket>
  RECORD_END();
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	f383 8811 	msr	BASEPRI, r3
}
 80083fa:	bf00      	nop
 80083fc:	3718      	adds	r7, #24
 80083fe:	46bd      	mov	sp, r7
 8008400:	bd80      	pop	{r7, pc}
 8008402:	bf00      	nop
 8008404:	20007070 	.word	0x20007070
 8008408:	e000ed04 	.word	0xe000ed04

0800840c <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 800840c:	b580      	push	{r7, lr}
 800840e:	b082      	sub	sp, #8
 8008410:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8008412:	f3ef 8311 	mrs	r3, BASEPRI
 8008416:	f04f 0120 	mov.w	r1, #32
 800841a:	f381 8811 	msr	BASEPRI, r1
 800841e:	607b      	str	r3, [r7, #4]
 8008420:	4807      	ldr	r0, [pc, #28]	; (8008440 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8008422:	f7ff f928 	bl	8007676 <_PreparePacket>
 8008426:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8008428:	2203      	movs	r2, #3
 800842a:	6839      	ldr	r1, [r7, #0]
 800842c:	6838      	ldr	r0, [r7, #0]
 800842e:	f7ff fa01 	bl	8007834 <_SendPacket>
  RECORD_END();
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	f383 8811 	msr	BASEPRI, r3
}
 8008438:	bf00      	nop
 800843a:	3708      	adds	r7, #8
 800843c:	46bd      	mov	sp, r7
 800843e:	bd80      	pop	{r7, pc}
 8008440:	20007070 	.word	0x20007070

08008444 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8008444:	b580      	push	{r7, lr}
 8008446:	b082      	sub	sp, #8
 8008448:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800844a:	f3ef 8311 	mrs	r3, BASEPRI
 800844e:	f04f 0120 	mov.w	r1, #32
 8008452:	f381 8811 	msr	BASEPRI, r1
 8008456:	607b      	str	r3, [r7, #4]
 8008458:	4807      	ldr	r0, [pc, #28]	; (8008478 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 800845a:	f7ff f90c 	bl	8007676 <_PreparePacket>
 800845e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8008460:	2212      	movs	r2, #18
 8008462:	6839      	ldr	r1, [r7, #0]
 8008464:	6838      	ldr	r0, [r7, #0]
 8008466:	f7ff f9e5 	bl	8007834 <_SendPacket>
  RECORD_END();
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	f383 8811 	msr	BASEPRI, r3
}
 8008470:	bf00      	nop
 8008472:	3708      	adds	r7, #8
 8008474:	46bd      	mov	sp, r7
 8008476:	bd80      	pop	{r7, pc}
 8008478:	20007070 	.word	0x20007070

0800847c <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 800847c:	b580      	push	{r7, lr}
 800847e:	b082      	sub	sp, #8
 8008480:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8008482:	f3ef 8311 	mrs	r3, BASEPRI
 8008486:	f04f 0120 	mov.w	r1, #32
 800848a:	f381 8811 	msr	BASEPRI, r1
 800848e:	607b      	str	r3, [r7, #4]
 8008490:	4807      	ldr	r0, [pc, #28]	; (80084b0 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8008492:	f7ff f8f0 	bl	8007676 <_PreparePacket>
 8008496:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8008498:	2211      	movs	r2, #17
 800849a:	6839      	ldr	r1, [r7, #0]
 800849c:	6838      	ldr	r0, [r7, #0]
 800849e:	f7ff f9c9 	bl	8007834 <_SendPacket>
  RECORD_END();
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	f383 8811 	msr	BASEPRI, r3
}
 80084a8:	bf00      	nop
 80084aa:	3708      	adds	r7, #8
 80084ac:	46bd      	mov	sp, r7
 80084ae:	bd80      	pop	{r7, pc}
 80084b0:	20007070 	.word	0x20007070

080084b4 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b088      	sub	sp, #32
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80084bc:	f3ef 8311 	mrs	r3, BASEPRI
 80084c0:	f04f 0120 	mov.w	r1, #32
 80084c4:	f381 8811 	msr	BASEPRI, r1
 80084c8:	617b      	str	r3, [r7, #20]
 80084ca:	481a      	ldr	r0, [pc, #104]	; (8008534 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 80084cc:	f7ff f8d3 	bl	8007676 <_PreparePacket>
 80084d0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80084d2:	693b      	ldr	r3, [r7, #16]
 80084d4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80084d6:	4b18      	ldr	r3, [pc, #96]	; (8008538 <SEGGER_SYSVIEW_OnTaskCreate+0x84>)
 80084d8:	691b      	ldr	r3, [r3, #16]
 80084da:	687a      	ldr	r2, [r7, #4]
 80084dc:	1ad3      	subs	r3, r2, r3
 80084de:	089b      	lsrs	r3, r3, #2
 80084e0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	61fb      	str	r3, [r7, #28]
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	61bb      	str	r3, [r7, #24]
 80084ea:	e00b      	b.n	8008504 <SEGGER_SYSVIEW_OnTaskCreate+0x50>
 80084ec:	69bb      	ldr	r3, [r7, #24]
 80084ee:	b2da      	uxtb	r2, r3
 80084f0:	69fb      	ldr	r3, [r7, #28]
 80084f2:	1c59      	adds	r1, r3, #1
 80084f4:	61f9      	str	r1, [r7, #28]
 80084f6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80084fa:	b2d2      	uxtb	r2, r2
 80084fc:	701a      	strb	r2, [r3, #0]
 80084fe:	69bb      	ldr	r3, [r7, #24]
 8008500:	09db      	lsrs	r3, r3, #7
 8008502:	61bb      	str	r3, [r7, #24]
 8008504:	69bb      	ldr	r3, [r7, #24]
 8008506:	2b7f      	cmp	r3, #127	; 0x7f
 8008508:	d8f0      	bhi.n	80084ec <SEGGER_SYSVIEW_OnTaskCreate+0x38>
 800850a:	69fb      	ldr	r3, [r7, #28]
 800850c:	1c5a      	adds	r2, r3, #1
 800850e:	61fa      	str	r2, [r7, #28]
 8008510:	69ba      	ldr	r2, [r7, #24]
 8008512:	b2d2      	uxtb	r2, r2
 8008514:	701a      	strb	r2, [r3, #0]
 8008516:	69fb      	ldr	r3, [r7, #28]
 8008518:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 800851a:	2208      	movs	r2, #8
 800851c:	68f9      	ldr	r1, [r7, #12]
 800851e:	6938      	ldr	r0, [r7, #16]
 8008520:	f7ff f988 	bl	8007834 <_SendPacket>
  RECORD_END();
 8008524:	697b      	ldr	r3, [r7, #20]
 8008526:	f383 8811 	msr	BASEPRI, r3
}
 800852a:	bf00      	nop
 800852c:	3720      	adds	r7, #32
 800852e:	46bd      	mov	sp, r7
 8008530:	bd80      	pop	{r7, pc}
 8008532:	bf00      	nop
 8008534:	20007070 	.word	0x20007070
 8008538:	20007040 	.word	0x20007040

0800853c <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 800853c:	b580      	push	{r7, lr}
 800853e:	b088      	sub	sp, #32
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8008544:	f3ef 8311 	mrs	r3, BASEPRI
 8008548:	f04f 0120 	mov.w	r1, #32
 800854c:	f381 8811 	msr	BASEPRI, r1
 8008550:	617b      	str	r3, [r7, #20]
 8008552:	481a      	ldr	r0, [pc, #104]	; (80085bc <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8008554:	f7ff f88f 	bl	8007676 <_PreparePacket>
 8008558:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800855a:	693b      	ldr	r3, [r7, #16]
 800855c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800855e:	4b18      	ldr	r3, [pc, #96]	; (80085c0 <SEGGER_SYSVIEW_OnTaskStartExec+0x84>)
 8008560:	691b      	ldr	r3, [r3, #16]
 8008562:	687a      	ldr	r2, [r7, #4]
 8008564:	1ad3      	subs	r3, r2, r3
 8008566:	089b      	lsrs	r3, r3, #2
 8008568:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	61fb      	str	r3, [r7, #28]
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	61bb      	str	r3, [r7, #24]
 8008572:	e00b      	b.n	800858c <SEGGER_SYSVIEW_OnTaskStartExec+0x50>
 8008574:	69bb      	ldr	r3, [r7, #24]
 8008576:	b2da      	uxtb	r2, r3
 8008578:	69fb      	ldr	r3, [r7, #28]
 800857a:	1c59      	adds	r1, r3, #1
 800857c:	61f9      	str	r1, [r7, #28]
 800857e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008582:	b2d2      	uxtb	r2, r2
 8008584:	701a      	strb	r2, [r3, #0]
 8008586:	69bb      	ldr	r3, [r7, #24]
 8008588:	09db      	lsrs	r3, r3, #7
 800858a:	61bb      	str	r3, [r7, #24]
 800858c:	69bb      	ldr	r3, [r7, #24]
 800858e:	2b7f      	cmp	r3, #127	; 0x7f
 8008590:	d8f0      	bhi.n	8008574 <SEGGER_SYSVIEW_OnTaskStartExec+0x38>
 8008592:	69fb      	ldr	r3, [r7, #28]
 8008594:	1c5a      	adds	r2, r3, #1
 8008596:	61fa      	str	r2, [r7, #28]
 8008598:	69ba      	ldr	r2, [r7, #24]
 800859a:	b2d2      	uxtb	r2, r2
 800859c:	701a      	strb	r2, [r3, #0]
 800859e:	69fb      	ldr	r3, [r7, #28]
 80085a0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 80085a2:	2204      	movs	r2, #4
 80085a4:	68f9      	ldr	r1, [r7, #12]
 80085a6:	6938      	ldr	r0, [r7, #16]
 80085a8:	f7ff f944 	bl	8007834 <_SendPacket>
  RECORD_END();
 80085ac:	697b      	ldr	r3, [r7, #20]
 80085ae:	f383 8811 	msr	BASEPRI, r3
}
 80085b2:	bf00      	nop
 80085b4:	3720      	adds	r7, #32
 80085b6:	46bd      	mov	sp, r7
 80085b8:	bd80      	pop	{r7, pc}
 80085ba:	bf00      	nop
 80085bc:	20007070 	.word	0x20007070
 80085c0:	20007040 	.word	0x20007040

080085c4 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 80085c4:	b580      	push	{r7, lr}
 80085c6:	b088      	sub	sp, #32
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80085cc:	f3ef 8311 	mrs	r3, BASEPRI
 80085d0:	f04f 0120 	mov.w	r1, #32
 80085d4:	f381 8811 	msr	BASEPRI, r1
 80085d8:	617b      	str	r3, [r7, #20]
 80085da:	481a      	ldr	r0, [pc, #104]	; (8008644 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 80085dc:	f7ff f84b 	bl	8007676 <_PreparePacket>
 80085e0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80085e2:	693b      	ldr	r3, [r7, #16]
 80085e4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80085e6:	4b18      	ldr	r3, [pc, #96]	; (8008648 <SEGGER_SYSVIEW_OnTaskStartReady+0x84>)
 80085e8:	691b      	ldr	r3, [r3, #16]
 80085ea:	687a      	ldr	r2, [r7, #4]
 80085ec:	1ad3      	subs	r3, r2, r3
 80085ee:	089b      	lsrs	r3, r3, #2
 80085f0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	61fb      	str	r3, [r7, #28]
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	61bb      	str	r3, [r7, #24]
 80085fa:	e00b      	b.n	8008614 <SEGGER_SYSVIEW_OnTaskStartReady+0x50>
 80085fc:	69bb      	ldr	r3, [r7, #24]
 80085fe:	b2da      	uxtb	r2, r3
 8008600:	69fb      	ldr	r3, [r7, #28]
 8008602:	1c59      	adds	r1, r3, #1
 8008604:	61f9      	str	r1, [r7, #28]
 8008606:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800860a:	b2d2      	uxtb	r2, r2
 800860c:	701a      	strb	r2, [r3, #0]
 800860e:	69bb      	ldr	r3, [r7, #24]
 8008610:	09db      	lsrs	r3, r3, #7
 8008612:	61bb      	str	r3, [r7, #24]
 8008614:	69bb      	ldr	r3, [r7, #24]
 8008616:	2b7f      	cmp	r3, #127	; 0x7f
 8008618:	d8f0      	bhi.n	80085fc <SEGGER_SYSVIEW_OnTaskStartReady+0x38>
 800861a:	69fb      	ldr	r3, [r7, #28]
 800861c:	1c5a      	adds	r2, r3, #1
 800861e:	61fa      	str	r2, [r7, #28]
 8008620:	69ba      	ldr	r2, [r7, #24]
 8008622:	b2d2      	uxtb	r2, r2
 8008624:	701a      	strb	r2, [r3, #0]
 8008626:	69fb      	ldr	r3, [r7, #28]
 8008628:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 800862a:	2206      	movs	r2, #6
 800862c:	68f9      	ldr	r1, [r7, #12]
 800862e:	6938      	ldr	r0, [r7, #16]
 8008630:	f7ff f900 	bl	8007834 <_SendPacket>
  RECORD_END();
 8008634:	697b      	ldr	r3, [r7, #20]
 8008636:	f383 8811 	msr	BASEPRI, r3
}
 800863a:	bf00      	nop
 800863c:	3720      	adds	r7, #32
 800863e:	46bd      	mov	sp, r7
 8008640:	bd80      	pop	{r7, pc}
 8008642:	bf00      	nop
 8008644:	20007070 	.word	0x20007070
 8008648:	20007040 	.word	0x20007040

0800864c <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 800864c:	b580      	push	{r7, lr}
 800864e:	b08a      	sub	sp, #40	; 0x28
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
 8008654:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8008656:	f3ef 8311 	mrs	r3, BASEPRI
 800865a:	f04f 0120 	mov.w	r1, #32
 800865e:	f381 8811 	msr	BASEPRI, r1
 8008662:	617b      	str	r3, [r7, #20]
 8008664:	4827      	ldr	r0, [pc, #156]	; (8008704 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8008666:	f7ff f806 	bl	8007676 <_PreparePacket>
 800866a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800866c:	693b      	ldr	r3, [r7, #16]
 800866e:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8008670:	4b25      	ldr	r3, [pc, #148]	; (8008708 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8008672:	691b      	ldr	r3, [r3, #16]
 8008674:	687a      	ldr	r2, [r7, #4]
 8008676:	1ad3      	subs	r3, r2, r3
 8008678:	089b      	lsrs	r3, r3, #2
 800867a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	627b      	str	r3, [r7, #36]	; 0x24
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	623b      	str	r3, [r7, #32]
 8008684:	e00b      	b.n	800869e <SEGGER_SYSVIEW_OnTaskStopReady+0x52>
 8008686:	6a3b      	ldr	r3, [r7, #32]
 8008688:	b2da      	uxtb	r2, r3
 800868a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800868c:	1c59      	adds	r1, r3, #1
 800868e:	6279      	str	r1, [r7, #36]	; 0x24
 8008690:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008694:	b2d2      	uxtb	r2, r2
 8008696:	701a      	strb	r2, [r3, #0]
 8008698:	6a3b      	ldr	r3, [r7, #32]
 800869a:	09db      	lsrs	r3, r3, #7
 800869c:	623b      	str	r3, [r7, #32]
 800869e:	6a3b      	ldr	r3, [r7, #32]
 80086a0:	2b7f      	cmp	r3, #127	; 0x7f
 80086a2:	d8f0      	bhi.n	8008686 <SEGGER_SYSVIEW_OnTaskStopReady+0x3a>
 80086a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086a6:	1c5a      	adds	r2, r3, #1
 80086a8:	627a      	str	r2, [r7, #36]	; 0x24
 80086aa:	6a3a      	ldr	r2, [r7, #32]
 80086ac:	b2d2      	uxtb	r2, r2
 80086ae:	701a      	strb	r2, [r3, #0]
 80086b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086b2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	61fb      	str	r3, [r7, #28]
 80086b8:	683b      	ldr	r3, [r7, #0]
 80086ba:	61bb      	str	r3, [r7, #24]
 80086bc:	e00b      	b.n	80086d6 <SEGGER_SYSVIEW_OnTaskStopReady+0x8a>
 80086be:	69bb      	ldr	r3, [r7, #24]
 80086c0:	b2da      	uxtb	r2, r3
 80086c2:	69fb      	ldr	r3, [r7, #28]
 80086c4:	1c59      	adds	r1, r3, #1
 80086c6:	61f9      	str	r1, [r7, #28]
 80086c8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80086cc:	b2d2      	uxtb	r2, r2
 80086ce:	701a      	strb	r2, [r3, #0]
 80086d0:	69bb      	ldr	r3, [r7, #24]
 80086d2:	09db      	lsrs	r3, r3, #7
 80086d4:	61bb      	str	r3, [r7, #24]
 80086d6:	69bb      	ldr	r3, [r7, #24]
 80086d8:	2b7f      	cmp	r3, #127	; 0x7f
 80086da:	d8f0      	bhi.n	80086be <SEGGER_SYSVIEW_OnTaskStopReady+0x72>
 80086dc:	69fb      	ldr	r3, [r7, #28]
 80086de:	1c5a      	adds	r2, r3, #1
 80086e0:	61fa      	str	r2, [r7, #28]
 80086e2:	69ba      	ldr	r2, [r7, #24]
 80086e4:	b2d2      	uxtb	r2, r2
 80086e6:	701a      	strb	r2, [r3, #0]
 80086e8:	69fb      	ldr	r3, [r7, #28]
 80086ea:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 80086ec:	2207      	movs	r2, #7
 80086ee:	68f9      	ldr	r1, [r7, #12]
 80086f0:	6938      	ldr	r0, [r7, #16]
 80086f2:	f7ff f89f 	bl	8007834 <_SendPacket>
  RECORD_END();
 80086f6:	697b      	ldr	r3, [r7, #20]
 80086f8:	f383 8811 	msr	BASEPRI, r3
}
 80086fc:	bf00      	nop
 80086fe:	3728      	adds	r7, #40	; 0x28
 8008700:	46bd      	mov	sp, r7
 8008702:	bd80      	pop	{r7, pc}
 8008704:	20007070 	.word	0x20007070
 8008708:	20007040 	.word	0x20007040

0800870c <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 800870c:	b480      	push	{r7}
 800870e:	b083      	sub	sp, #12
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8008714:	4b05      	ldr	r3, [pc, #20]	; (800872c <SEGGER_SYSVIEW_ShrinkId+0x20>)
 8008716:	691b      	ldr	r3, [r3, #16]
 8008718:	687a      	ldr	r2, [r7, #4]
 800871a:	1ad3      	subs	r3, r2, r3
 800871c:	089b      	lsrs	r3, r3, #2
}
 800871e:	4618      	mov	r0, r3
 8008720:	370c      	adds	r7, #12
 8008722:	46bd      	mov	sp, r7
 8008724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008728:	4770      	bx	lr
 800872a:	bf00      	nop
 800872c:	20007040 	.word	0x20007040

08008730 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8008730:	b580      	push	{r7, lr}
 8008732:	b08c      	sub	sp, #48	; 0x30
 8008734:	af00      	add	r7, sp, #0
 8008736:	4603      	mov	r3, r0
 8008738:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800873a:	4b3b      	ldr	r3, [pc, #236]	; (8008828 <SEGGER_SYSVIEW_SendModule+0xf8>)
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d06d      	beq.n	800881e <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8008742:	4b39      	ldr	r3, [pc, #228]	; (8008828 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8008748:	2300      	movs	r3, #0
 800874a:	62bb      	str	r3, [r7, #40]	; 0x28
 800874c:	e008      	b.n	8008760 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800874e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008750:	691b      	ldr	r3, [r3, #16]
 8008752:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8008754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008756:	2b00      	cmp	r3, #0
 8008758:	d007      	beq.n	800876a <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800875a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800875c:	3301      	adds	r3, #1
 800875e:	62bb      	str	r3, [r7, #40]	; 0x28
 8008760:	79fb      	ldrb	r3, [r7, #7]
 8008762:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008764:	429a      	cmp	r2, r3
 8008766:	d3f2      	bcc.n	800874e <SEGGER_SYSVIEW_SendModule+0x1e>
 8008768:	e000      	b.n	800876c <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800876a:	bf00      	nop
      }
    }
    if (pModule != 0) {
 800876c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800876e:	2b00      	cmp	r3, #0
 8008770:	d055      	beq.n	800881e <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8008772:	f3ef 8311 	mrs	r3, BASEPRI
 8008776:	f04f 0120 	mov.w	r1, #32
 800877a:	f381 8811 	msr	BASEPRI, r1
 800877e:	617b      	str	r3, [r7, #20]
 8008780:	482a      	ldr	r0, [pc, #168]	; (800882c <SEGGER_SYSVIEW_SendModule+0xfc>)
 8008782:	f7fe ff78 	bl	8007676 <_PreparePacket>
 8008786:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8008788:	693b      	ldr	r3, [r7, #16]
 800878a:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	627b      	str	r3, [r7, #36]	; 0x24
 8008790:	79fb      	ldrb	r3, [r7, #7]
 8008792:	623b      	str	r3, [r7, #32]
 8008794:	e00b      	b.n	80087ae <SEGGER_SYSVIEW_SendModule+0x7e>
 8008796:	6a3b      	ldr	r3, [r7, #32]
 8008798:	b2da      	uxtb	r2, r3
 800879a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800879c:	1c59      	adds	r1, r3, #1
 800879e:	6279      	str	r1, [r7, #36]	; 0x24
 80087a0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80087a4:	b2d2      	uxtb	r2, r2
 80087a6:	701a      	strb	r2, [r3, #0]
 80087a8:	6a3b      	ldr	r3, [r7, #32]
 80087aa:	09db      	lsrs	r3, r3, #7
 80087ac:	623b      	str	r3, [r7, #32]
 80087ae:	6a3b      	ldr	r3, [r7, #32]
 80087b0:	2b7f      	cmp	r3, #127	; 0x7f
 80087b2:	d8f0      	bhi.n	8008796 <SEGGER_SYSVIEW_SendModule+0x66>
 80087b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087b6:	1c5a      	adds	r2, r3, #1
 80087b8:	627a      	str	r2, [r7, #36]	; 0x24
 80087ba:	6a3a      	ldr	r2, [r7, #32]
 80087bc:	b2d2      	uxtb	r2, r2
 80087be:	701a      	strb	r2, [r3, #0]
 80087c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087c2:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	61fb      	str	r3, [r7, #28]
 80087c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087ca:	689b      	ldr	r3, [r3, #8]
 80087cc:	61bb      	str	r3, [r7, #24]
 80087ce:	e00b      	b.n	80087e8 <SEGGER_SYSVIEW_SendModule+0xb8>
 80087d0:	69bb      	ldr	r3, [r7, #24]
 80087d2:	b2da      	uxtb	r2, r3
 80087d4:	69fb      	ldr	r3, [r7, #28]
 80087d6:	1c59      	adds	r1, r3, #1
 80087d8:	61f9      	str	r1, [r7, #28]
 80087da:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80087de:	b2d2      	uxtb	r2, r2
 80087e0:	701a      	strb	r2, [r3, #0]
 80087e2:	69bb      	ldr	r3, [r7, #24]
 80087e4:	09db      	lsrs	r3, r3, #7
 80087e6:	61bb      	str	r3, [r7, #24]
 80087e8:	69bb      	ldr	r3, [r7, #24]
 80087ea:	2b7f      	cmp	r3, #127	; 0x7f
 80087ec:	d8f0      	bhi.n	80087d0 <SEGGER_SYSVIEW_SendModule+0xa0>
 80087ee:	69fb      	ldr	r3, [r7, #28]
 80087f0:	1c5a      	adds	r2, r3, #1
 80087f2:	61fa      	str	r2, [r7, #28]
 80087f4:	69ba      	ldr	r2, [r7, #24]
 80087f6:	b2d2      	uxtb	r2, r2
 80087f8:	701a      	strb	r2, [r3, #0]
 80087fa:	69fb      	ldr	r3, [r7, #28]
 80087fc:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80087fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	2280      	movs	r2, #128	; 0x80
 8008804:	4619      	mov	r1, r3
 8008806:	68f8      	ldr	r0, [r7, #12]
 8008808:	f7fe fee8 	bl	80075dc <_EncodeStr>
 800880c:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800880e:	2216      	movs	r2, #22
 8008810:	68f9      	ldr	r1, [r7, #12]
 8008812:	6938      	ldr	r0, [r7, #16]
 8008814:	f7ff f80e 	bl	8007834 <_SendPacket>
      RECORD_END();
 8008818:	697b      	ldr	r3, [r7, #20]
 800881a:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 800881e:	bf00      	nop
 8008820:	3730      	adds	r7, #48	; 0x30
 8008822:	46bd      	mov	sp, r7
 8008824:	bd80      	pop	{r7, pc}
 8008826:	bf00      	nop
 8008828:	20007068 	.word	0x20007068
 800882c:	20007070 	.word	0x20007070

08008830 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8008830:	b580      	push	{r7, lr}
 8008832:	b082      	sub	sp, #8
 8008834:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8008836:	4b0c      	ldr	r3, [pc, #48]	; (8008868 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	2b00      	cmp	r3, #0
 800883c:	d00f      	beq.n	800885e <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800883e:	4b0a      	ldr	r3, [pc, #40]	; (8008868 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	68db      	ldr	r3, [r3, #12]
 8008848:	2b00      	cmp	r3, #0
 800884a:	d002      	beq.n	8008852 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	68db      	ldr	r3, [r3, #12]
 8008850:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	691b      	ldr	r3, [r3, #16]
 8008856:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	2b00      	cmp	r3, #0
 800885c:	d1f2      	bne.n	8008844 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800885e:	bf00      	nop
 8008860:	3708      	adds	r7, #8
 8008862:	46bd      	mov	sp, r7
 8008864:	bd80      	pop	{r7, pc}
 8008866:	bf00      	nop
 8008868:	20007068 	.word	0x20007068

0800886c <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 800886c:	b580      	push	{r7, lr}
 800886e:	b086      	sub	sp, #24
 8008870:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8008872:	f3ef 8311 	mrs	r3, BASEPRI
 8008876:	f04f 0120 	mov.w	r1, #32
 800887a:	f381 8811 	msr	BASEPRI, r1
 800887e:	60fb      	str	r3, [r7, #12]
 8008880:	4817      	ldr	r0, [pc, #92]	; (80088e0 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8008882:	f7fe fef8 	bl	8007676 <_PreparePacket>
 8008886:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8008888:	68bb      	ldr	r3, [r7, #8]
 800888a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	617b      	str	r3, [r7, #20]
 8008890:	4b14      	ldr	r3, [pc, #80]	; (80088e4 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8008892:	781b      	ldrb	r3, [r3, #0]
 8008894:	613b      	str	r3, [r7, #16]
 8008896:	e00b      	b.n	80088b0 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8008898:	693b      	ldr	r3, [r7, #16]
 800889a:	b2da      	uxtb	r2, r3
 800889c:	697b      	ldr	r3, [r7, #20]
 800889e:	1c59      	adds	r1, r3, #1
 80088a0:	6179      	str	r1, [r7, #20]
 80088a2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80088a6:	b2d2      	uxtb	r2, r2
 80088a8:	701a      	strb	r2, [r3, #0]
 80088aa:	693b      	ldr	r3, [r7, #16]
 80088ac:	09db      	lsrs	r3, r3, #7
 80088ae:	613b      	str	r3, [r7, #16]
 80088b0:	693b      	ldr	r3, [r7, #16]
 80088b2:	2b7f      	cmp	r3, #127	; 0x7f
 80088b4:	d8f0      	bhi.n	8008898 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80088b6:	697b      	ldr	r3, [r7, #20]
 80088b8:	1c5a      	adds	r2, r3, #1
 80088ba:	617a      	str	r2, [r7, #20]
 80088bc:	693a      	ldr	r2, [r7, #16]
 80088be:	b2d2      	uxtb	r2, r2
 80088c0:	701a      	strb	r2, [r3, #0]
 80088c2:	697b      	ldr	r3, [r7, #20]
 80088c4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80088c6:	221b      	movs	r2, #27
 80088c8:	6879      	ldr	r1, [r7, #4]
 80088ca:	68b8      	ldr	r0, [r7, #8]
 80088cc:	f7fe ffb2 	bl	8007834 <_SendPacket>
  RECORD_END();
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	f383 8811 	msr	BASEPRI, r3
}
 80088d6:	bf00      	nop
 80088d8:	3718      	adds	r7, #24
 80088da:	46bd      	mov	sp, r7
 80088dc:	bd80      	pop	{r7, pc}
 80088de:	bf00      	nop
 80088e0:	20007070 	.word	0x20007070
 80088e4:	2000706c 	.word	0x2000706c

080088e8 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 80088e8:	b580      	push	{r7, lr}
 80088ea:	b08a      	sub	sp, #40	; 0x28
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80088f0:	f3ef 8311 	mrs	r3, BASEPRI
 80088f4:	f04f 0120 	mov.w	r1, #32
 80088f8:	f381 8811 	msr	BASEPRI, r1
 80088fc:	617b      	str	r3, [r7, #20]
 80088fe:	4827      	ldr	r0, [pc, #156]	; (800899c <SEGGER_SYSVIEW_Warn+0xb4>)
 8008900:	f7fe feb9 	bl	8007676 <_PreparePacket>
 8008904:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8008906:	2280      	movs	r2, #128	; 0x80
 8008908:	6879      	ldr	r1, [r7, #4]
 800890a:	6938      	ldr	r0, [r7, #16]
 800890c:	f7fe fe66 	bl	80075dc <_EncodeStr>
 8008910:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	627b      	str	r3, [r7, #36]	; 0x24
 8008916:	2301      	movs	r3, #1
 8008918:	623b      	str	r3, [r7, #32]
 800891a:	e00b      	b.n	8008934 <SEGGER_SYSVIEW_Warn+0x4c>
 800891c:	6a3b      	ldr	r3, [r7, #32]
 800891e:	b2da      	uxtb	r2, r3
 8008920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008922:	1c59      	adds	r1, r3, #1
 8008924:	6279      	str	r1, [r7, #36]	; 0x24
 8008926:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800892a:	b2d2      	uxtb	r2, r2
 800892c:	701a      	strb	r2, [r3, #0]
 800892e:	6a3b      	ldr	r3, [r7, #32]
 8008930:	09db      	lsrs	r3, r3, #7
 8008932:	623b      	str	r3, [r7, #32]
 8008934:	6a3b      	ldr	r3, [r7, #32]
 8008936:	2b7f      	cmp	r3, #127	; 0x7f
 8008938:	d8f0      	bhi.n	800891c <SEGGER_SYSVIEW_Warn+0x34>
 800893a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800893c:	1c5a      	adds	r2, r3, #1
 800893e:	627a      	str	r2, [r7, #36]	; 0x24
 8008940:	6a3a      	ldr	r2, [r7, #32]
 8008942:	b2d2      	uxtb	r2, r2
 8008944:	701a      	strb	r2, [r3, #0]
 8008946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008948:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	61fb      	str	r3, [r7, #28]
 800894e:	2300      	movs	r3, #0
 8008950:	61bb      	str	r3, [r7, #24]
 8008952:	e00b      	b.n	800896c <SEGGER_SYSVIEW_Warn+0x84>
 8008954:	69bb      	ldr	r3, [r7, #24]
 8008956:	b2da      	uxtb	r2, r3
 8008958:	69fb      	ldr	r3, [r7, #28]
 800895a:	1c59      	adds	r1, r3, #1
 800895c:	61f9      	str	r1, [r7, #28]
 800895e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008962:	b2d2      	uxtb	r2, r2
 8008964:	701a      	strb	r2, [r3, #0]
 8008966:	69bb      	ldr	r3, [r7, #24]
 8008968:	09db      	lsrs	r3, r3, #7
 800896a:	61bb      	str	r3, [r7, #24]
 800896c:	69bb      	ldr	r3, [r7, #24]
 800896e:	2b7f      	cmp	r3, #127	; 0x7f
 8008970:	d8f0      	bhi.n	8008954 <SEGGER_SYSVIEW_Warn+0x6c>
 8008972:	69fb      	ldr	r3, [r7, #28]
 8008974:	1c5a      	adds	r2, r3, #1
 8008976:	61fa      	str	r2, [r7, #28]
 8008978:	69ba      	ldr	r2, [r7, #24]
 800897a:	b2d2      	uxtb	r2, r2
 800897c:	701a      	strb	r2, [r3, #0]
 800897e:	69fb      	ldr	r3, [r7, #28]
 8008980:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8008982:	221a      	movs	r2, #26
 8008984:	68f9      	ldr	r1, [r7, #12]
 8008986:	6938      	ldr	r0, [r7, #16]
 8008988:	f7fe ff54 	bl	8007834 <_SendPacket>
  RECORD_END();
 800898c:	697b      	ldr	r3, [r7, #20]
 800898e:	f383 8811 	msr	BASEPRI, r3
}
 8008992:	bf00      	nop
 8008994:	3728      	adds	r7, #40	; 0x28
 8008996:	46bd      	mov	sp, r7
 8008998:	bd80      	pop	{r7, pc}
 800899a:	bf00      	nop
 800899c:	20007070 	.word	0x20007070

080089a0 <siprintf>:
 80089a0:	b40e      	push	{r1, r2, r3}
 80089a2:	b500      	push	{lr}
 80089a4:	b09c      	sub	sp, #112	; 0x70
 80089a6:	ab1d      	add	r3, sp, #116	; 0x74
 80089a8:	9002      	str	r0, [sp, #8]
 80089aa:	9006      	str	r0, [sp, #24]
 80089ac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80089b0:	4809      	ldr	r0, [pc, #36]	; (80089d8 <siprintf+0x38>)
 80089b2:	9107      	str	r1, [sp, #28]
 80089b4:	9104      	str	r1, [sp, #16]
 80089b6:	4909      	ldr	r1, [pc, #36]	; (80089dc <siprintf+0x3c>)
 80089b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80089bc:	9105      	str	r1, [sp, #20]
 80089be:	6800      	ldr	r0, [r0, #0]
 80089c0:	9301      	str	r3, [sp, #4]
 80089c2:	a902      	add	r1, sp, #8
 80089c4:	f000 f9b0 	bl	8008d28 <_svfiprintf_r>
 80089c8:	9b02      	ldr	r3, [sp, #8]
 80089ca:	2200      	movs	r2, #0
 80089cc:	701a      	strb	r2, [r3, #0]
 80089ce:	b01c      	add	sp, #112	; 0x70
 80089d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80089d4:	b003      	add	sp, #12
 80089d6:	4770      	bx	lr
 80089d8:	2000005c 	.word	0x2000005c
 80089dc:	ffff0208 	.word	0xffff0208

080089e0 <memcmp>:
 80089e0:	b510      	push	{r4, lr}
 80089e2:	3901      	subs	r1, #1
 80089e4:	4402      	add	r2, r0
 80089e6:	4290      	cmp	r0, r2
 80089e8:	d101      	bne.n	80089ee <memcmp+0xe>
 80089ea:	2000      	movs	r0, #0
 80089ec:	e005      	b.n	80089fa <memcmp+0x1a>
 80089ee:	7803      	ldrb	r3, [r0, #0]
 80089f0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80089f4:	42a3      	cmp	r3, r4
 80089f6:	d001      	beq.n	80089fc <memcmp+0x1c>
 80089f8:	1b18      	subs	r0, r3, r4
 80089fa:	bd10      	pop	{r4, pc}
 80089fc:	3001      	adds	r0, #1
 80089fe:	e7f2      	b.n	80089e6 <memcmp+0x6>

08008a00 <memset>:
 8008a00:	4402      	add	r2, r0
 8008a02:	4603      	mov	r3, r0
 8008a04:	4293      	cmp	r3, r2
 8008a06:	d100      	bne.n	8008a0a <memset+0xa>
 8008a08:	4770      	bx	lr
 8008a0a:	f803 1b01 	strb.w	r1, [r3], #1
 8008a0e:	e7f9      	b.n	8008a04 <memset+0x4>

08008a10 <__errno>:
 8008a10:	4b01      	ldr	r3, [pc, #4]	; (8008a18 <__errno+0x8>)
 8008a12:	6818      	ldr	r0, [r3, #0]
 8008a14:	4770      	bx	lr
 8008a16:	bf00      	nop
 8008a18:	2000005c 	.word	0x2000005c

08008a1c <__libc_init_array>:
 8008a1c:	b570      	push	{r4, r5, r6, lr}
 8008a1e:	4d0d      	ldr	r5, [pc, #52]	; (8008a54 <__libc_init_array+0x38>)
 8008a20:	4c0d      	ldr	r4, [pc, #52]	; (8008a58 <__libc_init_array+0x3c>)
 8008a22:	1b64      	subs	r4, r4, r5
 8008a24:	10a4      	asrs	r4, r4, #2
 8008a26:	2600      	movs	r6, #0
 8008a28:	42a6      	cmp	r6, r4
 8008a2a:	d109      	bne.n	8008a40 <__libc_init_array+0x24>
 8008a2c:	4d0b      	ldr	r5, [pc, #44]	; (8008a5c <__libc_init_array+0x40>)
 8008a2e:	4c0c      	ldr	r4, [pc, #48]	; (8008a60 <__libc_init_array+0x44>)
 8008a30:	f000 fc6a 	bl	8009308 <_init>
 8008a34:	1b64      	subs	r4, r4, r5
 8008a36:	10a4      	asrs	r4, r4, #2
 8008a38:	2600      	movs	r6, #0
 8008a3a:	42a6      	cmp	r6, r4
 8008a3c:	d105      	bne.n	8008a4a <__libc_init_array+0x2e>
 8008a3e:	bd70      	pop	{r4, r5, r6, pc}
 8008a40:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a44:	4798      	blx	r3
 8008a46:	3601      	adds	r6, #1
 8008a48:	e7ee      	b.n	8008a28 <__libc_init_array+0xc>
 8008a4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a4e:	4798      	blx	r3
 8008a50:	3601      	adds	r6, #1
 8008a52:	e7f2      	b.n	8008a3a <__libc_init_array+0x1e>
 8008a54:	080095a8 	.word	0x080095a8
 8008a58:	080095a8 	.word	0x080095a8
 8008a5c:	080095a8 	.word	0x080095a8
 8008a60:	080095ac 	.word	0x080095ac

08008a64 <__retarget_lock_acquire_recursive>:
 8008a64:	4770      	bx	lr

08008a66 <__retarget_lock_release_recursive>:
 8008a66:	4770      	bx	lr

08008a68 <memcpy>:
 8008a68:	440a      	add	r2, r1
 8008a6a:	4291      	cmp	r1, r2
 8008a6c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008a70:	d100      	bne.n	8008a74 <memcpy+0xc>
 8008a72:	4770      	bx	lr
 8008a74:	b510      	push	{r4, lr}
 8008a76:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008a7a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008a7e:	4291      	cmp	r1, r2
 8008a80:	d1f9      	bne.n	8008a76 <memcpy+0xe>
 8008a82:	bd10      	pop	{r4, pc}

08008a84 <_free_r>:
 8008a84:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008a86:	2900      	cmp	r1, #0
 8008a88:	d044      	beq.n	8008b14 <_free_r+0x90>
 8008a8a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a8e:	9001      	str	r0, [sp, #4]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	f1a1 0404 	sub.w	r4, r1, #4
 8008a96:	bfb8      	it	lt
 8008a98:	18e4      	addlt	r4, r4, r3
 8008a9a:	f000 f8df 	bl	8008c5c <__malloc_lock>
 8008a9e:	4a1e      	ldr	r2, [pc, #120]	; (8008b18 <_free_r+0x94>)
 8008aa0:	9801      	ldr	r0, [sp, #4]
 8008aa2:	6813      	ldr	r3, [r2, #0]
 8008aa4:	b933      	cbnz	r3, 8008ab4 <_free_r+0x30>
 8008aa6:	6063      	str	r3, [r4, #4]
 8008aa8:	6014      	str	r4, [r2, #0]
 8008aaa:	b003      	add	sp, #12
 8008aac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008ab0:	f000 b8da 	b.w	8008c68 <__malloc_unlock>
 8008ab4:	42a3      	cmp	r3, r4
 8008ab6:	d908      	bls.n	8008aca <_free_r+0x46>
 8008ab8:	6825      	ldr	r5, [r4, #0]
 8008aba:	1961      	adds	r1, r4, r5
 8008abc:	428b      	cmp	r3, r1
 8008abe:	bf01      	itttt	eq
 8008ac0:	6819      	ldreq	r1, [r3, #0]
 8008ac2:	685b      	ldreq	r3, [r3, #4]
 8008ac4:	1949      	addeq	r1, r1, r5
 8008ac6:	6021      	streq	r1, [r4, #0]
 8008ac8:	e7ed      	b.n	8008aa6 <_free_r+0x22>
 8008aca:	461a      	mov	r2, r3
 8008acc:	685b      	ldr	r3, [r3, #4]
 8008ace:	b10b      	cbz	r3, 8008ad4 <_free_r+0x50>
 8008ad0:	42a3      	cmp	r3, r4
 8008ad2:	d9fa      	bls.n	8008aca <_free_r+0x46>
 8008ad4:	6811      	ldr	r1, [r2, #0]
 8008ad6:	1855      	adds	r5, r2, r1
 8008ad8:	42a5      	cmp	r5, r4
 8008ada:	d10b      	bne.n	8008af4 <_free_r+0x70>
 8008adc:	6824      	ldr	r4, [r4, #0]
 8008ade:	4421      	add	r1, r4
 8008ae0:	1854      	adds	r4, r2, r1
 8008ae2:	42a3      	cmp	r3, r4
 8008ae4:	6011      	str	r1, [r2, #0]
 8008ae6:	d1e0      	bne.n	8008aaa <_free_r+0x26>
 8008ae8:	681c      	ldr	r4, [r3, #0]
 8008aea:	685b      	ldr	r3, [r3, #4]
 8008aec:	6053      	str	r3, [r2, #4]
 8008aee:	440c      	add	r4, r1
 8008af0:	6014      	str	r4, [r2, #0]
 8008af2:	e7da      	b.n	8008aaa <_free_r+0x26>
 8008af4:	d902      	bls.n	8008afc <_free_r+0x78>
 8008af6:	230c      	movs	r3, #12
 8008af8:	6003      	str	r3, [r0, #0]
 8008afa:	e7d6      	b.n	8008aaa <_free_r+0x26>
 8008afc:	6825      	ldr	r5, [r4, #0]
 8008afe:	1961      	adds	r1, r4, r5
 8008b00:	428b      	cmp	r3, r1
 8008b02:	bf04      	itt	eq
 8008b04:	6819      	ldreq	r1, [r3, #0]
 8008b06:	685b      	ldreq	r3, [r3, #4]
 8008b08:	6063      	str	r3, [r4, #4]
 8008b0a:	bf04      	itt	eq
 8008b0c:	1949      	addeq	r1, r1, r5
 8008b0e:	6021      	streq	r1, [r4, #0]
 8008b10:	6054      	str	r4, [r2, #4]
 8008b12:	e7ca      	b.n	8008aaa <_free_r+0x26>
 8008b14:	b003      	add	sp, #12
 8008b16:	bd30      	pop	{r4, r5, pc}
 8008b18:	20007294 	.word	0x20007294

08008b1c <sbrk_aligned>:
 8008b1c:	b570      	push	{r4, r5, r6, lr}
 8008b1e:	4e0e      	ldr	r6, [pc, #56]	; (8008b58 <sbrk_aligned+0x3c>)
 8008b20:	460c      	mov	r4, r1
 8008b22:	6831      	ldr	r1, [r6, #0]
 8008b24:	4605      	mov	r5, r0
 8008b26:	b911      	cbnz	r1, 8008b2e <sbrk_aligned+0x12>
 8008b28:	f000 fba6 	bl	8009278 <_sbrk_r>
 8008b2c:	6030      	str	r0, [r6, #0]
 8008b2e:	4621      	mov	r1, r4
 8008b30:	4628      	mov	r0, r5
 8008b32:	f000 fba1 	bl	8009278 <_sbrk_r>
 8008b36:	1c43      	adds	r3, r0, #1
 8008b38:	d00a      	beq.n	8008b50 <sbrk_aligned+0x34>
 8008b3a:	1cc4      	adds	r4, r0, #3
 8008b3c:	f024 0403 	bic.w	r4, r4, #3
 8008b40:	42a0      	cmp	r0, r4
 8008b42:	d007      	beq.n	8008b54 <sbrk_aligned+0x38>
 8008b44:	1a21      	subs	r1, r4, r0
 8008b46:	4628      	mov	r0, r5
 8008b48:	f000 fb96 	bl	8009278 <_sbrk_r>
 8008b4c:	3001      	adds	r0, #1
 8008b4e:	d101      	bne.n	8008b54 <sbrk_aligned+0x38>
 8008b50:	f04f 34ff 	mov.w	r4, #4294967295
 8008b54:	4620      	mov	r0, r4
 8008b56:	bd70      	pop	{r4, r5, r6, pc}
 8008b58:	20007298 	.word	0x20007298

08008b5c <_malloc_r>:
 8008b5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b60:	1ccd      	adds	r5, r1, #3
 8008b62:	f025 0503 	bic.w	r5, r5, #3
 8008b66:	3508      	adds	r5, #8
 8008b68:	2d0c      	cmp	r5, #12
 8008b6a:	bf38      	it	cc
 8008b6c:	250c      	movcc	r5, #12
 8008b6e:	2d00      	cmp	r5, #0
 8008b70:	4607      	mov	r7, r0
 8008b72:	db01      	blt.n	8008b78 <_malloc_r+0x1c>
 8008b74:	42a9      	cmp	r1, r5
 8008b76:	d905      	bls.n	8008b84 <_malloc_r+0x28>
 8008b78:	230c      	movs	r3, #12
 8008b7a:	603b      	str	r3, [r7, #0]
 8008b7c:	2600      	movs	r6, #0
 8008b7e:	4630      	mov	r0, r6
 8008b80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b84:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008c58 <_malloc_r+0xfc>
 8008b88:	f000 f868 	bl	8008c5c <__malloc_lock>
 8008b8c:	f8d8 3000 	ldr.w	r3, [r8]
 8008b90:	461c      	mov	r4, r3
 8008b92:	bb5c      	cbnz	r4, 8008bec <_malloc_r+0x90>
 8008b94:	4629      	mov	r1, r5
 8008b96:	4638      	mov	r0, r7
 8008b98:	f7ff ffc0 	bl	8008b1c <sbrk_aligned>
 8008b9c:	1c43      	adds	r3, r0, #1
 8008b9e:	4604      	mov	r4, r0
 8008ba0:	d155      	bne.n	8008c4e <_malloc_r+0xf2>
 8008ba2:	f8d8 4000 	ldr.w	r4, [r8]
 8008ba6:	4626      	mov	r6, r4
 8008ba8:	2e00      	cmp	r6, #0
 8008baa:	d145      	bne.n	8008c38 <_malloc_r+0xdc>
 8008bac:	2c00      	cmp	r4, #0
 8008bae:	d048      	beq.n	8008c42 <_malloc_r+0xe6>
 8008bb0:	6823      	ldr	r3, [r4, #0]
 8008bb2:	4631      	mov	r1, r6
 8008bb4:	4638      	mov	r0, r7
 8008bb6:	eb04 0903 	add.w	r9, r4, r3
 8008bba:	f000 fb5d 	bl	8009278 <_sbrk_r>
 8008bbe:	4581      	cmp	r9, r0
 8008bc0:	d13f      	bne.n	8008c42 <_malloc_r+0xe6>
 8008bc2:	6821      	ldr	r1, [r4, #0]
 8008bc4:	1a6d      	subs	r5, r5, r1
 8008bc6:	4629      	mov	r1, r5
 8008bc8:	4638      	mov	r0, r7
 8008bca:	f7ff ffa7 	bl	8008b1c <sbrk_aligned>
 8008bce:	3001      	adds	r0, #1
 8008bd0:	d037      	beq.n	8008c42 <_malloc_r+0xe6>
 8008bd2:	6823      	ldr	r3, [r4, #0]
 8008bd4:	442b      	add	r3, r5
 8008bd6:	6023      	str	r3, [r4, #0]
 8008bd8:	f8d8 3000 	ldr.w	r3, [r8]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d038      	beq.n	8008c52 <_malloc_r+0xf6>
 8008be0:	685a      	ldr	r2, [r3, #4]
 8008be2:	42a2      	cmp	r2, r4
 8008be4:	d12b      	bne.n	8008c3e <_malloc_r+0xe2>
 8008be6:	2200      	movs	r2, #0
 8008be8:	605a      	str	r2, [r3, #4]
 8008bea:	e00f      	b.n	8008c0c <_malloc_r+0xb0>
 8008bec:	6822      	ldr	r2, [r4, #0]
 8008bee:	1b52      	subs	r2, r2, r5
 8008bf0:	d41f      	bmi.n	8008c32 <_malloc_r+0xd6>
 8008bf2:	2a0b      	cmp	r2, #11
 8008bf4:	d917      	bls.n	8008c26 <_malloc_r+0xca>
 8008bf6:	1961      	adds	r1, r4, r5
 8008bf8:	42a3      	cmp	r3, r4
 8008bfa:	6025      	str	r5, [r4, #0]
 8008bfc:	bf18      	it	ne
 8008bfe:	6059      	strne	r1, [r3, #4]
 8008c00:	6863      	ldr	r3, [r4, #4]
 8008c02:	bf08      	it	eq
 8008c04:	f8c8 1000 	streq.w	r1, [r8]
 8008c08:	5162      	str	r2, [r4, r5]
 8008c0a:	604b      	str	r3, [r1, #4]
 8008c0c:	4638      	mov	r0, r7
 8008c0e:	f104 060b 	add.w	r6, r4, #11
 8008c12:	f000 f829 	bl	8008c68 <__malloc_unlock>
 8008c16:	f026 0607 	bic.w	r6, r6, #7
 8008c1a:	1d23      	adds	r3, r4, #4
 8008c1c:	1af2      	subs	r2, r6, r3
 8008c1e:	d0ae      	beq.n	8008b7e <_malloc_r+0x22>
 8008c20:	1b9b      	subs	r3, r3, r6
 8008c22:	50a3      	str	r3, [r4, r2]
 8008c24:	e7ab      	b.n	8008b7e <_malloc_r+0x22>
 8008c26:	42a3      	cmp	r3, r4
 8008c28:	6862      	ldr	r2, [r4, #4]
 8008c2a:	d1dd      	bne.n	8008be8 <_malloc_r+0x8c>
 8008c2c:	f8c8 2000 	str.w	r2, [r8]
 8008c30:	e7ec      	b.n	8008c0c <_malloc_r+0xb0>
 8008c32:	4623      	mov	r3, r4
 8008c34:	6864      	ldr	r4, [r4, #4]
 8008c36:	e7ac      	b.n	8008b92 <_malloc_r+0x36>
 8008c38:	4634      	mov	r4, r6
 8008c3a:	6876      	ldr	r6, [r6, #4]
 8008c3c:	e7b4      	b.n	8008ba8 <_malloc_r+0x4c>
 8008c3e:	4613      	mov	r3, r2
 8008c40:	e7cc      	b.n	8008bdc <_malloc_r+0x80>
 8008c42:	230c      	movs	r3, #12
 8008c44:	603b      	str	r3, [r7, #0]
 8008c46:	4638      	mov	r0, r7
 8008c48:	f000 f80e 	bl	8008c68 <__malloc_unlock>
 8008c4c:	e797      	b.n	8008b7e <_malloc_r+0x22>
 8008c4e:	6025      	str	r5, [r4, #0]
 8008c50:	e7dc      	b.n	8008c0c <_malloc_r+0xb0>
 8008c52:	605b      	str	r3, [r3, #4]
 8008c54:	deff      	udf	#255	; 0xff
 8008c56:	bf00      	nop
 8008c58:	20007294 	.word	0x20007294

08008c5c <__malloc_lock>:
 8008c5c:	4801      	ldr	r0, [pc, #4]	; (8008c64 <__malloc_lock+0x8>)
 8008c5e:	f7ff bf01 	b.w	8008a64 <__retarget_lock_acquire_recursive>
 8008c62:	bf00      	nop
 8008c64:	20007290 	.word	0x20007290

08008c68 <__malloc_unlock>:
 8008c68:	4801      	ldr	r0, [pc, #4]	; (8008c70 <__malloc_unlock+0x8>)
 8008c6a:	f7ff befc 	b.w	8008a66 <__retarget_lock_release_recursive>
 8008c6e:	bf00      	nop
 8008c70:	20007290 	.word	0x20007290

08008c74 <__ssputs_r>:
 8008c74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c78:	688e      	ldr	r6, [r1, #8]
 8008c7a:	461f      	mov	r7, r3
 8008c7c:	42be      	cmp	r6, r7
 8008c7e:	680b      	ldr	r3, [r1, #0]
 8008c80:	4682      	mov	sl, r0
 8008c82:	460c      	mov	r4, r1
 8008c84:	4690      	mov	r8, r2
 8008c86:	d82c      	bhi.n	8008ce2 <__ssputs_r+0x6e>
 8008c88:	898a      	ldrh	r2, [r1, #12]
 8008c8a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008c8e:	d026      	beq.n	8008cde <__ssputs_r+0x6a>
 8008c90:	6965      	ldr	r5, [r4, #20]
 8008c92:	6909      	ldr	r1, [r1, #16]
 8008c94:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008c98:	eba3 0901 	sub.w	r9, r3, r1
 8008c9c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008ca0:	1c7b      	adds	r3, r7, #1
 8008ca2:	444b      	add	r3, r9
 8008ca4:	106d      	asrs	r5, r5, #1
 8008ca6:	429d      	cmp	r5, r3
 8008ca8:	bf38      	it	cc
 8008caa:	461d      	movcc	r5, r3
 8008cac:	0553      	lsls	r3, r2, #21
 8008cae:	d527      	bpl.n	8008d00 <__ssputs_r+0x8c>
 8008cb0:	4629      	mov	r1, r5
 8008cb2:	f7ff ff53 	bl	8008b5c <_malloc_r>
 8008cb6:	4606      	mov	r6, r0
 8008cb8:	b360      	cbz	r0, 8008d14 <__ssputs_r+0xa0>
 8008cba:	6921      	ldr	r1, [r4, #16]
 8008cbc:	464a      	mov	r2, r9
 8008cbe:	f7ff fed3 	bl	8008a68 <memcpy>
 8008cc2:	89a3      	ldrh	r3, [r4, #12]
 8008cc4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008cc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ccc:	81a3      	strh	r3, [r4, #12]
 8008cce:	6126      	str	r6, [r4, #16]
 8008cd0:	6165      	str	r5, [r4, #20]
 8008cd2:	444e      	add	r6, r9
 8008cd4:	eba5 0509 	sub.w	r5, r5, r9
 8008cd8:	6026      	str	r6, [r4, #0]
 8008cda:	60a5      	str	r5, [r4, #8]
 8008cdc:	463e      	mov	r6, r7
 8008cde:	42be      	cmp	r6, r7
 8008ce0:	d900      	bls.n	8008ce4 <__ssputs_r+0x70>
 8008ce2:	463e      	mov	r6, r7
 8008ce4:	6820      	ldr	r0, [r4, #0]
 8008ce6:	4632      	mov	r2, r6
 8008ce8:	4641      	mov	r1, r8
 8008cea:	f000 faab 	bl	8009244 <memmove>
 8008cee:	68a3      	ldr	r3, [r4, #8]
 8008cf0:	1b9b      	subs	r3, r3, r6
 8008cf2:	60a3      	str	r3, [r4, #8]
 8008cf4:	6823      	ldr	r3, [r4, #0]
 8008cf6:	4433      	add	r3, r6
 8008cf8:	6023      	str	r3, [r4, #0]
 8008cfa:	2000      	movs	r0, #0
 8008cfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d00:	462a      	mov	r2, r5
 8008d02:	f000 fac9 	bl	8009298 <_realloc_r>
 8008d06:	4606      	mov	r6, r0
 8008d08:	2800      	cmp	r0, #0
 8008d0a:	d1e0      	bne.n	8008cce <__ssputs_r+0x5a>
 8008d0c:	6921      	ldr	r1, [r4, #16]
 8008d0e:	4650      	mov	r0, sl
 8008d10:	f7ff feb8 	bl	8008a84 <_free_r>
 8008d14:	230c      	movs	r3, #12
 8008d16:	f8ca 3000 	str.w	r3, [sl]
 8008d1a:	89a3      	ldrh	r3, [r4, #12]
 8008d1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d20:	81a3      	strh	r3, [r4, #12]
 8008d22:	f04f 30ff 	mov.w	r0, #4294967295
 8008d26:	e7e9      	b.n	8008cfc <__ssputs_r+0x88>

08008d28 <_svfiprintf_r>:
 8008d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d2c:	4698      	mov	r8, r3
 8008d2e:	898b      	ldrh	r3, [r1, #12]
 8008d30:	061b      	lsls	r3, r3, #24
 8008d32:	b09d      	sub	sp, #116	; 0x74
 8008d34:	4607      	mov	r7, r0
 8008d36:	460d      	mov	r5, r1
 8008d38:	4614      	mov	r4, r2
 8008d3a:	d50e      	bpl.n	8008d5a <_svfiprintf_r+0x32>
 8008d3c:	690b      	ldr	r3, [r1, #16]
 8008d3e:	b963      	cbnz	r3, 8008d5a <_svfiprintf_r+0x32>
 8008d40:	2140      	movs	r1, #64	; 0x40
 8008d42:	f7ff ff0b 	bl	8008b5c <_malloc_r>
 8008d46:	6028      	str	r0, [r5, #0]
 8008d48:	6128      	str	r0, [r5, #16]
 8008d4a:	b920      	cbnz	r0, 8008d56 <_svfiprintf_r+0x2e>
 8008d4c:	230c      	movs	r3, #12
 8008d4e:	603b      	str	r3, [r7, #0]
 8008d50:	f04f 30ff 	mov.w	r0, #4294967295
 8008d54:	e0d0      	b.n	8008ef8 <_svfiprintf_r+0x1d0>
 8008d56:	2340      	movs	r3, #64	; 0x40
 8008d58:	616b      	str	r3, [r5, #20]
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	9309      	str	r3, [sp, #36]	; 0x24
 8008d5e:	2320      	movs	r3, #32
 8008d60:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008d64:	f8cd 800c 	str.w	r8, [sp, #12]
 8008d68:	2330      	movs	r3, #48	; 0x30
 8008d6a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008f10 <_svfiprintf_r+0x1e8>
 8008d6e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008d72:	f04f 0901 	mov.w	r9, #1
 8008d76:	4623      	mov	r3, r4
 8008d78:	469a      	mov	sl, r3
 8008d7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d7e:	b10a      	cbz	r2, 8008d84 <_svfiprintf_r+0x5c>
 8008d80:	2a25      	cmp	r2, #37	; 0x25
 8008d82:	d1f9      	bne.n	8008d78 <_svfiprintf_r+0x50>
 8008d84:	ebba 0b04 	subs.w	fp, sl, r4
 8008d88:	d00b      	beq.n	8008da2 <_svfiprintf_r+0x7a>
 8008d8a:	465b      	mov	r3, fp
 8008d8c:	4622      	mov	r2, r4
 8008d8e:	4629      	mov	r1, r5
 8008d90:	4638      	mov	r0, r7
 8008d92:	f7ff ff6f 	bl	8008c74 <__ssputs_r>
 8008d96:	3001      	adds	r0, #1
 8008d98:	f000 80a9 	beq.w	8008eee <_svfiprintf_r+0x1c6>
 8008d9c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008d9e:	445a      	add	r2, fp
 8008da0:	9209      	str	r2, [sp, #36]	; 0x24
 8008da2:	f89a 3000 	ldrb.w	r3, [sl]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	f000 80a1 	beq.w	8008eee <_svfiprintf_r+0x1c6>
 8008dac:	2300      	movs	r3, #0
 8008dae:	f04f 32ff 	mov.w	r2, #4294967295
 8008db2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008db6:	f10a 0a01 	add.w	sl, sl, #1
 8008dba:	9304      	str	r3, [sp, #16]
 8008dbc:	9307      	str	r3, [sp, #28]
 8008dbe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008dc2:	931a      	str	r3, [sp, #104]	; 0x68
 8008dc4:	4654      	mov	r4, sl
 8008dc6:	2205      	movs	r2, #5
 8008dc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008dcc:	4850      	ldr	r0, [pc, #320]	; (8008f10 <_svfiprintf_r+0x1e8>)
 8008dce:	f7f7 fa07 	bl	80001e0 <memchr>
 8008dd2:	9a04      	ldr	r2, [sp, #16]
 8008dd4:	b9d8      	cbnz	r0, 8008e0e <_svfiprintf_r+0xe6>
 8008dd6:	06d0      	lsls	r0, r2, #27
 8008dd8:	bf44      	itt	mi
 8008dda:	2320      	movmi	r3, #32
 8008ddc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008de0:	0711      	lsls	r1, r2, #28
 8008de2:	bf44      	itt	mi
 8008de4:	232b      	movmi	r3, #43	; 0x2b
 8008de6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008dea:	f89a 3000 	ldrb.w	r3, [sl]
 8008dee:	2b2a      	cmp	r3, #42	; 0x2a
 8008df0:	d015      	beq.n	8008e1e <_svfiprintf_r+0xf6>
 8008df2:	9a07      	ldr	r2, [sp, #28]
 8008df4:	4654      	mov	r4, sl
 8008df6:	2000      	movs	r0, #0
 8008df8:	f04f 0c0a 	mov.w	ip, #10
 8008dfc:	4621      	mov	r1, r4
 8008dfe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008e02:	3b30      	subs	r3, #48	; 0x30
 8008e04:	2b09      	cmp	r3, #9
 8008e06:	d94d      	bls.n	8008ea4 <_svfiprintf_r+0x17c>
 8008e08:	b1b0      	cbz	r0, 8008e38 <_svfiprintf_r+0x110>
 8008e0a:	9207      	str	r2, [sp, #28]
 8008e0c:	e014      	b.n	8008e38 <_svfiprintf_r+0x110>
 8008e0e:	eba0 0308 	sub.w	r3, r0, r8
 8008e12:	fa09 f303 	lsl.w	r3, r9, r3
 8008e16:	4313      	orrs	r3, r2
 8008e18:	9304      	str	r3, [sp, #16]
 8008e1a:	46a2      	mov	sl, r4
 8008e1c:	e7d2      	b.n	8008dc4 <_svfiprintf_r+0x9c>
 8008e1e:	9b03      	ldr	r3, [sp, #12]
 8008e20:	1d19      	adds	r1, r3, #4
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	9103      	str	r1, [sp, #12]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	bfbb      	ittet	lt
 8008e2a:	425b      	neglt	r3, r3
 8008e2c:	f042 0202 	orrlt.w	r2, r2, #2
 8008e30:	9307      	strge	r3, [sp, #28]
 8008e32:	9307      	strlt	r3, [sp, #28]
 8008e34:	bfb8      	it	lt
 8008e36:	9204      	strlt	r2, [sp, #16]
 8008e38:	7823      	ldrb	r3, [r4, #0]
 8008e3a:	2b2e      	cmp	r3, #46	; 0x2e
 8008e3c:	d10c      	bne.n	8008e58 <_svfiprintf_r+0x130>
 8008e3e:	7863      	ldrb	r3, [r4, #1]
 8008e40:	2b2a      	cmp	r3, #42	; 0x2a
 8008e42:	d134      	bne.n	8008eae <_svfiprintf_r+0x186>
 8008e44:	9b03      	ldr	r3, [sp, #12]
 8008e46:	1d1a      	adds	r2, r3, #4
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	9203      	str	r2, [sp, #12]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	bfb8      	it	lt
 8008e50:	f04f 33ff 	movlt.w	r3, #4294967295
 8008e54:	3402      	adds	r4, #2
 8008e56:	9305      	str	r3, [sp, #20]
 8008e58:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8008f20 <_svfiprintf_r+0x1f8>
 8008e5c:	7821      	ldrb	r1, [r4, #0]
 8008e5e:	2203      	movs	r2, #3
 8008e60:	4650      	mov	r0, sl
 8008e62:	f7f7 f9bd 	bl	80001e0 <memchr>
 8008e66:	b138      	cbz	r0, 8008e78 <_svfiprintf_r+0x150>
 8008e68:	9b04      	ldr	r3, [sp, #16]
 8008e6a:	eba0 000a 	sub.w	r0, r0, sl
 8008e6e:	2240      	movs	r2, #64	; 0x40
 8008e70:	4082      	lsls	r2, r0
 8008e72:	4313      	orrs	r3, r2
 8008e74:	3401      	adds	r4, #1
 8008e76:	9304      	str	r3, [sp, #16]
 8008e78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e7c:	4825      	ldr	r0, [pc, #148]	; (8008f14 <_svfiprintf_r+0x1ec>)
 8008e7e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008e82:	2206      	movs	r2, #6
 8008e84:	f7f7 f9ac 	bl	80001e0 <memchr>
 8008e88:	2800      	cmp	r0, #0
 8008e8a:	d038      	beq.n	8008efe <_svfiprintf_r+0x1d6>
 8008e8c:	4b22      	ldr	r3, [pc, #136]	; (8008f18 <_svfiprintf_r+0x1f0>)
 8008e8e:	bb1b      	cbnz	r3, 8008ed8 <_svfiprintf_r+0x1b0>
 8008e90:	9b03      	ldr	r3, [sp, #12]
 8008e92:	3307      	adds	r3, #7
 8008e94:	f023 0307 	bic.w	r3, r3, #7
 8008e98:	3308      	adds	r3, #8
 8008e9a:	9303      	str	r3, [sp, #12]
 8008e9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e9e:	4433      	add	r3, r6
 8008ea0:	9309      	str	r3, [sp, #36]	; 0x24
 8008ea2:	e768      	b.n	8008d76 <_svfiprintf_r+0x4e>
 8008ea4:	fb0c 3202 	mla	r2, ip, r2, r3
 8008ea8:	460c      	mov	r4, r1
 8008eaa:	2001      	movs	r0, #1
 8008eac:	e7a6      	b.n	8008dfc <_svfiprintf_r+0xd4>
 8008eae:	2300      	movs	r3, #0
 8008eb0:	3401      	adds	r4, #1
 8008eb2:	9305      	str	r3, [sp, #20]
 8008eb4:	4619      	mov	r1, r3
 8008eb6:	f04f 0c0a 	mov.w	ip, #10
 8008eba:	4620      	mov	r0, r4
 8008ebc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008ec0:	3a30      	subs	r2, #48	; 0x30
 8008ec2:	2a09      	cmp	r2, #9
 8008ec4:	d903      	bls.n	8008ece <_svfiprintf_r+0x1a6>
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d0c6      	beq.n	8008e58 <_svfiprintf_r+0x130>
 8008eca:	9105      	str	r1, [sp, #20]
 8008ecc:	e7c4      	b.n	8008e58 <_svfiprintf_r+0x130>
 8008ece:	fb0c 2101 	mla	r1, ip, r1, r2
 8008ed2:	4604      	mov	r4, r0
 8008ed4:	2301      	movs	r3, #1
 8008ed6:	e7f0      	b.n	8008eba <_svfiprintf_r+0x192>
 8008ed8:	ab03      	add	r3, sp, #12
 8008eda:	9300      	str	r3, [sp, #0]
 8008edc:	462a      	mov	r2, r5
 8008ede:	4b0f      	ldr	r3, [pc, #60]	; (8008f1c <_svfiprintf_r+0x1f4>)
 8008ee0:	a904      	add	r1, sp, #16
 8008ee2:	4638      	mov	r0, r7
 8008ee4:	f3af 8000 	nop.w
 8008ee8:	1c42      	adds	r2, r0, #1
 8008eea:	4606      	mov	r6, r0
 8008eec:	d1d6      	bne.n	8008e9c <_svfiprintf_r+0x174>
 8008eee:	89ab      	ldrh	r3, [r5, #12]
 8008ef0:	065b      	lsls	r3, r3, #25
 8008ef2:	f53f af2d 	bmi.w	8008d50 <_svfiprintf_r+0x28>
 8008ef6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008ef8:	b01d      	add	sp, #116	; 0x74
 8008efa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008efe:	ab03      	add	r3, sp, #12
 8008f00:	9300      	str	r3, [sp, #0]
 8008f02:	462a      	mov	r2, r5
 8008f04:	4b05      	ldr	r3, [pc, #20]	; (8008f1c <_svfiprintf_r+0x1f4>)
 8008f06:	a904      	add	r1, sp, #16
 8008f08:	4638      	mov	r0, r7
 8008f0a:	f000 f879 	bl	8009000 <_printf_i>
 8008f0e:	e7eb      	b.n	8008ee8 <_svfiprintf_r+0x1c0>
 8008f10:	0800956a 	.word	0x0800956a
 8008f14:	08009574 	.word	0x08009574
 8008f18:	00000000 	.word	0x00000000
 8008f1c:	08008c75 	.word	0x08008c75
 8008f20:	08009570 	.word	0x08009570

08008f24 <_printf_common>:
 8008f24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f28:	4616      	mov	r6, r2
 8008f2a:	4699      	mov	r9, r3
 8008f2c:	688a      	ldr	r2, [r1, #8]
 8008f2e:	690b      	ldr	r3, [r1, #16]
 8008f30:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008f34:	4293      	cmp	r3, r2
 8008f36:	bfb8      	it	lt
 8008f38:	4613      	movlt	r3, r2
 8008f3a:	6033      	str	r3, [r6, #0]
 8008f3c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008f40:	4607      	mov	r7, r0
 8008f42:	460c      	mov	r4, r1
 8008f44:	b10a      	cbz	r2, 8008f4a <_printf_common+0x26>
 8008f46:	3301      	adds	r3, #1
 8008f48:	6033      	str	r3, [r6, #0]
 8008f4a:	6823      	ldr	r3, [r4, #0]
 8008f4c:	0699      	lsls	r1, r3, #26
 8008f4e:	bf42      	ittt	mi
 8008f50:	6833      	ldrmi	r3, [r6, #0]
 8008f52:	3302      	addmi	r3, #2
 8008f54:	6033      	strmi	r3, [r6, #0]
 8008f56:	6825      	ldr	r5, [r4, #0]
 8008f58:	f015 0506 	ands.w	r5, r5, #6
 8008f5c:	d106      	bne.n	8008f6c <_printf_common+0x48>
 8008f5e:	f104 0a19 	add.w	sl, r4, #25
 8008f62:	68e3      	ldr	r3, [r4, #12]
 8008f64:	6832      	ldr	r2, [r6, #0]
 8008f66:	1a9b      	subs	r3, r3, r2
 8008f68:	42ab      	cmp	r3, r5
 8008f6a:	dc26      	bgt.n	8008fba <_printf_common+0x96>
 8008f6c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008f70:	1e13      	subs	r3, r2, #0
 8008f72:	6822      	ldr	r2, [r4, #0]
 8008f74:	bf18      	it	ne
 8008f76:	2301      	movne	r3, #1
 8008f78:	0692      	lsls	r2, r2, #26
 8008f7a:	d42b      	bmi.n	8008fd4 <_printf_common+0xb0>
 8008f7c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008f80:	4649      	mov	r1, r9
 8008f82:	4638      	mov	r0, r7
 8008f84:	47c0      	blx	r8
 8008f86:	3001      	adds	r0, #1
 8008f88:	d01e      	beq.n	8008fc8 <_printf_common+0xa4>
 8008f8a:	6823      	ldr	r3, [r4, #0]
 8008f8c:	6922      	ldr	r2, [r4, #16]
 8008f8e:	f003 0306 	and.w	r3, r3, #6
 8008f92:	2b04      	cmp	r3, #4
 8008f94:	bf02      	ittt	eq
 8008f96:	68e5      	ldreq	r5, [r4, #12]
 8008f98:	6833      	ldreq	r3, [r6, #0]
 8008f9a:	1aed      	subeq	r5, r5, r3
 8008f9c:	68a3      	ldr	r3, [r4, #8]
 8008f9e:	bf0c      	ite	eq
 8008fa0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008fa4:	2500      	movne	r5, #0
 8008fa6:	4293      	cmp	r3, r2
 8008fa8:	bfc4      	itt	gt
 8008faa:	1a9b      	subgt	r3, r3, r2
 8008fac:	18ed      	addgt	r5, r5, r3
 8008fae:	2600      	movs	r6, #0
 8008fb0:	341a      	adds	r4, #26
 8008fb2:	42b5      	cmp	r5, r6
 8008fb4:	d11a      	bne.n	8008fec <_printf_common+0xc8>
 8008fb6:	2000      	movs	r0, #0
 8008fb8:	e008      	b.n	8008fcc <_printf_common+0xa8>
 8008fba:	2301      	movs	r3, #1
 8008fbc:	4652      	mov	r2, sl
 8008fbe:	4649      	mov	r1, r9
 8008fc0:	4638      	mov	r0, r7
 8008fc2:	47c0      	blx	r8
 8008fc4:	3001      	adds	r0, #1
 8008fc6:	d103      	bne.n	8008fd0 <_printf_common+0xac>
 8008fc8:	f04f 30ff 	mov.w	r0, #4294967295
 8008fcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fd0:	3501      	adds	r5, #1
 8008fd2:	e7c6      	b.n	8008f62 <_printf_common+0x3e>
 8008fd4:	18e1      	adds	r1, r4, r3
 8008fd6:	1c5a      	adds	r2, r3, #1
 8008fd8:	2030      	movs	r0, #48	; 0x30
 8008fda:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008fde:	4422      	add	r2, r4
 8008fe0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008fe4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008fe8:	3302      	adds	r3, #2
 8008fea:	e7c7      	b.n	8008f7c <_printf_common+0x58>
 8008fec:	2301      	movs	r3, #1
 8008fee:	4622      	mov	r2, r4
 8008ff0:	4649      	mov	r1, r9
 8008ff2:	4638      	mov	r0, r7
 8008ff4:	47c0      	blx	r8
 8008ff6:	3001      	adds	r0, #1
 8008ff8:	d0e6      	beq.n	8008fc8 <_printf_common+0xa4>
 8008ffa:	3601      	adds	r6, #1
 8008ffc:	e7d9      	b.n	8008fb2 <_printf_common+0x8e>
	...

08009000 <_printf_i>:
 8009000:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009004:	7e0f      	ldrb	r7, [r1, #24]
 8009006:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009008:	2f78      	cmp	r7, #120	; 0x78
 800900a:	4691      	mov	r9, r2
 800900c:	4680      	mov	r8, r0
 800900e:	460c      	mov	r4, r1
 8009010:	469a      	mov	sl, r3
 8009012:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009016:	d807      	bhi.n	8009028 <_printf_i+0x28>
 8009018:	2f62      	cmp	r7, #98	; 0x62
 800901a:	d80a      	bhi.n	8009032 <_printf_i+0x32>
 800901c:	2f00      	cmp	r7, #0
 800901e:	f000 80d4 	beq.w	80091ca <_printf_i+0x1ca>
 8009022:	2f58      	cmp	r7, #88	; 0x58
 8009024:	f000 80c0 	beq.w	80091a8 <_printf_i+0x1a8>
 8009028:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800902c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009030:	e03a      	b.n	80090a8 <_printf_i+0xa8>
 8009032:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009036:	2b15      	cmp	r3, #21
 8009038:	d8f6      	bhi.n	8009028 <_printf_i+0x28>
 800903a:	a101      	add	r1, pc, #4	; (adr r1, 8009040 <_printf_i+0x40>)
 800903c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009040:	08009099 	.word	0x08009099
 8009044:	080090ad 	.word	0x080090ad
 8009048:	08009029 	.word	0x08009029
 800904c:	08009029 	.word	0x08009029
 8009050:	08009029 	.word	0x08009029
 8009054:	08009029 	.word	0x08009029
 8009058:	080090ad 	.word	0x080090ad
 800905c:	08009029 	.word	0x08009029
 8009060:	08009029 	.word	0x08009029
 8009064:	08009029 	.word	0x08009029
 8009068:	08009029 	.word	0x08009029
 800906c:	080091b1 	.word	0x080091b1
 8009070:	080090d9 	.word	0x080090d9
 8009074:	0800916b 	.word	0x0800916b
 8009078:	08009029 	.word	0x08009029
 800907c:	08009029 	.word	0x08009029
 8009080:	080091d3 	.word	0x080091d3
 8009084:	08009029 	.word	0x08009029
 8009088:	080090d9 	.word	0x080090d9
 800908c:	08009029 	.word	0x08009029
 8009090:	08009029 	.word	0x08009029
 8009094:	08009173 	.word	0x08009173
 8009098:	682b      	ldr	r3, [r5, #0]
 800909a:	1d1a      	adds	r2, r3, #4
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	602a      	str	r2, [r5, #0]
 80090a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80090a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80090a8:	2301      	movs	r3, #1
 80090aa:	e09f      	b.n	80091ec <_printf_i+0x1ec>
 80090ac:	6820      	ldr	r0, [r4, #0]
 80090ae:	682b      	ldr	r3, [r5, #0]
 80090b0:	0607      	lsls	r7, r0, #24
 80090b2:	f103 0104 	add.w	r1, r3, #4
 80090b6:	6029      	str	r1, [r5, #0]
 80090b8:	d501      	bpl.n	80090be <_printf_i+0xbe>
 80090ba:	681e      	ldr	r6, [r3, #0]
 80090bc:	e003      	b.n	80090c6 <_printf_i+0xc6>
 80090be:	0646      	lsls	r6, r0, #25
 80090c0:	d5fb      	bpl.n	80090ba <_printf_i+0xba>
 80090c2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80090c6:	2e00      	cmp	r6, #0
 80090c8:	da03      	bge.n	80090d2 <_printf_i+0xd2>
 80090ca:	232d      	movs	r3, #45	; 0x2d
 80090cc:	4276      	negs	r6, r6
 80090ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80090d2:	485a      	ldr	r0, [pc, #360]	; (800923c <_printf_i+0x23c>)
 80090d4:	230a      	movs	r3, #10
 80090d6:	e012      	b.n	80090fe <_printf_i+0xfe>
 80090d8:	682b      	ldr	r3, [r5, #0]
 80090da:	6820      	ldr	r0, [r4, #0]
 80090dc:	1d19      	adds	r1, r3, #4
 80090de:	6029      	str	r1, [r5, #0]
 80090e0:	0605      	lsls	r5, r0, #24
 80090e2:	d501      	bpl.n	80090e8 <_printf_i+0xe8>
 80090e4:	681e      	ldr	r6, [r3, #0]
 80090e6:	e002      	b.n	80090ee <_printf_i+0xee>
 80090e8:	0641      	lsls	r1, r0, #25
 80090ea:	d5fb      	bpl.n	80090e4 <_printf_i+0xe4>
 80090ec:	881e      	ldrh	r6, [r3, #0]
 80090ee:	4853      	ldr	r0, [pc, #332]	; (800923c <_printf_i+0x23c>)
 80090f0:	2f6f      	cmp	r7, #111	; 0x6f
 80090f2:	bf0c      	ite	eq
 80090f4:	2308      	moveq	r3, #8
 80090f6:	230a      	movne	r3, #10
 80090f8:	2100      	movs	r1, #0
 80090fa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80090fe:	6865      	ldr	r5, [r4, #4]
 8009100:	60a5      	str	r5, [r4, #8]
 8009102:	2d00      	cmp	r5, #0
 8009104:	bfa2      	ittt	ge
 8009106:	6821      	ldrge	r1, [r4, #0]
 8009108:	f021 0104 	bicge.w	r1, r1, #4
 800910c:	6021      	strge	r1, [r4, #0]
 800910e:	b90e      	cbnz	r6, 8009114 <_printf_i+0x114>
 8009110:	2d00      	cmp	r5, #0
 8009112:	d04b      	beq.n	80091ac <_printf_i+0x1ac>
 8009114:	4615      	mov	r5, r2
 8009116:	fbb6 f1f3 	udiv	r1, r6, r3
 800911a:	fb03 6711 	mls	r7, r3, r1, r6
 800911e:	5dc7      	ldrb	r7, [r0, r7]
 8009120:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009124:	4637      	mov	r7, r6
 8009126:	42bb      	cmp	r3, r7
 8009128:	460e      	mov	r6, r1
 800912a:	d9f4      	bls.n	8009116 <_printf_i+0x116>
 800912c:	2b08      	cmp	r3, #8
 800912e:	d10b      	bne.n	8009148 <_printf_i+0x148>
 8009130:	6823      	ldr	r3, [r4, #0]
 8009132:	07de      	lsls	r6, r3, #31
 8009134:	d508      	bpl.n	8009148 <_printf_i+0x148>
 8009136:	6923      	ldr	r3, [r4, #16]
 8009138:	6861      	ldr	r1, [r4, #4]
 800913a:	4299      	cmp	r1, r3
 800913c:	bfde      	ittt	le
 800913e:	2330      	movle	r3, #48	; 0x30
 8009140:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009144:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009148:	1b52      	subs	r2, r2, r5
 800914a:	6122      	str	r2, [r4, #16]
 800914c:	f8cd a000 	str.w	sl, [sp]
 8009150:	464b      	mov	r3, r9
 8009152:	aa03      	add	r2, sp, #12
 8009154:	4621      	mov	r1, r4
 8009156:	4640      	mov	r0, r8
 8009158:	f7ff fee4 	bl	8008f24 <_printf_common>
 800915c:	3001      	adds	r0, #1
 800915e:	d14a      	bne.n	80091f6 <_printf_i+0x1f6>
 8009160:	f04f 30ff 	mov.w	r0, #4294967295
 8009164:	b004      	add	sp, #16
 8009166:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800916a:	6823      	ldr	r3, [r4, #0]
 800916c:	f043 0320 	orr.w	r3, r3, #32
 8009170:	6023      	str	r3, [r4, #0]
 8009172:	4833      	ldr	r0, [pc, #204]	; (8009240 <_printf_i+0x240>)
 8009174:	2778      	movs	r7, #120	; 0x78
 8009176:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800917a:	6823      	ldr	r3, [r4, #0]
 800917c:	6829      	ldr	r1, [r5, #0]
 800917e:	061f      	lsls	r7, r3, #24
 8009180:	f851 6b04 	ldr.w	r6, [r1], #4
 8009184:	d402      	bmi.n	800918c <_printf_i+0x18c>
 8009186:	065f      	lsls	r7, r3, #25
 8009188:	bf48      	it	mi
 800918a:	b2b6      	uxthmi	r6, r6
 800918c:	07df      	lsls	r7, r3, #31
 800918e:	bf48      	it	mi
 8009190:	f043 0320 	orrmi.w	r3, r3, #32
 8009194:	6029      	str	r1, [r5, #0]
 8009196:	bf48      	it	mi
 8009198:	6023      	strmi	r3, [r4, #0]
 800919a:	b91e      	cbnz	r6, 80091a4 <_printf_i+0x1a4>
 800919c:	6823      	ldr	r3, [r4, #0]
 800919e:	f023 0320 	bic.w	r3, r3, #32
 80091a2:	6023      	str	r3, [r4, #0]
 80091a4:	2310      	movs	r3, #16
 80091a6:	e7a7      	b.n	80090f8 <_printf_i+0xf8>
 80091a8:	4824      	ldr	r0, [pc, #144]	; (800923c <_printf_i+0x23c>)
 80091aa:	e7e4      	b.n	8009176 <_printf_i+0x176>
 80091ac:	4615      	mov	r5, r2
 80091ae:	e7bd      	b.n	800912c <_printf_i+0x12c>
 80091b0:	682b      	ldr	r3, [r5, #0]
 80091b2:	6826      	ldr	r6, [r4, #0]
 80091b4:	6961      	ldr	r1, [r4, #20]
 80091b6:	1d18      	adds	r0, r3, #4
 80091b8:	6028      	str	r0, [r5, #0]
 80091ba:	0635      	lsls	r5, r6, #24
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	d501      	bpl.n	80091c4 <_printf_i+0x1c4>
 80091c0:	6019      	str	r1, [r3, #0]
 80091c2:	e002      	b.n	80091ca <_printf_i+0x1ca>
 80091c4:	0670      	lsls	r0, r6, #25
 80091c6:	d5fb      	bpl.n	80091c0 <_printf_i+0x1c0>
 80091c8:	8019      	strh	r1, [r3, #0]
 80091ca:	2300      	movs	r3, #0
 80091cc:	6123      	str	r3, [r4, #16]
 80091ce:	4615      	mov	r5, r2
 80091d0:	e7bc      	b.n	800914c <_printf_i+0x14c>
 80091d2:	682b      	ldr	r3, [r5, #0]
 80091d4:	1d1a      	adds	r2, r3, #4
 80091d6:	602a      	str	r2, [r5, #0]
 80091d8:	681d      	ldr	r5, [r3, #0]
 80091da:	6862      	ldr	r2, [r4, #4]
 80091dc:	2100      	movs	r1, #0
 80091de:	4628      	mov	r0, r5
 80091e0:	f7f6 fffe 	bl	80001e0 <memchr>
 80091e4:	b108      	cbz	r0, 80091ea <_printf_i+0x1ea>
 80091e6:	1b40      	subs	r0, r0, r5
 80091e8:	6060      	str	r0, [r4, #4]
 80091ea:	6863      	ldr	r3, [r4, #4]
 80091ec:	6123      	str	r3, [r4, #16]
 80091ee:	2300      	movs	r3, #0
 80091f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80091f4:	e7aa      	b.n	800914c <_printf_i+0x14c>
 80091f6:	6923      	ldr	r3, [r4, #16]
 80091f8:	462a      	mov	r2, r5
 80091fa:	4649      	mov	r1, r9
 80091fc:	4640      	mov	r0, r8
 80091fe:	47d0      	blx	sl
 8009200:	3001      	adds	r0, #1
 8009202:	d0ad      	beq.n	8009160 <_printf_i+0x160>
 8009204:	6823      	ldr	r3, [r4, #0]
 8009206:	079b      	lsls	r3, r3, #30
 8009208:	d413      	bmi.n	8009232 <_printf_i+0x232>
 800920a:	68e0      	ldr	r0, [r4, #12]
 800920c:	9b03      	ldr	r3, [sp, #12]
 800920e:	4298      	cmp	r0, r3
 8009210:	bfb8      	it	lt
 8009212:	4618      	movlt	r0, r3
 8009214:	e7a6      	b.n	8009164 <_printf_i+0x164>
 8009216:	2301      	movs	r3, #1
 8009218:	4632      	mov	r2, r6
 800921a:	4649      	mov	r1, r9
 800921c:	4640      	mov	r0, r8
 800921e:	47d0      	blx	sl
 8009220:	3001      	adds	r0, #1
 8009222:	d09d      	beq.n	8009160 <_printf_i+0x160>
 8009224:	3501      	adds	r5, #1
 8009226:	68e3      	ldr	r3, [r4, #12]
 8009228:	9903      	ldr	r1, [sp, #12]
 800922a:	1a5b      	subs	r3, r3, r1
 800922c:	42ab      	cmp	r3, r5
 800922e:	dcf2      	bgt.n	8009216 <_printf_i+0x216>
 8009230:	e7eb      	b.n	800920a <_printf_i+0x20a>
 8009232:	2500      	movs	r5, #0
 8009234:	f104 0619 	add.w	r6, r4, #25
 8009238:	e7f5      	b.n	8009226 <_printf_i+0x226>
 800923a:	bf00      	nop
 800923c:	0800957b 	.word	0x0800957b
 8009240:	0800958c 	.word	0x0800958c

08009244 <memmove>:
 8009244:	4288      	cmp	r0, r1
 8009246:	b510      	push	{r4, lr}
 8009248:	eb01 0402 	add.w	r4, r1, r2
 800924c:	d902      	bls.n	8009254 <memmove+0x10>
 800924e:	4284      	cmp	r4, r0
 8009250:	4623      	mov	r3, r4
 8009252:	d807      	bhi.n	8009264 <memmove+0x20>
 8009254:	1e43      	subs	r3, r0, #1
 8009256:	42a1      	cmp	r1, r4
 8009258:	d008      	beq.n	800926c <memmove+0x28>
 800925a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800925e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009262:	e7f8      	b.n	8009256 <memmove+0x12>
 8009264:	4402      	add	r2, r0
 8009266:	4601      	mov	r1, r0
 8009268:	428a      	cmp	r2, r1
 800926a:	d100      	bne.n	800926e <memmove+0x2a>
 800926c:	bd10      	pop	{r4, pc}
 800926e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009272:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009276:	e7f7      	b.n	8009268 <memmove+0x24>

08009278 <_sbrk_r>:
 8009278:	b538      	push	{r3, r4, r5, lr}
 800927a:	4d06      	ldr	r5, [pc, #24]	; (8009294 <_sbrk_r+0x1c>)
 800927c:	2300      	movs	r3, #0
 800927e:	4604      	mov	r4, r0
 8009280:	4608      	mov	r0, r1
 8009282:	602b      	str	r3, [r5, #0]
 8009284:	f7f8 fb34 	bl	80018f0 <_sbrk>
 8009288:	1c43      	adds	r3, r0, #1
 800928a:	d102      	bne.n	8009292 <_sbrk_r+0x1a>
 800928c:	682b      	ldr	r3, [r5, #0]
 800928e:	b103      	cbz	r3, 8009292 <_sbrk_r+0x1a>
 8009290:	6023      	str	r3, [r4, #0]
 8009292:	bd38      	pop	{r3, r4, r5, pc}
 8009294:	2000728c 	.word	0x2000728c

08009298 <_realloc_r>:
 8009298:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800929c:	4680      	mov	r8, r0
 800929e:	4614      	mov	r4, r2
 80092a0:	460e      	mov	r6, r1
 80092a2:	b921      	cbnz	r1, 80092ae <_realloc_r+0x16>
 80092a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80092a8:	4611      	mov	r1, r2
 80092aa:	f7ff bc57 	b.w	8008b5c <_malloc_r>
 80092ae:	b92a      	cbnz	r2, 80092bc <_realloc_r+0x24>
 80092b0:	f7ff fbe8 	bl	8008a84 <_free_r>
 80092b4:	4625      	mov	r5, r4
 80092b6:	4628      	mov	r0, r5
 80092b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80092bc:	f000 f81b 	bl	80092f6 <_malloc_usable_size_r>
 80092c0:	4284      	cmp	r4, r0
 80092c2:	4607      	mov	r7, r0
 80092c4:	d802      	bhi.n	80092cc <_realloc_r+0x34>
 80092c6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80092ca:	d812      	bhi.n	80092f2 <_realloc_r+0x5a>
 80092cc:	4621      	mov	r1, r4
 80092ce:	4640      	mov	r0, r8
 80092d0:	f7ff fc44 	bl	8008b5c <_malloc_r>
 80092d4:	4605      	mov	r5, r0
 80092d6:	2800      	cmp	r0, #0
 80092d8:	d0ed      	beq.n	80092b6 <_realloc_r+0x1e>
 80092da:	42bc      	cmp	r4, r7
 80092dc:	4622      	mov	r2, r4
 80092de:	4631      	mov	r1, r6
 80092e0:	bf28      	it	cs
 80092e2:	463a      	movcs	r2, r7
 80092e4:	f7ff fbc0 	bl	8008a68 <memcpy>
 80092e8:	4631      	mov	r1, r6
 80092ea:	4640      	mov	r0, r8
 80092ec:	f7ff fbca 	bl	8008a84 <_free_r>
 80092f0:	e7e1      	b.n	80092b6 <_realloc_r+0x1e>
 80092f2:	4635      	mov	r5, r6
 80092f4:	e7df      	b.n	80092b6 <_realloc_r+0x1e>

080092f6 <_malloc_usable_size_r>:
 80092f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80092fa:	1f18      	subs	r0, r3, #4
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	bfbc      	itt	lt
 8009300:	580b      	ldrlt	r3, [r1, r0]
 8009302:	18c0      	addlt	r0, r0, r3
 8009304:	4770      	bx	lr
	...

08009308 <_init>:
 8009308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800930a:	bf00      	nop
 800930c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800930e:	bc08      	pop	{r3}
 8009310:	469e      	mov	lr, r3
 8009312:	4770      	bx	lr

08009314 <_fini>:
 8009314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009316:	bf00      	nop
 8009318:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800931a:	bc08      	pop	{r3}
 800931c:	469e      	mov	lr, r3
 800931e:	4770      	bx	lr
