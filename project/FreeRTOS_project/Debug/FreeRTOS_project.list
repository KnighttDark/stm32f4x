
FreeRTOS_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006adc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  08006c6c  08006c6c  00016c6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d54  08006d54  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  08006d54  08006d54  00016d54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006d5c  08006d5c  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d5c  08006d5c  00016d5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006d60  08006d60  00016d60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08006d64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020060  2**0
                  CONTENTS
 10 .bss          00004b58  20000060  20000060  00020060  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004bb8  20004bb8  00020060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 14 .debug_info   000171f6  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000033db  00000000  00000000  000372c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001458  00000000  00000000  0003a6a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000fd5  00000000  00000000  0003bb00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000228b2  00000000  00000000  0003cad5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00016fd5  00000000  00000000  0005f387  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d54d3  00000000  00000000  0007635c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005ad0  00000000  00000000  0014b830  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000053  00000000  00000000  00151300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006c54 	.word	0x08006c54

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	08006c54 	.word	0x08006c54

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <microDelay>:
#include "dht11.h"
extern TIM_HandleTypeDef htim1;
void microDelay(uint16_t delay)
{
 800057c:	b480      	push	{r7}
 800057e:	b083      	sub	sp, #12
 8000580:	af00      	add	r7, sp, #0
 8000582:	4603      	mov	r3, r0
 8000584:	80fb      	strh	r3, [r7, #6]
  __HAL_TIM_SET_COUNTER(&htim1, 0);
 8000586:	4b09      	ldr	r3, [pc, #36]	; (80005ac <microDelay+0x30>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	2200      	movs	r2, #0
 800058c:	625a      	str	r2, [r3, #36]	; 0x24
  while (__HAL_TIM_GET_COUNTER(&htim1) < delay);
 800058e:	bf00      	nop
 8000590:	4b06      	ldr	r3, [pc, #24]	; (80005ac <microDelay+0x30>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000596:	88fb      	ldrh	r3, [r7, #6]
 8000598:	429a      	cmp	r2, r3
 800059a:	d3f9      	bcc.n	8000590 <microDelay+0x14>
}
 800059c:	bf00      	nop
 800059e:	bf00      	nop
 80005a0:	370c      	adds	r7, #12
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop
 80005ac:	20000084 	.word	0x20000084

080005b0 <DHT11_Start>:

uint8_t DHT11_Start(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b088      	sub	sp, #32
 80005b4:	af00      	add	r7, sp, #0
  uint8_t Response = 0;
 80005b6:	2300      	movs	r3, #0
 80005b8:	77fb      	strb	r3, [r7, #31]
  GPIO_InitTypeDef GPIO_InitStructPrivate = {0};
 80005ba:	463b      	mov	r3, r7
 80005bc:	2200      	movs	r2, #0
 80005be:	601a      	str	r2, [r3, #0]
 80005c0:	605a      	str	r2, [r3, #4]
 80005c2:	609a      	str	r2, [r3, #8]
 80005c4:	60da      	str	r2, [r3, #12]
 80005c6:	611a      	str	r2, [r3, #16]
  GPIO_InitStructPrivate.Pin = DHT11_PIN;
 80005c8:	2320      	movs	r3, #32
 80005ca:	603b      	str	r3, [r7, #0]
  GPIO_InitStructPrivate.Mode = GPIO_MODE_OUTPUT_PP;
 80005cc:	2301      	movs	r3, #1
 80005ce:	607b      	str	r3, [r7, #4]
  GPIO_InitStructPrivate.Speed = GPIO_SPEED_FREQ_LOW;
 80005d0:	2300      	movs	r3, #0
 80005d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructPrivate.Pull = GPIO_NOPULL;
 80005d4:	2300      	movs	r3, #0
 80005d6:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStructPrivate); // set the pin as output
 80005d8:	463b      	mov	r3, r7
 80005da:	4619      	mov	r1, r3
 80005dc:	4826      	ldr	r0, [pc, #152]	; (8000678 <DHT11_Start+0xc8>)
 80005de:	f000 fe55 	bl	800128c <HAL_GPIO_Init>
  HAL_GPIO_WritePin(DHT11_PORT, DHT11_PIN, 0);   // pull the pin low
 80005e2:	2200      	movs	r2, #0
 80005e4:	2120      	movs	r1, #32
 80005e6:	4824      	ldr	r0, [pc, #144]	; (8000678 <DHT11_Start+0xc8>)
 80005e8:	f001 f804 	bl	80015f4 <HAL_GPIO_WritePin>
  HAL_Delay(20);   // wait for 20ms
 80005ec:	2014      	movs	r0, #20
 80005ee:	f000 fc85 	bl	8000efc <HAL_Delay>
  HAL_GPIO_WritePin(DHT11_PORT, DHT11_PIN, 1);   // pull the pin high
 80005f2:	2201      	movs	r2, #1
 80005f4:	2120      	movs	r1, #32
 80005f6:	4820      	ldr	r0, [pc, #128]	; (8000678 <DHT11_Start+0xc8>)
 80005f8:	f000 fffc 	bl	80015f4 <HAL_GPIO_WritePin>
  microDelay(30);   // wait for 30us
 80005fc:	201e      	movs	r0, #30
 80005fe:	f7ff ffbd 	bl	800057c <microDelay>
  GPIO_InitStructPrivate.Mode = GPIO_MODE_INPUT;
 8000602:	2300      	movs	r3, #0
 8000604:	607b      	str	r3, [r7, #4]
  GPIO_InitStructPrivate.Pull = GPIO_PULLUP;
 8000606:	2301      	movs	r3, #1
 8000608:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStructPrivate); // set the pin as input
 800060a:	463b      	mov	r3, r7
 800060c:	4619      	mov	r1, r3
 800060e:	481a      	ldr	r0, [pc, #104]	; (8000678 <DHT11_Start+0xc8>)
 8000610:	f000 fe3c 	bl	800128c <HAL_GPIO_Init>
  microDelay(40);
 8000614:	2028      	movs	r0, #40	; 0x28
 8000616:	f7ff ffb1 	bl	800057c <microDelay>
  if (!(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)))
 800061a:	2120      	movs	r1, #32
 800061c:	4816      	ldr	r0, [pc, #88]	; (8000678 <DHT11_Start+0xc8>)
 800061e:	f000 ffd1 	bl	80015c4 <HAL_GPIO_ReadPin>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d10b      	bne.n	8000640 <DHT11_Start+0x90>
  {
    microDelay(80);
 8000628:	2050      	movs	r0, #80	; 0x50
 800062a:	f7ff ffa7 	bl	800057c <microDelay>
    if ((HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN))) Response = 1;
 800062e:	2120      	movs	r1, #32
 8000630:	4811      	ldr	r0, [pc, #68]	; (8000678 <DHT11_Start+0xc8>)
 8000632:	f000 ffc7 	bl	80015c4 <HAL_GPIO_ReadPin>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <DHT11_Start+0x90>
 800063c:	2301      	movs	r3, #1
 800063e:	77fb      	strb	r3, [r7, #31]
  }
  uint32_t pMillis = HAL_GetTick();
 8000640:	f000 fc50 	bl	8000ee4 <HAL_GetTick>
 8000644:	6178      	str	r0, [r7, #20]
  uint32_t cMillis = HAL_GetTick();
 8000646:	f000 fc4d 	bl	8000ee4 <HAL_GetTick>
 800064a:	61b8      	str	r0, [r7, #24]
  while ((HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 800064c:	e002      	b.n	8000654 <DHT11_Start+0xa4>
  {
    cMillis = HAL_GetTick();
 800064e:	f000 fc49 	bl	8000ee4 <HAL_GetTick>
 8000652:	61b8      	str	r0, [r7, #24]
  while ((HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8000654:	2120      	movs	r1, #32
 8000656:	4808      	ldr	r0, [pc, #32]	; (8000678 <DHT11_Start+0xc8>)
 8000658:	f000 ffb4 	bl	80015c4 <HAL_GPIO_ReadPin>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d004      	beq.n	800066c <DHT11_Start+0xbc>
 8000662:	697b      	ldr	r3, [r7, #20]
 8000664:	3302      	adds	r3, #2
 8000666:	69ba      	ldr	r2, [r7, #24]
 8000668:	429a      	cmp	r2, r3
 800066a:	d3f0      	bcc.n	800064e <DHT11_Start+0x9e>
  }
  return Response;
 800066c:	7ffb      	ldrb	r3, [r7, #31]
}
 800066e:	4618      	mov	r0, r3
 8000670:	3720      	adds	r7, #32
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	40021000 	.word	0x40021000

0800067c <DHT11_Read>:

uint8_t DHT11_Read(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b084      	sub	sp, #16
 8000680:	af00      	add	r7, sp, #0
  uint8_t a, b = 0;
 8000682:	2300      	movs	r3, #0
 8000684:	73bb      	strb	r3, [r7, #14]
  for (a = 0; a < 8; a++)
 8000686:	2300      	movs	r3, #0
 8000688:	73fb      	strb	r3, [r7, #15]
 800068a:	e053      	b.n	8000734 <DHT11_Read+0xb8>
  {
    uint32_t pMillis = HAL_GetTick();
 800068c:	f000 fc2a 	bl	8000ee4 <HAL_GetTick>
 8000690:	6078      	str	r0, [r7, #4]
    uint32_t cMillis = HAL_GetTick();
 8000692:	f000 fc27 	bl	8000ee4 <HAL_GetTick>
 8000696:	60b8      	str	r0, [r7, #8]
    while (!(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8000698:	e002      	b.n	80006a0 <DHT11_Read+0x24>
    {
      cMillis = HAL_GetTick();
 800069a:	f000 fc23 	bl	8000ee4 <HAL_GetTick>
 800069e:	60b8      	str	r0, [r7, #8]
    while (!(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 80006a0:	2120      	movs	r1, #32
 80006a2:	4828      	ldr	r0, [pc, #160]	; (8000744 <DHT11_Read+0xc8>)
 80006a4:	f000 ff8e 	bl	80015c4 <HAL_GPIO_ReadPin>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d104      	bne.n	80006b8 <DHT11_Read+0x3c>
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	3302      	adds	r3, #2
 80006b2:	68ba      	ldr	r2, [r7, #8]
 80006b4:	429a      	cmp	r2, r3
 80006b6:	d3f0      	bcc.n	800069a <DHT11_Read+0x1e>
    }
    microDelay(40);   // wait for 40 us
 80006b8:	2028      	movs	r0, #40	; 0x28
 80006ba:	f7ff ff5f 	bl	800057c <microDelay>
    if (!(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)))   // if the pin is low
 80006be:	2120      	movs	r1, #32
 80006c0:	4820      	ldr	r0, [pc, #128]	; (8000744 <DHT11_Read+0xc8>)
 80006c2:	f000 ff7f 	bl	80015c4 <HAL_GPIO_ReadPin>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d10e      	bne.n	80006ea <DHT11_Read+0x6e>
      b &= ~(1 << (7 - a));
 80006cc:	7bfb      	ldrb	r3, [r7, #15]
 80006ce:	f1c3 0307 	rsb	r3, r3, #7
 80006d2:	2201      	movs	r2, #1
 80006d4:	fa02 f303 	lsl.w	r3, r2, r3
 80006d8:	b25b      	sxtb	r3, r3
 80006da:	43db      	mvns	r3, r3
 80006dc:	b25a      	sxtb	r2, r3
 80006de:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80006e2:	4013      	ands	r3, r2
 80006e4:	b25b      	sxtb	r3, r3
 80006e6:	73bb      	strb	r3, [r7, #14]
 80006e8:	e00b      	b.n	8000702 <DHT11_Read+0x86>
    else
      b |= (1 << (7 - a));
 80006ea:	7bfb      	ldrb	r3, [r7, #15]
 80006ec:	f1c3 0307 	rsb	r3, r3, #7
 80006f0:	2201      	movs	r2, #1
 80006f2:	fa02 f303 	lsl.w	r3, r2, r3
 80006f6:	b25a      	sxtb	r2, r3
 80006f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80006fc:	4313      	orrs	r3, r2
 80006fe:	b25b      	sxtb	r3, r3
 8000700:	73bb      	strb	r3, [r7, #14]
    pMillis = HAL_GetTick();
 8000702:	f000 fbef 	bl	8000ee4 <HAL_GetTick>
 8000706:	6078      	str	r0, [r7, #4]
    cMillis = HAL_GetTick();
 8000708:	f000 fbec 	bl	8000ee4 <HAL_GetTick>
 800070c:	60b8      	str	r0, [r7, #8]
    while ((HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 800070e:	e002      	b.n	8000716 <DHT11_Read+0x9a>
    {
      cMillis = HAL_GetTick();
 8000710:	f000 fbe8 	bl	8000ee4 <HAL_GetTick>
 8000714:	60b8      	str	r0, [r7, #8]
    while ((HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8000716:	2120      	movs	r1, #32
 8000718:	480a      	ldr	r0, [pc, #40]	; (8000744 <DHT11_Read+0xc8>)
 800071a:	f000 ff53 	bl	80015c4 <HAL_GPIO_ReadPin>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d004      	beq.n	800072e <DHT11_Read+0xb2>
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	3302      	adds	r3, #2
 8000728:	68ba      	ldr	r2, [r7, #8]
 800072a:	429a      	cmp	r2, r3
 800072c:	d3f0      	bcc.n	8000710 <DHT11_Read+0x94>
  for (a = 0; a < 8; a++)
 800072e:	7bfb      	ldrb	r3, [r7, #15]
 8000730:	3301      	adds	r3, #1
 8000732:	73fb      	strb	r3, [r7, #15]
 8000734:	7bfb      	ldrb	r3, [r7, #15]
 8000736:	2b07      	cmp	r3, #7
 8000738:	d9a8      	bls.n	800068c <DHT11_Read+0x10>
    }
  }
  return b;
 800073a:	7bbb      	ldrb	r3, [r7, #14]
}
 800073c:	4618      	mov	r0, r3
 800073e:	3710      	adds	r7, #16
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	40021000 	.word	0x40021000

08000748 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800074c:	f000 fb64 	bl	8000e18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000750:	f000 f82c 	bl	80007ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000754:	f000 f90c 	bl	8000970 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000758:	f000 f890 	bl	800087c <MX_TIM1_Init>
  MX_USART2_UART_Init();
 800075c:	f000 f8de 	bl	800091c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 8000760:	480b      	ldr	r0, [pc, #44]	; (8000790 <main+0x48>)
 8000762:	f001 fc09 	bl	8001f78 <HAL_TIM_Base_Start>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000766:	f003 f883 	bl	8003870 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of TaskDHT11 */
  TaskDHT11Handle = osThreadNew(StartTaskDHT11, NULL, &TaskDHT11_attributes);
 800076a:	4a0a      	ldr	r2, [pc, #40]	; (8000794 <main+0x4c>)
 800076c:	2100      	movs	r1, #0
 800076e:	480a      	ldr	r0, [pc, #40]	; (8000798 <main+0x50>)
 8000770:	f003 f8c8 	bl	8003904 <osThreadNew>
 8000774:	4603      	mov	r3, r0
 8000776:	4a09      	ldr	r2, [pc, #36]	; (800079c <main+0x54>)
 8000778:	6013      	str	r3, [r2, #0]

  /* creation of Task02 */
  Task02Handle = osThreadNew(StartTask2, NULL, &Task02_attributes);
 800077a:	4a09      	ldr	r2, [pc, #36]	; (80007a0 <main+0x58>)
 800077c:	2100      	movs	r1, #0
 800077e:	4809      	ldr	r0, [pc, #36]	; (80007a4 <main+0x5c>)
 8000780:	f003 f8c0 	bl	8003904 <osThreadNew>
 8000784:	4603      	mov	r3, r0
 8000786:	4a08      	ldr	r2, [pc, #32]	; (80007a8 <main+0x60>)
 8000788:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800078a:	f003 f895 	bl	80038b8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800078e:	e7fe      	b.n	800078e <main+0x46>
 8000790:	20000084 	.word	0x20000084
 8000794:	08006cc0 	.word	0x08006cc0
 8000798:	08000a59 	.word	0x08000a59
 800079c:	20000110 	.word	0x20000110
 80007a0:	08006ce4 	.word	0x08006ce4
 80007a4:	08000b2d 	.word	0x08000b2d
 80007a8:	20000114 	.word	0x20000114

080007ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b094      	sub	sp, #80	; 0x50
 80007b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007b2:	f107 0320 	add.w	r3, r7, #32
 80007b6:	2230      	movs	r2, #48	; 0x30
 80007b8:	2100      	movs	r1, #0
 80007ba:	4618      	mov	r0, r3
 80007bc:	f005 fdc6 	bl	800634c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007c0:	f107 030c 	add.w	r3, r7, #12
 80007c4:	2200      	movs	r2, #0
 80007c6:	601a      	str	r2, [r3, #0]
 80007c8:	605a      	str	r2, [r3, #4]
 80007ca:	609a      	str	r2, [r3, #8]
 80007cc:	60da      	str	r2, [r3, #12]
 80007ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007d0:	2300      	movs	r3, #0
 80007d2:	60bb      	str	r3, [r7, #8]
 80007d4:	4b27      	ldr	r3, [pc, #156]	; (8000874 <SystemClock_Config+0xc8>)
 80007d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007d8:	4a26      	ldr	r2, [pc, #152]	; (8000874 <SystemClock_Config+0xc8>)
 80007da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007de:	6413      	str	r3, [r2, #64]	; 0x40
 80007e0:	4b24      	ldr	r3, [pc, #144]	; (8000874 <SystemClock_Config+0xc8>)
 80007e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007e8:	60bb      	str	r3, [r7, #8]
 80007ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007ec:	2300      	movs	r3, #0
 80007ee:	607b      	str	r3, [r7, #4]
 80007f0:	4b21      	ldr	r3, [pc, #132]	; (8000878 <SystemClock_Config+0xcc>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	4a20      	ldr	r2, [pc, #128]	; (8000878 <SystemClock_Config+0xcc>)
 80007f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007fa:	6013      	str	r3, [r2, #0]
 80007fc:	4b1e      	ldr	r3, [pc, #120]	; (8000878 <SystemClock_Config+0xcc>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000804:	607b      	str	r3, [r7, #4]
 8000806:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000808:	2302      	movs	r3, #2
 800080a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800080c:	2301      	movs	r3, #1
 800080e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000810:	2310      	movs	r3, #16
 8000812:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000814:	2302      	movs	r3, #2
 8000816:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000818:	2300      	movs	r3, #0
 800081a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800081c:	2308      	movs	r3, #8
 800081e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000820:	2348      	movs	r3, #72	; 0x48
 8000822:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000824:	2302      	movs	r3, #2
 8000826:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000828:	2304      	movs	r3, #4
 800082a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800082c:	f107 0320 	add.w	r3, r7, #32
 8000830:	4618      	mov	r0, r3
 8000832:	f000 fef9 	bl	8001628 <HAL_RCC_OscConfig>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800083c:	f000 f998 	bl	8000b70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000840:	230f      	movs	r3, #15
 8000842:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000844:	2302      	movs	r3, #2
 8000846:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000848:	2300      	movs	r3, #0
 800084a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800084c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000850:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000852:	2300      	movs	r3, #0
 8000854:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000856:	f107 030c 	add.w	r3, r7, #12
 800085a:	2102      	movs	r1, #2
 800085c:	4618      	mov	r0, r3
 800085e:	f001 f95b 	bl	8001b18 <HAL_RCC_ClockConfig>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000868:	f000 f982 	bl	8000b70 <Error_Handler>
  }
}
 800086c:	bf00      	nop
 800086e:	3750      	adds	r7, #80	; 0x50
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	40023800 	.word	0x40023800
 8000878:	40007000 	.word	0x40007000

0800087c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b086      	sub	sp, #24
 8000880:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000882:	f107 0308 	add.w	r3, r7, #8
 8000886:	2200      	movs	r2, #0
 8000888:	601a      	str	r2, [r3, #0]
 800088a:	605a      	str	r2, [r3, #4]
 800088c:	609a      	str	r2, [r3, #8]
 800088e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000890:	463b      	mov	r3, r7
 8000892:	2200      	movs	r2, #0
 8000894:	601a      	str	r2, [r3, #0]
 8000896:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000898:	4b1e      	ldr	r3, [pc, #120]	; (8000914 <MX_TIM1_Init+0x98>)
 800089a:	4a1f      	ldr	r2, [pc, #124]	; (8000918 <MX_TIM1_Init+0x9c>)
 800089c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 800089e:	4b1d      	ldr	r3, [pc, #116]	; (8000914 <MX_TIM1_Init+0x98>)
 80008a0:	2247      	movs	r2, #71	; 0x47
 80008a2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008a4:	4b1b      	ldr	r3, [pc, #108]	; (8000914 <MX_TIM1_Init+0x98>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80008aa:	4b1a      	ldr	r3, [pc, #104]	; (8000914 <MX_TIM1_Init+0x98>)
 80008ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008b0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008b2:	4b18      	ldr	r3, [pc, #96]	; (8000914 <MX_TIM1_Init+0x98>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80008b8:	4b16      	ldr	r3, [pc, #88]	; (8000914 <MX_TIM1_Init+0x98>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008be:	4b15      	ldr	r3, [pc, #84]	; (8000914 <MX_TIM1_Init+0x98>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80008c4:	4813      	ldr	r0, [pc, #76]	; (8000914 <MX_TIM1_Init+0x98>)
 80008c6:	f001 fb07 	bl	8001ed8 <HAL_TIM_Base_Init>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80008d0:	f000 f94e 	bl	8000b70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008d8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80008da:	f107 0308 	add.w	r3, r7, #8
 80008de:	4619      	mov	r1, r3
 80008e0:	480c      	ldr	r0, [pc, #48]	; (8000914 <MX_TIM1_Init+0x98>)
 80008e2:	f001 fcb9 	bl	8002258 <HAL_TIM_ConfigClockSource>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80008ec:	f000 f940 	bl	8000b70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008f0:	2300      	movs	r3, #0
 80008f2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008f4:	2300      	movs	r3, #0
 80008f6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80008f8:	463b      	mov	r3, r7
 80008fa:	4619      	mov	r1, r3
 80008fc:	4805      	ldr	r0, [pc, #20]	; (8000914 <MX_TIM1_Init+0x98>)
 80008fe:	f001 fedf 	bl	80026c0 <HAL_TIMEx_MasterConfigSynchronization>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000908:	f000 f932 	bl	8000b70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800090c:	bf00      	nop
 800090e:	3718      	adds	r7, #24
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	20000084 	.word	0x20000084
 8000918:	40010000 	.word	0x40010000

0800091c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000920:	4b11      	ldr	r3, [pc, #68]	; (8000968 <MX_USART2_UART_Init+0x4c>)
 8000922:	4a12      	ldr	r2, [pc, #72]	; (800096c <MX_USART2_UART_Init+0x50>)
 8000924:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000926:	4b10      	ldr	r3, [pc, #64]	; (8000968 <MX_USART2_UART_Init+0x4c>)
 8000928:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800092c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800092e:	4b0e      	ldr	r3, [pc, #56]	; (8000968 <MX_USART2_UART_Init+0x4c>)
 8000930:	2200      	movs	r2, #0
 8000932:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000934:	4b0c      	ldr	r3, [pc, #48]	; (8000968 <MX_USART2_UART_Init+0x4c>)
 8000936:	2200      	movs	r2, #0
 8000938:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800093a:	4b0b      	ldr	r3, [pc, #44]	; (8000968 <MX_USART2_UART_Init+0x4c>)
 800093c:	2200      	movs	r2, #0
 800093e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000940:	4b09      	ldr	r3, [pc, #36]	; (8000968 <MX_USART2_UART_Init+0x4c>)
 8000942:	220c      	movs	r2, #12
 8000944:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000946:	4b08      	ldr	r3, [pc, #32]	; (8000968 <MX_USART2_UART_Init+0x4c>)
 8000948:	2200      	movs	r2, #0
 800094a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800094c:	4b06      	ldr	r3, [pc, #24]	; (8000968 <MX_USART2_UART_Init+0x4c>)
 800094e:	2200      	movs	r2, #0
 8000950:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000952:	4805      	ldr	r0, [pc, #20]	; (8000968 <MX_USART2_UART_Init+0x4c>)
 8000954:	f001 ff44 	bl	80027e0 <HAL_UART_Init>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800095e:	f000 f907 	bl	8000b70 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000962:	bf00      	nop
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	200000cc 	.word	0x200000cc
 800096c:	40004400 	.word	0x40004400

08000970 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b088      	sub	sp, #32
 8000974:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000976:	f107 030c 	add.w	r3, r7, #12
 800097a:	2200      	movs	r2, #0
 800097c:	601a      	str	r2, [r3, #0]
 800097e:	605a      	str	r2, [r3, #4]
 8000980:	609a      	str	r2, [r3, #8]
 8000982:	60da      	str	r2, [r3, #12]
 8000984:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000986:	2300      	movs	r3, #0
 8000988:	60bb      	str	r3, [r7, #8]
 800098a:	4b30      	ldr	r3, [pc, #192]	; (8000a4c <MX_GPIO_Init+0xdc>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098e:	4a2f      	ldr	r2, [pc, #188]	; (8000a4c <MX_GPIO_Init+0xdc>)
 8000990:	f043 0310 	orr.w	r3, r3, #16
 8000994:	6313      	str	r3, [r2, #48]	; 0x30
 8000996:	4b2d      	ldr	r3, [pc, #180]	; (8000a4c <MX_GPIO_Init+0xdc>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099a:	f003 0310 	and.w	r3, r3, #16
 800099e:	60bb      	str	r3, [r7, #8]
 80009a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009a2:	2300      	movs	r3, #0
 80009a4:	607b      	str	r3, [r7, #4]
 80009a6:	4b29      	ldr	r3, [pc, #164]	; (8000a4c <MX_GPIO_Init+0xdc>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	4a28      	ldr	r2, [pc, #160]	; (8000a4c <MX_GPIO_Init+0xdc>)
 80009ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009b0:	6313      	str	r3, [r2, #48]	; 0x30
 80009b2:	4b26      	ldr	r3, [pc, #152]	; (8000a4c <MX_GPIO_Init+0xdc>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009ba:	607b      	str	r3, [r7, #4]
 80009bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009be:	2300      	movs	r3, #0
 80009c0:	603b      	str	r3, [r7, #0]
 80009c2:	4b22      	ldr	r3, [pc, #136]	; (8000a4c <MX_GPIO_Init+0xdc>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c6:	4a21      	ldr	r2, [pc, #132]	; (8000a4c <MX_GPIO_Init+0xdc>)
 80009c8:	f043 0301 	orr.w	r3, r3, #1
 80009cc:	6313      	str	r3, [r2, #48]	; 0x30
 80009ce:	4b1f      	ldr	r3, [pc, #124]	; (8000a4c <MX_GPIO_Init+0xdc>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d2:	f003 0301 	and.w	r3, r3, #1
 80009d6:	603b      	str	r3, [r7, #0]
 80009d8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_RESET);
 80009da:	2200      	movs	r2, #0
 80009dc:	2120      	movs	r1, #32
 80009de:	481c      	ldr	r0, [pc, #112]	; (8000a50 <MX_GPIO_Init+0xe0>)
 80009e0:	f000 fe08 	bl	80015f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_9, GPIO_PIN_RESET);
 80009e4:	2200      	movs	r2, #0
 80009e6:	f44f 7108 	mov.w	r1, #544	; 0x220
 80009ea:	481a      	ldr	r0, [pc, #104]	; (8000a54 <MX_GPIO_Init+0xe4>)
 80009ec:	f000 fe02 	bl	80015f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80009f0:	2320      	movs	r3, #32
 80009f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f4:	2301      	movs	r3, #1
 80009f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f8:	2300      	movs	r3, #0
 80009fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009fc:	2300      	movs	r3, #0
 80009fe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a00:	f107 030c 	add.w	r3, r7, #12
 8000a04:	4619      	mov	r1, r3
 8000a06:	4812      	ldr	r0, [pc, #72]	; (8000a50 <MX_GPIO_Init+0xe0>)
 8000a08:	f000 fc40 	bl	800128c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_9;
 8000a0c:	f44f 7308 	mov.w	r3, #544	; 0x220
 8000a10:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a12:	2301      	movs	r3, #1
 8000a14:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a16:	2300      	movs	r3, #0
 8000a18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a1e:	f107 030c 	add.w	r3, r7, #12
 8000a22:	4619      	mov	r1, r3
 8000a24:	480b      	ldr	r0, [pc, #44]	; (8000a54 <MX_GPIO_Init+0xe4>)
 8000a26:	f000 fc31 	bl	800128c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000a2a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a2e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a30:	2300      	movs	r3, #0
 8000a32:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a34:	2300      	movs	r3, #0
 8000a36:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a38:	f107 030c 	add.w	r3, r7, #12
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	4805      	ldr	r0, [pc, #20]	; (8000a54 <MX_GPIO_Init+0xe4>)
 8000a40:	f000 fc24 	bl	800128c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a44:	bf00      	nop
 8000a46:	3720      	adds	r7, #32
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	40023800 	.word	0x40023800
 8000a50:	40021000 	.word	0x40021000
 8000a54:	40020000 	.word	0x40020000

08000a58 <StartTaskDHT11>:
  * @brief  Function implementing the TaskDHT11 thread.
  * @param  argument: Not used
  * @retval None
  */
void StartTaskDHT11(void * argument)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b092      	sub	sp, #72	; 0x48
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  for(;;)
  {
    if (DHT11_Start())
 8000a60:	f7ff fda6 	bl	80005b0 <DHT11_Start>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d04b      	beq.n	8000b02 <StartTaskDHT11+0xaa>
    {
      RHI = DHT11_Read(); // Relative humidity integral
 8000a6a:	f7ff fe07 	bl	800067c <DHT11_Read>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	461a      	mov	r2, r3
 8000a72:	4b26      	ldr	r3, [pc, #152]	; (8000b0c <StartTaskDHT11+0xb4>)
 8000a74:	701a      	strb	r2, [r3, #0]
      RHD = DHT11_Read(); // Relative humidity decimal
 8000a76:	f7ff fe01 	bl	800067c <DHT11_Read>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	461a      	mov	r2, r3
 8000a7e:	4b24      	ldr	r3, [pc, #144]	; (8000b10 <StartTaskDHT11+0xb8>)
 8000a80:	701a      	strb	r2, [r3, #0]
      TCI = DHT11_Read(); // Celsius integral
 8000a82:	f7ff fdfb 	bl	800067c <DHT11_Read>
 8000a86:	4603      	mov	r3, r0
 8000a88:	461a      	mov	r2, r3
 8000a8a:	4b22      	ldr	r3, [pc, #136]	; (8000b14 <StartTaskDHT11+0xbc>)
 8000a8c:	701a      	strb	r2, [r3, #0]
      TCD = DHT11_Read(); // Celsius decimal
 8000a8e:	f7ff fdf5 	bl	800067c <DHT11_Read>
 8000a92:	4603      	mov	r3, r0
 8000a94:	461a      	mov	r2, r3
 8000a96:	4b20      	ldr	r3, [pc, #128]	; (8000b18 <StartTaskDHT11+0xc0>)
 8000a98:	701a      	strb	r2, [r3, #0]
      SUM = DHT11_Read(); // Check sum
 8000a9a:	f7ff fdef 	bl	800067c <DHT11_Read>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	461a      	mov	r2, r3
 8000aa2:	4b1e      	ldr	r3, [pc, #120]	; (8000b1c <StartTaskDHT11+0xc4>)
 8000aa4:	701a      	strb	r2, [r3, #0]

      // Gửi dữ liệu qua UART
      char temp[32];
      char humi[32];

      sprintf(temp, "Temp:%d\n", TCI);
 8000aa6:	4b1b      	ldr	r3, [pc, #108]	; (8000b14 <StartTaskDHT11+0xbc>)
 8000aa8:	781b      	ldrb	r3, [r3, #0]
 8000aaa:	461a      	mov	r2, r3
 8000aac:	f107 0308 	add.w	r3, r7, #8
 8000ab0:	491b      	ldr	r1, [pc, #108]	; (8000b20 <StartTaskDHT11+0xc8>)
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f005 fc2a 	bl	800630c <siprintf>
      sprintf(humi, "Humi:%d\n", RHI);
 8000ab8:	4b14      	ldr	r3, [pc, #80]	; (8000b0c <StartTaskDHT11+0xb4>)
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	461a      	mov	r2, r3
 8000abe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ac2:	4918      	ldr	r1, [pc, #96]	; (8000b24 <StartTaskDHT11+0xcc>)
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f005 fc21 	bl	800630c <siprintf>
      HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp), 1000);
 8000aca:	f107 0308 	add.w	r3, r7, #8
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f7ff fb7e 	bl	80001d0 <strlen>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	b29a      	uxth	r2, r3
 8000ad8:	f107 0108 	add.w	r1, r7, #8
 8000adc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ae0:	4811      	ldr	r0, [pc, #68]	; (8000b28 <StartTaskDHT11+0xd0>)
 8000ae2:	f001 feca 	bl	800287a <HAL_UART_Transmit>
      HAL_UART_Transmit(&huart2, (uint8_t*)humi, strlen(humi), 1000);
 8000ae6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000aea:	4618      	mov	r0, r3
 8000aec:	f7ff fb70 	bl	80001d0 <strlen>
 8000af0:	4603      	mov	r3, r0
 8000af2:	b29a      	uxth	r2, r3
 8000af4:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000af8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000afc:	480a      	ldr	r0, [pc, #40]	; (8000b28 <StartTaskDHT11+0xd0>)
 8000afe:	f001 febc 	bl	800287a <HAL_UART_Transmit>
    }
    osDelay(2000);
 8000b02:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000b06:	f002 ff8f 	bl	8003a28 <osDelay>
    if (DHT11_Start())
 8000b0a:	e7a9      	b.n	8000a60 <StartTaskDHT11+0x8>
 8000b0c:	2000007c 	.word	0x2000007c
 8000b10:	2000007d 	.word	0x2000007d
 8000b14:	2000007e 	.word	0x2000007e
 8000b18:	2000007f 	.word	0x2000007f
 8000b1c:	20000080 	.word	0x20000080
 8000b20:	08006c80 	.word	0x08006c80
 8000b24:	08006c8c 	.word	0x08006c8c
 8000b28:	200000cc 	.word	0x200000cc

08000b2c <StartTask2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask2 */
void StartTask2(void *argument)
{
 8000b2c:	b590      	push	{r4, r7, lr}
 8000b2e:	b087      	sub	sp, #28
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask2 */
  /* Infinite loop */
	for (;;) {
	    // Hiển thị thông tin "Hello World" qua UART
	    char hello[] = "Hello World!\n";
 8000b34:	4b0c      	ldr	r3, [pc, #48]	; (8000b68 <StartTask2+0x3c>)
 8000b36:	f107 0408 	add.w	r4, r7, #8
 8000b3a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b3c:	c407      	stmia	r4!, {r0, r1, r2}
 8000b3e:	8023      	strh	r3, [r4, #0]
	    HAL_UART_Transmit(&huart2, (uint8_t*)hello, strlen(hello), 1000);
 8000b40:	f107 0308 	add.w	r3, r7, #8
 8000b44:	4618      	mov	r0, r3
 8000b46:	f7ff fb43 	bl	80001d0 <strlen>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	b29a      	uxth	r2, r3
 8000b4e:	f107 0108 	add.w	r1, r7, #8
 8000b52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b56:	4805      	ldr	r0, [pc, #20]	; (8000b6c <StartTask2+0x40>)
 8000b58:	f001 fe8f 	bl	800287a <HAL_UART_Transmit>

	    // Delay để cho hiển thị có thời gian để hoàn thành
	    osDelay(1000);
 8000b5c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b60:	f002 ff62 	bl	8003a28 <osDelay>
	for (;;) {
 8000b64:	e7e6      	b.n	8000b34 <StartTask2+0x8>
 8000b66:	bf00      	nop
 8000b68:	08006c98 	.word	0x08006c98
 8000b6c:	200000cc 	.word	0x200000cc

08000b70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b74:	b672      	cpsid	i
}
 8000b76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b78:	e7fe      	b.n	8000b78 <Error_Handler+0x8>
	...

08000b7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b82:	2300      	movs	r3, #0
 8000b84:	607b      	str	r3, [r7, #4]
 8000b86:	4b12      	ldr	r3, [pc, #72]	; (8000bd0 <HAL_MspInit+0x54>)
 8000b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b8a:	4a11      	ldr	r2, [pc, #68]	; (8000bd0 <HAL_MspInit+0x54>)
 8000b8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b90:	6453      	str	r3, [r2, #68]	; 0x44
 8000b92:	4b0f      	ldr	r3, [pc, #60]	; (8000bd0 <HAL_MspInit+0x54>)
 8000b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b9a:	607b      	str	r3, [r7, #4]
 8000b9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	603b      	str	r3, [r7, #0]
 8000ba2:	4b0b      	ldr	r3, [pc, #44]	; (8000bd0 <HAL_MspInit+0x54>)
 8000ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba6:	4a0a      	ldr	r2, [pc, #40]	; (8000bd0 <HAL_MspInit+0x54>)
 8000ba8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bac:	6413      	str	r3, [r2, #64]	; 0x40
 8000bae:	4b08      	ldr	r3, [pc, #32]	; (8000bd0 <HAL_MspInit+0x54>)
 8000bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bb6:	603b      	str	r3, [r7, #0]
 8000bb8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000bba:	2200      	movs	r2, #0
 8000bbc:	210f      	movs	r1, #15
 8000bbe:	f06f 0001 	mvn.w	r0, #1
 8000bc2:	f000 fa9a 	bl	80010fa <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bc6:	bf00      	nop
 8000bc8:	3708      	adds	r7, #8
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	40023800 	.word	0x40023800

08000bd4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b084      	sub	sp, #16
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4a0e      	ldr	r2, [pc, #56]	; (8000c1c <HAL_TIM_Base_MspInit+0x48>)
 8000be2:	4293      	cmp	r3, r2
 8000be4:	d115      	bne.n	8000c12 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000be6:	2300      	movs	r3, #0
 8000be8:	60fb      	str	r3, [r7, #12]
 8000bea:	4b0d      	ldr	r3, [pc, #52]	; (8000c20 <HAL_TIM_Base_MspInit+0x4c>)
 8000bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bee:	4a0c      	ldr	r2, [pc, #48]	; (8000c20 <HAL_TIM_Base_MspInit+0x4c>)
 8000bf0:	f043 0301 	orr.w	r3, r3, #1
 8000bf4:	6453      	str	r3, [r2, #68]	; 0x44
 8000bf6:	4b0a      	ldr	r3, [pc, #40]	; (8000c20 <HAL_TIM_Base_MspInit+0x4c>)
 8000bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bfa:	f003 0301 	and.w	r3, r3, #1
 8000bfe:	60fb      	str	r3, [r7, #12]
 8000c00:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8000c02:	2200      	movs	r2, #0
 8000c04:	2105      	movs	r1, #5
 8000c06:	201b      	movs	r0, #27
 8000c08:	f000 fa77 	bl	80010fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000c0c:	201b      	movs	r0, #27
 8000c0e:	f000 fa90 	bl	8001132 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000c12:	bf00      	nop
 8000c14:	3710      	adds	r7, #16
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	40010000 	.word	0x40010000
 8000c20:	40023800 	.word	0x40023800

08000c24 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b08a      	sub	sp, #40	; 0x28
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c2c:	f107 0314 	add.w	r3, r7, #20
 8000c30:	2200      	movs	r2, #0
 8000c32:	601a      	str	r2, [r3, #0]
 8000c34:	605a      	str	r2, [r3, #4]
 8000c36:	609a      	str	r2, [r3, #8]
 8000c38:	60da      	str	r2, [r3, #12]
 8000c3a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4a1d      	ldr	r2, [pc, #116]	; (8000cb8 <HAL_UART_MspInit+0x94>)
 8000c42:	4293      	cmp	r3, r2
 8000c44:	d133      	bne.n	8000cae <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c46:	2300      	movs	r3, #0
 8000c48:	613b      	str	r3, [r7, #16]
 8000c4a:	4b1c      	ldr	r3, [pc, #112]	; (8000cbc <HAL_UART_MspInit+0x98>)
 8000c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c4e:	4a1b      	ldr	r2, [pc, #108]	; (8000cbc <HAL_UART_MspInit+0x98>)
 8000c50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c54:	6413      	str	r3, [r2, #64]	; 0x40
 8000c56:	4b19      	ldr	r3, [pc, #100]	; (8000cbc <HAL_UART_MspInit+0x98>)
 8000c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c5e:	613b      	str	r3, [r7, #16]
 8000c60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c62:	2300      	movs	r3, #0
 8000c64:	60fb      	str	r3, [r7, #12]
 8000c66:	4b15      	ldr	r3, [pc, #84]	; (8000cbc <HAL_UART_MspInit+0x98>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6a:	4a14      	ldr	r2, [pc, #80]	; (8000cbc <HAL_UART_MspInit+0x98>)
 8000c6c:	f043 0301 	orr.w	r3, r3, #1
 8000c70:	6313      	str	r3, [r2, #48]	; 0x30
 8000c72:	4b12      	ldr	r3, [pc, #72]	; (8000cbc <HAL_UART_MspInit+0x98>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c76:	f003 0301 	and.w	r3, r3, #1
 8000c7a:	60fb      	str	r3, [r7, #12]
 8000c7c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000c7e:	230c      	movs	r3, #12
 8000c80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c82:	2302      	movs	r3, #2
 8000c84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c86:	2300      	movs	r3, #0
 8000c88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c8a:	2303      	movs	r3, #3
 8000c8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c8e:	2307      	movs	r3, #7
 8000c90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c92:	f107 0314 	add.w	r3, r7, #20
 8000c96:	4619      	mov	r1, r3
 8000c98:	4809      	ldr	r0, [pc, #36]	; (8000cc0 <HAL_UART_MspInit+0x9c>)
 8000c9a:	f000 faf7 	bl	800128c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	2105      	movs	r1, #5
 8000ca2:	2026      	movs	r0, #38	; 0x26
 8000ca4:	f000 fa29 	bl	80010fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000ca8:	2026      	movs	r0, #38	; 0x26
 8000caa:	f000 fa42 	bl	8001132 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000cae:	bf00      	nop
 8000cb0:	3728      	adds	r7, #40	; 0x28
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	40004400 	.word	0x40004400
 8000cbc:	40023800 	.word	0x40023800
 8000cc0:	40020000 	.word	0x40020000

08000cc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cc8:	e7fe      	b.n	8000cc8 <NMI_Handler+0x4>

08000cca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cca:	b480      	push	{r7}
 8000ccc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cce:	e7fe      	b.n	8000cce <HardFault_Handler+0x4>

08000cd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cd4:	e7fe      	b.n	8000cd4 <MemManage_Handler+0x4>

08000cd6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cd6:	b480      	push	{r7}
 8000cd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cda:	e7fe      	b.n	8000cda <BusFault_Handler+0x4>

08000cdc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ce0:	e7fe      	b.n	8000ce0 <UsageFault_Handler+0x4>

08000ce2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ce2:	b480      	push	{r7}
 8000ce4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ce6:	bf00      	nop
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cee:	4770      	bx	lr

08000cf0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cf4:	f000 f8e2 	bl	8000ebc <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000cf8:	f004 faa4 	bl	8005244 <xTaskGetSchedulerState>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b01      	cmp	r3, #1
 8000d00:	d001      	beq.n	8000d06 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000d02:	f005 f889 	bl	8005e18 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d06:	bf00      	nop
 8000d08:	bd80      	pop	{r7, pc}
	...

08000d0c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000d10:	4802      	ldr	r0, [pc, #8]	; (8000d1c <TIM1_CC_IRQHandler+0x10>)
 8000d12:	f001 f999 	bl	8002048 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000d16:	bf00      	nop
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	20000084 	.word	0x20000084

08000d20 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000d24:	4802      	ldr	r0, [pc, #8]	; (8000d30 <USART2_IRQHandler+0x10>)
 8000d26:	f001 fe3b 	bl	80029a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000d2a:	bf00      	nop
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	200000cc 	.word	0x200000cc

08000d34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b086      	sub	sp, #24
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d3c:	4a14      	ldr	r2, [pc, #80]	; (8000d90 <_sbrk+0x5c>)
 8000d3e:	4b15      	ldr	r3, [pc, #84]	; (8000d94 <_sbrk+0x60>)
 8000d40:	1ad3      	subs	r3, r2, r3
 8000d42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d48:	4b13      	ldr	r3, [pc, #76]	; (8000d98 <_sbrk+0x64>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d102      	bne.n	8000d56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d50:	4b11      	ldr	r3, [pc, #68]	; (8000d98 <_sbrk+0x64>)
 8000d52:	4a12      	ldr	r2, [pc, #72]	; (8000d9c <_sbrk+0x68>)
 8000d54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d56:	4b10      	ldr	r3, [pc, #64]	; (8000d98 <_sbrk+0x64>)
 8000d58:	681a      	ldr	r2, [r3, #0]
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	4413      	add	r3, r2
 8000d5e:	693a      	ldr	r2, [r7, #16]
 8000d60:	429a      	cmp	r2, r3
 8000d62:	d207      	bcs.n	8000d74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d64:	f005 fafa 	bl	800635c <__errno>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	220c      	movs	r2, #12
 8000d6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d6e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d72:	e009      	b.n	8000d88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d74:	4b08      	ldr	r3, [pc, #32]	; (8000d98 <_sbrk+0x64>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d7a:	4b07      	ldr	r3, [pc, #28]	; (8000d98 <_sbrk+0x64>)
 8000d7c:	681a      	ldr	r2, [r3, #0]
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	4413      	add	r3, r2
 8000d82:	4a05      	ldr	r2, [pc, #20]	; (8000d98 <_sbrk+0x64>)
 8000d84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d86:	68fb      	ldr	r3, [r7, #12]
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	3718      	adds	r7, #24
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	20020000 	.word	0x20020000
 8000d94:	00000400 	.word	0x00000400
 8000d98:	20000118 	.word	0x20000118
 8000d9c:	20004bb8 	.word	0x20004bb8

08000da0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000da4:	4b06      	ldr	r3, [pc, #24]	; (8000dc0 <SystemInit+0x20>)
 8000da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000daa:	4a05      	ldr	r2, [pc, #20]	; (8000dc0 <SystemInit+0x20>)
 8000dac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000db0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000db4:	bf00      	nop
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop
 8000dc0:	e000ed00 	.word	0xe000ed00

08000dc4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000dc4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dfc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000dc8:	480d      	ldr	r0, [pc, #52]	; (8000e00 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000dca:	490e      	ldr	r1, [pc, #56]	; (8000e04 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000dcc:	4a0e      	ldr	r2, [pc, #56]	; (8000e08 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000dce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dd0:	e002      	b.n	8000dd8 <LoopCopyDataInit>

08000dd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dd6:	3304      	adds	r3, #4

08000dd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ddc:	d3f9      	bcc.n	8000dd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dde:	4a0b      	ldr	r2, [pc, #44]	; (8000e0c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000de0:	4c0b      	ldr	r4, [pc, #44]	; (8000e10 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000de2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000de4:	e001      	b.n	8000dea <LoopFillZerobss>

08000de6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000de6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000de8:	3204      	adds	r2, #4

08000dea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dec:	d3fb      	bcc.n	8000de6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000dee:	f7ff ffd7 	bl	8000da0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000df2:	f005 fab9 	bl	8006368 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000df6:	f7ff fca7 	bl	8000748 <main>
  bx  lr    
 8000dfa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000dfc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e04:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000e08:	08006d64 	.word	0x08006d64
  ldr r2, =_sbss
 8000e0c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000e10:	20004bb8 	.word	0x20004bb8

08000e14 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e14:	e7fe      	b.n	8000e14 <ADC_IRQHandler>
	...

08000e18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e1c:	4b0e      	ldr	r3, [pc, #56]	; (8000e58 <HAL_Init+0x40>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a0d      	ldr	r2, [pc, #52]	; (8000e58 <HAL_Init+0x40>)
 8000e22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e26:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e28:	4b0b      	ldr	r3, [pc, #44]	; (8000e58 <HAL_Init+0x40>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a0a      	ldr	r2, [pc, #40]	; (8000e58 <HAL_Init+0x40>)
 8000e2e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e32:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e34:	4b08      	ldr	r3, [pc, #32]	; (8000e58 <HAL_Init+0x40>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4a07      	ldr	r2, [pc, #28]	; (8000e58 <HAL_Init+0x40>)
 8000e3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e3e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e40:	2003      	movs	r0, #3
 8000e42:	f000 f94f 	bl	80010e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e46:	200f      	movs	r0, #15
 8000e48:	f000 f808 	bl	8000e5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e4c:	f7ff fe96 	bl	8000b7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e50:	2300      	movs	r3, #0
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	40023c00 	.word	0x40023c00

08000e5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e64:	4b12      	ldr	r3, [pc, #72]	; (8000eb0 <HAL_InitTick+0x54>)
 8000e66:	681a      	ldr	r2, [r3, #0]
 8000e68:	4b12      	ldr	r3, [pc, #72]	; (8000eb4 <HAL_InitTick+0x58>)
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e72:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e76:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f000 f967 	bl	800114e <HAL_SYSTICK_Config>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d001      	beq.n	8000e8a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e86:	2301      	movs	r3, #1
 8000e88:	e00e      	b.n	8000ea8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	2b0f      	cmp	r3, #15
 8000e8e:	d80a      	bhi.n	8000ea6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e90:	2200      	movs	r2, #0
 8000e92:	6879      	ldr	r1, [r7, #4]
 8000e94:	f04f 30ff 	mov.w	r0, #4294967295
 8000e98:	f000 f92f 	bl	80010fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e9c:	4a06      	ldr	r2, [pc, #24]	; (8000eb8 <HAL_InitTick+0x5c>)
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	e000      	b.n	8000ea8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ea6:	2301      	movs	r3, #1
}
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	3708      	adds	r7, #8
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	20000000 	.word	0x20000000
 8000eb4:	20000008 	.word	0x20000008
 8000eb8:	20000004 	.word	0x20000004

08000ebc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ec0:	4b06      	ldr	r3, [pc, #24]	; (8000edc <HAL_IncTick+0x20>)
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	461a      	mov	r2, r3
 8000ec6:	4b06      	ldr	r3, [pc, #24]	; (8000ee0 <HAL_IncTick+0x24>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	4413      	add	r3, r2
 8000ecc:	4a04      	ldr	r2, [pc, #16]	; (8000ee0 <HAL_IncTick+0x24>)
 8000ece:	6013      	str	r3, [r2, #0]
}
 8000ed0:	bf00      	nop
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop
 8000edc:	20000008 	.word	0x20000008
 8000ee0:	2000011c 	.word	0x2000011c

08000ee4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ee8:	4b03      	ldr	r3, [pc, #12]	; (8000ef8 <HAL_GetTick+0x14>)
 8000eea:	681b      	ldr	r3, [r3, #0]
}
 8000eec:	4618      	mov	r0, r3
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	2000011c 	.word	0x2000011c

08000efc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b084      	sub	sp, #16
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f04:	f7ff ffee 	bl	8000ee4 <HAL_GetTick>
 8000f08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f14:	d005      	beq.n	8000f22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f16:	4b0a      	ldr	r3, [pc, #40]	; (8000f40 <HAL_Delay+0x44>)
 8000f18:	781b      	ldrb	r3, [r3, #0]
 8000f1a:	461a      	mov	r2, r3
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	4413      	add	r3, r2
 8000f20:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f22:	bf00      	nop
 8000f24:	f7ff ffde 	bl	8000ee4 <HAL_GetTick>
 8000f28:	4602      	mov	r2, r0
 8000f2a:	68bb      	ldr	r3, [r7, #8]
 8000f2c:	1ad3      	subs	r3, r2, r3
 8000f2e:	68fa      	ldr	r2, [r7, #12]
 8000f30:	429a      	cmp	r2, r3
 8000f32:	d8f7      	bhi.n	8000f24 <HAL_Delay+0x28>
  {
  }
}
 8000f34:	bf00      	nop
 8000f36:	bf00      	nop
 8000f38:	3710      	adds	r7, #16
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	20000008 	.word	0x20000008

08000f44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b085      	sub	sp, #20
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	f003 0307 	and.w	r3, r3, #7
 8000f52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f54:	4b0c      	ldr	r3, [pc, #48]	; (8000f88 <__NVIC_SetPriorityGrouping+0x44>)
 8000f56:	68db      	ldr	r3, [r3, #12]
 8000f58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f5a:	68ba      	ldr	r2, [r7, #8]
 8000f5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f60:	4013      	ands	r3, r2
 8000f62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f68:	68bb      	ldr	r3, [r7, #8]
 8000f6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f76:	4a04      	ldr	r2, [pc, #16]	; (8000f88 <__NVIC_SetPriorityGrouping+0x44>)
 8000f78:	68bb      	ldr	r3, [r7, #8]
 8000f7a:	60d3      	str	r3, [r2, #12]
}
 8000f7c:	bf00      	nop
 8000f7e:	3714      	adds	r7, #20
 8000f80:	46bd      	mov	sp, r7
 8000f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f86:	4770      	bx	lr
 8000f88:	e000ed00 	.word	0xe000ed00

08000f8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f90:	4b04      	ldr	r3, [pc, #16]	; (8000fa4 <__NVIC_GetPriorityGrouping+0x18>)
 8000f92:	68db      	ldr	r3, [r3, #12]
 8000f94:	0a1b      	lsrs	r3, r3, #8
 8000f96:	f003 0307 	and.w	r3, r3, #7
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr
 8000fa4:	e000ed00 	.word	0xe000ed00

08000fa8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b083      	sub	sp, #12
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	4603      	mov	r3, r0
 8000fb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	db0b      	blt.n	8000fd2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fba:	79fb      	ldrb	r3, [r7, #7]
 8000fbc:	f003 021f 	and.w	r2, r3, #31
 8000fc0:	4907      	ldr	r1, [pc, #28]	; (8000fe0 <__NVIC_EnableIRQ+0x38>)
 8000fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc6:	095b      	lsrs	r3, r3, #5
 8000fc8:	2001      	movs	r0, #1
 8000fca:	fa00 f202 	lsl.w	r2, r0, r2
 8000fce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fd2:	bf00      	nop
 8000fd4:	370c      	adds	r7, #12
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop
 8000fe0:	e000e100 	.word	0xe000e100

08000fe4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	4603      	mov	r3, r0
 8000fec:	6039      	str	r1, [r7, #0]
 8000fee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ff0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	db0a      	blt.n	800100e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	b2da      	uxtb	r2, r3
 8000ffc:	490c      	ldr	r1, [pc, #48]	; (8001030 <__NVIC_SetPriority+0x4c>)
 8000ffe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001002:	0112      	lsls	r2, r2, #4
 8001004:	b2d2      	uxtb	r2, r2
 8001006:	440b      	add	r3, r1
 8001008:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800100c:	e00a      	b.n	8001024 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	b2da      	uxtb	r2, r3
 8001012:	4908      	ldr	r1, [pc, #32]	; (8001034 <__NVIC_SetPriority+0x50>)
 8001014:	79fb      	ldrb	r3, [r7, #7]
 8001016:	f003 030f 	and.w	r3, r3, #15
 800101a:	3b04      	subs	r3, #4
 800101c:	0112      	lsls	r2, r2, #4
 800101e:	b2d2      	uxtb	r2, r2
 8001020:	440b      	add	r3, r1
 8001022:	761a      	strb	r2, [r3, #24]
}
 8001024:	bf00      	nop
 8001026:	370c      	adds	r7, #12
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr
 8001030:	e000e100 	.word	0xe000e100
 8001034:	e000ed00 	.word	0xe000ed00

08001038 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001038:	b480      	push	{r7}
 800103a:	b089      	sub	sp, #36	; 0x24
 800103c:	af00      	add	r7, sp, #0
 800103e:	60f8      	str	r0, [r7, #12]
 8001040:	60b9      	str	r1, [r7, #8]
 8001042:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	f003 0307 	and.w	r3, r3, #7
 800104a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800104c:	69fb      	ldr	r3, [r7, #28]
 800104e:	f1c3 0307 	rsb	r3, r3, #7
 8001052:	2b04      	cmp	r3, #4
 8001054:	bf28      	it	cs
 8001056:	2304      	movcs	r3, #4
 8001058:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	3304      	adds	r3, #4
 800105e:	2b06      	cmp	r3, #6
 8001060:	d902      	bls.n	8001068 <NVIC_EncodePriority+0x30>
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	3b03      	subs	r3, #3
 8001066:	e000      	b.n	800106a <NVIC_EncodePriority+0x32>
 8001068:	2300      	movs	r3, #0
 800106a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800106c:	f04f 32ff 	mov.w	r2, #4294967295
 8001070:	69bb      	ldr	r3, [r7, #24]
 8001072:	fa02 f303 	lsl.w	r3, r2, r3
 8001076:	43da      	mvns	r2, r3
 8001078:	68bb      	ldr	r3, [r7, #8]
 800107a:	401a      	ands	r2, r3
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001080:	f04f 31ff 	mov.w	r1, #4294967295
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	fa01 f303 	lsl.w	r3, r1, r3
 800108a:	43d9      	mvns	r1, r3
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001090:	4313      	orrs	r3, r2
         );
}
 8001092:	4618      	mov	r0, r3
 8001094:	3724      	adds	r7, #36	; 0x24
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr
	...

080010a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	3b01      	subs	r3, #1
 80010ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010b0:	d301      	bcc.n	80010b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010b2:	2301      	movs	r3, #1
 80010b4:	e00f      	b.n	80010d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010b6:	4a0a      	ldr	r2, [pc, #40]	; (80010e0 <SysTick_Config+0x40>)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	3b01      	subs	r3, #1
 80010bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010be:	210f      	movs	r1, #15
 80010c0:	f04f 30ff 	mov.w	r0, #4294967295
 80010c4:	f7ff ff8e 	bl	8000fe4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010c8:	4b05      	ldr	r3, [pc, #20]	; (80010e0 <SysTick_Config+0x40>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010ce:	4b04      	ldr	r3, [pc, #16]	; (80010e0 <SysTick_Config+0x40>)
 80010d0:	2207      	movs	r2, #7
 80010d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010d4:	2300      	movs	r3, #0
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	3708      	adds	r7, #8
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	e000e010 	.word	0xe000e010

080010e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010ec:	6878      	ldr	r0, [r7, #4]
 80010ee:	f7ff ff29 	bl	8000f44 <__NVIC_SetPriorityGrouping>
}
 80010f2:	bf00      	nop
 80010f4:	3708      	adds	r7, #8
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}

080010fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010fa:	b580      	push	{r7, lr}
 80010fc:	b086      	sub	sp, #24
 80010fe:	af00      	add	r7, sp, #0
 8001100:	4603      	mov	r3, r0
 8001102:	60b9      	str	r1, [r7, #8]
 8001104:	607a      	str	r2, [r7, #4]
 8001106:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001108:	2300      	movs	r3, #0
 800110a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800110c:	f7ff ff3e 	bl	8000f8c <__NVIC_GetPriorityGrouping>
 8001110:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001112:	687a      	ldr	r2, [r7, #4]
 8001114:	68b9      	ldr	r1, [r7, #8]
 8001116:	6978      	ldr	r0, [r7, #20]
 8001118:	f7ff ff8e 	bl	8001038 <NVIC_EncodePriority>
 800111c:	4602      	mov	r2, r0
 800111e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001122:	4611      	mov	r1, r2
 8001124:	4618      	mov	r0, r3
 8001126:	f7ff ff5d 	bl	8000fe4 <__NVIC_SetPriority>
}
 800112a:	bf00      	nop
 800112c:	3718      	adds	r7, #24
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}

08001132 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001132:	b580      	push	{r7, lr}
 8001134:	b082      	sub	sp, #8
 8001136:	af00      	add	r7, sp, #0
 8001138:	4603      	mov	r3, r0
 800113a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800113c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001140:	4618      	mov	r0, r3
 8001142:	f7ff ff31 	bl	8000fa8 <__NVIC_EnableIRQ>
}
 8001146:	bf00      	nop
 8001148:	3708      	adds	r7, #8
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}

0800114e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800114e:	b580      	push	{r7, lr}
 8001150:	b082      	sub	sp, #8
 8001152:	af00      	add	r7, sp, #0
 8001154:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001156:	6878      	ldr	r0, [r7, #4]
 8001158:	f7ff ffa2 	bl	80010a0 <SysTick_Config>
 800115c:	4603      	mov	r3, r0
}
 800115e:	4618      	mov	r0, r3
 8001160:	3708      	adds	r7, #8
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}

08001166 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001166:	b580      	push	{r7, lr}
 8001168:	b084      	sub	sp, #16
 800116a:	af00      	add	r7, sp, #0
 800116c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001172:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001174:	f7ff feb6 	bl	8000ee4 <HAL_GetTick>
 8001178:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001180:	b2db      	uxtb	r3, r3
 8001182:	2b02      	cmp	r3, #2
 8001184:	d008      	beq.n	8001198 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	2280      	movs	r2, #128	; 0x80
 800118a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2200      	movs	r2, #0
 8001190:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001194:	2301      	movs	r3, #1
 8001196:	e052      	b.n	800123e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	681a      	ldr	r2, [r3, #0]
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f022 0216 	bic.w	r2, r2, #22
 80011a6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	695a      	ldr	r2, [r3, #20]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80011b6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d103      	bne.n	80011c8 <HAL_DMA_Abort+0x62>
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d007      	beq.n	80011d8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	681a      	ldr	r2, [r3, #0]
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f022 0208 	bic.w	r2, r2, #8
 80011d6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	681a      	ldr	r2, [r3, #0]
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f022 0201 	bic.w	r2, r2, #1
 80011e6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80011e8:	e013      	b.n	8001212 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80011ea:	f7ff fe7b 	bl	8000ee4 <HAL_GetTick>
 80011ee:	4602      	mov	r2, r0
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	1ad3      	subs	r3, r2, r3
 80011f4:	2b05      	cmp	r3, #5
 80011f6:	d90c      	bls.n	8001212 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2220      	movs	r2, #32
 80011fc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	2203      	movs	r2, #3
 8001202:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	2200      	movs	r2, #0
 800120a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800120e:	2303      	movs	r3, #3
 8001210:	e015      	b.n	800123e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f003 0301 	and.w	r3, r3, #1
 800121c:	2b00      	cmp	r3, #0
 800121e:	d1e4      	bne.n	80011ea <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001224:	223f      	movs	r2, #63	; 0x3f
 8001226:	409a      	lsls	r2, r3
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2201      	movs	r2, #1
 8001230:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2200      	movs	r2, #0
 8001238:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800123c:	2300      	movs	r3, #0
}
 800123e:	4618      	mov	r0, r3
 8001240:	3710      	adds	r7, #16
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}

08001246 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001246:	b480      	push	{r7}
 8001248:	b083      	sub	sp, #12
 800124a:	af00      	add	r7, sp, #0
 800124c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001254:	b2db      	uxtb	r3, r3
 8001256:	2b02      	cmp	r3, #2
 8001258:	d004      	beq.n	8001264 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	2280      	movs	r2, #128	; 0x80
 800125e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001260:	2301      	movs	r3, #1
 8001262:	e00c      	b.n	800127e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2205      	movs	r2, #5
 8001268:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	681a      	ldr	r2, [r3, #0]
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f022 0201 	bic.w	r2, r2, #1
 800127a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800127c:	2300      	movs	r3, #0
}
 800127e:	4618      	mov	r0, r3
 8001280:	370c      	adds	r7, #12
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr
	...

0800128c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800128c:	b480      	push	{r7}
 800128e:	b089      	sub	sp, #36	; 0x24
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
 8001294:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001296:	2300      	movs	r3, #0
 8001298:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800129a:	2300      	movs	r3, #0
 800129c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800129e:	2300      	movs	r3, #0
 80012a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012a2:	2300      	movs	r3, #0
 80012a4:	61fb      	str	r3, [r7, #28]
 80012a6:	e16b      	b.n	8001580 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80012a8:	2201      	movs	r2, #1
 80012aa:	69fb      	ldr	r3, [r7, #28]
 80012ac:	fa02 f303 	lsl.w	r3, r2, r3
 80012b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	697a      	ldr	r2, [r7, #20]
 80012b8:	4013      	ands	r3, r2
 80012ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80012bc:	693a      	ldr	r2, [r7, #16]
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	429a      	cmp	r2, r3
 80012c2:	f040 815a 	bne.w	800157a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	f003 0303 	and.w	r3, r3, #3
 80012ce:	2b01      	cmp	r3, #1
 80012d0:	d005      	beq.n	80012de <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012da:	2b02      	cmp	r3, #2
 80012dc:	d130      	bne.n	8001340 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	689b      	ldr	r3, [r3, #8]
 80012e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80012e4:	69fb      	ldr	r3, [r7, #28]
 80012e6:	005b      	lsls	r3, r3, #1
 80012e8:	2203      	movs	r2, #3
 80012ea:	fa02 f303 	lsl.w	r3, r2, r3
 80012ee:	43db      	mvns	r3, r3
 80012f0:	69ba      	ldr	r2, [r7, #24]
 80012f2:	4013      	ands	r3, r2
 80012f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	68da      	ldr	r2, [r3, #12]
 80012fa:	69fb      	ldr	r3, [r7, #28]
 80012fc:	005b      	lsls	r3, r3, #1
 80012fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001302:	69ba      	ldr	r2, [r7, #24]
 8001304:	4313      	orrs	r3, r2
 8001306:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	69ba      	ldr	r2, [r7, #24]
 800130c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001314:	2201      	movs	r2, #1
 8001316:	69fb      	ldr	r3, [r7, #28]
 8001318:	fa02 f303 	lsl.w	r3, r2, r3
 800131c:	43db      	mvns	r3, r3
 800131e:	69ba      	ldr	r2, [r7, #24]
 8001320:	4013      	ands	r3, r2
 8001322:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	091b      	lsrs	r3, r3, #4
 800132a:	f003 0201 	and.w	r2, r3, #1
 800132e:	69fb      	ldr	r3, [r7, #28]
 8001330:	fa02 f303 	lsl.w	r3, r2, r3
 8001334:	69ba      	ldr	r2, [r7, #24]
 8001336:	4313      	orrs	r3, r2
 8001338:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	69ba      	ldr	r2, [r7, #24]
 800133e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	f003 0303 	and.w	r3, r3, #3
 8001348:	2b03      	cmp	r3, #3
 800134a:	d017      	beq.n	800137c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	68db      	ldr	r3, [r3, #12]
 8001350:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	005b      	lsls	r3, r3, #1
 8001356:	2203      	movs	r2, #3
 8001358:	fa02 f303 	lsl.w	r3, r2, r3
 800135c:	43db      	mvns	r3, r3
 800135e:	69ba      	ldr	r2, [r7, #24]
 8001360:	4013      	ands	r3, r2
 8001362:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	689a      	ldr	r2, [r3, #8]
 8001368:	69fb      	ldr	r3, [r7, #28]
 800136a:	005b      	lsls	r3, r3, #1
 800136c:	fa02 f303 	lsl.w	r3, r2, r3
 8001370:	69ba      	ldr	r2, [r7, #24]
 8001372:	4313      	orrs	r3, r2
 8001374:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	69ba      	ldr	r2, [r7, #24]
 800137a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	f003 0303 	and.w	r3, r3, #3
 8001384:	2b02      	cmp	r3, #2
 8001386:	d123      	bne.n	80013d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001388:	69fb      	ldr	r3, [r7, #28]
 800138a:	08da      	lsrs	r2, r3, #3
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	3208      	adds	r2, #8
 8001390:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001394:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001396:	69fb      	ldr	r3, [r7, #28]
 8001398:	f003 0307 	and.w	r3, r3, #7
 800139c:	009b      	lsls	r3, r3, #2
 800139e:	220f      	movs	r2, #15
 80013a0:	fa02 f303 	lsl.w	r3, r2, r3
 80013a4:	43db      	mvns	r3, r3
 80013a6:	69ba      	ldr	r2, [r7, #24]
 80013a8:	4013      	ands	r3, r2
 80013aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	691a      	ldr	r2, [r3, #16]
 80013b0:	69fb      	ldr	r3, [r7, #28]
 80013b2:	f003 0307 	and.w	r3, r3, #7
 80013b6:	009b      	lsls	r3, r3, #2
 80013b8:	fa02 f303 	lsl.w	r3, r2, r3
 80013bc:	69ba      	ldr	r2, [r7, #24]
 80013be:	4313      	orrs	r3, r2
 80013c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80013c2:	69fb      	ldr	r3, [r7, #28]
 80013c4:	08da      	lsrs	r2, r3, #3
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	3208      	adds	r2, #8
 80013ca:	69b9      	ldr	r1, [r7, #24]
 80013cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80013d6:	69fb      	ldr	r3, [r7, #28]
 80013d8:	005b      	lsls	r3, r3, #1
 80013da:	2203      	movs	r2, #3
 80013dc:	fa02 f303 	lsl.w	r3, r2, r3
 80013e0:	43db      	mvns	r3, r3
 80013e2:	69ba      	ldr	r2, [r7, #24]
 80013e4:	4013      	ands	r3, r2
 80013e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	f003 0203 	and.w	r2, r3, #3
 80013f0:	69fb      	ldr	r3, [r7, #28]
 80013f2:	005b      	lsls	r3, r3, #1
 80013f4:	fa02 f303 	lsl.w	r3, r2, r3
 80013f8:	69ba      	ldr	r2, [r7, #24]
 80013fa:	4313      	orrs	r3, r2
 80013fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	69ba      	ldr	r2, [r7, #24]
 8001402:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800140c:	2b00      	cmp	r3, #0
 800140e:	f000 80b4 	beq.w	800157a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001412:	2300      	movs	r3, #0
 8001414:	60fb      	str	r3, [r7, #12]
 8001416:	4b60      	ldr	r3, [pc, #384]	; (8001598 <HAL_GPIO_Init+0x30c>)
 8001418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800141a:	4a5f      	ldr	r2, [pc, #380]	; (8001598 <HAL_GPIO_Init+0x30c>)
 800141c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001420:	6453      	str	r3, [r2, #68]	; 0x44
 8001422:	4b5d      	ldr	r3, [pc, #372]	; (8001598 <HAL_GPIO_Init+0x30c>)
 8001424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001426:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800142a:	60fb      	str	r3, [r7, #12]
 800142c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800142e:	4a5b      	ldr	r2, [pc, #364]	; (800159c <HAL_GPIO_Init+0x310>)
 8001430:	69fb      	ldr	r3, [r7, #28]
 8001432:	089b      	lsrs	r3, r3, #2
 8001434:	3302      	adds	r3, #2
 8001436:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800143a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800143c:	69fb      	ldr	r3, [r7, #28]
 800143e:	f003 0303 	and.w	r3, r3, #3
 8001442:	009b      	lsls	r3, r3, #2
 8001444:	220f      	movs	r2, #15
 8001446:	fa02 f303 	lsl.w	r3, r2, r3
 800144a:	43db      	mvns	r3, r3
 800144c:	69ba      	ldr	r2, [r7, #24]
 800144e:	4013      	ands	r3, r2
 8001450:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	4a52      	ldr	r2, [pc, #328]	; (80015a0 <HAL_GPIO_Init+0x314>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d02b      	beq.n	80014b2 <HAL_GPIO_Init+0x226>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	4a51      	ldr	r2, [pc, #324]	; (80015a4 <HAL_GPIO_Init+0x318>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d025      	beq.n	80014ae <HAL_GPIO_Init+0x222>
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	4a50      	ldr	r2, [pc, #320]	; (80015a8 <HAL_GPIO_Init+0x31c>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d01f      	beq.n	80014aa <HAL_GPIO_Init+0x21e>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	4a4f      	ldr	r2, [pc, #316]	; (80015ac <HAL_GPIO_Init+0x320>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d019      	beq.n	80014a6 <HAL_GPIO_Init+0x21a>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	4a4e      	ldr	r2, [pc, #312]	; (80015b0 <HAL_GPIO_Init+0x324>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d013      	beq.n	80014a2 <HAL_GPIO_Init+0x216>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	4a4d      	ldr	r2, [pc, #308]	; (80015b4 <HAL_GPIO_Init+0x328>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d00d      	beq.n	800149e <HAL_GPIO_Init+0x212>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	4a4c      	ldr	r2, [pc, #304]	; (80015b8 <HAL_GPIO_Init+0x32c>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d007      	beq.n	800149a <HAL_GPIO_Init+0x20e>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	4a4b      	ldr	r2, [pc, #300]	; (80015bc <HAL_GPIO_Init+0x330>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d101      	bne.n	8001496 <HAL_GPIO_Init+0x20a>
 8001492:	2307      	movs	r3, #7
 8001494:	e00e      	b.n	80014b4 <HAL_GPIO_Init+0x228>
 8001496:	2308      	movs	r3, #8
 8001498:	e00c      	b.n	80014b4 <HAL_GPIO_Init+0x228>
 800149a:	2306      	movs	r3, #6
 800149c:	e00a      	b.n	80014b4 <HAL_GPIO_Init+0x228>
 800149e:	2305      	movs	r3, #5
 80014a0:	e008      	b.n	80014b4 <HAL_GPIO_Init+0x228>
 80014a2:	2304      	movs	r3, #4
 80014a4:	e006      	b.n	80014b4 <HAL_GPIO_Init+0x228>
 80014a6:	2303      	movs	r3, #3
 80014a8:	e004      	b.n	80014b4 <HAL_GPIO_Init+0x228>
 80014aa:	2302      	movs	r3, #2
 80014ac:	e002      	b.n	80014b4 <HAL_GPIO_Init+0x228>
 80014ae:	2301      	movs	r3, #1
 80014b0:	e000      	b.n	80014b4 <HAL_GPIO_Init+0x228>
 80014b2:	2300      	movs	r3, #0
 80014b4:	69fa      	ldr	r2, [r7, #28]
 80014b6:	f002 0203 	and.w	r2, r2, #3
 80014ba:	0092      	lsls	r2, r2, #2
 80014bc:	4093      	lsls	r3, r2
 80014be:	69ba      	ldr	r2, [r7, #24]
 80014c0:	4313      	orrs	r3, r2
 80014c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014c4:	4935      	ldr	r1, [pc, #212]	; (800159c <HAL_GPIO_Init+0x310>)
 80014c6:	69fb      	ldr	r3, [r7, #28]
 80014c8:	089b      	lsrs	r3, r3, #2
 80014ca:	3302      	adds	r3, #2
 80014cc:	69ba      	ldr	r2, [r7, #24]
 80014ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014d2:	4b3b      	ldr	r3, [pc, #236]	; (80015c0 <HAL_GPIO_Init+0x334>)
 80014d4:	689b      	ldr	r3, [r3, #8]
 80014d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014d8:	693b      	ldr	r3, [r7, #16]
 80014da:	43db      	mvns	r3, r3
 80014dc:	69ba      	ldr	r2, [r7, #24]
 80014de:	4013      	ands	r3, r2
 80014e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d003      	beq.n	80014f6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80014ee:	69ba      	ldr	r2, [r7, #24]
 80014f0:	693b      	ldr	r3, [r7, #16]
 80014f2:	4313      	orrs	r3, r2
 80014f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80014f6:	4a32      	ldr	r2, [pc, #200]	; (80015c0 <HAL_GPIO_Init+0x334>)
 80014f8:	69bb      	ldr	r3, [r7, #24]
 80014fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014fc:	4b30      	ldr	r3, [pc, #192]	; (80015c0 <HAL_GPIO_Init+0x334>)
 80014fe:	68db      	ldr	r3, [r3, #12]
 8001500:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001502:	693b      	ldr	r3, [r7, #16]
 8001504:	43db      	mvns	r3, r3
 8001506:	69ba      	ldr	r2, [r7, #24]
 8001508:	4013      	ands	r3, r2
 800150a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001514:	2b00      	cmp	r3, #0
 8001516:	d003      	beq.n	8001520 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001518:	69ba      	ldr	r2, [r7, #24]
 800151a:	693b      	ldr	r3, [r7, #16]
 800151c:	4313      	orrs	r3, r2
 800151e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001520:	4a27      	ldr	r2, [pc, #156]	; (80015c0 <HAL_GPIO_Init+0x334>)
 8001522:	69bb      	ldr	r3, [r7, #24]
 8001524:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001526:	4b26      	ldr	r3, [pc, #152]	; (80015c0 <HAL_GPIO_Init+0x334>)
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	43db      	mvns	r3, r3
 8001530:	69ba      	ldr	r2, [r7, #24]
 8001532:	4013      	ands	r3, r2
 8001534:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800153e:	2b00      	cmp	r3, #0
 8001540:	d003      	beq.n	800154a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001542:	69ba      	ldr	r2, [r7, #24]
 8001544:	693b      	ldr	r3, [r7, #16]
 8001546:	4313      	orrs	r3, r2
 8001548:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800154a:	4a1d      	ldr	r2, [pc, #116]	; (80015c0 <HAL_GPIO_Init+0x334>)
 800154c:	69bb      	ldr	r3, [r7, #24]
 800154e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001550:	4b1b      	ldr	r3, [pc, #108]	; (80015c0 <HAL_GPIO_Init+0x334>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001556:	693b      	ldr	r3, [r7, #16]
 8001558:	43db      	mvns	r3, r3
 800155a:	69ba      	ldr	r2, [r7, #24]
 800155c:	4013      	ands	r3, r2
 800155e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001568:	2b00      	cmp	r3, #0
 800156a:	d003      	beq.n	8001574 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800156c:	69ba      	ldr	r2, [r7, #24]
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	4313      	orrs	r3, r2
 8001572:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001574:	4a12      	ldr	r2, [pc, #72]	; (80015c0 <HAL_GPIO_Init+0x334>)
 8001576:	69bb      	ldr	r3, [r7, #24]
 8001578:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800157a:	69fb      	ldr	r3, [r7, #28]
 800157c:	3301      	adds	r3, #1
 800157e:	61fb      	str	r3, [r7, #28]
 8001580:	69fb      	ldr	r3, [r7, #28]
 8001582:	2b0f      	cmp	r3, #15
 8001584:	f67f ae90 	bls.w	80012a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001588:	bf00      	nop
 800158a:	bf00      	nop
 800158c:	3724      	adds	r7, #36	; 0x24
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	40023800 	.word	0x40023800
 800159c:	40013800 	.word	0x40013800
 80015a0:	40020000 	.word	0x40020000
 80015a4:	40020400 	.word	0x40020400
 80015a8:	40020800 	.word	0x40020800
 80015ac:	40020c00 	.word	0x40020c00
 80015b0:	40021000 	.word	0x40021000
 80015b4:	40021400 	.word	0x40021400
 80015b8:	40021800 	.word	0x40021800
 80015bc:	40021c00 	.word	0x40021c00
 80015c0:	40013c00 	.word	0x40013c00

080015c4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b085      	sub	sp, #20
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
 80015cc:	460b      	mov	r3, r1
 80015ce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	691a      	ldr	r2, [r3, #16]
 80015d4:	887b      	ldrh	r3, [r7, #2]
 80015d6:	4013      	ands	r3, r2
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d002      	beq.n	80015e2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80015dc:	2301      	movs	r3, #1
 80015de:	73fb      	strb	r3, [r7, #15]
 80015e0:	e001      	b.n	80015e6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80015e2:	2300      	movs	r3, #0
 80015e4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80015e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	3714      	adds	r7, #20
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr

080015f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b083      	sub	sp, #12
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
 80015fc:	460b      	mov	r3, r1
 80015fe:	807b      	strh	r3, [r7, #2]
 8001600:	4613      	mov	r3, r2
 8001602:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001604:	787b      	ldrb	r3, [r7, #1]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d003      	beq.n	8001612 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800160a:	887a      	ldrh	r2, [r7, #2]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001610:	e003      	b.n	800161a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001612:	887b      	ldrh	r3, [r7, #2]
 8001614:	041a      	lsls	r2, r3, #16
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	619a      	str	r2, [r3, #24]
}
 800161a:	bf00      	nop
 800161c:	370c      	adds	r7, #12
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr
	...

08001628 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b086      	sub	sp, #24
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d101      	bne.n	800163a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001636:	2301      	movs	r3, #1
 8001638:	e267      	b.n	8001b0a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f003 0301 	and.w	r3, r3, #1
 8001642:	2b00      	cmp	r3, #0
 8001644:	d075      	beq.n	8001732 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001646:	4b88      	ldr	r3, [pc, #544]	; (8001868 <HAL_RCC_OscConfig+0x240>)
 8001648:	689b      	ldr	r3, [r3, #8]
 800164a:	f003 030c 	and.w	r3, r3, #12
 800164e:	2b04      	cmp	r3, #4
 8001650:	d00c      	beq.n	800166c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001652:	4b85      	ldr	r3, [pc, #532]	; (8001868 <HAL_RCC_OscConfig+0x240>)
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800165a:	2b08      	cmp	r3, #8
 800165c:	d112      	bne.n	8001684 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800165e:	4b82      	ldr	r3, [pc, #520]	; (8001868 <HAL_RCC_OscConfig+0x240>)
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001666:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800166a:	d10b      	bne.n	8001684 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800166c:	4b7e      	ldr	r3, [pc, #504]	; (8001868 <HAL_RCC_OscConfig+0x240>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001674:	2b00      	cmp	r3, #0
 8001676:	d05b      	beq.n	8001730 <HAL_RCC_OscConfig+0x108>
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d157      	bne.n	8001730 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001680:	2301      	movs	r3, #1
 8001682:	e242      	b.n	8001b0a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800168c:	d106      	bne.n	800169c <HAL_RCC_OscConfig+0x74>
 800168e:	4b76      	ldr	r3, [pc, #472]	; (8001868 <HAL_RCC_OscConfig+0x240>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a75      	ldr	r2, [pc, #468]	; (8001868 <HAL_RCC_OscConfig+0x240>)
 8001694:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001698:	6013      	str	r3, [r2, #0]
 800169a:	e01d      	b.n	80016d8 <HAL_RCC_OscConfig+0xb0>
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016a4:	d10c      	bne.n	80016c0 <HAL_RCC_OscConfig+0x98>
 80016a6:	4b70      	ldr	r3, [pc, #448]	; (8001868 <HAL_RCC_OscConfig+0x240>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4a6f      	ldr	r2, [pc, #444]	; (8001868 <HAL_RCC_OscConfig+0x240>)
 80016ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016b0:	6013      	str	r3, [r2, #0]
 80016b2:	4b6d      	ldr	r3, [pc, #436]	; (8001868 <HAL_RCC_OscConfig+0x240>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a6c      	ldr	r2, [pc, #432]	; (8001868 <HAL_RCC_OscConfig+0x240>)
 80016b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016bc:	6013      	str	r3, [r2, #0]
 80016be:	e00b      	b.n	80016d8 <HAL_RCC_OscConfig+0xb0>
 80016c0:	4b69      	ldr	r3, [pc, #420]	; (8001868 <HAL_RCC_OscConfig+0x240>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a68      	ldr	r2, [pc, #416]	; (8001868 <HAL_RCC_OscConfig+0x240>)
 80016c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016ca:	6013      	str	r3, [r2, #0]
 80016cc:	4b66      	ldr	r3, [pc, #408]	; (8001868 <HAL_RCC_OscConfig+0x240>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a65      	ldr	r2, [pc, #404]	; (8001868 <HAL_RCC_OscConfig+0x240>)
 80016d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d013      	beq.n	8001708 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016e0:	f7ff fc00 	bl	8000ee4 <HAL_GetTick>
 80016e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016e6:	e008      	b.n	80016fa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016e8:	f7ff fbfc 	bl	8000ee4 <HAL_GetTick>
 80016ec:	4602      	mov	r2, r0
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	2b64      	cmp	r3, #100	; 0x64
 80016f4:	d901      	bls.n	80016fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80016f6:	2303      	movs	r3, #3
 80016f8:	e207      	b.n	8001b0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016fa:	4b5b      	ldr	r3, [pc, #364]	; (8001868 <HAL_RCC_OscConfig+0x240>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001702:	2b00      	cmp	r3, #0
 8001704:	d0f0      	beq.n	80016e8 <HAL_RCC_OscConfig+0xc0>
 8001706:	e014      	b.n	8001732 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001708:	f7ff fbec 	bl	8000ee4 <HAL_GetTick>
 800170c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800170e:	e008      	b.n	8001722 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001710:	f7ff fbe8 	bl	8000ee4 <HAL_GetTick>
 8001714:	4602      	mov	r2, r0
 8001716:	693b      	ldr	r3, [r7, #16]
 8001718:	1ad3      	subs	r3, r2, r3
 800171a:	2b64      	cmp	r3, #100	; 0x64
 800171c:	d901      	bls.n	8001722 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800171e:	2303      	movs	r3, #3
 8001720:	e1f3      	b.n	8001b0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001722:	4b51      	ldr	r3, [pc, #324]	; (8001868 <HAL_RCC_OscConfig+0x240>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800172a:	2b00      	cmp	r3, #0
 800172c:	d1f0      	bne.n	8001710 <HAL_RCC_OscConfig+0xe8>
 800172e:	e000      	b.n	8001732 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001730:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f003 0302 	and.w	r3, r3, #2
 800173a:	2b00      	cmp	r3, #0
 800173c:	d063      	beq.n	8001806 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800173e:	4b4a      	ldr	r3, [pc, #296]	; (8001868 <HAL_RCC_OscConfig+0x240>)
 8001740:	689b      	ldr	r3, [r3, #8]
 8001742:	f003 030c 	and.w	r3, r3, #12
 8001746:	2b00      	cmp	r3, #0
 8001748:	d00b      	beq.n	8001762 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800174a:	4b47      	ldr	r3, [pc, #284]	; (8001868 <HAL_RCC_OscConfig+0x240>)
 800174c:	689b      	ldr	r3, [r3, #8]
 800174e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001752:	2b08      	cmp	r3, #8
 8001754:	d11c      	bne.n	8001790 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001756:	4b44      	ldr	r3, [pc, #272]	; (8001868 <HAL_RCC_OscConfig+0x240>)
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800175e:	2b00      	cmp	r3, #0
 8001760:	d116      	bne.n	8001790 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001762:	4b41      	ldr	r3, [pc, #260]	; (8001868 <HAL_RCC_OscConfig+0x240>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f003 0302 	and.w	r3, r3, #2
 800176a:	2b00      	cmp	r3, #0
 800176c:	d005      	beq.n	800177a <HAL_RCC_OscConfig+0x152>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	68db      	ldr	r3, [r3, #12]
 8001772:	2b01      	cmp	r3, #1
 8001774:	d001      	beq.n	800177a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	e1c7      	b.n	8001b0a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800177a:	4b3b      	ldr	r3, [pc, #236]	; (8001868 <HAL_RCC_OscConfig+0x240>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	691b      	ldr	r3, [r3, #16]
 8001786:	00db      	lsls	r3, r3, #3
 8001788:	4937      	ldr	r1, [pc, #220]	; (8001868 <HAL_RCC_OscConfig+0x240>)
 800178a:	4313      	orrs	r3, r2
 800178c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800178e:	e03a      	b.n	8001806 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	68db      	ldr	r3, [r3, #12]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d020      	beq.n	80017da <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001798:	4b34      	ldr	r3, [pc, #208]	; (800186c <HAL_RCC_OscConfig+0x244>)
 800179a:	2201      	movs	r2, #1
 800179c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800179e:	f7ff fba1 	bl	8000ee4 <HAL_GetTick>
 80017a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017a4:	e008      	b.n	80017b8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017a6:	f7ff fb9d 	bl	8000ee4 <HAL_GetTick>
 80017aa:	4602      	mov	r2, r0
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	1ad3      	subs	r3, r2, r3
 80017b0:	2b02      	cmp	r3, #2
 80017b2:	d901      	bls.n	80017b8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80017b4:	2303      	movs	r3, #3
 80017b6:	e1a8      	b.n	8001b0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017b8:	4b2b      	ldr	r3, [pc, #172]	; (8001868 <HAL_RCC_OscConfig+0x240>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f003 0302 	and.w	r3, r3, #2
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d0f0      	beq.n	80017a6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017c4:	4b28      	ldr	r3, [pc, #160]	; (8001868 <HAL_RCC_OscConfig+0x240>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	691b      	ldr	r3, [r3, #16]
 80017d0:	00db      	lsls	r3, r3, #3
 80017d2:	4925      	ldr	r1, [pc, #148]	; (8001868 <HAL_RCC_OscConfig+0x240>)
 80017d4:	4313      	orrs	r3, r2
 80017d6:	600b      	str	r3, [r1, #0]
 80017d8:	e015      	b.n	8001806 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017da:	4b24      	ldr	r3, [pc, #144]	; (800186c <HAL_RCC_OscConfig+0x244>)
 80017dc:	2200      	movs	r2, #0
 80017de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017e0:	f7ff fb80 	bl	8000ee4 <HAL_GetTick>
 80017e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017e6:	e008      	b.n	80017fa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017e8:	f7ff fb7c 	bl	8000ee4 <HAL_GetTick>
 80017ec:	4602      	mov	r2, r0
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	2b02      	cmp	r3, #2
 80017f4:	d901      	bls.n	80017fa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80017f6:	2303      	movs	r3, #3
 80017f8:	e187      	b.n	8001b0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017fa:	4b1b      	ldr	r3, [pc, #108]	; (8001868 <HAL_RCC_OscConfig+0x240>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f003 0302 	and.w	r3, r3, #2
 8001802:	2b00      	cmp	r3, #0
 8001804:	d1f0      	bne.n	80017e8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f003 0308 	and.w	r3, r3, #8
 800180e:	2b00      	cmp	r3, #0
 8001810:	d036      	beq.n	8001880 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	695b      	ldr	r3, [r3, #20]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d016      	beq.n	8001848 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800181a:	4b15      	ldr	r3, [pc, #84]	; (8001870 <HAL_RCC_OscConfig+0x248>)
 800181c:	2201      	movs	r2, #1
 800181e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001820:	f7ff fb60 	bl	8000ee4 <HAL_GetTick>
 8001824:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001826:	e008      	b.n	800183a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001828:	f7ff fb5c 	bl	8000ee4 <HAL_GetTick>
 800182c:	4602      	mov	r2, r0
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	1ad3      	subs	r3, r2, r3
 8001832:	2b02      	cmp	r3, #2
 8001834:	d901      	bls.n	800183a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001836:	2303      	movs	r3, #3
 8001838:	e167      	b.n	8001b0a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800183a:	4b0b      	ldr	r3, [pc, #44]	; (8001868 <HAL_RCC_OscConfig+0x240>)
 800183c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800183e:	f003 0302 	and.w	r3, r3, #2
 8001842:	2b00      	cmp	r3, #0
 8001844:	d0f0      	beq.n	8001828 <HAL_RCC_OscConfig+0x200>
 8001846:	e01b      	b.n	8001880 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001848:	4b09      	ldr	r3, [pc, #36]	; (8001870 <HAL_RCC_OscConfig+0x248>)
 800184a:	2200      	movs	r2, #0
 800184c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800184e:	f7ff fb49 	bl	8000ee4 <HAL_GetTick>
 8001852:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001854:	e00e      	b.n	8001874 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001856:	f7ff fb45 	bl	8000ee4 <HAL_GetTick>
 800185a:	4602      	mov	r2, r0
 800185c:	693b      	ldr	r3, [r7, #16]
 800185e:	1ad3      	subs	r3, r2, r3
 8001860:	2b02      	cmp	r3, #2
 8001862:	d907      	bls.n	8001874 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001864:	2303      	movs	r3, #3
 8001866:	e150      	b.n	8001b0a <HAL_RCC_OscConfig+0x4e2>
 8001868:	40023800 	.word	0x40023800
 800186c:	42470000 	.word	0x42470000
 8001870:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001874:	4b88      	ldr	r3, [pc, #544]	; (8001a98 <HAL_RCC_OscConfig+0x470>)
 8001876:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001878:	f003 0302 	and.w	r3, r3, #2
 800187c:	2b00      	cmp	r3, #0
 800187e:	d1ea      	bne.n	8001856 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f003 0304 	and.w	r3, r3, #4
 8001888:	2b00      	cmp	r3, #0
 800188a:	f000 8097 	beq.w	80019bc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800188e:	2300      	movs	r3, #0
 8001890:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001892:	4b81      	ldr	r3, [pc, #516]	; (8001a98 <HAL_RCC_OscConfig+0x470>)
 8001894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001896:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800189a:	2b00      	cmp	r3, #0
 800189c:	d10f      	bne.n	80018be <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800189e:	2300      	movs	r3, #0
 80018a0:	60bb      	str	r3, [r7, #8]
 80018a2:	4b7d      	ldr	r3, [pc, #500]	; (8001a98 <HAL_RCC_OscConfig+0x470>)
 80018a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a6:	4a7c      	ldr	r2, [pc, #496]	; (8001a98 <HAL_RCC_OscConfig+0x470>)
 80018a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018ac:	6413      	str	r3, [r2, #64]	; 0x40
 80018ae:	4b7a      	ldr	r3, [pc, #488]	; (8001a98 <HAL_RCC_OscConfig+0x470>)
 80018b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018b6:	60bb      	str	r3, [r7, #8]
 80018b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018ba:	2301      	movs	r3, #1
 80018bc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018be:	4b77      	ldr	r3, [pc, #476]	; (8001a9c <HAL_RCC_OscConfig+0x474>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d118      	bne.n	80018fc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018ca:	4b74      	ldr	r3, [pc, #464]	; (8001a9c <HAL_RCC_OscConfig+0x474>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a73      	ldr	r2, [pc, #460]	; (8001a9c <HAL_RCC_OscConfig+0x474>)
 80018d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018d6:	f7ff fb05 	bl	8000ee4 <HAL_GetTick>
 80018da:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018dc:	e008      	b.n	80018f0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018de:	f7ff fb01 	bl	8000ee4 <HAL_GetTick>
 80018e2:	4602      	mov	r2, r0
 80018e4:	693b      	ldr	r3, [r7, #16]
 80018e6:	1ad3      	subs	r3, r2, r3
 80018e8:	2b02      	cmp	r3, #2
 80018ea:	d901      	bls.n	80018f0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80018ec:	2303      	movs	r3, #3
 80018ee:	e10c      	b.n	8001b0a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018f0:	4b6a      	ldr	r3, [pc, #424]	; (8001a9c <HAL_RCC_OscConfig+0x474>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d0f0      	beq.n	80018de <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	2b01      	cmp	r3, #1
 8001902:	d106      	bne.n	8001912 <HAL_RCC_OscConfig+0x2ea>
 8001904:	4b64      	ldr	r3, [pc, #400]	; (8001a98 <HAL_RCC_OscConfig+0x470>)
 8001906:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001908:	4a63      	ldr	r2, [pc, #396]	; (8001a98 <HAL_RCC_OscConfig+0x470>)
 800190a:	f043 0301 	orr.w	r3, r3, #1
 800190e:	6713      	str	r3, [r2, #112]	; 0x70
 8001910:	e01c      	b.n	800194c <HAL_RCC_OscConfig+0x324>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	689b      	ldr	r3, [r3, #8]
 8001916:	2b05      	cmp	r3, #5
 8001918:	d10c      	bne.n	8001934 <HAL_RCC_OscConfig+0x30c>
 800191a:	4b5f      	ldr	r3, [pc, #380]	; (8001a98 <HAL_RCC_OscConfig+0x470>)
 800191c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800191e:	4a5e      	ldr	r2, [pc, #376]	; (8001a98 <HAL_RCC_OscConfig+0x470>)
 8001920:	f043 0304 	orr.w	r3, r3, #4
 8001924:	6713      	str	r3, [r2, #112]	; 0x70
 8001926:	4b5c      	ldr	r3, [pc, #368]	; (8001a98 <HAL_RCC_OscConfig+0x470>)
 8001928:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800192a:	4a5b      	ldr	r2, [pc, #364]	; (8001a98 <HAL_RCC_OscConfig+0x470>)
 800192c:	f043 0301 	orr.w	r3, r3, #1
 8001930:	6713      	str	r3, [r2, #112]	; 0x70
 8001932:	e00b      	b.n	800194c <HAL_RCC_OscConfig+0x324>
 8001934:	4b58      	ldr	r3, [pc, #352]	; (8001a98 <HAL_RCC_OscConfig+0x470>)
 8001936:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001938:	4a57      	ldr	r2, [pc, #348]	; (8001a98 <HAL_RCC_OscConfig+0x470>)
 800193a:	f023 0301 	bic.w	r3, r3, #1
 800193e:	6713      	str	r3, [r2, #112]	; 0x70
 8001940:	4b55      	ldr	r3, [pc, #340]	; (8001a98 <HAL_RCC_OscConfig+0x470>)
 8001942:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001944:	4a54      	ldr	r2, [pc, #336]	; (8001a98 <HAL_RCC_OscConfig+0x470>)
 8001946:	f023 0304 	bic.w	r3, r3, #4
 800194a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	689b      	ldr	r3, [r3, #8]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d015      	beq.n	8001980 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001954:	f7ff fac6 	bl	8000ee4 <HAL_GetTick>
 8001958:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800195a:	e00a      	b.n	8001972 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800195c:	f7ff fac2 	bl	8000ee4 <HAL_GetTick>
 8001960:	4602      	mov	r2, r0
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	f241 3288 	movw	r2, #5000	; 0x1388
 800196a:	4293      	cmp	r3, r2
 800196c:	d901      	bls.n	8001972 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800196e:	2303      	movs	r3, #3
 8001970:	e0cb      	b.n	8001b0a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001972:	4b49      	ldr	r3, [pc, #292]	; (8001a98 <HAL_RCC_OscConfig+0x470>)
 8001974:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001976:	f003 0302 	and.w	r3, r3, #2
 800197a:	2b00      	cmp	r3, #0
 800197c:	d0ee      	beq.n	800195c <HAL_RCC_OscConfig+0x334>
 800197e:	e014      	b.n	80019aa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001980:	f7ff fab0 	bl	8000ee4 <HAL_GetTick>
 8001984:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001986:	e00a      	b.n	800199e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001988:	f7ff faac 	bl	8000ee4 <HAL_GetTick>
 800198c:	4602      	mov	r2, r0
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	1ad3      	subs	r3, r2, r3
 8001992:	f241 3288 	movw	r2, #5000	; 0x1388
 8001996:	4293      	cmp	r3, r2
 8001998:	d901      	bls.n	800199e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800199a:	2303      	movs	r3, #3
 800199c:	e0b5      	b.n	8001b0a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800199e:	4b3e      	ldr	r3, [pc, #248]	; (8001a98 <HAL_RCC_OscConfig+0x470>)
 80019a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019a2:	f003 0302 	and.w	r3, r3, #2
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d1ee      	bne.n	8001988 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80019aa:	7dfb      	ldrb	r3, [r7, #23]
 80019ac:	2b01      	cmp	r3, #1
 80019ae:	d105      	bne.n	80019bc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019b0:	4b39      	ldr	r3, [pc, #228]	; (8001a98 <HAL_RCC_OscConfig+0x470>)
 80019b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b4:	4a38      	ldr	r2, [pc, #224]	; (8001a98 <HAL_RCC_OscConfig+0x470>)
 80019b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019ba:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	699b      	ldr	r3, [r3, #24]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	f000 80a1 	beq.w	8001b08 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80019c6:	4b34      	ldr	r3, [pc, #208]	; (8001a98 <HAL_RCC_OscConfig+0x470>)
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	f003 030c 	and.w	r3, r3, #12
 80019ce:	2b08      	cmp	r3, #8
 80019d0:	d05c      	beq.n	8001a8c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	699b      	ldr	r3, [r3, #24]
 80019d6:	2b02      	cmp	r3, #2
 80019d8:	d141      	bne.n	8001a5e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019da:	4b31      	ldr	r3, [pc, #196]	; (8001aa0 <HAL_RCC_OscConfig+0x478>)
 80019dc:	2200      	movs	r2, #0
 80019de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019e0:	f7ff fa80 	bl	8000ee4 <HAL_GetTick>
 80019e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019e6:	e008      	b.n	80019fa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019e8:	f7ff fa7c 	bl	8000ee4 <HAL_GetTick>
 80019ec:	4602      	mov	r2, r0
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	1ad3      	subs	r3, r2, r3
 80019f2:	2b02      	cmp	r3, #2
 80019f4:	d901      	bls.n	80019fa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80019f6:	2303      	movs	r3, #3
 80019f8:	e087      	b.n	8001b0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019fa:	4b27      	ldr	r3, [pc, #156]	; (8001a98 <HAL_RCC_OscConfig+0x470>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d1f0      	bne.n	80019e8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	69da      	ldr	r2, [r3, #28]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6a1b      	ldr	r3, [r3, #32]
 8001a0e:	431a      	orrs	r2, r3
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a14:	019b      	lsls	r3, r3, #6
 8001a16:	431a      	orrs	r2, r3
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a1c:	085b      	lsrs	r3, r3, #1
 8001a1e:	3b01      	subs	r3, #1
 8001a20:	041b      	lsls	r3, r3, #16
 8001a22:	431a      	orrs	r2, r3
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a28:	061b      	lsls	r3, r3, #24
 8001a2a:	491b      	ldr	r1, [pc, #108]	; (8001a98 <HAL_RCC_OscConfig+0x470>)
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a30:	4b1b      	ldr	r3, [pc, #108]	; (8001aa0 <HAL_RCC_OscConfig+0x478>)
 8001a32:	2201      	movs	r2, #1
 8001a34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a36:	f7ff fa55 	bl	8000ee4 <HAL_GetTick>
 8001a3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a3c:	e008      	b.n	8001a50 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a3e:	f7ff fa51 	bl	8000ee4 <HAL_GetTick>
 8001a42:	4602      	mov	r2, r0
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	1ad3      	subs	r3, r2, r3
 8001a48:	2b02      	cmp	r3, #2
 8001a4a:	d901      	bls.n	8001a50 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001a4c:	2303      	movs	r3, #3
 8001a4e:	e05c      	b.n	8001b0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a50:	4b11      	ldr	r3, [pc, #68]	; (8001a98 <HAL_RCC_OscConfig+0x470>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d0f0      	beq.n	8001a3e <HAL_RCC_OscConfig+0x416>
 8001a5c:	e054      	b.n	8001b08 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a5e:	4b10      	ldr	r3, [pc, #64]	; (8001aa0 <HAL_RCC_OscConfig+0x478>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a64:	f7ff fa3e 	bl	8000ee4 <HAL_GetTick>
 8001a68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a6a:	e008      	b.n	8001a7e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a6c:	f7ff fa3a 	bl	8000ee4 <HAL_GetTick>
 8001a70:	4602      	mov	r2, r0
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	2b02      	cmp	r3, #2
 8001a78:	d901      	bls.n	8001a7e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	e045      	b.n	8001b0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a7e:	4b06      	ldr	r3, [pc, #24]	; (8001a98 <HAL_RCC_OscConfig+0x470>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d1f0      	bne.n	8001a6c <HAL_RCC_OscConfig+0x444>
 8001a8a:	e03d      	b.n	8001b08 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	699b      	ldr	r3, [r3, #24]
 8001a90:	2b01      	cmp	r3, #1
 8001a92:	d107      	bne.n	8001aa4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001a94:	2301      	movs	r3, #1
 8001a96:	e038      	b.n	8001b0a <HAL_RCC_OscConfig+0x4e2>
 8001a98:	40023800 	.word	0x40023800
 8001a9c:	40007000 	.word	0x40007000
 8001aa0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001aa4:	4b1b      	ldr	r3, [pc, #108]	; (8001b14 <HAL_RCC_OscConfig+0x4ec>)
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	699b      	ldr	r3, [r3, #24]
 8001aae:	2b01      	cmp	r3, #1
 8001ab0:	d028      	beq.n	8001b04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001abc:	429a      	cmp	r2, r3
 8001abe:	d121      	bne.n	8001b04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001aca:	429a      	cmp	r2, r3
 8001acc:	d11a      	bne.n	8001b04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ace:	68fa      	ldr	r2, [r7, #12]
 8001ad0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	687a      	ldr	r2, [r7, #4]
 8001ad8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001ada:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d111      	bne.n	8001b04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aea:	085b      	lsrs	r3, r3, #1
 8001aec:	3b01      	subs	r3, #1
 8001aee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d107      	bne.n	8001b04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001afe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b00:	429a      	cmp	r2, r3
 8001b02:	d001      	beq.n	8001b08 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001b04:	2301      	movs	r3, #1
 8001b06:	e000      	b.n	8001b0a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001b08:	2300      	movs	r3, #0
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3718      	adds	r7, #24
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	40023800 	.word	0x40023800

08001b18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b084      	sub	sp, #16
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
 8001b20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d101      	bne.n	8001b2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	e0cc      	b.n	8001cc6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b2c:	4b68      	ldr	r3, [pc, #416]	; (8001cd0 <HAL_RCC_ClockConfig+0x1b8>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f003 0307 	and.w	r3, r3, #7
 8001b34:	683a      	ldr	r2, [r7, #0]
 8001b36:	429a      	cmp	r2, r3
 8001b38:	d90c      	bls.n	8001b54 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b3a:	4b65      	ldr	r3, [pc, #404]	; (8001cd0 <HAL_RCC_ClockConfig+0x1b8>)
 8001b3c:	683a      	ldr	r2, [r7, #0]
 8001b3e:	b2d2      	uxtb	r2, r2
 8001b40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b42:	4b63      	ldr	r3, [pc, #396]	; (8001cd0 <HAL_RCC_ClockConfig+0x1b8>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f003 0307 	and.w	r3, r3, #7
 8001b4a:	683a      	ldr	r2, [r7, #0]
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	d001      	beq.n	8001b54 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001b50:	2301      	movs	r3, #1
 8001b52:	e0b8      	b.n	8001cc6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f003 0302 	and.w	r3, r3, #2
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d020      	beq.n	8001ba2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f003 0304 	and.w	r3, r3, #4
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d005      	beq.n	8001b78 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b6c:	4b59      	ldr	r3, [pc, #356]	; (8001cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	4a58      	ldr	r2, [pc, #352]	; (8001cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b72:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001b76:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f003 0308 	and.w	r3, r3, #8
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d005      	beq.n	8001b90 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b84:	4b53      	ldr	r3, [pc, #332]	; (8001cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	4a52      	ldr	r2, [pc, #328]	; (8001cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b8a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001b8e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b90:	4b50      	ldr	r3, [pc, #320]	; (8001cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	494d      	ldr	r1, [pc, #308]	; (8001cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 0301 	and.w	r3, r3, #1
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d044      	beq.n	8001c38 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	2b01      	cmp	r3, #1
 8001bb4:	d107      	bne.n	8001bc6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bb6:	4b47      	ldr	r3, [pc, #284]	; (8001cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d119      	bne.n	8001bf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e07f      	b.n	8001cc6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	2b02      	cmp	r3, #2
 8001bcc:	d003      	beq.n	8001bd6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001bd2:	2b03      	cmp	r3, #3
 8001bd4:	d107      	bne.n	8001be6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bd6:	4b3f      	ldr	r3, [pc, #252]	; (8001cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d109      	bne.n	8001bf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	e06f      	b.n	8001cc6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001be6:	4b3b      	ldr	r3, [pc, #236]	; (8001cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 0302 	and.w	r3, r3, #2
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d101      	bne.n	8001bf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e067      	b.n	8001cc6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bf6:	4b37      	ldr	r3, [pc, #220]	; (8001cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	f023 0203 	bic.w	r2, r3, #3
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	4934      	ldr	r1, [pc, #208]	; (8001cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c04:	4313      	orrs	r3, r2
 8001c06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c08:	f7ff f96c 	bl	8000ee4 <HAL_GetTick>
 8001c0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c0e:	e00a      	b.n	8001c26 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c10:	f7ff f968 	bl	8000ee4 <HAL_GetTick>
 8001c14:	4602      	mov	r2, r0
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	1ad3      	subs	r3, r2, r3
 8001c1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d901      	bls.n	8001c26 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c22:	2303      	movs	r3, #3
 8001c24:	e04f      	b.n	8001cc6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c26:	4b2b      	ldr	r3, [pc, #172]	; (8001cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	f003 020c 	and.w	r2, r3, #12
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	429a      	cmp	r2, r3
 8001c36:	d1eb      	bne.n	8001c10 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c38:	4b25      	ldr	r3, [pc, #148]	; (8001cd0 <HAL_RCC_ClockConfig+0x1b8>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f003 0307 	and.w	r3, r3, #7
 8001c40:	683a      	ldr	r2, [r7, #0]
 8001c42:	429a      	cmp	r2, r3
 8001c44:	d20c      	bcs.n	8001c60 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c46:	4b22      	ldr	r3, [pc, #136]	; (8001cd0 <HAL_RCC_ClockConfig+0x1b8>)
 8001c48:	683a      	ldr	r2, [r7, #0]
 8001c4a:	b2d2      	uxtb	r2, r2
 8001c4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c4e:	4b20      	ldr	r3, [pc, #128]	; (8001cd0 <HAL_RCC_ClockConfig+0x1b8>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f003 0307 	and.w	r3, r3, #7
 8001c56:	683a      	ldr	r2, [r7, #0]
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	d001      	beq.n	8001c60 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	e032      	b.n	8001cc6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f003 0304 	and.w	r3, r3, #4
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d008      	beq.n	8001c7e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c6c:	4b19      	ldr	r3, [pc, #100]	; (8001cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	68db      	ldr	r3, [r3, #12]
 8001c78:	4916      	ldr	r1, [pc, #88]	; (8001cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 0308 	and.w	r3, r3, #8
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d009      	beq.n	8001c9e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c8a:	4b12      	ldr	r3, [pc, #72]	; (8001cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	691b      	ldr	r3, [r3, #16]
 8001c96:	00db      	lsls	r3, r3, #3
 8001c98:	490e      	ldr	r1, [pc, #56]	; (8001cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c9e:	f000 f821 	bl	8001ce4 <HAL_RCC_GetSysClockFreq>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	4b0b      	ldr	r3, [pc, #44]	; (8001cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	091b      	lsrs	r3, r3, #4
 8001caa:	f003 030f 	and.w	r3, r3, #15
 8001cae:	490a      	ldr	r1, [pc, #40]	; (8001cd8 <HAL_RCC_ClockConfig+0x1c0>)
 8001cb0:	5ccb      	ldrb	r3, [r1, r3]
 8001cb2:	fa22 f303 	lsr.w	r3, r2, r3
 8001cb6:	4a09      	ldr	r2, [pc, #36]	; (8001cdc <HAL_RCC_ClockConfig+0x1c4>)
 8001cb8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001cba:	4b09      	ldr	r3, [pc, #36]	; (8001ce0 <HAL_RCC_ClockConfig+0x1c8>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f7ff f8cc 	bl	8000e5c <HAL_InitTick>

  return HAL_OK;
 8001cc4:	2300      	movs	r3, #0
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	3710      	adds	r7, #16
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	40023c00 	.word	0x40023c00
 8001cd4:	40023800 	.word	0x40023800
 8001cd8:	08006d08 	.word	0x08006d08
 8001cdc:	20000000 	.word	0x20000000
 8001ce0:	20000004 	.word	0x20000004

08001ce4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ce4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ce8:	b090      	sub	sp, #64	; 0x40
 8001cea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001cec:	2300      	movs	r3, #0
 8001cee:	637b      	str	r3, [r7, #52]	; 0x34
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001cfc:	4b59      	ldr	r3, [pc, #356]	; (8001e64 <HAL_RCC_GetSysClockFreq+0x180>)
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	f003 030c 	and.w	r3, r3, #12
 8001d04:	2b08      	cmp	r3, #8
 8001d06:	d00d      	beq.n	8001d24 <HAL_RCC_GetSysClockFreq+0x40>
 8001d08:	2b08      	cmp	r3, #8
 8001d0a:	f200 80a1 	bhi.w	8001e50 <HAL_RCC_GetSysClockFreq+0x16c>
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d002      	beq.n	8001d18 <HAL_RCC_GetSysClockFreq+0x34>
 8001d12:	2b04      	cmp	r3, #4
 8001d14:	d003      	beq.n	8001d1e <HAL_RCC_GetSysClockFreq+0x3a>
 8001d16:	e09b      	b.n	8001e50 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d18:	4b53      	ldr	r3, [pc, #332]	; (8001e68 <HAL_RCC_GetSysClockFreq+0x184>)
 8001d1a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001d1c:	e09b      	b.n	8001e56 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001d1e:	4b53      	ldr	r3, [pc, #332]	; (8001e6c <HAL_RCC_GetSysClockFreq+0x188>)
 8001d20:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001d22:	e098      	b.n	8001e56 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d24:	4b4f      	ldr	r3, [pc, #316]	; (8001e64 <HAL_RCC_GetSysClockFreq+0x180>)
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d2c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d2e:	4b4d      	ldr	r3, [pc, #308]	; (8001e64 <HAL_RCC_GetSysClockFreq+0x180>)
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d028      	beq.n	8001d8c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d3a:	4b4a      	ldr	r3, [pc, #296]	; (8001e64 <HAL_RCC_GetSysClockFreq+0x180>)
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	099b      	lsrs	r3, r3, #6
 8001d40:	2200      	movs	r2, #0
 8001d42:	623b      	str	r3, [r7, #32]
 8001d44:	627a      	str	r2, [r7, #36]	; 0x24
 8001d46:	6a3b      	ldr	r3, [r7, #32]
 8001d48:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001d4c:	2100      	movs	r1, #0
 8001d4e:	4b47      	ldr	r3, [pc, #284]	; (8001e6c <HAL_RCC_GetSysClockFreq+0x188>)
 8001d50:	fb03 f201 	mul.w	r2, r3, r1
 8001d54:	2300      	movs	r3, #0
 8001d56:	fb00 f303 	mul.w	r3, r0, r3
 8001d5a:	4413      	add	r3, r2
 8001d5c:	4a43      	ldr	r2, [pc, #268]	; (8001e6c <HAL_RCC_GetSysClockFreq+0x188>)
 8001d5e:	fba0 1202 	umull	r1, r2, r0, r2
 8001d62:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001d64:	460a      	mov	r2, r1
 8001d66:	62ba      	str	r2, [r7, #40]	; 0x28
 8001d68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d6a:	4413      	add	r3, r2
 8001d6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d70:	2200      	movs	r2, #0
 8001d72:	61bb      	str	r3, [r7, #24]
 8001d74:	61fa      	str	r2, [r7, #28]
 8001d76:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d7a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001d7e:	f7fe fa7f 	bl	8000280 <__aeabi_uldivmod>
 8001d82:	4602      	mov	r2, r0
 8001d84:	460b      	mov	r3, r1
 8001d86:	4613      	mov	r3, r2
 8001d88:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001d8a:	e053      	b.n	8001e34 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d8c:	4b35      	ldr	r3, [pc, #212]	; (8001e64 <HAL_RCC_GetSysClockFreq+0x180>)
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	099b      	lsrs	r3, r3, #6
 8001d92:	2200      	movs	r2, #0
 8001d94:	613b      	str	r3, [r7, #16]
 8001d96:	617a      	str	r2, [r7, #20]
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001d9e:	f04f 0b00 	mov.w	fp, #0
 8001da2:	4652      	mov	r2, sl
 8001da4:	465b      	mov	r3, fp
 8001da6:	f04f 0000 	mov.w	r0, #0
 8001daa:	f04f 0100 	mov.w	r1, #0
 8001dae:	0159      	lsls	r1, r3, #5
 8001db0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001db4:	0150      	lsls	r0, r2, #5
 8001db6:	4602      	mov	r2, r0
 8001db8:	460b      	mov	r3, r1
 8001dba:	ebb2 080a 	subs.w	r8, r2, sl
 8001dbe:	eb63 090b 	sbc.w	r9, r3, fp
 8001dc2:	f04f 0200 	mov.w	r2, #0
 8001dc6:	f04f 0300 	mov.w	r3, #0
 8001dca:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001dce:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001dd2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001dd6:	ebb2 0408 	subs.w	r4, r2, r8
 8001dda:	eb63 0509 	sbc.w	r5, r3, r9
 8001dde:	f04f 0200 	mov.w	r2, #0
 8001de2:	f04f 0300 	mov.w	r3, #0
 8001de6:	00eb      	lsls	r3, r5, #3
 8001de8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001dec:	00e2      	lsls	r2, r4, #3
 8001dee:	4614      	mov	r4, r2
 8001df0:	461d      	mov	r5, r3
 8001df2:	eb14 030a 	adds.w	r3, r4, sl
 8001df6:	603b      	str	r3, [r7, #0]
 8001df8:	eb45 030b 	adc.w	r3, r5, fp
 8001dfc:	607b      	str	r3, [r7, #4]
 8001dfe:	f04f 0200 	mov.w	r2, #0
 8001e02:	f04f 0300 	mov.w	r3, #0
 8001e06:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001e0a:	4629      	mov	r1, r5
 8001e0c:	028b      	lsls	r3, r1, #10
 8001e0e:	4621      	mov	r1, r4
 8001e10:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001e14:	4621      	mov	r1, r4
 8001e16:	028a      	lsls	r2, r1, #10
 8001e18:	4610      	mov	r0, r2
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e1e:	2200      	movs	r2, #0
 8001e20:	60bb      	str	r3, [r7, #8]
 8001e22:	60fa      	str	r2, [r7, #12]
 8001e24:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001e28:	f7fe fa2a 	bl	8000280 <__aeabi_uldivmod>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	460b      	mov	r3, r1
 8001e30:	4613      	mov	r3, r2
 8001e32:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001e34:	4b0b      	ldr	r3, [pc, #44]	; (8001e64 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	0c1b      	lsrs	r3, r3, #16
 8001e3a:	f003 0303 	and.w	r3, r3, #3
 8001e3e:	3301      	adds	r3, #1
 8001e40:	005b      	lsls	r3, r3, #1
 8001e42:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001e44:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e48:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e4c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001e4e:	e002      	b.n	8001e56 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e50:	4b05      	ldr	r3, [pc, #20]	; (8001e68 <HAL_RCC_GetSysClockFreq+0x184>)
 8001e52:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001e54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	3740      	adds	r7, #64	; 0x40
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e62:	bf00      	nop
 8001e64:	40023800 	.word	0x40023800
 8001e68:	00f42400 	.word	0x00f42400
 8001e6c:	017d7840 	.word	0x017d7840

08001e70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e74:	4b03      	ldr	r3, [pc, #12]	; (8001e84 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e76:	681b      	ldr	r3, [r3, #0]
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr
 8001e82:	bf00      	nop
 8001e84:	20000000 	.word	0x20000000

08001e88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001e8c:	f7ff fff0 	bl	8001e70 <HAL_RCC_GetHCLKFreq>
 8001e90:	4602      	mov	r2, r0
 8001e92:	4b05      	ldr	r3, [pc, #20]	; (8001ea8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	0a9b      	lsrs	r3, r3, #10
 8001e98:	f003 0307 	and.w	r3, r3, #7
 8001e9c:	4903      	ldr	r1, [pc, #12]	; (8001eac <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e9e:	5ccb      	ldrb	r3, [r1, r3]
 8001ea0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	40023800 	.word	0x40023800
 8001eac:	08006d18 	.word	0x08006d18

08001eb0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001eb4:	f7ff ffdc 	bl	8001e70 <HAL_RCC_GetHCLKFreq>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	4b05      	ldr	r3, [pc, #20]	; (8001ed0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	0b5b      	lsrs	r3, r3, #13
 8001ec0:	f003 0307 	and.w	r3, r3, #7
 8001ec4:	4903      	ldr	r1, [pc, #12]	; (8001ed4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ec6:	5ccb      	ldrb	r3, [r1, r3]
 8001ec8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	40023800 	.word	0x40023800
 8001ed4:	08006d18 	.word	0x08006d18

08001ed8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d101      	bne.n	8001eea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e041      	b.n	8001f6e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d106      	bne.n	8001f04 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f7fe fe68 	bl	8000bd4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2202      	movs	r2, #2
 8001f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	3304      	adds	r3, #4
 8001f14:	4619      	mov	r1, r3
 8001f16:	4610      	mov	r0, r2
 8001f18:	f000 fa98 	bl	800244c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2201      	movs	r2, #1
 8001f20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2201      	movs	r2, #1
 8001f28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2201      	movs	r2, #1
 8001f30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2201      	movs	r2, #1
 8001f38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2201      	movs	r2, #1
 8001f40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2201      	movs	r2, #1
 8001f48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2201      	movs	r2, #1
 8001f50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2201      	movs	r2, #1
 8001f58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2201      	movs	r2, #1
 8001f60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2201      	movs	r2, #1
 8001f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001f6c:	2300      	movs	r3, #0
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3708      	adds	r7, #8
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
	...

08001f78 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b085      	sub	sp, #20
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f86:	b2db      	uxtb	r3, r3
 8001f88:	2b01      	cmp	r3, #1
 8001f8a:	d001      	beq.n	8001f90 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	e046      	b.n	800201e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2202      	movs	r2, #2
 8001f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a23      	ldr	r2, [pc, #140]	; (800202c <HAL_TIM_Base_Start+0xb4>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d022      	beq.n	8001fe8 <HAL_TIM_Base_Start+0x70>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001faa:	d01d      	beq.n	8001fe8 <HAL_TIM_Base_Start+0x70>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a1f      	ldr	r2, [pc, #124]	; (8002030 <HAL_TIM_Base_Start+0xb8>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d018      	beq.n	8001fe8 <HAL_TIM_Base_Start+0x70>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a1e      	ldr	r2, [pc, #120]	; (8002034 <HAL_TIM_Base_Start+0xbc>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d013      	beq.n	8001fe8 <HAL_TIM_Base_Start+0x70>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a1c      	ldr	r2, [pc, #112]	; (8002038 <HAL_TIM_Base_Start+0xc0>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d00e      	beq.n	8001fe8 <HAL_TIM_Base_Start+0x70>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a1b      	ldr	r2, [pc, #108]	; (800203c <HAL_TIM_Base_Start+0xc4>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d009      	beq.n	8001fe8 <HAL_TIM_Base_Start+0x70>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a19      	ldr	r2, [pc, #100]	; (8002040 <HAL_TIM_Base_Start+0xc8>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d004      	beq.n	8001fe8 <HAL_TIM_Base_Start+0x70>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a18      	ldr	r2, [pc, #96]	; (8002044 <HAL_TIM_Base_Start+0xcc>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d111      	bne.n	800200c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	f003 0307 	and.w	r3, r3, #7
 8001ff2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	2b06      	cmp	r3, #6
 8001ff8:	d010      	beq.n	800201c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f042 0201 	orr.w	r2, r2, #1
 8002008:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800200a:	e007      	b.n	800201c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f042 0201 	orr.w	r2, r2, #1
 800201a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800201c:	2300      	movs	r3, #0
}
 800201e:	4618      	mov	r0, r3
 8002020:	3714      	adds	r7, #20
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr
 800202a:	bf00      	nop
 800202c:	40010000 	.word	0x40010000
 8002030:	40000400 	.word	0x40000400
 8002034:	40000800 	.word	0x40000800
 8002038:	40000c00 	.word	0x40000c00
 800203c:	40010400 	.word	0x40010400
 8002040:	40014000 	.word	0x40014000
 8002044:	40001800 	.word	0x40001800

08002048 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	691b      	ldr	r3, [r3, #16]
 8002056:	f003 0302 	and.w	r3, r3, #2
 800205a:	2b02      	cmp	r3, #2
 800205c:	d122      	bne.n	80020a4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	f003 0302 	and.w	r3, r3, #2
 8002068:	2b02      	cmp	r3, #2
 800206a:	d11b      	bne.n	80020a4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f06f 0202 	mvn.w	r2, #2
 8002074:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2201      	movs	r2, #1
 800207a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	699b      	ldr	r3, [r3, #24]
 8002082:	f003 0303 	and.w	r3, r3, #3
 8002086:	2b00      	cmp	r3, #0
 8002088:	d003      	beq.n	8002092 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	f000 f9bf 	bl	800240e <HAL_TIM_IC_CaptureCallback>
 8002090:	e005      	b.n	800209e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002092:	6878      	ldr	r0, [r7, #4]
 8002094:	f000 f9b1 	bl	80023fa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002098:	6878      	ldr	r0, [r7, #4]
 800209a:	f000 f9c2 	bl	8002422 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2200      	movs	r2, #0
 80020a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	691b      	ldr	r3, [r3, #16]
 80020aa:	f003 0304 	and.w	r3, r3, #4
 80020ae:	2b04      	cmp	r3, #4
 80020b0:	d122      	bne.n	80020f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	68db      	ldr	r3, [r3, #12]
 80020b8:	f003 0304 	and.w	r3, r3, #4
 80020bc:	2b04      	cmp	r3, #4
 80020be:	d11b      	bne.n	80020f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f06f 0204 	mvn.w	r2, #4
 80020c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2202      	movs	r2, #2
 80020ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	699b      	ldr	r3, [r3, #24]
 80020d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d003      	beq.n	80020e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	f000 f995 	bl	800240e <HAL_TIM_IC_CaptureCallback>
 80020e4:	e005      	b.n	80020f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020e6:	6878      	ldr	r0, [r7, #4]
 80020e8:	f000 f987 	bl	80023fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020ec:	6878      	ldr	r0, [r7, #4]
 80020ee:	f000 f998 	bl	8002422 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2200      	movs	r2, #0
 80020f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	691b      	ldr	r3, [r3, #16]
 80020fe:	f003 0308 	and.w	r3, r3, #8
 8002102:	2b08      	cmp	r3, #8
 8002104:	d122      	bne.n	800214c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	f003 0308 	and.w	r3, r3, #8
 8002110:	2b08      	cmp	r3, #8
 8002112:	d11b      	bne.n	800214c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f06f 0208 	mvn.w	r2, #8
 800211c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2204      	movs	r2, #4
 8002122:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	69db      	ldr	r3, [r3, #28]
 800212a:	f003 0303 	and.w	r3, r3, #3
 800212e:	2b00      	cmp	r3, #0
 8002130:	d003      	beq.n	800213a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	f000 f96b 	bl	800240e <HAL_TIM_IC_CaptureCallback>
 8002138:	e005      	b.n	8002146 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	f000 f95d 	bl	80023fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002140:	6878      	ldr	r0, [r7, #4]
 8002142:	f000 f96e 	bl	8002422 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2200      	movs	r2, #0
 800214a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	691b      	ldr	r3, [r3, #16]
 8002152:	f003 0310 	and.w	r3, r3, #16
 8002156:	2b10      	cmp	r3, #16
 8002158:	d122      	bne.n	80021a0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	f003 0310 	and.w	r3, r3, #16
 8002164:	2b10      	cmp	r3, #16
 8002166:	d11b      	bne.n	80021a0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f06f 0210 	mvn.w	r2, #16
 8002170:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2208      	movs	r2, #8
 8002176:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	69db      	ldr	r3, [r3, #28]
 800217e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002182:	2b00      	cmp	r3, #0
 8002184:	d003      	beq.n	800218e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f000 f941 	bl	800240e <HAL_TIM_IC_CaptureCallback>
 800218c:	e005      	b.n	800219a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	f000 f933 	bl	80023fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002194:	6878      	ldr	r0, [r7, #4]
 8002196:	f000 f944 	bl	8002422 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2200      	movs	r2, #0
 800219e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	691b      	ldr	r3, [r3, #16]
 80021a6:	f003 0301 	and.w	r3, r3, #1
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	d10e      	bne.n	80021cc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	68db      	ldr	r3, [r3, #12]
 80021b4:	f003 0301 	and.w	r3, r3, #1
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	d107      	bne.n	80021cc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f06f 0201 	mvn.w	r2, #1
 80021c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80021c6:	6878      	ldr	r0, [r7, #4]
 80021c8:	f000 f90d 	bl	80023e6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	691b      	ldr	r3, [r3, #16]
 80021d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021d6:	2b80      	cmp	r3, #128	; 0x80
 80021d8:	d10e      	bne.n	80021f8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	68db      	ldr	r3, [r3, #12]
 80021e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021e4:	2b80      	cmp	r3, #128	; 0x80
 80021e6:	d107      	bne.n	80021f8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80021f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	f000 faea 	bl	80027cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	691b      	ldr	r3, [r3, #16]
 80021fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002202:	2b40      	cmp	r3, #64	; 0x40
 8002204:	d10e      	bne.n	8002224 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002210:	2b40      	cmp	r3, #64	; 0x40
 8002212:	d107      	bne.n	8002224 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800221c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	f000 f909 	bl	8002436 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	691b      	ldr	r3, [r3, #16]
 800222a:	f003 0320 	and.w	r3, r3, #32
 800222e:	2b20      	cmp	r3, #32
 8002230:	d10e      	bne.n	8002250 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	f003 0320 	and.w	r3, r3, #32
 800223c:	2b20      	cmp	r3, #32
 800223e:	d107      	bne.n	8002250 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f06f 0220 	mvn.w	r2, #32
 8002248:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	f000 fab4 	bl	80027b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002250:	bf00      	nop
 8002252:	3708      	adds	r7, #8
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}

08002258 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b084      	sub	sp, #16
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
 8002260:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002262:	2300      	movs	r3, #0
 8002264:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800226c:	2b01      	cmp	r3, #1
 800226e:	d101      	bne.n	8002274 <HAL_TIM_ConfigClockSource+0x1c>
 8002270:	2302      	movs	r3, #2
 8002272:	e0b4      	b.n	80023de <HAL_TIM_ConfigClockSource+0x186>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2201      	movs	r2, #1
 8002278:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2202      	movs	r2, #2
 8002280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002292:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800229a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	68ba      	ldr	r2, [r7, #8]
 80022a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022ac:	d03e      	beq.n	800232c <HAL_TIM_ConfigClockSource+0xd4>
 80022ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022b2:	f200 8087 	bhi.w	80023c4 <HAL_TIM_ConfigClockSource+0x16c>
 80022b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022ba:	f000 8086 	beq.w	80023ca <HAL_TIM_ConfigClockSource+0x172>
 80022be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022c2:	d87f      	bhi.n	80023c4 <HAL_TIM_ConfigClockSource+0x16c>
 80022c4:	2b70      	cmp	r3, #112	; 0x70
 80022c6:	d01a      	beq.n	80022fe <HAL_TIM_ConfigClockSource+0xa6>
 80022c8:	2b70      	cmp	r3, #112	; 0x70
 80022ca:	d87b      	bhi.n	80023c4 <HAL_TIM_ConfigClockSource+0x16c>
 80022cc:	2b60      	cmp	r3, #96	; 0x60
 80022ce:	d050      	beq.n	8002372 <HAL_TIM_ConfigClockSource+0x11a>
 80022d0:	2b60      	cmp	r3, #96	; 0x60
 80022d2:	d877      	bhi.n	80023c4 <HAL_TIM_ConfigClockSource+0x16c>
 80022d4:	2b50      	cmp	r3, #80	; 0x50
 80022d6:	d03c      	beq.n	8002352 <HAL_TIM_ConfigClockSource+0xfa>
 80022d8:	2b50      	cmp	r3, #80	; 0x50
 80022da:	d873      	bhi.n	80023c4 <HAL_TIM_ConfigClockSource+0x16c>
 80022dc:	2b40      	cmp	r3, #64	; 0x40
 80022de:	d058      	beq.n	8002392 <HAL_TIM_ConfigClockSource+0x13a>
 80022e0:	2b40      	cmp	r3, #64	; 0x40
 80022e2:	d86f      	bhi.n	80023c4 <HAL_TIM_ConfigClockSource+0x16c>
 80022e4:	2b30      	cmp	r3, #48	; 0x30
 80022e6:	d064      	beq.n	80023b2 <HAL_TIM_ConfigClockSource+0x15a>
 80022e8:	2b30      	cmp	r3, #48	; 0x30
 80022ea:	d86b      	bhi.n	80023c4 <HAL_TIM_ConfigClockSource+0x16c>
 80022ec:	2b20      	cmp	r3, #32
 80022ee:	d060      	beq.n	80023b2 <HAL_TIM_ConfigClockSource+0x15a>
 80022f0:	2b20      	cmp	r3, #32
 80022f2:	d867      	bhi.n	80023c4 <HAL_TIM_ConfigClockSource+0x16c>
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d05c      	beq.n	80023b2 <HAL_TIM_ConfigClockSource+0x15a>
 80022f8:	2b10      	cmp	r3, #16
 80022fa:	d05a      	beq.n	80023b2 <HAL_TIM_ConfigClockSource+0x15a>
 80022fc:	e062      	b.n	80023c4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6818      	ldr	r0, [r3, #0]
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	6899      	ldr	r1, [r3, #8]
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	685a      	ldr	r2, [r3, #4]
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	68db      	ldr	r3, [r3, #12]
 800230e:	f000 f9b7 	bl	8002680 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002320:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	68ba      	ldr	r2, [r7, #8]
 8002328:	609a      	str	r2, [r3, #8]
      break;
 800232a:	e04f      	b.n	80023cc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6818      	ldr	r0, [r3, #0]
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	6899      	ldr	r1, [r3, #8]
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	685a      	ldr	r2, [r3, #4]
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	f000 f9a0 	bl	8002680 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	689a      	ldr	r2, [r3, #8]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800234e:	609a      	str	r2, [r3, #8]
      break;
 8002350:	e03c      	b.n	80023cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6818      	ldr	r0, [r3, #0]
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	6859      	ldr	r1, [r3, #4]
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	68db      	ldr	r3, [r3, #12]
 800235e:	461a      	mov	r2, r3
 8002360:	f000 f914 	bl	800258c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	2150      	movs	r1, #80	; 0x50
 800236a:	4618      	mov	r0, r3
 800236c:	f000 f96d 	bl	800264a <TIM_ITRx_SetConfig>
      break;
 8002370:	e02c      	b.n	80023cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6818      	ldr	r0, [r3, #0]
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	6859      	ldr	r1, [r3, #4]
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	68db      	ldr	r3, [r3, #12]
 800237e:	461a      	mov	r2, r3
 8002380:	f000 f933 	bl	80025ea <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	2160      	movs	r1, #96	; 0x60
 800238a:	4618      	mov	r0, r3
 800238c:	f000 f95d 	bl	800264a <TIM_ITRx_SetConfig>
      break;
 8002390:	e01c      	b.n	80023cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6818      	ldr	r0, [r3, #0]
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	6859      	ldr	r1, [r3, #4]
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	68db      	ldr	r3, [r3, #12]
 800239e:	461a      	mov	r2, r3
 80023a0:	f000 f8f4 	bl	800258c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	2140      	movs	r1, #64	; 0x40
 80023aa:	4618      	mov	r0, r3
 80023ac:	f000 f94d 	bl	800264a <TIM_ITRx_SetConfig>
      break;
 80023b0:	e00c      	b.n	80023cc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4619      	mov	r1, r3
 80023bc:	4610      	mov	r0, r2
 80023be:	f000 f944 	bl	800264a <TIM_ITRx_SetConfig>
      break;
 80023c2:	e003      	b.n	80023cc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	73fb      	strb	r3, [r7, #15]
      break;
 80023c8:	e000      	b.n	80023cc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80023ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2201      	movs	r2, #1
 80023d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2200      	movs	r2, #0
 80023d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80023dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80023de:	4618      	mov	r0, r3
 80023e0:	3710      	adds	r7, #16
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}

080023e6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80023e6:	b480      	push	{r7}
 80023e8:	b083      	sub	sp, #12
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80023ee:	bf00      	nop
 80023f0:	370c      	adds	r7, #12
 80023f2:	46bd      	mov	sp, r7
 80023f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f8:	4770      	bx	lr

080023fa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80023fa:	b480      	push	{r7}
 80023fc:	b083      	sub	sp, #12
 80023fe:	af00      	add	r7, sp, #0
 8002400:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002402:	bf00      	nop
 8002404:	370c      	adds	r7, #12
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr

0800240e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800240e:	b480      	push	{r7}
 8002410:	b083      	sub	sp, #12
 8002412:	af00      	add	r7, sp, #0
 8002414:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002416:	bf00      	nop
 8002418:	370c      	adds	r7, #12
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr

08002422 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002422:	b480      	push	{r7}
 8002424:	b083      	sub	sp, #12
 8002426:	af00      	add	r7, sp, #0
 8002428:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800242a:	bf00      	nop
 800242c:	370c      	adds	r7, #12
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr

08002436 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002436:	b480      	push	{r7}
 8002438:	b083      	sub	sp, #12
 800243a:	af00      	add	r7, sp, #0
 800243c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800243e:	bf00      	nop
 8002440:	370c      	adds	r7, #12
 8002442:	46bd      	mov	sp, r7
 8002444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002448:	4770      	bx	lr
	...

0800244c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800244c:	b480      	push	{r7}
 800244e:	b085      	sub	sp, #20
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
 8002454:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	4a40      	ldr	r2, [pc, #256]	; (8002560 <TIM_Base_SetConfig+0x114>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d013      	beq.n	800248c <TIM_Base_SetConfig+0x40>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800246a:	d00f      	beq.n	800248c <TIM_Base_SetConfig+0x40>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	4a3d      	ldr	r2, [pc, #244]	; (8002564 <TIM_Base_SetConfig+0x118>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d00b      	beq.n	800248c <TIM_Base_SetConfig+0x40>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	4a3c      	ldr	r2, [pc, #240]	; (8002568 <TIM_Base_SetConfig+0x11c>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d007      	beq.n	800248c <TIM_Base_SetConfig+0x40>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	4a3b      	ldr	r2, [pc, #236]	; (800256c <TIM_Base_SetConfig+0x120>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d003      	beq.n	800248c <TIM_Base_SetConfig+0x40>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	4a3a      	ldr	r2, [pc, #232]	; (8002570 <TIM_Base_SetConfig+0x124>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d108      	bne.n	800249e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002492:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	68fa      	ldr	r2, [r7, #12]
 800249a:	4313      	orrs	r3, r2
 800249c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	4a2f      	ldr	r2, [pc, #188]	; (8002560 <TIM_Base_SetConfig+0x114>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d02b      	beq.n	80024fe <TIM_Base_SetConfig+0xb2>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024ac:	d027      	beq.n	80024fe <TIM_Base_SetConfig+0xb2>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	4a2c      	ldr	r2, [pc, #176]	; (8002564 <TIM_Base_SetConfig+0x118>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d023      	beq.n	80024fe <TIM_Base_SetConfig+0xb2>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	4a2b      	ldr	r2, [pc, #172]	; (8002568 <TIM_Base_SetConfig+0x11c>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d01f      	beq.n	80024fe <TIM_Base_SetConfig+0xb2>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	4a2a      	ldr	r2, [pc, #168]	; (800256c <TIM_Base_SetConfig+0x120>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d01b      	beq.n	80024fe <TIM_Base_SetConfig+0xb2>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	4a29      	ldr	r2, [pc, #164]	; (8002570 <TIM_Base_SetConfig+0x124>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d017      	beq.n	80024fe <TIM_Base_SetConfig+0xb2>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	4a28      	ldr	r2, [pc, #160]	; (8002574 <TIM_Base_SetConfig+0x128>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d013      	beq.n	80024fe <TIM_Base_SetConfig+0xb2>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	4a27      	ldr	r2, [pc, #156]	; (8002578 <TIM_Base_SetConfig+0x12c>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d00f      	beq.n	80024fe <TIM_Base_SetConfig+0xb2>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	4a26      	ldr	r2, [pc, #152]	; (800257c <TIM_Base_SetConfig+0x130>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d00b      	beq.n	80024fe <TIM_Base_SetConfig+0xb2>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	4a25      	ldr	r2, [pc, #148]	; (8002580 <TIM_Base_SetConfig+0x134>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d007      	beq.n	80024fe <TIM_Base_SetConfig+0xb2>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	4a24      	ldr	r2, [pc, #144]	; (8002584 <TIM_Base_SetConfig+0x138>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d003      	beq.n	80024fe <TIM_Base_SetConfig+0xb2>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	4a23      	ldr	r2, [pc, #140]	; (8002588 <TIM_Base_SetConfig+0x13c>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d108      	bne.n	8002510 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002504:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	68db      	ldr	r3, [r3, #12]
 800250a:	68fa      	ldr	r2, [r7, #12]
 800250c:	4313      	orrs	r3, r2
 800250e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	695b      	ldr	r3, [r3, #20]
 800251a:	4313      	orrs	r3, r2
 800251c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	68fa      	ldr	r2, [r7, #12]
 8002522:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	689a      	ldr	r2, [r3, #8]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	4a0a      	ldr	r2, [pc, #40]	; (8002560 <TIM_Base_SetConfig+0x114>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d003      	beq.n	8002544 <TIM_Base_SetConfig+0xf8>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	4a0c      	ldr	r2, [pc, #48]	; (8002570 <TIM_Base_SetConfig+0x124>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d103      	bne.n	800254c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	691a      	ldr	r2, [r3, #16]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2201      	movs	r2, #1
 8002550:	615a      	str	r2, [r3, #20]
}
 8002552:	bf00      	nop
 8002554:	3714      	adds	r7, #20
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr
 800255e:	bf00      	nop
 8002560:	40010000 	.word	0x40010000
 8002564:	40000400 	.word	0x40000400
 8002568:	40000800 	.word	0x40000800
 800256c:	40000c00 	.word	0x40000c00
 8002570:	40010400 	.word	0x40010400
 8002574:	40014000 	.word	0x40014000
 8002578:	40014400 	.word	0x40014400
 800257c:	40014800 	.word	0x40014800
 8002580:	40001800 	.word	0x40001800
 8002584:	40001c00 	.word	0x40001c00
 8002588:	40002000 	.word	0x40002000

0800258c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800258c:	b480      	push	{r7}
 800258e:	b087      	sub	sp, #28
 8002590:	af00      	add	r7, sp, #0
 8002592:	60f8      	str	r0, [r7, #12]
 8002594:	60b9      	str	r1, [r7, #8]
 8002596:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	6a1b      	ldr	r3, [r3, #32]
 800259c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	6a1b      	ldr	r3, [r3, #32]
 80025a2:	f023 0201 	bic.w	r2, r3, #1
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	699b      	ldr	r3, [r3, #24]
 80025ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80025b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	011b      	lsls	r3, r3, #4
 80025bc:	693a      	ldr	r2, [r7, #16]
 80025be:	4313      	orrs	r3, r2
 80025c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	f023 030a 	bic.w	r3, r3, #10
 80025c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80025ca:	697a      	ldr	r2, [r7, #20]
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	4313      	orrs	r3, r2
 80025d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	693a      	ldr	r2, [r7, #16]
 80025d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	697a      	ldr	r2, [r7, #20]
 80025dc:	621a      	str	r2, [r3, #32]
}
 80025de:	bf00      	nop
 80025e0:	371c      	adds	r7, #28
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr

080025ea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80025ea:	b480      	push	{r7}
 80025ec:	b087      	sub	sp, #28
 80025ee:	af00      	add	r7, sp, #0
 80025f0:	60f8      	str	r0, [r7, #12]
 80025f2:	60b9      	str	r1, [r7, #8]
 80025f4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	6a1b      	ldr	r3, [r3, #32]
 80025fa:	f023 0210 	bic.w	r2, r3, #16
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	699b      	ldr	r3, [r3, #24]
 8002606:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	6a1b      	ldr	r3, [r3, #32]
 800260c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002614:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	031b      	lsls	r3, r3, #12
 800261a:	697a      	ldr	r2, [r7, #20]
 800261c:	4313      	orrs	r3, r2
 800261e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002626:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	011b      	lsls	r3, r3, #4
 800262c:	693a      	ldr	r2, [r7, #16]
 800262e:	4313      	orrs	r3, r2
 8002630:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	697a      	ldr	r2, [r7, #20]
 8002636:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	693a      	ldr	r2, [r7, #16]
 800263c:	621a      	str	r2, [r3, #32]
}
 800263e:	bf00      	nop
 8002640:	371c      	adds	r7, #28
 8002642:	46bd      	mov	sp, r7
 8002644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002648:	4770      	bx	lr

0800264a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800264a:	b480      	push	{r7}
 800264c:	b085      	sub	sp, #20
 800264e:	af00      	add	r7, sp, #0
 8002650:	6078      	str	r0, [r7, #4]
 8002652:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002660:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002662:	683a      	ldr	r2, [r7, #0]
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	4313      	orrs	r3, r2
 8002668:	f043 0307 	orr.w	r3, r3, #7
 800266c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	68fa      	ldr	r2, [r7, #12]
 8002672:	609a      	str	r2, [r3, #8]
}
 8002674:	bf00      	nop
 8002676:	3714      	adds	r7, #20
 8002678:	46bd      	mov	sp, r7
 800267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267e:	4770      	bx	lr

08002680 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002680:	b480      	push	{r7}
 8002682:	b087      	sub	sp, #28
 8002684:	af00      	add	r7, sp, #0
 8002686:	60f8      	str	r0, [r7, #12]
 8002688:	60b9      	str	r1, [r7, #8]
 800268a:	607a      	str	r2, [r7, #4]
 800268c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800269a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	021a      	lsls	r2, r3, #8
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	431a      	orrs	r2, r3
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	4313      	orrs	r3, r2
 80026a8:	697a      	ldr	r2, [r7, #20]
 80026aa:	4313      	orrs	r3, r2
 80026ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	697a      	ldr	r2, [r7, #20]
 80026b2:	609a      	str	r2, [r3, #8]
}
 80026b4:	bf00      	nop
 80026b6:	371c      	adds	r7, #28
 80026b8:	46bd      	mov	sp, r7
 80026ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026be:	4770      	bx	lr

080026c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b085      	sub	sp, #20
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
 80026c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d101      	bne.n	80026d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80026d4:	2302      	movs	r3, #2
 80026d6:	e05a      	b.n	800278e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2201      	movs	r2, #1
 80026dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2202      	movs	r2, #2
 80026e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	68fa      	ldr	r2, [r7, #12]
 8002706:	4313      	orrs	r3, r2
 8002708:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	68fa      	ldr	r2, [r7, #12]
 8002710:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a21      	ldr	r2, [pc, #132]	; (800279c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d022      	beq.n	8002762 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002724:	d01d      	beq.n	8002762 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a1d      	ldr	r2, [pc, #116]	; (80027a0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d018      	beq.n	8002762 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a1b      	ldr	r2, [pc, #108]	; (80027a4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d013      	beq.n	8002762 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a1a      	ldr	r2, [pc, #104]	; (80027a8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d00e      	beq.n	8002762 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a18      	ldr	r2, [pc, #96]	; (80027ac <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d009      	beq.n	8002762 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a17      	ldr	r2, [pc, #92]	; (80027b0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d004      	beq.n	8002762 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a15      	ldr	r2, [pc, #84]	; (80027b4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d10c      	bne.n	800277c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002768:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	68ba      	ldr	r2, [r7, #8]
 8002770:	4313      	orrs	r3, r2
 8002772:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	68ba      	ldr	r2, [r7, #8]
 800277a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2201      	movs	r2, #1
 8002780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2200      	movs	r2, #0
 8002788:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800278c:	2300      	movs	r3, #0
}
 800278e:	4618      	mov	r0, r3
 8002790:	3714      	adds	r7, #20
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr
 800279a:	bf00      	nop
 800279c:	40010000 	.word	0x40010000
 80027a0:	40000400 	.word	0x40000400
 80027a4:	40000800 	.word	0x40000800
 80027a8:	40000c00 	.word	0x40000c00
 80027ac:	40010400 	.word	0x40010400
 80027b0:	40014000 	.word	0x40014000
 80027b4:	40001800 	.word	0x40001800

080027b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b083      	sub	sp, #12
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80027c0:	bf00      	nop
 80027c2:	370c      	adds	r7, #12
 80027c4:	46bd      	mov	sp, r7
 80027c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ca:	4770      	bx	lr

080027cc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80027d4:	bf00      	nop
 80027d6:	370c      	adds	r7, #12
 80027d8:	46bd      	mov	sp, r7
 80027da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027de:	4770      	bx	lr

080027e0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b082      	sub	sp, #8
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d101      	bne.n	80027f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e03f      	b.n	8002872 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d106      	bne.n	800280c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2200      	movs	r2, #0
 8002802:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	f7fe fa0c 	bl	8000c24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2224      	movs	r2, #36	; 0x24
 8002810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	68da      	ldr	r2, [r3, #12]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002822:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002824:	6878      	ldr	r0, [r7, #4]
 8002826:	f000 fd7b 	bl	8003320 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	691a      	ldr	r2, [r3, #16]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002838:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	695a      	ldr	r2, [r3, #20]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002848:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	68da      	ldr	r2, [r3, #12]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002858:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2200      	movs	r2, #0
 800285e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2220      	movs	r2, #32
 8002864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2220      	movs	r2, #32
 800286c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002870:	2300      	movs	r3, #0
}
 8002872:	4618      	mov	r0, r3
 8002874:	3708      	adds	r7, #8
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}

0800287a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800287a:	b580      	push	{r7, lr}
 800287c:	b08a      	sub	sp, #40	; 0x28
 800287e:	af02      	add	r7, sp, #8
 8002880:	60f8      	str	r0, [r7, #12]
 8002882:	60b9      	str	r1, [r7, #8]
 8002884:	603b      	str	r3, [r7, #0]
 8002886:	4613      	mov	r3, r2
 8002888:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800288a:	2300      	movs	r3, #0
 800288c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002894:	b2db      	uxtb	r3, r3
 8002896:	2b20      	cmp	r3, #32
 8002898:	d17c      	bne.n	8002994 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d002      	beq.n	80028a6 <HAL_UART_Transmit+0x2c>
 80028a0:	88fb      	ldrh	r3, [r7, #6]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d101      	bne.n	80028aa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e075      	b.n	8002996 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d101      	bne.n	80028b8 <HAL_UART_Transmit+0x3e>
 80028b4:	2302      	movs	r3, #2
 80028b6:	e06e      	b.n	8002996 <HAL_UART_Transmit+0x11c>
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	2201      	movs	r2, #1
 80028bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	2200      	movs	r2, #0
 80028c4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	2221      	movs	r2, #33	; 0x21
 80028ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80028ce:	f7fe fb09 	bl	8000ee4 <HAL_GetTick>
 80028d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	88fa      	ldrh	r2, [r7, #6]
 80028d8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	88fa      	ldrh	r2, [r7, #6]
 80028de:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028e8:	d108      	bne.n	80028fc <HAL_UART_Transmit+0x82>
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	691b      	ldr	r3, [r3, #16]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d104      	bne.n	80028fc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80028f2:	2300      	movs	r3, #0
 80028f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	61bb      	str	r3, [r7, #24]
 80028fa:	e003      	b.n	8002904 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002900:	2300      	movs	r3, #0
 8002902:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	2200      	movs	r2, #0
 8002908:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800290c:	e02a      	b.n	8002964 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	9300      	str	r3, [sp, #0]
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	2200      	movs	r2, #0
 8002916:	2180      	movs	r1, #128	; 0x80
 8002918:	68f8      	ldr	r0, [r7, #12]
 800291a:	f000 faf9 	bl	8002f10 <UART_WaitOnFlagUntilTimeout>
 800291e:	4603      	mov	r3, r0
 8002920:	2b00      	cmp	r3, #0
 8002922:	d001      	beq.n	8002928 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002924:	2303      	movs	r3, #3
 8002926:	e036      	b.n	8002996 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002928:	69fb      	ldr	r3, [r7, #28]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d10b      	bne.n	8002946 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800292e:	69bb      	ldr	r3, [r7, #24]
 8002930:	881b      	ldrh	r3, [r3, #0]
 8002932:	461a      	mov	r2, r3
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800293c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800293e:	69bb      	ldr	r3, [r7, #24]
 8002940:	3302      	adds	r3, #2
 8002942:	61bb      	str	r3, [r7, #24]
 8002944:	e007      	b.n	8002956 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002946:	69fb      	ldr	r3, [r7, #28]
 8002948:	781a      	ldrb	r2, [r3, #0]
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002950:	69fb      	ldr	r3, [r7, #28]
 8002952:	3301      	adds	r3, #1
 8002954:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800295a:	b29b      	uxth	r3, r3
 800295c:	3b01      	subs	r3, #1
 800295e:	b29a      	uxth	r2, r3
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002968:	b29b      	uxth	r3, r3
 800296a:	2b00      	cmp	r3, #0
 800296c:	d1cf      	bne.n	800290e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	9300      	str	r3, [sp, #0]
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	2200      	movs	r2, #0
 8002976:	2140      	movs	r1, #64	; 0x40
 8002978:	68f8      	ldr	r0, [r7, #12]
 800297a:	f000 fac9 	bl	8002f10 <UART_WaitOnFlagUntilTimeout>
 800297e:	4603      	mov	r3, r0
 8002980:	2b00      	cmp	r3, #0
 8002982:	d001      	beq.n	8002988 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002984:	2303      	movs	r3, #3
 8002986:	e006      	b.n	8002996 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	2220      	movs	r2, #32
 800298c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002990:	2300      	movs	r3, #0
 8002992:	e000      	b.n	8002996 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002994:	2302      	movs	r3, #2
  }
}
 8002996:	4618      	mov	r0, r3
 8002998:	3720      	adds	r7, #32
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
	...

080029a0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b0ba      	sub	sp, #232	; 0xe8
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	68db      	ldr	r3, [r3, #12]
 80029b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	695b      	ldr	r3, [r3, #20]
 80029c2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80029c6:	2300      	movs	r3, #0
 80029c8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80029cc:	2300      	movs	r3, #0
 80029ce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80029d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029d6:	f003 030f 	and.w	r3, r3, #15
 80029da:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80029de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d10f      	bne.n	8002a06 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80029e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029ea:	f003 0320 	and.w	r3, r3, #32
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d009      	beq.n	8002a06 <HAL_UART_IRQHandler+0x66>
 80029f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029f6:	f003 0320 	and.w	r3, r3, #32
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d003      	beq.n	8002a06 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	f000 fbd3 	bl	80031aa <UART_Receive_IT>
      return;
 8002a04:	e256      	b.n	8002eb4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002a06:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	f000 80de 	beq.w	8002bcc <HAL_UART_IRQHandler+0x22c>
 8002a10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a14:	f003 0301 	and.w	r3, r3, #1
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d106      	bne.n	8002a2a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002a1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a20:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	f000 80d1 	beq.w	8002bcc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002a2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a2e:	f003 0301 	and.w	r3, r3, #1
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d00b      	beq.n	8002a4e <HAL_UART_IRQHandler+0xae>
 8002a36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d005      	beq.n	8002a4e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a46:	f043 0201 	orr.w	r2, r3, #1
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002a4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a52:	f003 0304 	and.w	r3, r3, #4
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d00b      	beq.n	8002a72 <HAL_UART_IRQHandler+0xd2>
 8002a5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a5e:	f003 0301 	and.w	r3, r3, #1
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d005      	beq.n	8002a72 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6a:	f043 0202 	orr.w	r2, r3, #2
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002a72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a76:	f003 0302 	and.w	r3, r3, #2
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d00b      	beq.n	8002a96 <HAL_UART_IRQHandler+0xf6>
 8002a7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a82:	f003 0301 	and.w	r3, r3, #1
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d005      	beq.n	8002a96 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8e:	f043 0204 	orr.w	r2, r3, #4
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002a96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a9a:	f003 0308 	and.w	r3, r3, #8
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d011      	beq.n	8002ac6 <HAL_UART_IRQHandler+0x126>
 8002aa2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002aa6:	f003 0320 	and.w	r3, r3, #32
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d105      	bne.n	8002aba <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002aae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002ab2:	f003 0301 	and.w	r3, r3, #1
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d005      	beq.n	8002ac6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002abe:	f043 0208 	orr.w	r2, r3, #8
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	f000 81ed 	beq.w	8002eaa <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002ad0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ad4:	f003 0320 	and.w	r3, r3, #32
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d008      	beq.n	8002aee <HAL_UART_IRQHandler+0x14e>
 8002adc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ae0:	f003 0320 	and.w	r3, r3, #32
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d002      	beq.n	8002aee <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002ae8:	6878      	ldr	r0, [r7, #4]
 8002aea:	f000 fb5e 	bl	80031aa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	695b      	ldr	r3, [r3, #20]
 8002af4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002af8:	2b40      	cmp	r3, #64	; 0x40
 8002afa:	bf0c      	ite	eq
 8002afc:	2301      	moveq	r3, #1
 8002afe:	2300      	movne	r3, #0
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0a:	f003 0308 	and.w	r3, r3, #8
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d103      	bne.n	8002b1a <HAL_UART_IRQHandler+0x17a>
 8002b12:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d04f      	beq.n	8002bba <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	f000 fa66 	bl	8002fec <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	695b      	ldr	r3, [r3, #20]
 8002b26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b2a:	2b40      	cmp	r3, #64	; 0x40
 8002b2c:	d141      	bne.n	8002bb2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	3314      	adds	r3, #20
 8002b34:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b38:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002b3c:	e853 3f00 	ldrex	r3, [r3]
 8002b40:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002b44:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002b48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b4c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	3314      	adds	r3, #20
 8002b56:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002b5a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002b5e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b62:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002b66:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002b6a:	e841 2300 	strex	r3, r2, [r1]
 8002b6e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002b72:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d1d9      	bne.n	8002b2e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d013      	beq.n	8002baa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b86:	4a7d      	ldr	r2, [pc, #500]	; (8002d7c <HAL_UART_IRQHandler+0x3dc>)
 8002b88:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f7fe fb59 	bl	8001246 <HAL_DMA_Abort_IT>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d016      	beq.n	8002bc8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ba0:	687a      	ldr	r2, [r7, #4]
 8002ba2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002ba4:	4610      	mov	r0, r2
 8002ba6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ba8:	e00e      	b.n	8002bc8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	f000 f99a 	bl	8002ee4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bb0:	e00a      	b.n	8002bc8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	f000 f996 	bl	8002ee4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bb8:	e006      	b.n	8002bc8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f000 f992 	bl	8002ee4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002bc6:	e170      	b.n	8002eaa <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bc8:	bf00      	nop
    return;
 8002bca:	e16e      	b.n	8002eaa <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	f040 814a 	bne.w	8002e6a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002bd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bda:	f003 0310 	and.w	r3, r3, #16
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	f000 8143 	beq.w	8002e6a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002be4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002be8:	f003 0310 	and.w	r3, r3, #16
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	f000 813c 	beq.w	8002e6a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	60bb      	str	r3, [r7, #8]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	60bb      	str	r3, [r7, #8]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	60bb      	str	r3, [r7, #8]
 8002c06:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	695b      	ldr	r3, [r3, #20]
 8002c0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c12:	2b40      	cmp	r3, #64	; 0x40
 8002c14:	f040 80b4 	bne.w	8002d80 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002c24:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	f000 8140 	beq.w	8002eae <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002c32:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002c36:	429a      	cmp	r2, r3
 8002c38:	f080 8139 	bcs.w	8002eae <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002c42:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c48:	69db      	ldr	r3, [r3, #28]
 8002c4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c4e:	f000 8088 	beq.w	8002d62 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	330c      	adds	r3, #12
 8002c58:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c5c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002c60:	e853 3f00 	ldrex	r3, [r3]
 8002c64:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002c68:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002c6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c70:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	330c      	adds	r3, #12
 8002c7a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002c7e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002c82:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c86:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002c8a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002c8e:	e841 2300 	strex	r3, r2, [r1]
 8002c92:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002c96:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d1d9      	bne.n	8002c52 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	3314      	adds	r3, #20
 8002ca4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ca6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ca8:	e853 3f00 	ldrex	r3, [r3]
 8002cac:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002cae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002cb0:	f023 0301 	bic.w	r3, r3, #1
 8002cb4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	3314      	adds	r3, #20
 8002cbe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002cc2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002cc6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cc8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002cca:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002cce:	e841 2300 	strex	r3, r2, [r1]
 8002cd2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002cd4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d1e1      	bne.n	8002c9e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	3314      	adds	r3, #20
 8002ce0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ce2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ce4:	e853 3f00 	ldrex	r3, [r3]
 8002ce8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002cea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002cec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002cf0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	3314      	adds	r3, #20
 8002cfa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002cfe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002d00:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d02:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002d04:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002d06:	e841 2300 	strex	r3, r2, [r1]
 8002d0a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002d0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d1e3      	bne.n	8002cda <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2220      	movs	r2, #32
 8002d16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	330c      	adds	r3, #12
 8002d26:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d2a:	e853 3f00 	ldrex	r3, [r3]
 8002d2e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002d30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d32:	f023 0310 	bic.w	r3, r3, #16
 8002d36:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	330c      	adds	r3, #12
 8002d40:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002d44:	65ba      	str	r2, [r7, #88]	; 0x58
 8002d46:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d48:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002d4a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002d4c:	e841 2300 	strex	r3, r2, [r1]
 8002d50:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002d52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d1e3      	bne.n	8002d20 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f7fe fa02 	bl	8001166 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002d6a:	b29b      	uxth	r3, r3
 8002d6c:	1ad3      	subs	r3, r2, r3
 8002d6e:	b29b      	uxth	r3, r3
 8002d70:	4619      	mov	r1, r3
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	f000 f8c0 	bl	8002ef8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002d78:	e099      	b.n	8002eae <HAL_UART_IRQHandler+0x50e>
 8002d7a:	bf00      	nop
 8002d7c:	080030b3 	.word	0x080030b3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002d88:	b29b      	uxth	r3, r3
 8002d8a:	1ad3      	subs	r3, r2, r3
 8002d8c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002d94:	b29b      	uxth	r3, r3
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	f000 808b 	beq.w	8002eb2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002d9c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	f000 8086 	beq.w	8002eb2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	330c      	adds	r3, #12
 8002dac:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002db0:	e853 3f00 	ldrex	r3, [r3]
 8002db4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002db6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002db8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002dbc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	330c      	adds	r3, #12
 8002dc6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002dca:	647a      	str	r2, [r7, #68]	; 0x44
 8002dcc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dce:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002dd0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002dd2:	e841 2300 	strex	r3, r2, [r1]
 8002dd6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002dd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d1e3      	bne.n	8002da6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	3314      	adds	r3, #20
 8002de4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de8:	e853 3f00 	ldrex	r3, [r3]
 8002dec:	623b      	str	r3, [r7, #32]
   return(result);
 8002dee:	6a3b      	ldr	r3, [r7, #32]
 8002df0:	f023 0301 	bic.w	r3, r3, #1
 8002df4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	3314      	adds	r3, #20
 8002dfe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002e02:	633a      	str	r2, [r7, #48]	; 0x30
 8002e04:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e06:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002e08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e0a:	e841 2300 	strex	r3, r2, [r1]
 8002e0e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d1e3      	bne.n	8002dde <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2220      	movs	r2, #32
 8002e1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2200      	movs	r2, #0
 8002e22:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	330c      	adds	r3, #12
 8002e2a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	e853 3f00 	ldrex	r3, [r3]
 8002e32:	60fb      	str	r3, [r7, #12]
   return(result);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	f023 0310 	bic.w	r3, r3, #16
 8002e3a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	330c      	adds	r3, #12
 8002e44:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002e48:	61fa      	str	r2, [r7, #28]
 8002e4a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e4c:	69b9      	ldr	r1, [r7, #24]
 8002e4e:	69fa      	ldr	r2, [r7, #28]
 8002e50:	e841 2300 	strex	r3, r2, [r1]
 8002e54:	617b      	str	r3, [r7, #20]
   return(result);
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d1e3      	bne.n	8002e24 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002e5c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002e60:	4619      	mov	r1, r3
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	f000 f848 	bl	8002ef8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002e68:	e023      	b.n	8002eb2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002e6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d009      	beq.n	8002e8a <HAL_UART_IRQHandler+0x4ea>
 8002e76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d003      	beq.n	8002e8a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002e82:	6878      	ldr	r0, [r7, #4]
 8002e84:	f000 f929 	bl	80030da <UART_Transmit_IT>
    return;
 8002e88:	e014      	b.n	8002eb4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002e8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d00e      	beq.n	8002eb4 <HAL_UART_IRQHandler+0x514>
 8002e96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d008      	beq.n	8002eb4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	f000 f969 	bl	800317a <UART_EndTransmit_IT>
    return;
 8002ea8:	e004      	b.n	8002eb4 <HAL_UART_IRQHandler+0x514>
    return;
 8002eaa:	bf00      	nop
 8002eac:	e002      	b.n	8002eb4 <HAL_UART_IRQHandler+0x514>
      return;
 8002eae:	bf00      	nop
 8002eb0:	e000      	b.n	8002eb4 <HAL_UART_IRQHandler+0x514>
      return;
 8002eb2:	bf00      	nop
  }
}
 8002eb4:	37e8      	adds	r7, #232	; 0xe8
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop

08002ebc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b083      	sub	sp, #12
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002ec4:	bf00      	nop
 8002ec6:	370c      	adds	r7, #12
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ece:	4770      	bx	lr

08002ed0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b083      	sub	sp, #12
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002ed8:	bf00      	nop
 8002eda:	370c      	adds	r7, #12
 8002edc:	46bd      	mov	sp, r7
 8002ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee2:	4770      	bx	lr

08002ee4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b083      	sub	sp, #12
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002eec:	bf00      	nop
 8002eee:	370c      	adds	r7, #12
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef6:	4770      	bx	lr

08002ef8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b083      	sub	sp, #12
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
 8002f00:	460b      	mov	r3, r1
 8002f02:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002f04:	bf00      	nop
 8002f06:	370c      	adds	r7, #12
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0e:	4770      	bx	lr

08002f10 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b090      	sub	sp, #64	; 0x40
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	60f8      	str	r0, [r7, #12]
 8002f18:	60b9      	str	r1, [r7, #8]
 8002f1a:	603b      	str	r3, [r7, #0]
 8002f1c:	4613      	mov	r3, r2
 8002f1e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f20:	e050      	b.n	8002fc4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f28:	d04c      	beq.n	8002fc4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002f2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d007      	beq.n	8002f40 <UART_WaitOnFlagUntilTimeout+0x30>
 8002f30:	f7fd ffd8 	bl	8000ee4 <HAL_GetTick>
 8002f34:	4602      	mov	r2, r0
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	1ad3      	subs	r3, r2, r3
 8002f3a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002f3c:	429a      	cmp	r2, r3
 8002f3e:	d241      	bcs.n	8002fc4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	330c      	adds	r3, #12
 8002f46:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f4a:	e853 3f00 	ldrex	r3, [r3]
 8002f4e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f52:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002f56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	330c      	adds	r3, #12
 8002f5e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002f60:	637a      	str	r2, [r7, #52]	; 0x34
 8002f62:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f64:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002f66:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002f68:	e841 2300 	strex	r3, r2, [r1]
 8002f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d1e5      	bne.n	8002f40 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	3314      	adds	r3, #20
 8002f7a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	e853 3f00 	ldrex	r3, [r3]
 8002f82:	613b      	str	r3, [r7, #16]
   return(result);
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	f023 0301 	bic.w	r3, r3, #1
 8002f8a:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	3314      	adds	r3, #20
 8002f92:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002f94:	623a      	str	r2, [r7, #32]
 8002f96:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f98:	69f9      	ldr	r1, [r7, #28]
 8002f9a:	6a3a      	ldr	r2, [r7, #32]
 8002f9c:	e841 2300 	strex	r3, r2, [r1]
 8002fa0:	61bb      	str	r3, [r7, #24]
   return(result);
 8002fa2:	69bb      	ldr	r3, [r7, #24]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d1e5      	bne.n	8002f74 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2220      	movs	r2, #32
 8002fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2220      	movs	r2, #32
 8002fb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002fc0:	2303      	movs	r3, #3
 8002fc2:	e00f      	b.n	8002fe4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	4013      	ands	r3, r2
 8002fce:	68ba      	ldr	r2, [r7, #8]
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	bf0c      	ite	eq
 8002fd4:	2301      	moveq	r3, #1
 8002fd6:	2300      	movne	r3, #0
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	461a      	mov	r2, r3
 8002fdc:	79fb      	ldrb	r3, [r7, #7]
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	d09f      	beq.n	8002f22 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002fe2:	2300      	movs	r3, #0
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	3740      	adds	r7, #64	; 0x40
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}

08002fec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b095      	sub	sp, #84	; 0x54
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	330c      	adds	r3, #12
 8002ffa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ffc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ffe:	e853 3f00 	ldrex	r3, [r3]
 8003002:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003006:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800300a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	330c      	adds	r3, #12
 8003012:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003014:	643a      	str	r2, [r7, #64]	; 0x40
 8003016:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003018:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800301a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800301c:	e841 2300 	strex	r3, r2, [r1]
 8003020:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003024:	2b00      	cmp	r3, #0
 8003026:	d1e5      	bne.n	8002ff4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	3314      	adds	r3, #20
 800302e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003030:	6a3b      	ldr	r3, [r7, #32]
 8003032:	e853 3f00 	ldrex	r3, [r3]
 8003036:	61fb      	str	r3, [r7, #28]
   return(result);
 8003038:	69fb      	ldr	r3, [r7, #28]
 800303a:	f023 0301 	bic.w	r3, r3, #1
 800303e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	3314      	adds	r3, #20
 8003046:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003048:	62fa      	str	r2, [r7, #44]	; 0x2c
 800304a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800304c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800304e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003050:	e841 2300 	strex	r3, r2, [r1]
 8003054:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003058:	2b00      	cmp	r3, #0
 800305a:	d1e5      	bne.n	8003028 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003060:	2b01      	cmp	r3, #1
 8003062:	d119      	bne.n	8003098 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	330c      	adds	r3, #12
 800306a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	e853 3f00 	ldrex	r3, [r3]
 8003072:	60bb      	str	r3, [r7, #8]
   return(result);
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	f023 0310 	bic.w	r3, r3, #16
 800307a:	647b      	str	r3, [r7, #68]	; 0x44
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	330c      	adds	r3, #12
 8003082:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003084:	61ba      	str	r2, [r7, #24]
 8003086:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003088:	6979      	ldr	r1, [r7, #20]
 800308a:	69ba      	ldr	r2, [r7, #24]
 800308c:	e841 2300 	strex	r3, r2, [r1]
 8003090:	613b      	str	r3, [r7, #16]
   return(result);
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d1e5      	bne.n	8003064 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2220      	movs	r2, #32
 800309c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2200      	movs	r2, #0
 80030a4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80030a6:	bf00      	nop
 80030a8:	3754      	adds	r7, #84	; 0x54
 80030aa:	46bd      	mov	sp, r7
 80030ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b0:	4770      	bx	lr

080030b2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80030b2:	b580      	push	{r7, lr}
 80030b4:	b084      	sub	sp, #16
 80030b6:	af00      	add	r7, sp, #0
 80030b8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030be:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2200      	movs	r2, #0
 80030c4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	2200      	movs	r2, #0
 80030ca:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80030cc:	68f8      	ldr	r0, [r7, #12]
 80030ce:	f7ff ff09 	bl	8002ee4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80030d2:	bf00      	nop
 80030d4:	3710      	adds	r7, #16
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}

080030da <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80030da:	b480      	push	{r7}
 80030dc:	b085      	sub	sp, #20
 80030de:	af00      	add	r7, sp, #0
 80030e0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	2b21      	cmp	r3, #33	; 0x21
 80030ec:	d13e      	bne.n	800316c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030f6:	d114      	bne.n	8003122 <UART_Transmit_IT+0x48>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	691b      	ldr	r3, [r3, #16]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d110      	bne.n	8003122 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6a1b      	ldr	r3, [r3, #32]
 8003104:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	881b      	ldrh	r3, [r3, #0]
 800310a:	461a      	mov	r2, r3
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003114:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6a1b      	ldr	r3, [r3, #32]
 800311a:	1c9a      	adds	r2, r3, #2
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	621a      	str	r2, [r3, #32]
 8003120:	e008      	b.n	8003134 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6a1b      	ldr	r3, [r3, #32]
 8003126:	1c59      	adds	r1, r3, #1
 8003128:	687a      	ldr	r2, [r7, #4]
 800312a:	6211      	str	r1, [r2, #32]
 800312c:	781a      	ldrb	r2, [r3, #0]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003138:	b29b      	uxth	r3, r3
 800313a:	3b01      	subs	r3, #1
 800313c:	b29b      	uxth	r3, r3
 800313e:	687a      	ldr	r2, [r7, #4]
 8003140:	4619      	mov	r1, r3
 8003142:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003144:	2b00      	cmp	r3, #0
 8003146:	d10f      	bne.n	8003168 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	68da      	ldr	r2, [r3, #12]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003156:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	68da      	ldr	r2, [r3, #12]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003166:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003168:	2300      	movs	r3, #0
 800316a:	e000      	b.n	800316e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800316c:	2302      	movs	r3, #2
  }
}
 800316e:	4618      	mov	r0, r3
 8003170:	3714      	adds	r7, #20
 8003172:	46bd      	mov	sp, r7
 8003174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003178:	4770      	bx	lr

0800317a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800317a:	b580      	push	{r7, lr}
 800317c:	b082      	sub	sp, #8
 800317e:	af00      	add	r7, sp, #0
 8003180:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	68da      	ldr	r2, [r3, #12]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003190:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2220      	movs	r2, #32
 8003196:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f7ff fe8e 	bl	8002ebc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80031a0:	2300      	movs	r3, #0
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3708      	adds	r7, #8
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}

080031aa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80031aa:	b580      	push	{r7, lr}
 80031ac:	b08c      	sub	sp, #48	; 0x30
 80031ae:	af00      	add	r7, sp, #0
 80031b0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	2b22      	cmp	r3, #34	; 0x22
 80031bc:	f040 80ab 	bne.w	8003316 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031c8:	d117      	bne.n	80031fa <UART_Receive_IT+0x50>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	691b      	ldr	r3, [r3, #16]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d113      	bne.n	80031fa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80031d2:	2300      	movs	r3, #0
 80031d4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031da:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	b29b      	uxth	r3, r3
 80031e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031e8:	b29a      	uxth	r2, r3
 80031ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031ec:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031f2:	1c9a      	adds	r2, r3, #2
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	629a      	str	r2, [r3, #40]	; 0x28
 80031f8:	e026      	b.n	8003248 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031fe:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003200:	2300      	movs	r3, #0
 8003202:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800320c:	d007      	beq.n	800321e <UART_Receive_IT+0x74>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d10a      	bne.n	800322c <UART_Receive_IT+0x82>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	691b      	ldr	r3, [r3, #16]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d106      	bne.n	800322c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	b2da      	uxtb	r2, r3
 8003226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003228:	701a      	strb	r2, [r3, #0]
 800322a:	e008      	b.n	800323e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	b2db      	uxtb	r3, r3
 8003234:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003238:	b2da      	uxtb	r2, r3
 800323a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800323c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003242:	1c5a      	adds	r2, r3, #1
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800324c:	b29b      	uxth	r3, r3
 800324e:	3b01      	subs	r3, #1
 8003250:	b29b      	uxth	r3, r3
 8003252:	687a      	ldr	r2, [r7, #4]
 8003254:	4619      	mov	r1, r3
 8003256:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003258:	2b00      	cmp	r3, #0
 800325a:	d15a      	bne.n	8003312 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	68da      	ldr	r2, [r3, #12]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f022 0220 	bic.w	r2, r2, #32
 800326a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	68da      	ldr	r2, [r3, #12]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800327a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	695a      	ldr	r2, [r3, #20]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f022 0201 	bic.w	r2, r2, #1
 800328a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2220      	movs	r2, #32
 8003290:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003298:	2b01      	cmp	r3, #1
 800329a:	d135      	bne.n	8003308 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2200      	movs	r2, #0
 80032a0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	330c      	adds	r3, #12
 80032a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	e853 3f00 	ldrex	r3, [r3]
 80032b0:	613b      	str	r3, [r7, #16]
   return(result);
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	f023 0310 	bic.w	r3, r3, #16
 80032b8:	627b      	str	r3, [r7, #36]	; 0x24
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	330c      	adds	r3, #12
 80032c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032c2:	623a      	str	r2, [r7, #32]
 80032c4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032c6:	69f9      	ldr	r1, [r7, #28]
 80032c8:	6a3a      	ldr	r2, [r7, #32]
 80032ca:	e841 2300 	strex	r3, r2, [r1]
 80032ce:	61bb      	str	r3, [r7, #24]
   return(result);
 80032d0:	69bb      	ldr	r3, [r7, #24]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d1e5      	bne.n	80032a2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f003 0310 	and.w	r3, r3, #16
 80032e0:	2b10      	cmp	r3, #16
 80032e2:	d10a      	bne.n	80032fa <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80032e4:	2300      	movs	r3, #0
 80032e6:	60fb      	str	r3, [r7, #12]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	60fb      	str	r3, [r7, #12]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	60fb      	str	r3, [r7, #12]
 80032f8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80032fe:	4619      	mov	r1, r3
 8003300:	6878      	ldr	r0, [r7, #4]
 8003302:	f7ff fdf9 	bl	8002ef8 <HAL_UARTEx_RxEventCallback>
 8003306:	e002      	b.n	800330e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003308:	6878      	ldr	r0, [r7, #4]
 800330a:	f7ff fde1 	bl	8002ed0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800330e:	2300      	movs	r3, #0
 8003310:	e002      	b.n	8003318 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003312:	2300      	movs	r3, #0
 8003314:	e000      	b.n	8003318 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003316:	2302      	movs	r3, #2
  }
}
 8003318:	4618      	mov	r0, r3
 800331a:	3730      	adds	r7, #48	; 0x30
 800331c:	46bd      	mov	sp, r7
 800331e:	bd80      	pop	{r7, pc}

08003320 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003320:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003324:	b0c0      	sub	sp, #256	; 0x100
 8003326:	af00      	add	r7, sp, #0
 8003328:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800332c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	691b      	ldr	r3, [r3, #16]
 8003334:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003338:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800333c:	68d9      	ldr	r1, [r3, #12]
 800333e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	ea40 0301 	orr.w	r3, r0, r1
 8003348:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800334a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800334e:	689a      	ldr	r2, [r3, #8]
 8003350:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003354:	691b      	ldr	r3, [r3, #16]
 8003356:	431a      	orrs	r2, r3
 8003358:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800335c:	695b      	ldr	r3, [r3, #20]
 800335e:	431a      	orrs	r2, r3
 8003360:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003364:	69db      	ldr	r3, [r3, #28]
 8003366:	4313      	orrs	r3, r2
 8003368:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800336c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	68db      	ldr	r3, [r3, #12]
 8003374:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003378:	f021 010c 	bic.w	r1, r1, #12
 800337c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003386:	430b      	orrs	r3, r1
 8003388:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800338a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	695b      	ldr	r3, [r3, #20]
 8003392:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003396:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800339a:	6999      	ldr	r1, [r3, #24]
 800339c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	ea40 0301 	orr.w	r3, r0, r1
 80033a6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80033a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033ac:	681a      	ldr	r2, [r3, #0]
 80033ae:	4b8f      	ldr	r3, [pc, #572]	; (80035ec <UART_SetConfig+0x2cc>)
 80033b0:	429a      	cmp	r2, r3
 80033b2:	d005      	beq.n	80033c0 <UART_SetConfig+0xa0>
 80033b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	4b8d      	ldr	r3, [pc, #564]	; (80035f0 <UART_SetConfig+0x2d0>)
 80033bc:	429a      	cmp	r2, r3
 80033be:	d104      	bne.n	80033ca <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80033c0:	f7fe fd76 	bl	8001eb0 <HAL_RCC_GetPCLK2Freq>
 80033c4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80033c8:	e003      	b.n	80033d2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80033ca:	f7fe fd5d 	bl	8001e88 <HAL_RCC_GetPCLK1Freq>
 80033ce:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80033d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033d6:	69db      	ldr	r3, [r3, #28]
 80033d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033dc:	f040 810c 	bne.w	80035f8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80033e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80033e4:	2200      	movs	r2, #0
 80033e6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80033ea:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80033ee:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80033f2:	4622      	mov	r2, r4
 80033f4:	462b      	mov	r3, r5
 80033f6:	1891      	adds	r1, r2, r2
 80033f8:	65b9      	str	r1, [r7, #88]	; 0x58
 80033fa:	415b      	adcs	r3, r3
 80033fc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80033fe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003402:	4621      	mov	r1, r4
 8003404:	eb12 0801 	adds.w	r8, r2, r1
 8003408:	4629      	mov	r1, r5
 800340a:	eb43 0901 	adc.w	r9, r3, r1
 800340e:	f04f 0200 	mov.w	r2, #0
 8003412:	f04f 0300 	mov.w	r3, #0
 8003416:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800341a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800341e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003422:	4690      	mov	r8, r2
 8003424:	4699      	mov	r9, r3
 8003426:	4623      	mov	r3, r4
 8003428:	eb18 0303 	adds.w	r3, r8, r3
 800342c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003430:	462b      	mov	r3, r5
 8003432:	eb49 0303 	adc.w	r3, r9, r3
 8003436:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800343a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	2200      	movs	r2, #0
 8003442:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003446:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800344a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800344e:	460b      	mov	r3, r1
 8003450:	18db      	adds	r3, r3, r3
 8003452:	653b      	str	r3, [r7, #80]	; 0x50
 8003454:	4613      	mov	r3, r2
 8003456:	eb42 0303 	adc.w	r3, r2, r3
 800345a:	657b      	str	r3, [r7, #84]	; 0x54
 800345c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003460:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003464:	f7fc ff0c 	bl	8000280 <__aeabi_uldivmod>
 8003468:	4602      	mov	r2, r0
 800346a:	460b      	mov	r3, r1
 800346c:	4b61      	ldr	r3, [pc, #388]	; (80035f4 <UART_SetConfig+0x2d4>)
 800346e:	fba3 2302 	umull	r2, r3, r3, r2
 8003472:	095b      	lsrs	r3, r3, #5
 8003474:	011c      	lsls	r4, r3, #4
 8003476:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800347a:	2200      	movs	r2, #0
 800347c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003480:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003484:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003488:	4642      	mov	r2, r8
 800348a:	464b      	mov	r3, r9
 800348c:	1891      	adds	r1, r2, r2
 800348e:	64b9      	str	r1, [r7, #72]	; 0x48
 8003490:	415b      	adcs	r3, r3
 8003492:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003494:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003498:	4641      	mov	r1, r8
 800349a:	eb12 0a01 	adds.w	sl, r2, r1
 800349e:	4649      	mov	r1, r9
 80034a0:	eb43 0b01 	adc.w	fp, r3, r1
 80034a4:	f04f 0200 	mov.w	r2, #0
 80034a8:	f04f 0300 	mov.w	r3, #0
 80034ac:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80034b0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80034b4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80034b8:	4692      	mov	sl, r2
 80034ba:	469b      	mov	fp, r3
 80034bc:	4643      	mov	r3, r8
 80034be:	eb1a 0303 	adds.w	r3, sl, r3
 80034c2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80034c6:	464b      	mov	r3, r9
 80034c8:	eb4b 0303 	adc.w	r3, fp, r3
 80034cc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80034d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	2200      	movs	r2, #0
 80034d8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80034dc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80034e0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80034e4:	460b      	mov	r3, r1
 80034e6:	18db      	adds	r3, r3, r3
 80034e8:	643b      	str	r3, [r7, #64]	; 0x40
 80034ea:	4613      	mov	r3, r2
 80034ec:	eb42 0303 	adc.w	r3, r2, r3
 80034f0:	647b      	str	r3, [r7, #68]	; 0x44
 80034f2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80034f6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80034fa:	f7fc fec1 	bl	8000280 <__aeabi_uldivmod>
 80034fe:	4602      	mov	r2, r0
 8003500:	460b      	mov	r3, r1
 8003502:	4611      	mov	r1, r2
 8003504:	4b3b      	ldr	r3, [pc, #236]	; (80035f4 <UART_SetConfig+0x2d4>)
 8003506:	fba3 2301 	umull	r2, r3, r3, r1
 800350a:	095b      	lsrs	r3, r3, #5
 800350c:	2264      	movs	r2, #100	; 0x64
 800350e:	fb02 f303 	mul.w	r3, r2, r3
 8003512:	1acb      	subs	r3, r1, r3
 8003514:	00db      	lsls	r3, r3, #3
 8003516:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800351a:	4b36      	ldr	r3, [pc, #216]	; (80035f4 <UART_SetConfig+0x2d4>)
 800351c:	fba3 2302 	umull	r2, r3, r3, r2
 8003520:	095b      	lsrs	r3, r3, #5
 8003522:	005b      	lsls	r3, r3, #1
 8003524:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003528:	441c      	add	r4, r3
 800352a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800352e:	2200      	movs	r2, #0
 8003530:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003534:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003538:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800353c:	4642      	mov	r2, r8
 800353e:	464b      	mov	r3, r9
 8003540:	1891      	adds	r1, r2, r2
 8003542:	63b9      	str	r1, [r7, #56]	; 0x38
 8003544:	415b      	adcs	r3, r3
 8003546:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003548:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800354c:	4641      	mov	r1, r8
 800354e:	1851      	adds	r1, r2, r1
 8003550:	6339      	str	r1, [r7, #48]	; 0x30
 8003552:	4649      	mov	r1, r9
 8003554:	414b      	adcs	r3, r1
 8003556:	637b      	str	r3, [r7, #52]	; 0x34
 8003558:	f04f 0200 	mov.w	r2, #0
 800355c:	f04f 0300 	mov.w	r3, #0
 8003560:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003564:	4659      	mov	r1, fp
 8003566:	00cb      	lsls	r3, r1, #3
 8003568:	4651      	mov	r1, sl
 800356a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800356e:	4651      	mov	r1, sl
 8003570:	00ca      	lsls	r2, r1, #3
 8003572:	4610      	mov	r0, r2
 8003574:	4619      	mov	r1, r3
 8003576:	4603      	mov	r3, r0
 8003578:	4642      	mov	r2, r8
 800357a:	189b      	adds	r3, r3, r2
 800357c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003580:	464b      	mov	r3, r9
 8003582:	460a      	mov	r2, r1
 8003584:	eb42 0303 	adc.w	r3, r2, r3
 8003588:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800358c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	2200      	movs	r2, #0
 8003594:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003598:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800359c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80035a0:	460b      	mov	r3, r1
 80035a2:	18db      	adds	r3, r3, r3
 80035a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80035a6:	4613      	mov	r3, r2
 80035a8:	eb42 0303 	adc.w	r3, r2, r3
 80035ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035ae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80035b2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80035b6:	f7fc fe63 	bl	8000280 <__aeabi_uldivmod>
 80035ba:	4602      	mov	r2, r0
 80035bc:	460b      	mov	r3, r1
 80035be:	4b0d      	ldr	r3, [pc, #52]	; (80035f4 <UART_SetConfig+0x2d4>)
 80035c0:	fba3 1302 	umull	r1, r3, r3, r2
 80035c4:	095b      	lsrs	r3, r3, #5
 80035c6:	2164      	movs	r1, #100	; 0x64
 80035c8:	fb01 f303 	mul.w	r3, r1, r3
 80035cc:	1ad3      	subs	r3, r2, r3
 80035ce:	00db      	lsls	r3, r3, #3
 80035d0:	3332      	adds	r3, #50	; 0x32
 80035d2:	4a08      	ldr	r2, [pc, #32]	; (80035f4 <UART_SetConfig+0x2d4>)
 80035d4:	fba2 2303 	umull	r2, r3, r2, r3
 80035d8:	095b      	lsrs	r3, r3, #5
 80035da:	f003 0207 	and.w	r2, r3, #7
 80035de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4422      	add	r2, r4
 80035e6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80035e8:	e106      	b.n	80037f8 <UART_SetConfig+0x4d8>
 80035ea:	bf00      	nop
 80035ec:	40011000 	.word	0x40011000
 80035f0:	40011400 	.word	0x40011400
 80035f4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80035f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80035fc:	2200      	movs	r2, #0
 80035fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003602:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003606:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800360a:	4642      	mov	r2, r8
 800360c:	464b      	mov	r3, r9
 800360e:	1891      	adds	r1, r2, r2
 8003610:	6239      	str	r1, [r7, #32]
 8003612:	415b      	adcs	r3, r3
 8003614:	627b      	str	r3, [r7, #36]	; 0x24
 8003616:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800361a:	4641      	mov	r1, r8
 800361c:	1854      	adds	r4, r2, r1
 800361e:	4649      	mov	r1, r9
 8003620:	eb43 0501 	adc.w	r5, r3, r1
 8003624:	f04f 0200 	mov.w	r2, #0
 8003628:	f04f 0300 	mov.w	r3, #0
 800362c:	00eb      	lsls	r3, r5, #3
 800362e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003632:	00e2      	lsls	r2, r4, #3
 8003634:	4614      	mov	r4, r2
 8003636:	461d      	mov	r5, r3
 8003638:	4643      	mov	r3, r8
 800363a:	18e3      	adds	r3, r4, r3
 800363c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003640:	464b      	mov	r3, r9
 8003642:	eb45 0303 	adc.w	r3, r5, r3
 8003646:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800364a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	2200      	movs	r2, #0
 8003652:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003656:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800365a:	f04f 0200 	mov.w	r2, #0
 800365e:	f04f 0300 	mov.w	r3, #0
 8003662:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003666:	4629      	mov	r1, r5
 8003668:	008b      	lsls	r3, r1, #2
 800366a:	4621      	mov	r1, r4
 800366c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003670:	4621      	mov	r1, r4
 8003672:	008a      	lsls	r2, r1, #2
 8003674:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003678:	f7fc fe02 	bl	8000280 <__aeabi_uldivmod>
 800367c:	4602      	mov	r2, r0
 800367e:	460b      	mov	r3, r1
 8003680:	4b60      	ldr	r3, [pc, #384]	; (8003804 <UART_SetConfig+0x4e4>)
 8003682:	fba3 2302 	umull	r2, r3, r3, r2
 8003686:	095b      	lsrs	r3, r3, #5
 8003688:	011c      	lsls	r4, r3, #4
 800368a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800368e:	2200      	movs	r2, #0
 8003690:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003694:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003698:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800369c:	4642      	mov	r2, r8
 800369e:	464b      	mov	r3, r9
 80036a0:	1891      	adds	r1, r2, r2
 80036a2:	61b9      	str	r1, [r7, #24]
 80036a4:	415b      	adcs	r3, r3
 80036a6:	61fb      	str	r3, [r7, #28]
 80036a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80036ac:	4641      	mov	r1, r8
 80036ae:	1851      	adds	r1, r2, r1
 80036b0:	6139      	str	r1, [r7, #16]
 80036b2:	4649      	mov	r1, r9
 80036b4:	414b      	adcs	r3, r1
 80036b6:	617b      	str	r3, [r7, #20]
 80036b8:	f04f 0200 	mov.w	r2, #0
 80036bc:	f04f 0300 	mov.w	r3, #0
 80036c0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80036c4:	4659      	mov	r1, fp
 80036c6:	00cb      	lsls	r3, r1, #3
 80036c8:	4651      	mov	r1, sl
 80036ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80036ce:	4651      	mov	r1, sl
 80036d0:	00ca      	lsls	r2, r1, #3
 80036d2:	4610      	mov	r0, r2
 80036d4:	4619      	mov	r1, r3
 80036d6:	4603      	mov	r3, r0
 80036d8:	4642      	mov	r2, r8
 80036da:	189b      	adds	r3, r3, r2
 80036dc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80036e0:	464b      	mov	r3, r9
 80036e2:	460a      	mov	r2, r1
 80036e4:	eb42 0303 	adc.w	r3, r2, r3
 80036e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80036ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	2200      	movs	r2, #0
 80036f4:	67bb      	str	r3, [r7, #120]	; 0x78
 80036f6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80036f8:	f04f 0200 	mov.w	r2, #0
 80036fc:	f04f 0300 	mov.w	r3, #0
 8003700:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003704:	4649      	mov	r1, r9
 8003706:	008b      	lsls	r3, r1, #2
 8003708:	4641      	mov	r1, r8
 800370a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800370e:	4641      	mov	r1, r8
 8003710:	008a      	lsls	r2, r1, #2
 8003712:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003716:	f7fc fdb3 	bl	8000280 <__aeabi_uldivmod>
 800371a:	4602      	mov	r2, r0
 800371c:	460b      	mov	r3, r1
 800371e:	4611      	mov	r1, r2
 8003720:	4b38      	ldr	r3, [pc, #224]	; (8003804 <UART_SetConfig+0x4e4>)
 8003722:	fba3 2301 	umull	r2, r3, r3, r1
 8003726:	095b      	lsrs	r3, r3, #5
 8003728:	2264      	movs	r2, #100	; 0x64
 800372a:	fb02 f303 	mul.w	r3, r2, r3
 800372e:	1acb      	subs	r3, r1, r3
 8003730:	011b      	lsls	r3, r3, #4
 8003732:	3332      	adds	r3, #50	; 0x32
 8003734:	4a33      	ldr	r2, [pc, #204]	; (8003804 <UART_SetConfig+0x4e4>)
 8003736:	fba2 2303 	umull	r2, r3, r2, r3
 800373a:	095b      	lsrs	r3, r3, #5
 800373c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003740:	441c      	add	r4, r3
 8003742:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003746:	2200      	movs	r2, #0
 8003748:	673b      	str	r3, [r7, #112]	; 0x70
 800374a:	677a      	str	r2, [r7, #116]	; 0x74
 800374c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003750:	4642      	mov	r2, r8
 8003752:	464b      	mov	r3, r9
 8003754:	1891      	adds	r1, r2, r2
 8003756:	60b9      	str	r1, [r7, #8]
 8003758:	415b      	adcs	r3, r3
 800375a:	60fb      	str	r3, [r7, #12]
 800375c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003760:	4641      	mov	r1, r8
 8003762:	1851      	adds	r1, r2, r1
 8003764:	6039      	str	r1, [r7, #0]
 8003766:	4649      	mov	r1, r9
 8003768:	414b      	adcs	r3, r1
 800376a:	607b      	str	r3, [r7, #4]
 800376c:	f04f 0200 	mov.w	r2, #0
 8003770:	f04f 0300 	mov.w	r3, #0
 8003774:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003778:	4659      	mov	r1, fp
 800377a:	00cb      	lsls	r3, r1, #3
 800377c:	4651      	mov	r1, sl
 800377e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003782:	4651      	mov	r1, sl
 8003784:	00ca      	lsls	r2, r1, #3
 8003786:	4610      	mov	r0, r2
 8003788:	4619      	mov	r1, r3
 800378a:	4603      	mov	r3, r0
 800378c:	4642      	mov	r2, r8
 800378e:	189b      	adds	r3, r3, r2
 8003790:	66bb      	str	r3, [r7, #104]	; 0x68
 8003792:	464b      	mov	r3, r9
 8003794:	460a      	mov	r2, r1
 8003796:	eb42 0303 	adc.w	r3, r2, r3
 800379a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800379c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	2200      	movs	r2, #0
 80037a4:	663b      	str	r3, [r7, #96]	; 0x60
 80037a6:	667a      	str	r2, [r7, #100]	; 0x64
 80037a8:	f04f 0200 	mov.w	r2, #0
 80037ac:	f04f 0300 	mov.w	r3, #0
 80037b0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80037b4:	4649      	mov	r1, r9
 80037b6:	008b      	lsls	r3, r1, #2
 80037b8:	4641      	mov	r1, r8
 80037ba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80037be:	4641      	mov	r1, r8
 80037c0:	008a      	lsls	r2, r1, #2
 80037c2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80037c6:	f7fc fd5b 	bl	8000280 <__aeabi_uldivmod>
 80037ca:	4602      	mov	r2, r0
 80037cc:	460b      	mov	r3, r1
 80037ce:	4b0d      	ldr	r3, [pc, #52]	; (8003804 <UART_SetConfig+0x4e4>)
 80037d0:	fba3 1302 	umull	r1, r3, r3, r2
 80037d4:	095b      	lsrs	r3, r3, #5
 80037d6:	2164      	movs	r1, #100	; 0x64
 80037d8:	fb01 f303 	mul.w	r3, r1, r3
 80037dc:	1ad3      	subs	r3, r2, r3
 80037de:	011b      	lsls	r3, r3, #4
 80037e0:	3332      	adds	r3, #50	; 0x32
 80037e2:	4a08      	ldr	r2, [pc, #32]	; (8003804 <UART_SetConfig+0x4e4>)
 80037e4:	fba2 2303 	umull	r2, r3, r2, r3
 80037e8:	095b      	lsrs	r3, r3, #5
 80037ea:	f003 020f 	and.w	r2, r3, #15
 80037ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4422      	add	r2, r4
 80037f6:	609a      	str	r2, [r3, #8]
}
 80037f8:	bf00      	nop
 80037fa:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80037fe:	46bd      	mov	sp, r7
 8003800:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003804:	51eb851f 	.word	0x51eb851f

08003808 <__NVIC_SetPriority>:
{
 8003808:	b480      	push	{r7}
 800380a:	b083      	sub	sp, #12
 800380c:	af00      	add	r7, sp, #0
 800380e:	4603      	mov	r3, r0
 8003810:	6039      	str	r1, [r7, #0]
 8003812:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003814:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003818:	2b00      	cmp	r3, #0
 800381a:	db0a      	blt.n	8003832 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	b2da      	uxtb	r2, r3
 8003820:	490c      	ldr	r1, [pc, #48]	; (8003854 <__NVIC_SetPriority+0x4c>)
 8003822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003826:	0112      	lsls	r2, r2, #4
 8003828:	b2d2      	uxtb	r2, r2
 800382a:	440b      	add	r3, r1
 800382c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003830:	e00a      	b.n	8003848 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	b2da      	uxtb	r2, r3
 8003836:	4908      	ldr	r1, [pc, #32]	; (8003858 <__NVIC_SetPriority+0x50>)
 8003838:	79fb      	ldrb	r3, [r7, #7]
 800383a:	f003 030f 	and.w	r3, r3, #15
 800383e:	3b04      	subs	r3, #4
 8003840:	0112      	lsls	r2, r2, #4
 8003842:	b2d2      	uxtb	r2, r2
 8003844:	440b      	add	r3, r1
 8003846:	761a      	strb	r2, [r3, #24]
}
 8003848:	bf00      	nop
 800384a:	370c      	adds	r7, #12
 800384c:	46bd      	mov	sp, r7
 800384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003852:	4770      	bx	lr
 8003854:	e000e100 	.word	0xe000e100
 8003858:	e000ed00 	.word	0xe000ed00

0800385c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800385c:	b580      	push	{r7, lr}
 800385e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003860:	2100      	movs	r1, #0
 8003862:	f06f 0004 	mvn.w	r0, #4
 8003866:	f7ff ffcf 	bl	8003808 <__NVIC_SetPriority>
#endif
}
 800386a:	bf00      	nop
 800386c:	bd80      	pop	{r7, pc}
	...

08003870 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003870:	b480      	push	{r7}
 8003872:	b083      	sub	sp, #12
 8003874:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003876:	f3ef 8305 	mrs	r3, IPSR
 800387a:	603b      	str	r3, [r7, #0]
  return(result);
 800387c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800387e:	2b00      	cmp	r3, #0
 8003880:	d003      	beq.n	800388a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003882:	f06f 0305 	mvn.w	r3, #5
 8003886:	607b      	str	r3, [r7, #4]
 8003888:	e00c      	b.n	80038a4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800388a:	4b0a      	ldr	r3, [pc, #40]	; (80038b4 <osKernelInitialize+0x44>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d105      	bne.n	800389e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003892:	4b08      	ldr	r3, [pc, #32]	; (80038b4 <osKernelInitialize+0x44>)
 8003894:	2201      	movs	r2, #1
 8003896:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003898:	2300      	movs	r3, #0
 800389a:	607b      	str	r3, [r7, #4]
 800389c:	e002      	b.n	80038a4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800389e:	f04f 33ff 	mov.w	r3, #4294967295
 80038a2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80038a4:	687b      	ldr	r3, [r7, #4]
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	370c      	adds	r7, #12
 80038aa:	46bd      	mov	sp, r7
 80038ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b0:	4770      	bx	lr
 80038b2:	bf00      	nop
 80038b4:	20000120 	.word	0x20000120

080038b8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b082      	sub	sp, #8
 80038bc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80038be:	f3ef 8305 	mrs	r3, IPSR
 80038c2:	603b      	str	r3, [r7, #0]
  return(result);
 80038c4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d003      	beq.n	80038d2 <osKernelStart+0x1a>
    stat = osErrorISR;
 80038ca:	f06f 0305 	mvn.w	r3, #5
 80038ce:	607b      	str	r3, [r7, #4]
 80038d0:	e010      	b.n	80038f4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80038d2:	4b0b      	ldr	r3, [pc, #44]	; (8003900 <osKernelStart+0x48>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	2b01      	cmp	r3, #1
 80038d8:	d109      	bne.n	80038ee <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80038da:	f7ff ffbf 	bl	800385c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80038de:	4b08      	ldr	r3, [pc, #32]	; (8003900 <osKernelStart+0x48>)
 80038e0:	2202      	movs	r2, #2
 80038e2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80038e4:	f001 f866 	bl	80049b4 <vTaskStartScheduler>
      stat = osOK;
 80038e8:	2300      	movs	r3, #0
 80038ea:	607b      	str	r3, [r7, #4]
 80038ec:	e002      	b.n	80038f4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80038ee:	f04f 33ff 	mov.w	r3, #4294967295
 80038f2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80038f4:	687b      	ldr	r3, [r7, #4]
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	3708      	adds	r7, #8
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}
 80038fe:	bf00      	nop
 8003900:	20000120 	.word	0x20000120

08003904 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003904:	b580      	push	{r7, lr}
 8003906:	b08e      	sub	sp, #56	; 0x38
 8003908:	af04      	add	r7, sp, #16
 800390a:	60f8      	str	r0, [r7, #12]
 800390c:	60b9      	str	r1, [r7, #8]
 800390e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003910:	2300      	movs	r3, #0
 8003912:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003914:	f3ef 8305 	mrs	r3, IPSR
 8003918:	617b      	str	r3, [r7, #20]
  return(result);
 800391a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800391c:	2b00      	cmp	r3, #0
 800391e:	d17e      	bne.n	8003a1e <osThreadNew+0x11a>
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d07b      	beq.n	8003a1e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003926:	2380      	movs	r3, #128	; 0x80
 8003928:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800392a:	2318      	movs	r3, #24
 800392c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800392e:	2300      	movs	r3, #0
 8003930:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8003932:	f04f 33ff 	mov.w	r3, #4294967295
 8003936:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d045      	beq.n	80039ca <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d002      	beq.n	800394c <osThreadNew+0x48>
        name = attr->name;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	699b      	ldr	r3, [r3, #24]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d002      	beq.n	800395a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	699b      	ldr	r3, [r3, #24]
 8003958:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800395a:	69fb      	ldr	r3, [r7, #28]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d008      	beq.n	8003972 <osThreadNew+0x6e>
 8003960:	69fb      	ldr	r3, [r7, #28]
 8003962:	2b38      	cmp	r3, #56	; 0x38
 8003964:	d805      	bhi.n	8003972 <osThreadNew+0x6e>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	f003 0301 	and.w	r3, r3, #1
 800396e:	2b00      	cmp	r3, #0
 8003970:	d001      	beq.n	8003976 <osThreadNew+0x72>
        return (NULL);
 8003972:	2300      	movs	r3, #0
 8003974:	e054      	b.n	8003a20 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	695b      	ldr	r3, [r3, #20]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d003      	beq.n	8003986 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	695b      	ldr	r3, [r3, #20]
 8003982:	089b      	lsrs	r3, r3, #2
 8003984:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d00e      	beq.n	80039ac <osThreadNew+0xa8>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	68db      	ldr	r3, [r3, #12]
 8003992:	2b5b      	cmp	r3, #91	; 0x5b
 8003994:	d90a      	bls.n	80039ac <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800399a:	2b00      	cmp	r3, #0
 800399c:	d006      	beq.n	80039ac <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	695b      	ldr	r3, [r3, #20]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d002      	beq.n	80039ac <osThreadNew+0xa8>
        mem = 1;
 80039a6:	2301      	movs	r3, #1
 80039a8:	61bb      	str	r3, [r7, #24]
 80039aa:	e010      	b.n	80039ce <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d10c      	bne.n	80039ce <osThreadNew+0xca>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	68db      	ldr	r3, [r3, #12]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d108      	bne.n	80039ce <osThreadNew+0xca>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	691b      	ldr	r3, [r3, #16]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d104      	bne.n	80039ce <osThreadNew+0xca>
          mem = 0;
 80039c4:	2300      	movs	r3, #0
 80039c6:	61bb      	str	r3, [r7, #24]
 80039c8:	e001      	b.n	80039ce <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80039ca:	2300      	movs	r3, #0
 80039cc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80039ce:	69bb      	ldr	r3, [r7, #24]
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	d110      	bne.n	80039f6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80039d8:	687a      	ldr	r2, [r7, #4]
 80039da:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80039dc:	9202      	str	r2, [sp, #8]
 80039de:	9301      	str	r3, [sp, #4]
 80039e0:	69fb      	ldr	r3, [r7, #28]
 80039e2:	9300      	str	r3, [sp, #0]
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	6a3a      	ldr	r2, [r7, #32]
 80039e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80039ea:	68f8      	ldr	r0, [r7, #12]
 80039ec:	f000 fe0c 	bl	8004608 <xTaskCreateStatic>
 80039f0:	4603      	mov	r3, r0
 80039f2:	613b      	str	r3, [r7, #16]
 80039f4:	e013      	b.n	8003a1e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80039f6:	69bb      	ldr	r3, [r7, #24]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d110      	bne.n	8003a1e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80039fc:	6a3b      	ldr	r3, [r7, #32]
 80039fe:	b29a      	uxth	r2, r3
 8003a00:	f107 0310 	add.w	r3, r7, #16
 8003a04:	9301      	str	r3, [sp, #4]
 8003a06:	69fb      	ldr	r3, [r7, #28]
 8003a08:	9300      	str	r3, [sp, #0]
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003a0e:	68f8      	ldr	r0, [r7, #12]
 8003a10:	f000 fe57 	bl	80046c2 <xTaskCreate>
 8003a14:	4603      	mov	r3, r0
 8003a16:	2b01      	cmp	r3, #1
 8003a18:	d001      	beq.n	8003a1e <osThreadNew+0x11a>
            hTask = NULL;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003a1e:	693b      	ldr	r3, [r7, #16]
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	3728      	adds	r7, #40	; 0x28
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}

08003a28 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b084      	sub	sp, #16
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003a30:	f3ef 8305 	mrs	r3, IPSR
 8003a34:	60bb      	str	r3, [r7, #8]
  return(result);
 8003a36:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d003      	beq.n	8003a44 <osDelay+0x1c>
    stat = osErrorISR;
 8003a3c:	f06f 0305 	mvn.w	r3, #5
 8003a40:	60fb      	str	r3, [r7, #12]
 8003a42:	e007      	b.n	8003a54 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003a44:	2300      	movs	r3, #0
 8003a46:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d002      	beq.n	8003a54 <osDelay+0x2c>
      vTaskDelay(ticks);
 8003a4e:	6878      	ldr	r0, [r7, #4]
 8003a50:	f000 ff7c 	bl	800494c <vTaskDelay>
    }
  }

  return (stat);
 8003a54:	68fb      	ldr	r3, [r7, #12]
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	3710      	adds	r7, #16
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}
	...

08003a60 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003a60:	b480      	push	{r7}
 8003a62:	b085      	sub	sp, #20
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	60f8      	str	r0, [r7, #12]
 8003a68:	60b9      	str	r1, [r7, #8]
 8003a6a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	4a07      	ldr	r2, [pc, #28]	; (8003a8c <vApplicationGetIdleTaskMemory+0x2c>)
 8003a70:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	4a06      	ldr	r2, [pc, #24]	; (8003a90 <vApplicationGetIdleTaskMemory+0x30>)
 8003a76:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2280      	movs	r2, #128	; 0x80
 8003a7c:	601a      	str	r2, [r3, #0]
}
 8003a7e:	bf00      	nop
 8003a80:	3714      	adds	r7, #20
 8003a82:	46bd      	mov	sp, r7
 8003a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a88:	4770      	bx	lr
 8003a8a:	bf00      	nop
 8003a8c:	20000124 	.word	0x20000124
 8003a90:	20000180 	.word	0x20000180

08003a94 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003a94:	b480      	push	{r7}
 8003a96:	b085      	sub	sp, #20
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	60f8      	str	r0, [r7, #12]
 8003a9c:	60b9      	str	r1, [r7, #8]
 8003a9e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	4a07      	ldr	r2, [pc, #28]	; (8003ac0 <vApplicationGetTimerTaskMemory+0x2c>)
 8003aa4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	4a06      	ldr	r2, [pc, #24]	; (8003ac4 <vApplicationGetTimerTaskMemory+0x30>)
 8003aaa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003ab2:	601a      	str	r2, [r3, #0]
}
 8003ab4:	bf00      	nop
 8003ab6:	3714      	adds	r7, #20
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abe:	4770      	bx	lr
 8003ac0:	20000380 	.word	0x20000380
 8003ac4:	200003dc 	.word	0x200003dc

08003ac8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b083      	sub	sp, #12
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	f103 0208 	add.w	r2, r3, #8
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	f04f 32ff 	mov.w	r2, #4294967295
 8003ae0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	f103 0208 	add.w	r2, r3, #8
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	f103 0208 	add.w	r2, r3, #8
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2200      	movs	r2, #0
 8003afa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003afc:	bf00      	nop
 8003afe:	370c      	adds	r7, #12
 8003b00:	46bd      	mov	sp, r7
 8003b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b06:	4770      	bx	lr

08003b08 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b083      	sub	sp, #12
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2200      	movs	r2, #0
 8003b14:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003b16:	bf00      	nop
 8003b18:	370c      	adds	r7, #12
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b20:	4770      	bx	lr

08003b22 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003b22:	b480      	push	{r7}
 8003b24:	b085      	sub	sp, #20
 8003b26:	af00      	add	r7, sp, #0
 8003b28:	6078      	str	r0, [r7, #4]
 8003b2a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	68fa      	ldr	r2, [r7, #12]
 8003b36:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	689a      	ldr	r2, [r3, #8]
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	683a      	ldr	r2, [r7, #0]
 8003b46:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	683a      	ldr	r2, [r7, #0]
 8003b4c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	687a      	ldr	r2, [r7, #4]
 8003b52:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	1c5a      	adds	r2, r3, #1
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	601a      	str	r2, [r3, #0]
}
 8003b5e:	bf00      	nop
 8003b60:	3714      	adds	r7, #20
 8003b62:	46bd      	mov	sp, r7
 8003b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b68:	4770      	bx	lr

08003b6a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003b6a:	b480      	push	{r7}
 8003b6c:	b085      	sub	sp, #20
 8003b6e:	af00      	add	r7, sp, #0
 8003b70:	6078      	str	r0, [r7, #4]
 8003b72:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b80:	d103      	bne.n	8003b8a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	691b      	ldr	r3, [r3, #16]
 8003b86:	60fb      	str	r3, [r7, #12]
 8003b88:	e00c      	b.n	8003ba4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	3308      	adds	r3, #8
 8003b8e:	60fb      	str	r3, [r7, #12]
 8003b90:	e002      	b.n	8003b98 <vListInsert+0x2e>
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	60fb      	str	r3, [r7, #12]
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	68ba      	ldr	r2, [r7, #8]
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	d2f6      	bcs.n	8003b92 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	685a      	ldr	r2, [r3, #4]
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	683a      	ldr	r2, [r7, #0]
 8003bb2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	68fa      	ldr	r2, [r7, #12]
 8003bb8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	683a      	ldr	r2, [r7, #0]
 8003bbe:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	687a      	ldr	r2, [r7, #4]
 8003bc4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	1c5a      	adds	r2, r3, #1
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	601a      	str	r2, [r3, #0]
}
 8003bd0:	bf00      	nop
 8003bd2:	3714      	adds	r7, #20
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bda:	4770      	bx	lr

08003bdc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b085      	sub	sp, #20
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	691b      	ldr	r3, [r3, #16]
 8003be8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	687a      	ldr	r2, [r7, #4]
 8003bf0:	6892      	ldr	r2, [r2, #8]
 8003bf2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	687a      	ldr	r2, [r7, #4]
 8003bfa:	6852      	ldr	r2, [r2, #4]
 8003bfc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	687a      	ldr	r2, [r7, #4]
 8003c04:	429a      	cmp	r2, r3
 8003c06:	d103      	bne.n	8003c10 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	689a      	ldr	r2, [r3, #8]
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2200      	movs	r2, #0
 8003c14:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	1e5a      	subs	r2, r3, #1
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	3714      	adds	r7, #20
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2e:	4770      	bx	lr

08003c30 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b084      	sub	sp, #16
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
 8003c38:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d10a      	bne.n	8003c5a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c48:	f383 8811 	msr	BASEPRI, r3
 8003c4c:	f3bf 8f6f 	isb	sy
 8003c50:	f3bf 8f4f 	dsb	sy
 8003c54:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003c56:	bf00      	nop
 8003c58:	e7fe      	b.n	8003c58 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003c5a:	f002 f84b 	bl	8005cf4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681a      	ldr	r2, [r3, #0]
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c66:	68f9      	ldr	r1, [r7, #12]
 8003c68:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003c6a:	fb01 f303 	mul.w	r3, r1, r3
 8003c6e:	441a      	add	r2, r3
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2200      	movs	r2, #0
 8003c78:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681a      	ldr	r2, [r3, #0]
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c8a:	3b01      	subs	r3, #1
 8003c8c:	68f9      	ldr	r1, [r7, #12]
 8003c8e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003c90:	fb01 f303 	mul.w	r3, r1, r3
 8003c94:	441a      	add	r2, r3
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	22ff      	movs	r2, #255	; 0xff
 8003c9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	22ff      	movs	r2, #255	; 0xff
 8003ca6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d114      	bne.n	8003cda <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	691b      	ldr	r3, [r3, #16]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d01a      	beq.n	8003cee <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	3310      	adds	r3, #16
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	f001 f903 	bl	8004ec8 <xTaskRemoveFromEventList>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d012      	beq.n	8003cee <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003cc8:	4b0c      	ldr	r3, [pc, #48]	; (8003cfc <xQueueGenericReset+0xcc>)
 8003cca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cce:	601a      	str	r2, [r3, #0]
 8003cd0:	f3bf 8f4f 	dsb	sy
 8003cd4:	f3bf 8f6f 	isb	sy
 8003cd8:	e009      	b.n	8003cee <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	3310      	adds	r3, #16
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f7ff fef2 	bl	8003ac8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	3324      	adds	r3, #36	; 0x24
 8003ce8:	4618      	mov	r0, r3
 8003cea:	f7ff feed 	bl	8003ac8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003cee:	f002 f831 	bl	8005d54 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003cf2:	2301      	movs	r3, #1
}
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	3710      	adds	r7, #16
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bd80      	pop	{r7, pc}
 8003cfc:	e000ed04 	.word	0xe000ed04

08003d00 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b08e      	sub	sp, #56	; 0x38
 8003d04:	af02      	add	r7, sp, #8
 8003d06:	60f8      	str	r0, [r7, #12]
 8003d08:	60b9      	str	r1, [r7, #8]
 8003d0a:	607a      	str	r2, [r7, #4]
 8003d0c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d10a      	bne.n	8003d2a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d18:	f383 8811 	msr	BASEPRI, r3
 8003d1c:	f3bf 8f6f 	isb	sy
 8003d20:	f3bf 8f4f 	dsb	sy
 8003d24:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003d26:	bf00      	nop
 8003d28:	e7fe      	b.n	8003d28 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d10a      	bne.n	8003d46 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d34:	f383 8811 	msr	BASEPRI, r3
 8003d38:	f3bf 8f6f 	isb	sy
 8003d3c:	f3bf 8f4f 	dsb	sy
 8003d40:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003d42:	bf00      	nop
 8003d44:	e7fe      	b.n	8003d44 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d002      	beq.n	8003d52 <xQueueGenericCreateStatic+0x52>
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d001      	beq.n	8003d56 <xQueueGenericCreateStatic+0x56>
 8003d52:	2301      	movs	r3, #1
 8003d54:	e000      	b.n	8003d58 <xQueueGenericCreateStatic+0x58>
 8003d56:	2300      	movs	r3, #0
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d10a      	bne.n	8003d72 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d60:	f383 8811 	msr	BASEPRI, r3
 8003d64:	f3bf 8f6f 	isb	sy
 8003d68:	f3bf 8f4f 	dsb	sy
 8003d6c:	623b      	str	r3, [r7, #32]
}
 8003d6e:	bf00      	nop
 8003d70:	e7fe      	b.n	8003d70 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d102      	bne.n	8003d7e <xQueueGenericCreateStatic+0x7e>
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d101      	bne.n	8003d82 <xQueueGenericCreateStatic+0x82>
 8003d7e:	2301      	movs	r3, #1
 8003d80:	e000      	b.n	8003d84 <xQueueGenericCreateStatic+0x84>
 8003d82:	2300      	movs	r3, #0
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d10a      	bne.n	8003d9e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003d88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d8c:	f383 8811 	msr	BASEPRI, r3
 8003d90:	f3bf 8f6f 	isb	sy
 8003d94:	f3bf 8f4f 	dsb	sy
 8003d98:	61fb      	str	r3, [r7, #28]
}
 8003d9a:	bf00      	nop
 8003d9c:	e7fe      	b.n	8003d9c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003d9e:	2350      	movs	r3, #80	; 0x50
 8003da0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	2b50      	cmp	r3, #80	; 0x50
 8003da6:	d00a      	beq.n	8003dbe <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003da8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dac:	f383 8811 	msr	BASEPRI, r3
 8003db0:	f3bf 8f6f 	isb	sy
 8003db4:	f3bf 8f4f 	dsb	sy
 8003db8:	61bb      	str	r3, [r7, #24]
}
 8003dba:	bf00      	nop
 8003dbc:	e7fe      	b.n	8003dbc <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003dbe:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003dc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d00d      	beq.n	8003de6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003dca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dcc:	2201      	movs	r2, #1
 8003dce:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003dd2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003dd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dd8:	9300      	str	r3, [sp, #0]
 8003dda:	4613      	mov	r3, r2
 8003ddc:	687a      	ldr	r2, [r7, #4]
 8003dde:	68b9      	ldr	r1, [r7, #8]
 8003de0:	68f8      	ldr	r0, [r7, #12]
 8003de2:	f000 f805 	bl	8003df0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003de8:	4618      	mov	r0, r3
 8003dea:	3730      	adds	r7, #48	; 0x30
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bd80      	pop	{r7, pc}

08003df0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b084      	sub	sp, #16
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	60f8      	str	r0, [r7, #12]
 8003df8:	60b9      	str	r1, [r7, #8]
 8003dfa:	607a      	str	r2, [r7, #4]
 8003dfc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d103      	bne.n	8003e0c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003e04:	69bb      	ldr	r3, [r7, #24]
 8003e06:	69ba      	ldr	r2, [r7, #24]
 8003e08:	601a      	str	r2, [r3, #0]
 8003e0a:	e002      	b.n	8003e12 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003e0c:	69bb      	ldr	r3, [r7, #24]
 8003e0e:	687a      	ldr	r2, [r7, #4]
 8003e10:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003e12:	69bb      	ldr	r3, [r7, #24]
 8003e14:	68fa      	ldr	r2, [r7, #12]
 8003e16:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003e18:	69bb      	ldr	r3, [r7, #24]
 8003e1a:	68ba      	ldr	r2, [r7, #8]
 8003e1c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003e1e:	2101      	movs	r1, #1
 8003e20:	69b8      	ldr	r0, [r7, #24]
 8003e22:	f7ff ff05 	bl	8003c30 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003e26:	69bb      	ldr	r3, [r7, #24]
 8003e28:	78fa      	ldrb	r2, [r7, #3]
 8003e2a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003e2e:	bf00      	nop
 8003e30:	3710      	adds	r7, #16
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}
	...

08003e38 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b08e      	sub	sp, #56	; 0x38
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	60f8      	str	r0, [r7, #12]
 8003e40:	60b9      	str	r1, [r7, #8]
 8003e42:	607a      	str	r2, [r7, #4]
 8003e44:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003e46:	2300      	movs	r3, #0
 8003e48:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d10a      	bne.n	8003e6a <xQueueGenericSend+0x32>
	__asm volatile
 8003e54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e58:	f383 8811 	msr	BASEPRI, r3
 8003e5c:	f3bf 8f6f 	isb	sy
 8003e60:	f3bf 8f4f 	dsb	sy
 8003e64:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003e66:	bf00      	nop
 8003e68:	e7fe      	b.n	8003e68 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d103      	bne.n	8003e78 <xQueueGenericSend+0x40>
 8003e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d101      	bne.n	8003e7c <xQueueGenericSend+0x44>
 8003e78:	2301      	movs	r3, #1
 8003e7a:	e000      	b.n	8003e7e <xQueueGenericSend+0x46>
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d10a      	bne.n	8003e98 <xQueueGenericSend+0x60>
	__asm volatile
 8003e82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e86:	f383 8811 	msr	BASEPRI, r3
 8003e8a:	f3bf 8f6f 	isb	sy
 8003e8e:	f3bf 8f4f 	dsb	sy
 8003e92:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003e94:	bf00      	nop
 8003e96:	e7fe      	b.n	8003e96 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	2b02      	cmp	r3, #2
 8003e9c:	d103      	bne.n	8003ea6 <xQueueGenericSend+0x6e>
 8003e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ea0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ea2:	2b01      	cmp	r3, #1
 8003ea4:	d101      	bne.n	8003eaa <xQueueGenericSend+0x72>
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	e000      	b.n	8003eac <xQueueGenericSend+0x74>
 8003eaa:	2300      	movs	r3, #0
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d10a      	bne.n	8003ec6 <xQueueGenericSend+0x8e>
	__asm volatile
 8003eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eb4:	f383 8811 	msr	BASEPRI, r3
 8003eb8:	f3bf 8f6f 	isb	sy
 8003ebc:	f3bf 8f4f 	dsb	sy
 8003ec0:	623b      	str	r3, [r7, #32]
}
 8003ec2:	bf00      	nop
 8003ec4:	e7fe      	b.n	8003ec4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003ec6:	f001 f9bd 	bl	8005244 <xTaskGetSchedulerState>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d102      	bne.n	8003ed6 <xQueueGenericSend+0x9e>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d101      	bne.n	8003eda <xQueueGenericSend+0xa2>
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e000      	b.n	8003edc <xQueueGenericSend+0xa4>
 8003eda:	2300      	movs	r3, #0
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d10a      	bne.n	8003ef6 <xQueueGenericSend+0xbe>
	__asm volatile
 8003ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ee4:	f383 8811 	msr	BASEPRI, r3
 8003ee8:	f3bf 8f6f 	isb	sy
 8003eec:	f3bf 8f4f 	dsb	sy
 8003ef0:	61fb      	str	r3, [r7, #28]
}
 8003ef2:	bf00      	nop
 8003ef4:	e7fe      	b.n	8003ef4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003ef6:	f001 fefd 	bl	8005cf4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003efc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f02:	429a      	cmp	r2, r3
 8003f04:	d302      	bcc.n	8003f0c <xQueueGenericSend+0xd4>
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	2b02      	cmp	r3, #2
 8003f0a:	d129      	bne.n	8003f60 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003f0c:	683a      	ldr	r2, [r7, #0]
 8003f0e:	68b9      	ldr	r1, [r7, #8]
 8003f10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003f12:	f000 fa0b 	bl	800432c <prvCopyDataToQueue>
 8003f16:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d010      	beq.n	8003f42 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f22:	3324      	adds	r3, #36	; 0x24
 8003f24:	4618      	mov	r0, r3
 8003f26:	f000 ffcf 	bl	8004ec8 <xTaskRemoveFromEventList>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d013      	beq.n	8003f58 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003f30:	4b3f      	ldr	r3, [pc, #252]	; (8004030 <xQueueGenericSend+0x1f8>)
 8003f32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f36:	601a      	str	r2, [r3, #0]
 8003f38:	f3bf 8f4f 	dsb	sy
 8003f3c:	f3bf 8f6f 	isb	sy
 8003f40:	e00a      	b.n	8003f58 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003f42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d007      	beq.n	8003f58 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003f48:	4b39      	ldr	r3, [pc, #228]	; (8004030 <xQueueGenericSend+0x1f8>)
 8003f4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f4e:	601a      	str	r2, [r3, #0]
 8003f50:	f3bf 8f4f 	dsb	sy
 8003f54:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003f58:	f001 fefc 	bl	8005d54 <vPortExitCritical>
				return pdPASS;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	e063      	b.n	8004028 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d103      	bne.n	8003f6e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003f66:	f001 fef5 	bl	8005d54 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	e05c      	b.n	8004028 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003f6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d106      	bne.n	8003f82 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003f74:	f107 0314 	add.w	r3, r7, #20
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f001 f809 	bl	8004f90 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003f82:	f001 fee7 	bl	8005d54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003f86:	f000 fd7b 	bl	8004a80 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003f8a:	f001 feb3 	bl	8005cf4 <vPortEnterCritical>
 8003f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f90:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003f94:	b25b      	sxtb	r3, r3
 8003f96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f9a:	d103      	bne.n	8003fa4 <xQueueGenericSend+0x16c>
 8003f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fa6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003faa:	b25b      	sxtb	r3, r3
 8003fac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fb0:	d103      	bne.n	8003fba <xQueueGenericSend+0x182>
 8003fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003fba:	f001 fecb 	bl	8005d54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003fbe:	1d3a      	adds	r2, r7, #4
 8003fc0:	f107 0314 	add.w	r3, r7, #20
 8003fc4:	4611      	mov	r1, r2
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f000 fff8 	bl	8004fbc <xTaskCheckForTimeOut>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d124      	bne.n	800401c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003fd2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003fd4:	f000 faa2 	bl	800451c <prvIsQueueFull>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d018      	beq.n	8004010 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fe0:	3310      	adds	r3, #16
 8003fe2:	687a      	ldr	r2, [r7, #4]
 8003fe4:	4611      	mov	r1, r2
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f000 ff1e 	bl	8004e28 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003fec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003fee:	f000 fa2d 	bl	800444c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003ff2:	f000 fd53 	bl	8004a9c <xTaskResumeAll>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	f47f af7c 	bne.w	8003ef6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003ffe:	4b0c      	ldr	r3, [pc, #48]	; (8004030 <xQueueGenericSend+0x1f8>)
 8004000:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004004:	601a      	str	r2, [r3, #0]
 8004006:	f3bf 8f4f 	dsb	sy
 800400a:	f3bf 8f6f 	isb	sy
 800400e:	e772      	b.n	8003ef6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004010:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004012:	f000 fa1b 	bl	800444c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004016:	f000 fd41 	bl	8004a9c <xTaskResumeAll>
 800401a:	e76c      	b.n	8003ef6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800401c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800401e:	f000 fa15 	bl	800444c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004022:	f000 fd3b 	bl	8004a9c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004026:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004028:	4618      	mov	r0, r3
 800402a:	3738      	adds	r7, #56	; 0x38
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}
 8004030:	e000ed04 	.word	0xe000ed04

08004034 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b090      	sub	sp, #64	; 0x40
 8004038:	af00      	add	r7, sp, #0
 800403a:	60f8      	str	r0, [r7, #12]
 800403c:	60b9      	str	r1, [r7, #8]
 800403e:	607a      	str	r2, [r7, #4]
 8004040:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8004046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004048:	2b00      	cmp	r3, #0
 800404a:	d10a      	bne.n	8004062 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800404c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004050:	f383 8811 	msr	BASEPRI, r3
 8004054:	f3bf 8f6f 	isb	sy
 8004058:	f3bf 8f4f 	dsb	sy
 800405c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800405e:	bf00      	nop
 8004060:	e7fe      	b.n	8004060 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d103      	bne.n	8004070 <xQueueGenericSendFromISR+0x3c>
 8004068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800406a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800406c:	2b00      	cmp	r3, #0
 800406e:	d101      	bne.n	8004074 <xQueueGenericSendFromISR+0x40>
 8004070:	2301      	movs	r3, #1
 8004072:	e000      	b.n	8004076 <xQueueGenericSendFromISR+0x42>
 8004074:	2300      	movs	r3, #0
 8004076:	2b00      	cmp	r3, #0
 8004078:	d10a      	bne.n	8004090 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800407a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800407e:	f383 8811 	msr	BASEPRI, r3
 8004082:	f3bf 8f6f 	isb	sy
 8004086:	f3bf 8f4f 	dsb	sy
 800408a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800408c:	bf00      	nop
 800408e:	e7fe      	b.n	800408e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	2b02      	cmp	r3, #2
 8004094:	d103      	bne.n	800409e <xQueueGenericSendFromISR+0x6a>
 8004096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004098:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800409a:	2b01      	cmp	r3, #1
 800409c:	d101      	bne.n	80040a2 <xQueueGenericSendFromISR+0x6e>
 800409e:	2301      	movs	r3, #1
 80040a0:	e000      	b.n	80040a4 <xQueueGenericSendFromISR+0x70>
 80040a2:	2300      	movs	r3, #0
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d10a      	bne.n	80040be <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80040a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040ac:	f383 8811 	msr	BASEPRI, r3
 80040b0:	f3bf 8f6f 	isb	sy
 80040b4:	f3bf 8f4f 	dsb	sy
 80040b8:	623b      	str	r3, [r7, #32]
}
 80040ba:	bf00      	nop
 80040bc:	e7fe      	b.n	80040bc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80040be:	f001 fefb 	bl	8005eb8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80040c2:	f3ef 8211 	mrs	r2, BASEPRI
 80040c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040ca:	f383 8811 	msr	BASEPRI, r3
 80040ce:	f3bf 8f6f 	isb	sy
 80040d2:	f3bf 8f4f 	dsb	sy
 80040d6:	61fa      	str	r2, [r7, #28]
 80040d8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80040da:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80040dc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80040de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80040e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040e6:	429a      	cmp	r2, r3
 80040e8:	d302      	bcc.n	80040f0 <xQueueGenericSendFromISR+0xbc>
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	2b02      	cmp	r3, #2
 80040ee:	d12f      	bne.n	8004150 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80040f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80040f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80040fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040fe:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004100:	683a      	ldr	r2, [r7, #0]
 8004102:	68b9      	ldr	r1, [r7, #8]
 8004104:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004106:	f000 f911 	bl	800432c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800410a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800410e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004112:	d112      	bne.n	800413a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004118:	2b00      	cmp	r3, #0
 800411a:	d016      	beq.n	800414a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800411c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800411e:	3324      	adds	r3, #36	; 0x24
 8004120:	4618      	mov	r0, r3
 8004122:	f000 fed1 	bl	8004ec8 <xTaskRemoveFromEventList>
 8004126:	4603      	mov	r3, r0
 8004128:	2b00      	cmp	r3, #0
 800412a:	d00e      	beq.n	800414a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d00b      	beq.n	800414a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2201      	movs	r2, #1
 8004136:	601a      	str	r2, [r3, #0]
 8004138:	e007      	b.n	800414a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800413a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800413e:	3301      	adds	r3, #1
 8004140:	b2db      	uxtb	r3, r3
 8004142:	b25a      	sxtb	r2, r3
 8004144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004146:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800414a:	2301      	movs	r3, #1
 800414c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800414e:	e001      	b.n	8004154 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004150:	2300      	movs	r3, #0
 8004152:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004154:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004156:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800415e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004160:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004162:	4618      	mov	r0, r3
 8004164:	3740      	adds	r7, #64	; 0x40
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}
	...

0800416c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b08c      	sub	sp, #48	; 0x30
 8004170:	af00      	add	r7, sp, #0
 8004172:	60f8      	str	r0, [r7, #12]
 8004174:	60b9      	str	r1, [r7, #8]
 8004176:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004178:	2300      	movs	r3, #0
 800417a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004182:	2b00      	cmp	r3, #0
 8004184:	d10a      	bne.n	800419c <xQueueReceive+0x30>
	__asm volatile
 8004186:	f04f 0350 	mov.w	r3, #80	; 0x50
 800418a:	f383 8811 	msr	BASEPRI, r3
 800418e:	f3bf 8f6f 	isb	sy
 8004192:	f3bf 8f4f 	dsb	sy
 8004196:	623b      	str	r3, [r7, #32]
}
 8004198:	bf00      	nop
 800419a:	e7fe      	b.n	800419a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d103      	bne.n	80041aa <xQueueReceive+0x3e>
 80041a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d101      	bne.n	80041ae <xQueueReceive+0x42>
 80041aa:	2301      	movs	r3, #1
 80041ac:	e000      	b.n	80041b0 <xQueueReceive+0x44>
 80041ae:	2300      	movs	r3, #0
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d10a      	bne.n	80041ca <xQueueReceive+0x5e>
	__asm volatile
 80041b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041b8:	f383 8811 	msr	BASEPRI, r3
 80041bc:	f3bf 8f6f 	isb	sy
 80041c0:	f3bf 8f4f 	dsb	sy
 80041c4:	61fb      	str	r3, [r7, #28]
}
 80041c6:	bf00      	nop
 80041c8:	e7fe      	b.n	80041c8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80041ca:	f001 f83b 	bl	8005244 <xTaskGetSchedulerState>
 80041ce:	4603      	mov	r3, r0
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d102      	bne.n	80041da <xQueueReceive+0x6e>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d101      	bne.n	80041de <xQueueReceive+0x72>
 80041da:	2301      	movs	r3, #1
 80041dc:	e000      	b.n	80041e0 <xQueueReceive+0x74>
 80041de:	2300      	movs	r3, #0
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d10a      	bne.n	80041fa <xQueueReceive+0x8e>
	__asm volatile
 80041e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041e8:	f383 8811 	msr	BASEPRI, r3
 80041ec:	f3bf 8f6f 	isb	sy
 80041f0:	f3bf 8f4f 	dsb	sy
 80041f4:	61bb      	str	r3, [r7, #24]
}
 80041f6:	bf00      	nop
 80041f8:	e7fe      	b.n	80041f8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80041fa:	f001 fd7b 	bl	8005cf4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80041fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004202:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004206:	2b00      	cmp	r3, #0
 8004208:	d01f      	beq.n	800424a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800420a:	68b9      	ldr	r1, [r7, #8]
 800420c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800420e:	f000 f8f7 	bl	8004400 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004214:	1e5a      	subs	r2, r3, #1
 8004216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004218:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800421a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800421c:	691b      	ldr	r3, [r3, #16]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d00f      	beq.n	8004242 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004224:	3310      	adds	r3, #16
 8004226:	4618      	mov	r0, r3
 8004228:	f000 fe4e 	bl	8004ec8 <xTaskRemoveFromEventList>
 800422c:	4603      	mov	r3, r0
 800422e:	2b00      	cmp	r3, #0
 8004230:	d007      	beq.n	8004242 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004232:	4b3d      	ldr	r3, [pc, #244]	; (8004328 <xQueueReceive+0x1bc>)
 8004234:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004238:	601a      	str	r2, [r3, #0]
 800423a:	f3bf 8f4f 	dsb	sy
 800423e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004242:	f001 fd87 	bl	8005d54 <vPortExitCritical>
				return pdPASS;
 8004246:	2301      	movs	r3, #1
 8004248:	e069      	b.n	800431e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d103      	bne.n	8004258 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004250:	f001 fd80 	bl	8005d54 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004254:	2300      	movs	r3, #0
 8004256:	e062      	b.n	800431e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800425a:	2b00      	cmp	r3, #0
 800425c:	d106      	bne.n	800426c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800425e:	f107 0310 	add.w	r3, r7, #16
 8004262:	4618      	mov	r0, r3
 8004264:	f000 fe94 	bl	8004f90 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004268:	2301      	movs	r3, #1
 800426a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800426c:	f001 fd72 	bl	8005d54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004270:	f000 fc06 	bl	8004a80 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004274:	f001 fd3e 	bl	8005cf4 <vPortEnterCritical>
 8004278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800427a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800427e:	b25b      	sxtb	r3, r3
 8004280:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004284:	d103      	bne.n	800428e <xQueueReceive+0x122>
 8004286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004288:	2200      	movs	r2, #0
 800428a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800428e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004290:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004294:	b25b      	sxtb	r3, r3
 8004296:	f1b3 3fff 	cmp.w	r3, #4294967295
 800429a:	d103      	bne.n	80042a4 <xQueueReceive+0x138>
 800429c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800429e:	2200      	movs	r2, #0
 80042a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80042a4:	f001 fd56 	bl	8005d54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80042a8:	1d3a      	adds	r2, r7, #4
 80042aa:	f107 0310 	add.w	r3, r7, #16
 80042ae:	4611      	mov	r1, r2
 80042b0:	4618      	mov	r0, r3
 80042b2:	f000 fe83 	bl	8004fbc <xTaskCheckForTimeOut>
 80042b6:	4603      	mov	r3, r0
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d123      	bne.n	8004304 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80042bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80042be:	f000 f917 	bl	80044f0 <prvIsQueueEmpty>
 80042c2:	4603      	mov	r3, r0
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d017      	beq.n	80042f8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80042c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ca:	3324      	adds	r3, #36	; 0x24
 80042cc:	687a      	ldr	r2, [r7, #4]
 80042ce:	4611      	mov	r1, r2
 80042d0:	4618      	mov	r0, r3
 80042d2:	f000 fda9 	bl	8004e28 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80042d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80042d8:	f000 f8b8 	bl	800444c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80042dc:	f000 fbde 	bl	8004a9c <xTaskResumeAll>
 80042e0:	4603      	mov	r3, r0
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d189      	bne.n	80041fa <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80042e6:	4b10      	ldr	r3, [pc, #64]	; (8004328 <xQueueReceive+0x1bc>)
 80042e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042ec:	601a      	str	r2, [r3, #0]
 80042ee:	f3bf 8f4f 	dsb	sy
 80042f2:	f3bf 8f6f 	isb	sy
 80042f6:	e780      	b.n	80041fa <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80042f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80042fa:	f000 f8a7 	bl	800444c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80042fe:	f000 fbcd 	bl	8004a9c <xTaskResumeAll>
 8004302:	e77a      	b.n	80041fa <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004304:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004306:	f000 f8a1 	bl	800444c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800430a:	f000 fbc7 	bl	8004a9c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800430e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004310:	f000 f8ee 	bl	80044f0 <prvIsQueueEmpty>
 8004314:	4603      	mov	r3, r0
 8004316:	2b00      	cmp	r3, #0
 8004318:	f43f af6f 	beq.w	80041fa <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800431c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800431e:	4618      	mov	r0, r3
 8004320:	3730      	adds	r7, #48	; 0x30
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}
 8004326:	bf00      	nop
 8004328:	e000ed04 	.word	0xe000ed04

0800432c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b086      	sub	sp, #24
 8004330:	af00      	add	r7, sp, #0
 8004332:	60f8      	str	r0, [r7, #12]
 8004334:	60b9      	str	r1, [r7, #8]
 8004336:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004338:	2300      	movs	r3, #0
 800433a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004340:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004346:	2b00      	cmp	r3, #0
 8004348:	d10d      	bne.n	8004366 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d14d      	bne.n	80043ee <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	689b      	ldr	r3, [r3, #8]
 8004356:	4618      	mov	r0, r3
 8004358:	f000 ff92 	bl	8005280 <xTaskPriorityDisinherit>
 800435c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	2200      	movs	r2, #0
 8004362:	609a      	str	r2, [r3, #8]
 8004364:	e043      	b.n	80043ee <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d119      	bne.n	80043a0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	6858      	ldr	r0, [r3, #4]
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004374:	461a      	mov	r2, r3
 8004376:	68b9      	ldr	r1, [r7, #8]
 8004378:	f002 f81c 	bl	80063b4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	685a      	ldr	r2, [r3, #4]
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004384:	441a      	add	r2, r3
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	685a      	ldr	r2, [r3, #4]
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	429a      	cmp	r2, r3
 8004394:	d32b      	bcc.n	80043ee <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681a      	ldr	r2, [r3, #0]
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	605a      	str	r2, [r3, #4]
 800439e:	e026      	b.n	80043ee <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	68d8      	ldr	r0, [r3, #12]
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a8:	461a      	mov	r2, r3
 80043aa:	68b9      	ldr	r1, [r7, #8]
 80043ac:	f002 f802 	bl	80063b4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	68da      	ldr	r2, [r3, #12]
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b8:	425b      	negs	r3, r3
 80043ba:	441a      	add	r2, r3
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	68da      	ldr	r2, [r3, #12]
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	429a      	cmp	r2, r3
 80043ca:	d207      	bcs.n	80043dc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	689a      	ldr	r2, [r3, #8]
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d4:	425b      	negs	r3, r3
 80043d6:	441a      	add	r2, r3
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2b02      	cmp	r3, #2
 80043e0:	d105      	bne.n	80043ee <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d002      	beq.n	80043ee <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	3b01      	subs	r3, #1
 80043ec:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	1c5a      	adds	r2, r3, #1
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80043f6:	697b      	ldr	r3, [r7, #20]
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	3718      	adds	r7, #24
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bd80      	pop	{r7, pc}

08004400 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b082      	sub	sp, #8
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
 8004408:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800440e:	2b00      	cmp	r3, #0
 8004410:	d018      	beq.n	8004444 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	68da      	ldr	r2, [r3, #12]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800441a:	441a      	add	r2, r3
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	68da      	ldr	r2, [r3, #12]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	689b      	ldr	r3, [r3, #8]
 8004428:	429a      	cmp	r2, r3
 800442a:	d303      	bcc.n	8004434 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681a      	ldr	r2, [r3, #0]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	68d9      	ldr	r1, [r3, #12]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800443c:	461a      	mov	r2, r3
 800443e:	6838      	ldr	r0, [r7, #0]
 8004440:	f001 ffb8 	bl	80063b4 <memcpy>
	}
}
 8004444:	bf00      	nop
 8004446:	3708      	adds	r7, #8
 8004448:	46bd      	mov	sp, r7
 800444a:	bd80      	pop	{r7, pc}

0800444c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b084      	sub	sp, #16
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004454:	f001 fc4e 	bl	8005cf4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800445e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004460:	e011      	b.n	8004486 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004466:	2b00      	cmp	r3, #0
 8004468:	d012      	beq.n	8004490 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	3324      	adds	r3, #36	; 0x24
 800446e:	4618      	mov	r0, r3
 8004470:	f000 fd2a 	bl	8004ec8 <xTaskRemoveFromEventList>
 8004474:	4603      	mov	r3, r0
 8004476:	2b00      	cmp	r3, #0
 8004478:	d001      	beq.n	800447e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800447a:	f000 fe01 	bl	8005080 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800447e:	7bfb      	ldrb	r3, [r7, #15]
 8004480:	3b01      	subs	r3, #1
 8004482:	b2db      	uxtb	r3, r3
 8004484:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004486:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800448a:	2b00      	cmp	r3, #0
 800448c:	dce9      	bgt.n	8004462 <prvUnlockQueue+0x16>
 800448e:	e000      	b.n	8004492 <prvUnlockQueue+0x46>
					break;
 8004490:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	22ff      	movs	r2, #255	; 0xff
 8004496:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800449a:	f001 fc5b 	bl	8005d54 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800449e:	f001 fc29 	bl	8005cf4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80044a8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80044aa:	e011      	b.n	80044d0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	691b      	ldr	r3, [r3, #16]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d012      	beq.n	80044da <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	3310      	adds	r3, #16
 80044b8:	4618      	mov	r0, r3
 80044ba:	f000 fd05 	bl	8004ec8 <xTaskRemoveFromEventList>
 80044be:	4603      	mov	r3, r0
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d001      	beq.n	80044c8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80044c4:	f000 fddc 	bl	8005080 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80044c8:	7bbb      	ldrb	r3, [r7, #14]
 80044ca:	3b01      	subs	r3, #1
 80044cc:	b2db      	uxtb	r3, r3
 80044ce:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80044d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	dce9      	bgt.n	80044ac <prvUnlockQueue+0x60>
 80044d8:	e000      	b.n	80044dc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80044da:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	22ff      	movs	r2, #255	; 0xff
 80044e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80044e4:	f001 fc36 	bl	8005d54 <vPortExitCritical>
}
 80044e8:	bf00      	nop
 80044ea:	3710      	adds	r7, #16
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd80      	pop	{r7, pc}

080044f0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b084      	sub	sp, #16
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80044f8:	f001 fbfc 	bl	8005cf4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004500:	2b00      	cmp	r3, #0
 8004502:	d102      	bne.n	800450a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004504:	2301      	movs	r3, #1
 8004506:	60fb      	str	r3, [r7, #12]
 8004508:	e001      	b.n	800450e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800450a:	2300      	movs	r3, #0
 800450c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800450e:	f001 fc21 	bl	8005d54 <vPortExitCritical>

	return xReturn;
 8004512:	68fb      	ldr	r3, [r7, #12]
}
 8004514:	4618      	mov	r0, r3
 8004516:	3710      	adds	r7, #16
 8004518:	46bd      	mov	sp, r7
 800451a:	bd80      	pop	{r7, pc}

0800451c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b084      	sub	sp, #16
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004524:	f001 fbe6 	bl	8005cf4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004530:	429a      	cmp	r2, r3
 8004532:	d102      	bne.n	800453a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004534:	2301      	movs	r3, #1
 8004536:	60fb      	str	r3, [r7, #12]
 8004538:	e001      	b.n	800453e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800453a:	2300      	movs	r3, #0
 800453c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800453e:	f001 fc09 	bl	8005d54 <vPortExitCritical>

	return xReturn;
 8004542:	68fb      	ldr	r3, [r7, #12]
}
 8004544:	4618      	mov	r0, r3
 8004546:	3710      	adds	r7, #16
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}

0800454c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800454c:	b480      	push	{r7}
 800454e:	b085      	sub	sp, #20
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
 8004554:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004556:	2300      	movs	r3, #0
 8004558:	60fb      	str	r3, [r7, #12]
 800455a:	e014      	b.n	8004586 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800455c:	4a0f      	ldr	r2, [pc, #60]	; (800459c <vQueueAddToRegistry+0x50>)
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d10b      	bne.n	8004580 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004568:	490c      	ldr	r1, [pc, #48]	; (800459c <vQueueAddToRegistry+0x50>)
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	683a      	ldr	r2, [r7, #0]
 800456e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004572:	4a0a      	ldr	r2, [pc, #40]	; (800459c <vQueueAddToRegistry+0x50>)
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	00db      	lsls	r3, r3, #3
 8004578:	4413      	add	r3, r2
 800457a:	687a      	ldr	r2, [r7, #4]
 800457c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800457e:	e006      	b.n	800458e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	3301      	adds	r3, #1
 8004584:	60fb      	str	r3, [r7, #12]
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2b07      	cmp	r3, #7
 800458a:	d9e7      	bls.n	800455c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800458c:	bf00      	nop
 800458e:	bf00      	nop
 8004590:	3714      	adds	r7, #20
 8004592:	46bd      	mov	sp, r7
 8004594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004598:	4770      	bx	lr
 800459a:	bf00      	nop
 800459c:	200007dc 	.word	0x200007dc

080045a0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b086      	sub	sp, #24
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	60f8      	str	r0, [r7, #12]
 80045a8:	60b9      	str	r1, [r7, #8]
 80045aa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80045b0:	f001 fba0 	bl	8005cf4 <vPortEnterCritical>
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80045ba:	b25b      	sxtb	r3, r3
 80045bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045c0:	d103      	bne.n	80045ca <vQueueWaitForMessageRestricted+0x2a>
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	2200      	movs	r2, #0
 80045c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80045ca:	697b      	ldr	r3, [r7, #20]
 80045cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80045d0:	b25b      	sxtb	r3, r3
 80045d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045d6:	d103      	bne.n	80045e0 <vQueueWaitForMessageRestricted+0x40>
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	2200      	movs	r2, #0
 80045dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80045e0:	f001 fbb8 	bl	8005d54 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d106      	bne.n	80045fa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	3324      	adds	r3, #36	; 0x24
 80045f0:	687a      	ldr	r2, [r7, #4]
 80045f2:	68b9      	ldr	r1, [r7, #8]
 80045f4:	4618      	mov	r0, r3
 80045f6:	f000 fc3b 	bl	8004e70 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80045fa:	6978      	ldr	r0, [r7, #20]
 80045fc:	f7ff ff26 	bl	800444c <prvUnlockQueue>
	}
 8004600:	bf00      	nop
 8004602:	3718      	adds	r7, #24
 8004604:	46bd      	mov	sp, r7
 8004606:	bd80      	pop	{r7, pc}

08004608 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004608:	b580      	push	{r7, lr}
 800460a:	b08e      	sub	sp, #56	; 0x38
 800460c:	af04      	add	r7, sp, #16
 800460e:	60f8      	str	r0, [r7, #12]
 8004610:	60b9      	str	r1, [r7, #8]
 8004612:	607a      	str	r2, [r7, #4]
 8004614:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004616:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004618:	2b00      	cmp	r3, #0
 800461a:	d10a      	bne.n	8004632 <xTaskCreateStatic+0x2a>
	__asm volatile
 800461c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004620:	f383 8811 	msr	BASEPRI, r3
 8004624:	f3bf 8f6f 	isb	sy
 8004628:	f3bf 8f4f 	dsb	sy
 800462c:	623b      	str	r3, [r7, #32]
}
 800462e:	bf00      	nop
 8004630:	e7fe      	b.n	8004630 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004634:	2b00      	cmp	r3, #0
 8004636:	d10a      	bne.n	800464e <xTaskCreateStatic+0x46>
	__asm volatile
 8004638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800463c:	f383 8811 	msr	BASEPRI, r3
 8004640:	f3bf 8f6f 	isb	sy
 8004644:	f3bf 8f4f 	dsb	sy
 8004648:	61fb      	str	r3, [r7, #28]
}
 800464a:	bf00      	nop
 800464c:	e7fe      	b.n	800464c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800464e:	235c      	movs	r3, #92	; 0x5c
 8004650:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	2b5c      	cmp	r3, #92	; 0x5c
 8004656:	d00a      	beq.n	800466e <xTaskCreateStatic+0x66>
	__asm volatile
 8004658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800465c:	f383 8811 	msr	BASEPRI, r3
 8004660:	f3bf 8f6f 	isb	sy
 8004664:	f3bf 8f4f 	dsb	sy
 8004668:	61bb      	str	r3, [r7, #24]
}
 800466a:	bf00      	nop
 800466c:	e7fe      	b.n	800466c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800466e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004672:	2b00      	cmp	r3, #0
 8004674:	d01e      	beq.n	80046b4 <xTaskCreateStatic+0xac>
 8004676:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004678:	2b00      	cmp	r3, #0
 800467a:	d01b      	beq.n	80046b4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800467c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800467e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004682:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004684:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004688:	2202      	movs	r2, #2
 800468a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800468e:	2300      	movs	r3, #0
 8004690:	9303      	str	r3, [sp, #12]
 8004692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004694:	9302      	str	r3, [sp, #8]
 8004696:	f107 0314 	add.w	r3, r7, #20
 800469a:	9301      	str	r3, [sp, #4]
 800469c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800469e:	9300      	str	r3, [sp, #0]
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	687a      	ldr	r2, [r7, #4]
 80046a4:	68b9      	ldr	r1, [r7, #8]
 80046a6:	68f8      	ldr	r0, [r7, #12]
 80046a8:	f000 f850 	bl	800474c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80046ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80046ae:	f000 f8dd 	bl	800486c <prvAddNewTaskToReadyList>
 80046b2:	e001      	b.n	80046b8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80046b4:	2300      	movs	r3, #0
 80046b6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80046b8:	697b      	ldr	r3, [r7, #20]
	}
 80046ba:	4618      	mov	r0, r3
 80046bc:	3728      	adds	r7, #40	; 0x28
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}

080046c2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80046c2:	b580      	push	{r7, lr}
 80046c4:	b08c      	sub	sp, #48	; 0x30
 80046c6:	af04      	add	r7, sp, #16
 80046c8:	60f8      	str	r0, [r7, #12]
 80046ca:	60b9      	str	r1, [r7, #8]
 80046cc:	603b      	str	r3, [r7, #0]
 80046ce:	4613      	mov	r3, r2
 80046d0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80046d2:	88fb      	ldrh	r3, [r7, #6]
 80046d4:	009b      	lsls	r3, r3, #2
 80046d6:	4618      	mov	r0, r3
 80046d8:	f001 fc2e 	bl	8005f38 <pvPortMalloc>
 80046dc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d00e      	beq.n	8004702 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80046e4:	205c      	movs	r0, #92	; 0x5c
 80046e6:	f001 fc27 	bl	8005f38 <pvPortMalloc>
 80046ea:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80046ec:	69fb      	ldr	r3, [r7, #28]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d003      	beq.n	80046fa <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80046f2:	69fb      	ldr	r3, [r7, #28]
 80046f4:	697a      	ldr	r2, [r7, #20]
 80046f6:	631a      	str	r2, [r3, #48]	; 0x30
 80046f8:	e005      	b.n	8004706 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80046fa:	6978      	ldr	r0, [r7, #20]
 80046fc:	f001 fce8 	bl	80060d0 <vPortFree>
 8004700:	e001      	b.n	8004706 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004702:	2300      	movs	r3, #0
 8004704:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004706:	69fb      	ldr	r3, [r7, #28]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d017      	beq.n	800473c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800470c:	69fb      	ldr	r3, [r7, #28]
 800470e:	2200      	movs	r2, #0
 8004710:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004714:	88fa      	ldrh	r2, [r7, #6]
 8004716:	2300      	movs	r3, #0
 8004718:	9303      	str	r3, [sp, #12]
 800471a:	69fb      	ldr	r3, [r7, #28]
 800471c:	9302      	str	r3, [sp, #8]
 800471e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004720:	9301      	str	r3, [sp, #4]
 8004722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004724:	9300      	str	r3, [sp, #0]
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	68b9      	ldr	r1, [r7, #8]
 800472a:	68f8      	ldr	r0, [r7, #12]
 800472c:	f000 f80e 	bl	800474c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004730:	69f8      	ldr	r0, [r7, #28]
 8004732:	f000 f89b 	bl	800486c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004736:	2301      	movs	r3, #1
 8004738:	61bb      	str	r3, [r7, #24]
 800473a:	e002      	b.n	8004742 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800473c:	f04f 33ff 	mov.w	r3, #4294967295
 8004740:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004742:	69bb      	ldr	r3, [r7, #24]
	}
 8004744:	4618      	mov	r0, r3
 8004746:	3720      	adds	r7, #32
 8004748:	46bd      	mov	sp, r7
 800474a:	bd80      	pop	{r7, pc}

0800474c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b088      	sub	sp, #32
 8004750:	af00      	add	r7, sp, #0
 8004752:	60f8      	str	r0, [r7, #12]
 8004754:	60b9      	str	r1, [r7, #8]
 8004756:	607a      	str	r2, [r7, #4]
 8004758:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800475a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800475c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	009b      	lsls	r3, r3, #2
 8004762:	461a      	mov	r2, r3
 8004764:	21a5      	movs	r1, #165	; 0xa5
 8004766:	f001 fdf1 	bl	800634c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800476a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800476c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004774:	3b01      	subs	r3, #1
 8004776:	009b      	lsls	r3, r3, #2
 8004778:	4413      	add	r3, r2
 800477a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800477c:	69bb      	ldr	r3, [r7, #24]
 800477e:	f023 0307 	bic.w	r3, r3, #7
 8004782:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004784:	69bb      	ldr	r3, [r7, #24]
 8004786:	f003 0307 	and.w	r3, r3, #7
 800478a:	2b00      	cmp	r3, #0
 800478c:	d00a      	beq.n	80047a4 <prvInitialiseNewTask+0x58>
	__asm volatile
 800478e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004792:	f383 8811 	msr	BASEPRI, r3
 8004796:	f3bf 8f6f 	isb	sy
 800479a:	f3bf 8f4f 	dsb	sy
 800479e:	617b      	str	r3, [r7, #20]
}
 80047a0:	bf00      	nop
 80047a2:	e7fe      	b.n	80047a2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d01f      	beq.n	80047ea <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80047aa:	2300      	movs	r3, #0
 80047ac:	61fb      	str	r3, [r7, #28]
 80047ae:	e012      	b.n	80047d6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80047b0:	68ba      	ldr	r2, [r7, #8]
 80047b2:	69fb      	ldr	r3, [r7, #28]
 80047b4:	4413      	add	r3, r2
 80047b6:	7819      	ldrb	r1, [r3, #0]
 80047b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047ba:	69fb      	ldr	r3, [r7, #28]
 80047bc:	4413      	add	r3, r2
 80047be:	3334      	adds	r3, #52	; 0x34
 80047c0:	460a      	mov	r2, r1
 80047c2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80047c4:	68ba      	ldr	r2, [r7, #8]
 80047c6:	69fb      	ldr	r3, [r7, #28]
 80047c8:	4413      	add	r3, r2
 80047ca:	781b      	ldrb	r3, [r3, #0]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d006      	beq.n	80047de <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80047d0:	69fb      	ldr	r3, [r7, #28]
 80047d2:	3301      	adds	r3, #1
 80047d4:	61fb      	str	r3, [r7, #28]
 80047d6:	69fb      	ldr	r3, [r7, #28]
 80047d8:	2b0f      	cmp	r3, #15
 80047da:	d9e9      	bls.n	80047b0 <prvInitialiseNewTask+0x64>
 80047dc:	e000      	b.n	80047e0 <prvInitialiseNewTask+0x94>
			{
				break;
 80047de:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80047e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047e2:	2200      	movs	r2, #0
 80047e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80047e8:	e003      	b.n	80047f2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80047ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047ec:	2200      	movs	r2, #0
 80047ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80047f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047f4:	2b37      	cmp	r3, #55	; 0x37
 80047f6:	d901      	bls.n	80047fc <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80047f8:	2337      	movs	r3, #55	; 0x37
 80047fa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80047fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004800:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004804:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004806:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800480a:	2200      	movs	r2, #0
 800480c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800480e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004810:	3304      	adds	r3, #4
 8004812:	4618      	mov	r0, r3
 8004814:	f7ff f978 	bl	8003b08 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800481a:	3318      	adds	r3, #24
 800481c:	4618      	mov	r0, r3
 800481e:	f7ff f973 	bl	8003b08 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004824:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004826:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800482a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800482e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004830:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004834:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004836:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800483a:	2200      	movs	r2, #0
 800483c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800483e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004840:	2200      	movs	r2, #0
 8004842:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004846:	683a      	ldr	r2, [r7, #0]
 8004848:	68f9      	ldr	r1, [r7, #12]
 800484a:	69b8      	ldr	r0, [r7, #24]
 800484c:	f001 f928 	bl	8005aa0 <pxPortInitialiseStack>
 8004850:	4602      	mov	r2, r0
 8004852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004854:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004858:	2b00      	cmp	r3, #0
 800485a:	d002      	beq.n	8004862 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800485c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800485e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004860:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004862:	bf00      	nop
 8004864:	3720      	adds	r7, #32
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}
	...

0800486c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b082      	sub	sp, #8
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004874:	f001 fa3e 	bl	8005cf4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004878:	4b2d      	ldr	r3, [pc, #180]	; (8004930 <prvAddNewTaskToReadyList+0xc4>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	3301      	adds	r3, #1
 800487e:	4a2c      	ldr	r2, [pc, #176]	; (8004930 <prvAddNewTaskToReadyList+0xc4>)
 8004880:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004882:	4b2c      	ldr	r3, [pc, #176]	; (8004934 <prvAddNewTaskToReadyList+0xc8>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d109      	bne.n	800489e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800488a:	4a2a      	ldr	r2, [pc, #168]	; (8004934 <prvAddNewTaskToReadyList+0xc8>)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004890:	4b27      	ldr	r3, [pc, #156]	; (8004930 <prvAddNewTaskToReadyList+0xc4>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	2b01      	cmp	r3, #1
 8004896:	d110      	bne.n	80048ba <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004898:	f000 fc16 	bl	80050c8 <prvInitialiseTaskLists>
 800489c:	e00d      	b.n	80048ba <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800489e:	4b26      	ldr	r3, [pc, #152]	; (8004938 <prvAddNewTaskToReadyList+0xcc>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d109      	bne.n	80048ba <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80048a6:	4b23      	ldr	r3, [pc, #140]	; (8004934 <prvAddNewTaskToReadyList+0xc8>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048b0:	429a      	cmp	r2, r3
 80048b2:	d802      	bhi.n	80048ba <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80048b4:	4a1f      	ldr	r2, [pc, #124]	; (8004934 <prvAddNewTaskToReadyList+0xc8>)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80048ba:	4b20      	ldr	r3, [pc, #128]	; (800493c <prvAddNewTaskToReadyList+0xd0>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	3301      	adds	r3, #1
 80048c0:	4a1e      	ldr	r2, [pc, #120]	; (800493c <prvAddNewTaskToReadyList+0xd0>)
 80048c2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80048c4:	4b1d      	ldr	r3, [pc, #116]	; (800493c <prvAddNewTaskToReadyList+0xd0>)
 80048c6:	681a      	ldr	r2, [r3, #0]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048d0:	4b1b      	ldr	r3, [pc, #108]	; (8004940 <prvAddNewTaskToReadyList+0xd4>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	429a      	cmp	r2, r3
 80048d6:	d903      	bls.n	80048e0 <prvAddNewTaskToReadyList+0x74>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048dc:	4a18      	ldr	r2, [pc, #96]	; (8004940 <prvAddNewTaskToReadyList+0xd4>)
 80048de:	6013      	str	r3, [r2, #0]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048e4:	4613      	mov	r3, r2
 80048e6:	009b      	lsls	r3, r3, #2
 80048e8:	4413      	add	r3, r2
 80048ea:	009b      	lsls	r3, r3, #2
 80048ec:	4a15      	ldr	r2, [pc, #84]	; (8004944 <prvAddNewTaskToReadyList+0xd8>)
 80048ee:	441a      	add	r2, r3
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	3304      	adds	r3, #4
 80048f4:	4619      	mov	r1, r3
 80048f6:	4610      	mov	r0, r2
 80048f8:	f7ff f913 	bl	8003b22 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80048fc:	f001 fa2a 	bl	8005d54 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004900:	4b0d      	ldr	r3, [pc, #52]	; (8004938 <prvAddNewTaskToReadyList+0xcc>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d00e      	beq.n	8004926 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004908:	4b0a      	ldr	r3, [pc, #40]	; (8004934 <prvAddNewTaskToReadyList+0xc8>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004912:	429a      	cmp	r2, r3
 8004914:	d207      	bcs.n	8004926 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004916:	4b0c      	ldr	r3, [pc, #48]	; (8004948 <prvAddNewTaskToReadyList+0xdc>)
 8004918:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800491c:	601a      	str	r2, [r3, #0]
 800491e:	f3bf 8f4f 	dsb	sy
 8004922:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004926:	bf00      	nop
 8004928:	3708      	adds	r7, #8
 800492a:	46bd      	mov	sp, r7
 800492c:	bd80      	pop	{r7, pc}
 800492e:	bf00      	nop
 8004930:	20000cf0 	.word	0x20000cf0
 8004934:	2000081c 	.word	0x2000081c
 8004938:	20000cfc 	.word	0x20000cfc
 800493c:	20000d0c 	.word	0x20000d0c
 8004940:	20000cf8 	.word	0x20000cf8
 8004944:	20000820 	.word	0x20000820
 8004948:	e000ed04 	.word	0xe000ed04

0800494c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800494c:	b580      	push	{r7, lr}
 800494e:	b084      	sub	sp, #16
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004954:	2300      	movs	r3, #0
 8004956:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d017      	beq.n	800498e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800495e:	4b13      	ldr	r3, [pc, #76]	; (80049ac <vTaskDelay+0x60>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d00a      	beq.n	800497c <vTaskDelay+0x30>
	__asm volatile
 8004966:	f04f 0350 	mov.w	r3, #80	; 0x50
 800496a:	f383 8811 	msr	BASEPRI, r3
 800496e:	f3bf 8f6f 	isb	sy
 8004972:	f3bf 8f4f 	dsb	sy
 8004976:	60bb      	str	r3, [r7, #8]
}
 8004978:	bf00      	nop
 800497a:	e7fe      	b.n	800497a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800497c:	f000 f880 	bl	8004a80 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004980:	2100      	movs	r1, #0
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	f000 fcea 	bl	800535c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004988:	f000 f888 	bl	8004a9c <xTaskResumeAll>
 800498c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d107      	bne.n	80049a4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004994:	4b06      	ldr	r3, [pc, #24]	; (80049b0 <vTaskDelay+0x64>)
 8004996:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800499a:	601a      	str	r2, [r3, #0]
 800499c:	f3bf 8f4f 	dsb	sy
 80049a0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80049a4:	bf00      	nop
 80049a6:	3710      	adds	r7, #16
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bd80      	pop	{r7, pc}
 80049ac:	20000d18 	.word	0x20000d18
 80049b0:	e000ed04 	.word	0xe000ed04

080049b4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b08a      	sub	sp, #40	; 0x28
 80049b8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80049ba:	2300      	movs	r3, #0
 80049bc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80049be:	2300      	movs	r3, #0
 80049c0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80049c2:	463a      	mov	r2, r7
 80049c4:	1d39      	adds	r1, r7, #4
 80049c6:	f107 0308 	add.w	r3, r7, #8
 80049ca:	4618      	mov	r0, r3
 80049cc:	f7ff f848 	bl	8003a60 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80049d0:	6839      	ldr	r1, [r7, #0]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	68ba      	ldr	r2, [r7, #8]
 80049d6:	9202      	str	r2, [sp, #8]
 80049d8:	9301      	str	r3, [sp, #4]
 80049da:	2300      	movs	r3, #0
 80049dc:	9300      	str	r3, [sp, #0]
 80049de:	2300      	movs	r3, #0
 80049e0:	460a      	mov	r2, r1
 80049e2:	4921      	ldr	r1, [pc, #132]	; (8004a68 <vTaskStartScheduler+0xb4>)
 80049e4:	4821      	ldr	r0, [pc, #132]	; (8004a6c <vTaskStartScheduler+0xb8>)
 80049e6:	f7ff fe0f 	bl	8004608 <xTaskCreateStatic>
 80049ea:	4603      	mov	r3, r0
 80049ec:	4a20      	ldr	r2, [pc, #128]	; (8004a70 <vTaskStartScheduler+0xbc>)
 80049ee:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80049f0:	4b1f      	ldr	r3, [pc, #124]	; (8004a70 <vTaskStartScheduler+0xbc>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d002      	beq.n	80049fe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80049f8:	2301      	movs	r3, #1
 80049fa:	617b      	str	r3, [r7, #20]
 80049fc:	e001      	b.n	8004a02 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80049fe:	2300      	movs	r3, #0
 8004a00:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	2b01      	cmp	r3, #1
 8004a06:	d102      	bne.n	8004a0e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004a08:	f000 fcfc 	bl	8005404 <xTimerCreateTimerTask>
 8004a0c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	2b01      	cmp	r3, #1
 8004a12:	d116      	bne.n	8004a42 <vTaskStartScheduler+0x8e>
	__asm volatile
 8004a14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a18:	f383 8811 	msr	BASEPRI, r3
 8004a1c:	f3bf 8f6f 	isb	sy
 8004a20:	f3bf 8f4f 	dsb	sy
 8004a24:	613b      	str	r3, [r7, #16]
}
 8004a26:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004a28:	4b12      	ldr	r3, [pc, #72]	; (8004a74 <vTaskStartScheduler+0xc0>)
 8004a2a:	f04f 32ff 	mov.w	r2, #4294967295
 8004a2e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004a30:	4b11      	ldr	r3, [pc, #68]	; (8004a78 <vTaskStartScheduler+0xc4>)
 8004a32:	2201      	movs	r2, #1
 8004a34:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004a36:	4b11      	ldr	r3, [pc, #68]	; (8004a7c <vTaskStartScheduler+0xc8>)
 8004a38:	2200      	movs	r2, #0
 8004a3a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004a3c:	f001 f8b8 	bl	8005bb0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004a40:	e00e      	b.n	8004a60 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004a42:	697b      	ldr	r3, [r7, #20]
 8004a44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a48:	d10a      	bne.n	8004a60 <vTaskStartScheduler+0xac>
	__asm volatile
 8004a4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a4e:	f383 8811 	msr	BASEPRI, r3
 8004a52:	f3bf 8f6f 	isb	sy
 8004a56:	f3bf 8f4f 	dsb	sy
 8004a5a:	60fb      	str	r3, [r7, #12]
}
 8004a5c:	bf00      	nop
 8004a5e:	e7fe      	b.n	8004a5e <vTaskStartScheduler+0xaa>
}
 8004a60:	bf00      	nop
 8004a62:	3718      	adds	r7, #24
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bd80      	pop	{r7, pc}
 8004a68:	08006ca8 	.word	0x08006ca8
 8004a6c:	08005099 	.word	0x08005099
 8004a70:	20000d14 	.word	0x20000d14
 8004a74:	20000d10 	.word	0x20000d10
 8004a78:	20000cfc 	.word	0x20000cfc
 8004a7c:	20000cf4 	.word	0x20000cf4

08004a80 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004a80:	b480      	push	{r7}
 8004a82:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004a84:	4b04      	ldr	r3, [pc, #16]	; (8004a98 <vTaskSuspendAll+0x18>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	3301      	adds	r3, #1
 8004a8a:	4a03      	ldr	r2, [pc, #12]	; (8004a98 <vTaskSuspendAll+0x18>)
 8004a8c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004a8e:	bf00      	nop
 8004a90:	46bd      	mov	sp, r7
 8004a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a96:	4770      	bx	lr
 8004a98:	20000d18 	.word	0x20000d18

08004a9c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b084      	sub	sp, #16
 8004aa0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004aaa:	4b42      	ldr	r3, [pc, #264]	; (8004bb4 <xTaskResumeAll+0x118>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d10a      	bne.n	8004ac8 <xTaskResumeAll+0x2c>
	__asm volatile
 8004ab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ab6:	f383 8811 	msr	BASEPRI, r3
 8004aba:	f3bf 8f6f 	isb	sy
 8004abe:	f3bf 8f4f 	dsb	sy
 8004ac2:	603b      	str	r3, [r7, #0]
}
 8004ac4:	bf00      	nop
 8004ac6:	e7fe      	b.n	8004ac6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004ac8:	f001 f914 	bl	8005cf4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004acc:	4b39      	ldr	r3, [pc, #228]	; (8004bb4 <xTaskResumeAll+0x118>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	3b01      	subs	r3, #1
 8004ad2:	4a38      	ldr	r2, [pc, #224]	; (8004bb4 <xTaskResumeAll+0x118>)
 8004ad4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ad6:	4b37      	ldr	r3, [pc, #220]	; (8004bb4 <xTaskResumeAll+0x118>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d162      	bne.n	8004ba4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004ade:	4b36      	ldr	r3, [pc, #216]	; (8004bb8 <xTaskResumeAll+0x11c>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d05e      	beq.n	8004ba4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004ae6:	e02f      	b.n	8004b48 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ae8:	4b34      	ldr	r3, [pc, #208]	; (8004bbc <xTaskResumeAll+0x120>)
 8004aea:	68db      	ldr	r3, [r3, #12]
 8004aec:	68db      	ldr	r3, [r3, #12]
 8004aee:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	3318      	adds	r3, #24
 8004af4:	4618      	mov	r0, r3
 8004af6:	f7ff f871 	bl	8003bdc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	3304      	adds	r3, #4
 8004afe:	4618      	mov	r0, r3
 8004b00:	f7ff f86c 	bl	8003bdc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b08:	4b2d      	ldr	r3, [pc, #180]	; (8004bc0 <xTaskResumeAll+0x124>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	429a      	cmp	r2, r3
 8004b0e:	d903      	bls.n	8004b18 <xTaskResumeAll+0x7c>
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b14:	4a2a      	ldr	r2, [pc, #168]	; (8004bc0 <xTaskResumeAll+0x124>)
 8004b16:	6013      	str	r3, [r2, #0]
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b1c:	4613      	mov	r3, r2
 8004b1e:	009b      	lsls	r3, r3, #2
 8004b20:	4413      	add	r3, r2
 8004b22:	009b      	lsls	r3, r3, #2
 8004b24:	4a27      	ldr	r2, [pc, #156]	; (8004bc4 <xTaskResumeAll+0x128>)
 8004b26:	441a      	add	r2, r3
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	3304      	adds	r3, #4
 8004b2c:	4619      	mov	r1, r3
 8004b2e:	4610      	mov	r0, r2
 8004b30:	f7fe fff7 	bl	8003b22 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b38:	4b23      	ldr	r3, [pc, #140]	; (8004bc8 <xTaskResumeAll+0x12c>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b3e:	429a      	cmp	r2, r3
 8004b40:	d302      	bcc.n	8004b48 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004b42:	4b22      	ldr	r3, [pc, #136]	; (8004bcc <xTaskResumeAll+0x130>)
 8004b44:	2201      	movs	r2, #1
 8004b46:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004b48:	4b1c      	ldr	r3, [pc, #112]	; (8004bbc <xTaskResumeAll+0x120>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d1cb      	bne.n	8004ae8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d001      	beq.n	8004b5a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004b56:	f000 fb55 	bl	8005204 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004b5a:	4b1d      	ldr	r3, [pc, #116]	; (8004bd0 <xTaskResumeAll+0x134>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d010      	beq.n	8004b88 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004b66:	f000 f847 	bl	8004bf8 <xTaskIncrementTick>
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d002      	beq.n	8004b76 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004b70:	4b16      	ldr	r3, [pc, #88]	; (8004bcc <xTaskResumeAll+0x130>)
 8004b72:	2201      	movs	r2, #1
 8004b74:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	3b01      	subs	r3, #1
 8004b7a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d1f1      	bne.n	8004b66 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004b82:	4b13      	ldr	r3, [pc, #76]	; (8004bd0 <xTaskResumeAll+0x134>)
 8004b84:	2200      	movs	r2, #0
 8004b86:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004b88:	4b10      	ldr	r3, [pc, #64]	; (8004bcc <xTaskResumeAll+0x130>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d009      	beq.n	8004ba4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004b90:	2301      	movs	r3, #1
 8004b92:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004b94:	4b0f      	ldr	r3, [pc, #60]	; (8004bd4 <xTaskResumeAll+0x138>)
 8004b96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b9a:	601a      	str	r2, [r3, #0]
 8004b9c:	f3bf 8f4f 	dsb	sy
 8004ba0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004ba4:	f001 f8d6 	bl	8005d54 <vPortExitCritical>

	return xAlreadyYielded;
 8004ba8:	68bb      	ldr	r3, [r7, #8]
}
 8004baa:	4618      	mov	r0, r3
 8004bac:	3710      	adds	r7, #16
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bd80      	pop	{r7, pc}
 8004bb2:	bf00      	nop
 8004bb4:	20000d18 	.word	0x20000d18
 8004bb8:	20000cf0 	.word	0x20000cf0
 8004bbc:	20000cb0 	.word	0x20000cb0
 8004bc0:	20000cf8 	.word	0x20000cf8
 8004bc4:	20000820 	.word	0x20000820
 8004bc8:	2000081c 	.word	0x2000081c
 8004bcc:	20000d04 	.word	0x20000d04
 8004bd0:	20000d00 	.word	0x20000d00
 8004bd4:	e000ed04 	.word	0xe000ed04

08004bd8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b083      	sub	sp, #12
 8004bdc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004bde:	4b05      	ldr	r3, [pc, #20]	; (8004bf4 <xTaskGetTickCount+0x1c>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004be4:	687b      	ldr	r3, [r7, #4]
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	370c      	adds	r7, #12
 8004bea:	46bd      	mov	sp, r7
 8004bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf0:	4770      	bx	lr
 8004bf2:	bf00      	nop
 8004bf4:	20000cf4 	.word	0x20000cf4

08004bf8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b086      	sub	sp, #24
 8004bfc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004bfe:	2300      	movs	r3, #0
 8004c00:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004c02:	4b4f      	ldr	r3, [pc, #316]	; (8004d40 <xTaskIncrementTick+0x148>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	f040 808f 	bne.w	8004d2a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004c0c:	4b4d      	ldr	r3, [pc, #308]	; (8004d44 <xTaskIncrementTick+0x14c>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	3301      	adds	r3, #1
 8004c12:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004c14:	4a4b      	ldr	r2, [pc, #300]	; (8004d44 <xTaskIncrementTick+0x14c>)
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d120      	bne.n	8004c62 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004c20:	4b49      	ldr	r3, [pc, #292]	; (8004d48 <xTaskIncrementTick+0x150>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d00a      	beq.n	8004c40 <xTaskIncrementTick+0x48>
	__asm volatile
 8004c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c2e:	f383 8811 	msr	BASEPRI, r3
 8004c32:	f3bf 8f6f 	isb	sy
 8004c36:	f3bf 8f4f 	dsb	sy
 8004c3a:	603b      	str	r3, [r7, #0]
}
 8004c3c:	bf00      	nop
 8004c3e:	e7fe      	b.n	8004c3e <xTaskIncrementTick+0x46>
 8004c40:	4b41      	ldr	r3, [pc, #260]	; (8004d48 <xTaskIncrementTick+0x150>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	60fb      	str	r3, [r7, #12]
 8004c46:	4b41      	ldr	r3, [pc, #260]	; (8004d4c <xTaskIncrementTick+0x154>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a3f      	ldr	r2, [pc, #252]	; (8004d48 <xTaskIncrementTick+0x150>)
 8004c4c:	6013      	str	r3, [r2, #0]
 8004c4e:	4a3f      	ldr	r2, [pc, #252]	; (8004d4c <xTaskIncrementTick+0x154>)
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	6013      	str	r3, [r2, #0]
 8004c54:	4b3e      	ldr	r3, [pc, #248]	; (8004d50 <xTaskIncrementTick+0x158>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	3301      	adds	r3, #1
 8004c5a:	4a3d      	ldr	r2, [pc, #244]	; (8004d50 <xTaskIncrementTick+0x158>)
 8004c5c:	6013      	str	r3, [r2, #0]
 8004c5e:	f000 fad1 	bl	8005204 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004c62:	4b3c      	ldr	r3, [pc, #240]	; (8004d54 <xTaskIncrementTick+0x15c>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	693a      	ldr	r2, [r7, #16]
 8004c68:	429a      	cmp	r2, r3
 8004c6a:	d349      	bcc.n	8004d00 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004c6c:	4b36      	ldr	r3, [pc, #216]	; (8004d48 <xTaskIncrementTick+0x150>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d104      	bne.n	8004c80 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c76:	4b37      	ldr	r3, [pc, #220]	; (8004d54 <xTaskIncrementTick+0x15c>)
 8004c78:	f04f 32ff 	mov.w	r2, #4294967295
 8004c7c:	601a      	str	r2, [r3, #0]
					break;
 8004c7e:	e03f      	b.n	8004d00 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c80:	4b31      	ldr	r3, [pc, #196]	; (8004d48 <xTaskIncrementTick+0x150>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	68db      	ldr	r3, [r3, #12]
 8004c86:	68db      	ldr	r3, [r3, #12]
 8004c88:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004c90:	693a      	ldr	r2, [r7, #16]
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	429a      	cmp	r2, r3
 8004c96:	d203      	bcs.n	8004ca0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004c98:	4a2e      	ldr	r2, [pc, #184]	; (8004d54 <xTaskIncrementTick+0x15c>)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004c9e:	e02f      	b.n	8004d00 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	3304      	adds	r3, #4
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	f7fe ff99 	bl	8003bdc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d004      	beq.n	8004cbc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	3318      	adds	r3, #24
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f7fe ff90 	bl	8003bdc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cc0:	4b25      	ldr	r3, [pc, #148]	; (8004d58 <xTaskIncrementTick+0x160>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	429a      	cmp	r2, r3
 8004cc6:	d903      	bls.n	8004cd0 <xTaskIncrementTick+0xd8>
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ccc:	4a22      	ldr	r2, [pc, #136]	; (8004d58 <xTaskIncrementTick+0x160>)
 8004cce:	6013      	str	r3, [r2, #0]
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cd4:	4613      	mov	r3, r2
 8004cd6:	009b      	lsls	r3, r3, #2
 8004cd8:	4413      	add	r3, r2
 8004cda:	009b      	lsls	r3, r3, #2
 8004cdc:	4a1f      	ldr	r2, [pc, #124]	; (8004d5c <xTaskIncrementTick+0x164>)
 8004cde:	441a      	add	r2, r3
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	3304      	adds	r3, #4
 8004ce4:	4619      	mov	r1, r3
 8004ce6:	4610      	mov	r0, r2
 8004ce8:	f7fe ff1b 	bl	8003b22 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cf0:	4b1b      	ldr	r3, [pc, #108]	; (8004d60 <xTaskIncrementTick+0x168>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cf6:	429a      	cmp	r2, r3
 8004cf8:	d3b8      	bcc.n	8004c6c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004cfe:	e7b5      	b.n	8004c6c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004d00:	4b17      	ldr	r3, [pc, #92]	; (8004d60 <xTaskIncrementTick+0x168>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d06:	4915      	ldr	r1, [pc, #84]	; (8004d5c <xTaskIncrementTick+0x164>)
 8004d08:	4613      	mov	r3, r2
 8004d0a:	009b      	lsls	r3, r3, #2
 8004d0c:	4413      	add	r3, r2
 8004d0e:	009b      	lsls	r3, r3, #2
 8004d10:	440b      	add	r3, r1
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	d901      	bls.n	8004d1c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004d18:	2301      	movs	r3, #1
 8004d1a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004d1c:	4b11      	ldr	r3, [pc, #68]	; (8004d64 <xTaskIncrementTick+0x16c>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d007      	beq.n	8004d34 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004d24:	2301      	movs	r3, #1
 8004d26:	617b      	str	r3, [r7, #20]
 8004d28:	e004      	b.n	8004d34 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004d2a:	4b0f      	ldr	r3, [pc, #60]	; (8004d68 <xTaskIncrementTick+0x170>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	3301      	adds	r3, #1
 8004d30:	4a0d      	ldr	r2, [pc, #52]	; (8004d68 <xTaskIncrementTick+0x170>)
 8004d32:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004d34:	697b      	ldr	r3, [r7, #20]
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	3718      	adds	r7, #24
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}
 8004d3e:	bf00      	nop
 8004d40:	20000d18 	.word	0x20000d18
 8004d44:	20000cf4 	.word	0x20000cf4
 8004d48:	20000ca8 	.word	0x20000ca8
 8004d4c:	20000cac 	.word	0x20000cac
 8004d50:	20000d08 	.word	0x20000d08
 8004d54:	20000d10 	.word	0x20000d10
 8004d58:	20000cf8 	.word	0x20000cf8
 8004d5c:	20000820 	.word	0x20000820
 8004d60:	2000081c 	.word	0x2000081c
 8004d64:	20000d04 	.word	0x20000d04
 8004d68:	20000d00 	.word	0x20000d00

08004d6c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b085      	sub	sp, #20
 8004d70:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004d72:	4b28      	ldr	r3, [pc, #160]	; (8004e14 <vTaskSwitchContext+0xa8>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d003      	beq.n	8004d82 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004d7a:	4b27      	ldr	r3, [pc, #156]	; (8004e18 <vTaskSwitchContext+0xac>)
 8004d7c:	2201      	movs	r2, #1
 8004d7e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004d80:	e041      	b.n	8004e06 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8004d82:	4b25      	ldr	r3, [pc, #148]	; (8004e18 <vTaskSwitchContext+0xac>)
 8004d84:	2200      	movs	r2, #0
 8004d86:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d88:	4b24      	ldr	r3, [pc, #144]	; (8004e1c <vTaskSwitchContext+0xb0>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	60fb      	str	r3, [r7, #12]
 8004d8e:	e010      	b.n	8004db2 <vTaskSwitchContext+0x46>
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d10a      	bne.n	8004dac <vTaskSwitchContext+0x40>
	__asm volatile
 8004d96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d9a:	f383 8811 	msr	BASEPRI, r3
 8004d9e:	f3bf 8f6f 	isb	sy
 8004da2:	f3bf 8f4f 	dsb	sy
 8004da6:	607b      	str	r3, [r7, #4]
}
 8004da8:	bf00      	nop
 8004daa:	e7fe      	b.n	8004daa <vTaskSwitchContext+0x3e>
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	3b01      	subs	r3, #1
 8004db0:	60fb      	str	r3, [r7, #12]
 8004db2:	491b      	ldr	r1, [pc, #108]	; (8004e20 <vTaskSwitchContext+0xb4>)
 8004db4:	68fa      	ldr	r2, [r7, #12]
 8004db6:	4613      	mov	r3, r2
 8004db8:	009b      	lsls	r3, r3, #2
 8004dba:	4413      	add	r3, r2
 8004dbc:	009b      	lsls	r3, r3, #2
 8004dbe:	440b      	add	r3, r1
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d0e4      	beq.n	8004d90 <vTaskSwitchContext+0x24>
 8004dc6:	68fa      	ldr	r2, [r7, #12]
 8004dc8:	4613      	mov	r3, r2
 8004dca:	009b      	lsls	r3, r3, #2
 8004dcc:	4413      	add	r3, r2
 8004dce:	009b      	lsls	r3, r3, #2
 8004dd0:	4a13      	ldr	r2, [pc, #76]	; (8004e20 <vTaskSwitchContext+0xb4>)
 8004dd2:	4413      	add	r3, r2
 8004dd4:	60bb      	str	r3, [r7, #8]
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	685a      	ldr	r2, [r3, #4]
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	605a      	str	r2, [r3, #4]
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	685a      	ldr	r2, [r3, #4]
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	3308      	adds	r3, #8
 8004de8:	429a      	cmp	r2, r3
 8004dea:	d104      	bne.n	8004df6 <vTaskSwitchContext+0x8a>
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	685b      	ldr	r3, [r3, #4]
 8004df0:	685a      	ldr	r2, [r3, #4]
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	605a      	str	r2, [r3, #4]
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	68db      	ldr	r3, [r3, #12]
 8004dfc:	4a09      	ldr	r2, [pc, #36]	; (8004e24 <vTaskSwitchContext+0xb8>)
 8004dfe:	6013      	str	r3, [r2, #0]
 8004e00:	4a06      	ldr	r2, [pc, #24]	; (8004e1c <vTaskSwitchContext+0xb0>)
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	6013      	str	r3, [r2, #0]
}
 8004e06:	bf00      	nop
 8004e08:	3714      	adds	r7, #20
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e10:	4770      	bx	lr
 8004e12:	bf00      	nop
 8004e14:	20000d18 	.word	0x20000d18
 8004e18:	20000d04 	.word	0x20000d04
 8004e1c:	20000cf8 	.word	0x20000cf8
 8004e20:	20000820 	.word	0x20000820
 8004e24:	2000081c 	.word	0x2000081c

08004e28 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b084      	sub	sp, #16
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
 8004e30:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d10a      	bne.n	8004e4e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004e38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e3c:	f383 8811 	msr	BASEPRI, r3
 8004e40:	f3bf 8f6f 	isb	sy
 8004e44:	f3bf 8f4f 	dsb	sy
 8004e48:	60fb      	str	r3, [r7, #12]
}
 8004e4a:	bf00      	nop
 8004e4c:	e7fe      	b.n	8004e4c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004e4e:	4b07      	ldr	r3, [pc, #28]	; (8004e6c <vTaskPlaceOnEventList+0x44>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	3318      	adds	r3, #24
 8004e54:	4619      	mov	r1, r3
 8004e56:	6878      	ldr	r0, [r7, #4]
 8004e58:	f7fe fe87 	bl	8003b6a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004e5c:	2101      	movs	r1, #1
 8004e5e:	6838      	ldr	r0, [r7, #0]
 8004e60:	f000 fa7c 	bl	800535c <prvAddCurrentTaskToDelayedList>
}
 8004e64:	bf00      	nop
 8004e66:	3710      	adds	r7, #16
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bd80      	pop	{r7, pc}
 8004e6c:	2000081c 	.word	0x2000081c

08004e70 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b086      	sub	sp, #24
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	60f8      	str	r0, [r7, #12]
 8004e78:	60b9      	str	r1, [r7, #8]
 8004e7a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d10a      	bne.n	8004e98 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8004e82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e86:	f383 8811 	msr	BASEPRI, r3
 8004e8a:	f3bf 8f6f 	isb	sy
 8004e8e:	f3bf 8f4f 	dsb	sy
 8004e92:	617b      	str	r3, [r7, #20]
}
 8004e94:	bf00      	nop
 8004e96:	e7fe      	b.n	8004e96 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004e98:	4b0a      	ldr	r3, [pc, #40]	; (8004ec4 <vTaskPlaceOnEventListRestricted+0x54>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	3318      	adds	r3, #24
 8004e9e:	4619      	mov	r1, r3
 8004ea0:	68f8      	ldr	r0, [r7, #12]
 8004ea2:	f7fe fe3e 	bl	8003b22 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d002      	beq.n	8004eb2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004eac:	f04f 33ff 	mov.w	r3, #4294967295
 8004eb0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004eb2:	6879      	ldr	r1, [r7, #4]
 8004eb4:	68b8      	ldr	r0, [r7, #8]
 8004eb6:	f000 fa51 	bl	800535c <prvAddCurrentTaskToDelayedList>
	}
 8004eba:	bf00      	nop
 8004ebc:	3718      	adds	r7, #24
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd80      	pop	{r7, pc}
 8004ec2:	bf00      	nop
 8004ec4:	2000081c 	.word	0x2000081c

08004ec8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b086      	sub	sp, #24
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	68db      	ldr	r3, [r3, #12]
 8004ed4:	68db      	ldr	r3, [r3, #12]
 8004ed6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004ed8:	693b      	ldr	r3, [r7, #16]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d10a      	bne.n	8004ef4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ee2:	f383 8811 	msr	BASEPRI, r3
 8004ee6:	f3bf 8f6f 	isb	sy
 8004eea:	f3bf 8f4f 	dsb	sy
 8004eee:	60fb      	str	r3, [r7, #12]
}
 8004ef0:	bf00      	nop
 8004ef2:	e7fe      	b.n	8004ef2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004ef4:	693b      	ldr	r3, [r7, #16]
 8004ef6:	3318      	adds	r3, #24
 8004ef8:	4618      	mov	r0, r3
 8004efa:	f7fe fe6f 	bl	8003bdc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004efe:	4b1e      	ldr	r3, [pc, #120]	; (8004f78 <xTaskRemoveFromEventList+0xb0>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d11d      	bne.n	8004f42 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	3304      	adds	r3, #4
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	f7fe fe66 	bl	8003bdc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004f10:	693b      	ldr	r3, [r7, #16]
 8004f12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f14:	4b19      	ldr	r3, [pc, #100]	; (8004f7c <xTaskRemoveFromEventList+0xb4>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	429a      	cmp	r2, r3
 8004f1a:	d903      	bls.n	8004f24 <xTaskRemoveFromEventList+0x5c>
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f20:	4a16      	ldr	r2, [pc, #88]	; (8004f7c <xTaskRemoveFromEventList+0xb4>)
 8004f22:	6013      	str	r3, [r2, #0]
 8004f24:	693b      	ldr	r3, [r7, #16]
 8004f26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f28:	4613      	mov	r3, r2
 8004f2a:	009b      	lsls	r3, r3, #2
 8004f2c:	4413      	add	r3, r2
 8004f2e:	009b      	lsls	r3, r3, #2
 8004f30:	4a13      	ldr	r2, [pc, #76]	; (8004f80 <xTaskRemoveFromEventList+0xb8>)
 8004f32:	441a      	add	r2, r3
 8004f34:	693b      	ldr	r3, [r7, #16]
 8004f36:	3304      	adds	r3, #4
 8004f38:	4619      	mov	r1, r3
 8004f3a:	4610      	mov	r0, r2
 8004f3c:	f7fe fdf1 	bl	8003b22 <vListInsertEnd>
 8004f40:	e005      	b.n	8004f4e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	3318      	adds	r3, #24
 8004f46:	4619      	mov	r1, r3
 8004f48:	480e      	ldr	r0, [pc, #56]	; (8004f84 <xTaskRemoveFromEventList+0xbc>)
 8004f4a:	f7fe fdea 	bl	8003b22 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f52:	4b0d      	ldr	r3, [pc, #52]	; (8004f88 <xTaskRemoveFromEventList+0xc0>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f58:	429a      	cmp	r2, r3
 8004f5a:	d905      	bls.n	8004f68 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004f60:	4b0a      	ldr	r3, [pc, #40]	; (8004f8c <xTaskRemoveFromEventList+0xc4>)
 8004f62:	2201      	movs	r2, #1
 8004f64:	601a      	str	r2, [r3, #0]
 8004f66:	e001      	b.n	8004f6c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004f68:	2300      	movs	r3, #0
 8004f6a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004f6c:	697b      	ldr	r3, [r7, #20]
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	3718      	adds	r7, #24
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bd80      	pop	{r7, pc}
 8004f76:	bf00      	nop
 8004f78:	20000d18 	.word	0x20000d18
 8004f7c:	20000cf8 	.word	0x20000cf8
 8004f80:	20000820 	.word	0x20000820
 8004f84:	20000cb0 	.word	0x20000cb0
 8004f88:	2000081c 	.word	0x2000081c
 8004f8c:	20000d04 	.word	0x20000d04

08004f90 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004f90:	b480      	push	{r7}
 8004f92:	b083      	sub	sp, #12
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004f98:	4b06      	ldr	r3, [pc, #24]	; (8004fb4 <vTaskInternalSetTimeOutState+0x24>)
 8004f9a:	681a      	ldr	r2, [r3, #0]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004fa0:	4b05      	ldr	r3, [pc, #20]	; (8004fb8 <vTaskInternalSetTimeOutState+0x28>)
 8004fa2:	681a      	ldr	r2, [r3, #0]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	605a      	str	r2, [r3, #4]
}
 8004fa8:	bf00      	nop
 8004faa:	370c      	adds	r7, #12
 8004fac:	46bd      	mov	sp, r7
 8004fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb2:	4770      	bx	lr
 8004fb4:	20000d08 	.word	0x20000d08
 8004fb8:	20000cf4 	.word	0x20000cf4

08004fbc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b088      	sub	sp, #32
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
 8004fc4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d10a      	bne.n	8004fe2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004fcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fd0:	f383 8811 	msr	BASEPRI, r3
 8004fd4:	f3bf 8f6f 	isb	sy
 8004fd8:	f3bf 8f4f 	dsb	sy
 8004fdc:	613b      	str	r3, [r7, #16]
}
 8004fde:	bf00      	nop
 8004fe0:	e7fe      	b.n	8004fe0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d10a      	bne.n	8004ffe <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004fe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fec:	f383 8811 	msr	BASEPRI, r3
 8004ff0:	f3bf 8f6f 	isb	sy
 8004ff4:	f3bf 8f4f 	dsb	sy
 8004ff8:	60fb      	str	r3, [r7, #12]
}
 8004ffa:	bf00      	nop
 8004ffc:	e7fe      	b.n	8004ffc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004ffe:	f000 fe79 	bl	8005cf4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005002:	4b1d      	ldr	r3, [pc, #116]	; (8005078 <xTaskCheckForTimeOut+0xbc>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	69ba      	ldr	r2, [r7, #24]
 800500e:	1ad3      	subs	r3, r2, r3
 8005010:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f1b3 3fff 	cmp.w	r3, #4294967295
 800501a:	d102      	bne.n	8005022 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800501c:	2300      	movs	r3, #0
 800501e:	61fb      	str	r3, [r7, #28]
 8005020:	e023      	b.n	800506a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681a      	ldr	r2, [r3, #0]
 8005026:	4b15      	ldr	r3, [pc, #84]	; (800507c <xTaskCheckForTimeOut+0xc0>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	429a      	cmp	r2, r3
 800502c:	d007      	beq.n	800503e <xTaskCheckForTimeOut+0x82>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	685b      	ldr	r3, [r3, #4]
 8005032:	69ba      	ldr	r2, [r7, #24]
 8005034:	429a      	cmp	r2, r3
 8005036:	d302      	bcc.n	800503e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005038:	2301      	movs	r3, #1
 800503a:	61fb      	str	r3, [r7, #28]
 800503c:	e015      	b.n	800506a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	697a      	ldr	r2, [r7, #20]
 8005044:	429a      	cmp	r2, r3
 8005046:	d20b      	bcs.n	8005060 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	681a      	ldr	r2, [r3, #0]
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	1ad2      	subs	r2, r2, r3
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005054:	6878      	ldr	r0, [r7, #4]
 8005056:	f7ff ff9b 	bl	8004f90 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800505a:	2300      	movs	r3, #0
 800505c:	61fb      	str	r3, [r7, #28]
 800505e:	e004      	b.n	800506a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	2200      	movs	r2, #0
 8005064:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005066:	2301      	movs	r3, #1
 8005068:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800506a:	f000 fe73 	bl	8005d54 <vPortExitCritical>

	return xReturn;
 800506e:	69fb      	ldr	r3, [r7, #28]
}
 8005070:	4618      	mov	r0, r3
 8005072:	3720      	adds	r7, #32
 8005074:	46bd      	mov	sp, r7
 8005076:	bd80      	pop	{r7, pc}
 8005078:	20000cf4 	.word	0x20000cf4
 800507c:	20000d08 	.word	0x20000d08

08005080 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005080:	b480      	push	{r7}
 8005082:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005084:	4b03      	ldr	r3, [pc, #12]	; (8005094 <vTaskMissedYield+0x14>)
 8005086:	2201      	movs	r2, #1
 8005088:	601a      	str	r2, [r3, #0]
}
 800508a:	bf00      	nop
 800508c:	46bd      	mov	sp, r7
 800508e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005092:	4770      	bx	lr
 8005094:	20000d04 	.word	0x20000d04

08005098 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b082      	sub	sp, #8
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80050a0:	f000 f852 	bl	8005148 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80050a4:	4b06      	ldr	r3, [pc, #24]	; (80050c0 <prvIdleTask+0x28>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	2b01      	cmp	r3, #1
 80050aa:	d9f9      	bls.n	80050a0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80050ac:	4b05      	ldr	r3, [pc, #20]	; (80050c4 <prvIdleTask+0x2c>)
 80050ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050b2:	601a      	str	r2, [r3, #0]
 80050b4:	f3bf 8f4f 	dsb	sy
 80050b8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80050bc:	e7f0      	b.n	80050a0 <prvIdleTask+0x8>
 80050be:	bf00      	nop
 80050c0:	20000820 	.word	0x20000820
 80050c4:	e000ed04 	.word	0xe000ed04

080050c8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b082      	sub	sp, #8
 80050cc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80050ce:	2300      	movs	r3, #0
 80050d0:	607b      	str	r3, [r7, #4]
 80050d2:	e00c      	b.n	80050ee <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80050d4:	687a      	ldr	r2, [r7, #4]
 80050d6:	4613      	mov	r3, r2
 80050d8:	009b      	lsls	r3, r3, #2
 80050da:	4413      	add	r3, r2
 80050dc:	009b      	lsls	r3, r3, #2
 80050de:	4a12      	ldr	r2, [pc, #72]	; (8005128 <prvInitialiseTaskLists+0x60>)
 80050e0:	4413      	add	r3, r2
 80050e2:	4618      	mov	r0, r3
 80050e4:	f7fe fcf0 	bl	8003ac8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	3301      	adds	r3, #1
 80050ec:	607b      	str	r3, [r7, #4]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2b37      	cmp	r3, #55	; 0x37
 80050f2:	d9ef      	bls.n	80050d4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80050f4:	480d      	ldr	r0, [pc, #52]	; (800512c <prvInitialiseTaskLists+0x64>)
 80050f6:	f7fe fce7 	bl	8003ac8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80050fa:	480d      	ldr	r0, [pc, #52]	; (8005130 <prvInitialiseTaskLists+0x68>)
 80050fc:	f7fe fce4 	bl	8003ac8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005100:	480c      	ldr	r0, [pc, #48]	; (8005134 <prvInitialiseTaskLists+0x6c>)
 8005102:	f7fe fce1 	bl	8003ac8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005106:	480c      	ldr	r0, [pc, #48]	; (8005138 <prvInitialiseTaskLists+0x70>)
 8005108:	f7fe fcde 	bl	8003ac8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800510c:	480b      	ldr	r0, [pc, #44]	; (800513c <prvInitialiseTaskLists+0x74>)
 800510e:	f7fe fcdb 	bl	8003ac8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005112:	4b0b      	ldr	r3, [pc, #44]	; (8005140 <prvInitialiseTaskLists+0x78>)
 8005114:	4a05      	ldr	r2, [pc, #20]	; (800512c <prvInitialiseTaskLists+0x64>)
 8005116:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005118:	4b0a      	ldr	r3, [pc, #40]	; (8005144 <prvInitialiseTaskLists+0x7c>)
 800511a:	4a05      	ldr	r2, [pc, #20]	; (8005130 <prvInitialiseTaskLists+0x68>)
 800511c:	601a      	str	r2, [r3, #0]
}
 800511e:	bf00      	nop
 8005120:	3708      	adds	r7, #8
 8005122:	46bd      	mov	sp, r7
 8005124:	bd80      	pop	{r7, pc}
 8005126:	bf00      	nop
 8005128:	20000820 	.word	0x20000820
 800512c:	20000c80 	.word	0x20000c80
 8005130:	20000c94 	.word	0x20000c94
 8005134:	20000cb0 	.word	0x20000cb0
 8005138:	20000cc4 	.word	0x20000cc4
 800513c:	20000cdc 	.word	0x20000cdc
 8005140:	20000ca8 	.word	0x20000ca8
 8005144:	20000cac 	.word	0x20000cac

08005148 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b082      	sub	sp, #8
 800514c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800514e:	e019      	b.n	8005184 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005150:	f000 fdd0 	bl	8005cf4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005154:	4b10      	ldr	r3, [pc, #64]	; (8005198 <prvCheckTasksWaitingTermination+0x50>)
 8005156:	68db      	ldr	r3, [r3, #12]
 8005158:	68db      	ldr	r3, [r3, #12]
 800515a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	3304      	adds	r3, #4
 8005160:	4618      	mov	r0, r3
 8005162:	f7fe fd3b 	bl	8003bdc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005166:	4b0d      	ldr	r3, [pc, #52]	; (800519c <prvCheckTasksWaitingTermination+0x54>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	3b01      	subs	r3, #1
 800516c:	4a0b      	ldr	r2, [pc, #44]	; (800519c <prvCheckTasksWaitingTermination+0x54>)
 800516e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005170:	4b0b      	ldr	r3, [pc, #44]	; (80051a0 <prvCheckTasksWaitingTermination+0x58>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	3b01      	subs	r3, #1
 8005176:	4a0a      	ldr	r2, [pc, #40]	; (80051a0 <prvCheckTasksWaitingTermination+0x58>)
 8005178:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800517a:	f000 fdeb 	bl	8005d54 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800517e:	6878      	ldr	r0, [r7, #4]
 8005180:	f000 f810 	bl	80051a4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005184:	4b06      	ldr	r3, [pc, #24]	; (80051a0 <prvCheckTasksWaitingTermination+0x58>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d1e1      	bne.n	8005150 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800518c:	bf00      	nop
 800518e:	bf00      	nop
 8005190:	3708      	adds	r7, #8
 8005192:	46bd      	mov	sp, r7
 8005194:	bd80      	pop	{r7, pc}
 8005196:	bf00      	nop
 8005198:	20000cc4 	.word	0x20000cc4
 800519c:	20000cf0 	.word	0x20000cf0
 80051a0:	20000cd8 	.word	0x20000cd8

080051a4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b084      	sub	sp, #16
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d108      	bne.n	80051c8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051ba:	4618      	mov	r0, r3
 80051bc:	f000 ff88 	bl	80060d0 <vPortFree>
				vPortFree( pxTCB );
 80051c0:	6878      	ldr	r0, [r7, #4]
 80051c2:	f000 ff85 	bl	80060d0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80051c6:	e018      	b.n	80051fa <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80051ce:	2b01      	cmp	r3, #1
 80051d0:	d103      	bne.n	80051da <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	f000 ff7c 	bl	80060d0 <vPortFree>
	}
 80051d8:	e00f      	b.n	80051fa <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80051e0:	2b02      	cmp	r3, #2
 80051e2:	d00a      	beq.n	80051fa <prvDeleteTCB+0x56>
	__asm volatile
 80051e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051e8:	f383 8811 	msr	BASEPRI, r3
 80051ec:	f3bf 8f6f 	isb	sy
 80051f0:	f3bf 8f4f 	dsb	sy
 80051f4:	60fb      	str	r3, [r7, #12]
}
 80051f6:	bf00      	nop
 80051f8:	e7fe      	b.n	80051f8 <prvDeleteTCB+0x54>
	}
 80051fa:	bf00      	nop
 80051fc:	3710      	adds	r7, #16
 80051fe:	46bd      	mov	sp, r7
 8005200:	bd80      	pop	{r7, pc}
	...

08005204 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005204:	b480      	push	{r7}
 8005206:	b083      	sub	sp, #12
 8005208:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800520a:	4b0c      	ldr	r3, [pc, #48]	; (800523c <prvResetNextTaskUnblockTime+0x38>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d104      	bne.n	800521e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005214:	4b0a      	ldr	r3, [pc, #40]	; (8005240 <prvResetNextTaskUnblockTime+0x3c>)
 8005216:	f04f 32ff 	mov.w	r2, #4294967295
 800521a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800521c:	e008      	b.n	8005230 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800521e:	4b07      	ldr	r3, [pc, #28]	; (800523c <prvResetNextTaskUnblockTime+0x38>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	68db      	ldr	r3, [r3, #12]
 8005224:	68db      	ldr	r3, [r3, #12]
 8005226:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	4a04      	ldr	r2, [pc, #16]	; (8005240 <prvResetNextTaskUnblockTime+0x3c>)
 800522e:	6013      	str	r3, [r2, #0]
}
 8005230:	bf00      	nop
 8005232:	370c      	adds	r7, #12
 8005234:	46bd      	mov	sp, r7
 8005236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523a:	4770      	bx	lr
 800523c:	20000ca8 	.word	0x20000ca8
 8005240:	20000d10 	.word	0x20000d10

08005244 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005244:	b480      	push	{r7}
 8005246:	b083      	sub	sp, #12
 8005248:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800524a:	4b0b      	ldr	r3, [pc, #44]	; (8005278 <xTaskGetSchedulerState+0x34>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d102      	bne.n	8005258 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005252:	2301      	movs	r3, #1
 8005254:	607b      	str	r3, [r7, #4]
 8005256:	e008      	b.n	800526a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005258:	4b08      	ldr	r3, [pc, #32]	; (800527c <xTaskGetSchedulerState+0x38>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d102      	bne.n	8005266 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005260:	2302      	movs	r3, #2
 8005262:	607b      	str	r3, [r7, #4]
 8005264:	e001      	b.n	800526a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005266:	2300      	movs	r3, #0
 8005268:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800526a:	687b      	ldr	r3, [r7, #4]
	}
 800526c:	4618      	mov	r0, r3
 800526e:	370c      	adds	r7, #12
 8005270:	46bd      	mov	sp, r7
 8005272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005276:	4770      	bx	lr
 8005278:	20000cfc 	.word	0x20000cfc
 800527c:	20000d18 	.word	0x20000d18

08005280 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005280:	b580      	push	{r7, lr}
 8005282:	b086      	sub	sp, #24
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800528c:	2300      	movs	r3, #0
 800528e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d056      	beq.n	8005344 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005296:	4b2e      	ldr	r3, [pc, #184]	; (8005350 <xTaskPriorityDisinherit+0xd0>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	693a      	ldr	r2, [r7, #16]
 800529c:	429a      	cmp	r2, r3
 800529e:	d00a      	beq.n	80052b6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80052a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052a4:	f383 8811 	msr	BASEPRI, r3
 80052a8:	f3bf 8f6f 	isb	sy
 80052ac:	f3bf 8f4f 	dsb	sy
 80052b0:	60fb      	str	r3, [r7, #12]
}
 80052b2:	bf00      	nop
 80052b4:	e7fe      	b.n	80052b4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80052b6:	693b      	ldr	r3, [r7, #16]
 80052b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d10a      	bne.n	80052d4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80052be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052c2:	f383 8811 	msr	BASEPRI, r3
 80052c6:	f3bf 8f6f 	isb	sy
 80052ca:	f3bf 8f4f 	dsb	sy
 80052ce:	60bb      	str	r3, [r7, #8]
}
 80052d0:	bf00      	nop
 80052d2:	e7fe      	b.n	80052d2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80052d4:	693b      	ldr	r3, [r7, #16]
 80052d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052d8:	1e5a      	subs	r2, r3, #1
 80052da:	693b      	ldr	r3, [r7, #16]
 80052dc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052e2:	693b      	ldr	r3, [r7, #16]
 80052e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052e6:	429a      	cmp	r2, r3
 80052e8:	d02c      	beq.n	8005344 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80052ea:	693b      	ldr	r3, [r7, #16]
 80052ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d128      	bne.n	8005344 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80052f2:	693b      	ldr	r3, [r7, #16]
 80052f4:	3304      	adds	r3, #4
 80052f6:	4618      	mov	r0, r3
 80052f8:	f7fe fc70 	bl	8003bdc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80052fc:	693b      	ldr	r3, [r7, #16]
 80052fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005300:	693b      	ldr	r3, [r7, #16]
 8005302:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005304:	693b      	ldr	r3, [r7, #16]
 8005306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005308:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800530c:	693b      	ldr	r3, [r7, #16]
 800530e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005310:	693b      	ldr	r3, [r7, #16]
 8005312:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005314:	4b0f      	ldr	r3, [pc, #60]	; (8005354 <xTaskPriorityDisinherit+0xd4>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	429a      	cmp	r2, r3
 800531a:	d903      	bls.n	8005324 <xTaskPriorityDisinherit+0xa4>
 800531c:	693b      	ldr	r3, [r7, #16]
 800531e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005320:	4a0c      	ldr	r2, [pc, #48]	; (8005354 <xTaskPriorityDisinherit+0xd4>)
 8005322:	6013      	str	r3, [r2, #0]
 8005324:	693b      	ldr	r3, [r7, #16]
 8005326:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005328:	4613      	mov	r3, r2
 800532a:	009b      	lsls	r3, r3, #2
 800532c:	4413      	add	r3, r2
 800532e:	009b      	lsls	r3, r3, #2
 8005330:	4a09      	ldr	r2, [pc, #36]	; (8005358 <xTaskPriorityDisinherit+0xd8>)
 8005332:	441a      	add	r2, r3
 8005334:	693b      	ldr	r3, [r7, #16]
 8005336:	3304      	adds	r3, #4
 8005338:	4619      	mov	r1, r3
 800533a:	4610      	mov	r0, r2
 800533c:	f7fe fbf1 	bl	8003b22 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005340:	2301      	movs	r3, #1
 8005342:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005344:	697b      	ldr	r3, [r7, #20]
	}
 8005346:	4618      	mov	r0, r3
 8005348:	3718      	adds	r7, #24
 800534a:	46bd      	mov	sp, r7
 800534c:	bd80      	pop	{r7, pc}
 800534e:	bf00      	nop
 8005350:	2000081c 	.word	0x2000081c
 8005354:	20000cf8 	.word	0x20000cf8
 8005358:	20000820 	.word	0x20000820

0800535c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b084      	sub	sp, #16
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
 8005364:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005366:	4b21      	ldr	r3, [pc, #132]	; (80053ec <prvAddCurrentTaskToDelayedList+0x90>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800536c:	4b20      	ldr	r3, [pc, #128]	; (80053f0 <prvAddCurrentTaskToDelayedList+0x94>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	3304      	adds	r3, #4
 8005372:	4618      	mov	r0, r3
 8005374:	f7fe fc32 	bl	8003bdc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800537e:	d10a      	bne.n	8005396 <prvAddCurrentTaskToDelayedList+0x3a>
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d007      	beq.n	8005396 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005386:	4b1a      	ldr	r3, [pc, #104]	; (80053f0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	3304      	adds	r3, #4
 800538c:	4619      	mov	r1, r3
 800538e:	4819      	ldr	r0, [pc, #100]	; (80053f4 <prvAddCurrentTaskToDelayedList+0x98>)
 8005390:	f7fe fbc7 	bl	8003b22 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005394:	e026      	b.n	80053e4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005396:	68fa      	ldr	r2, [r7, #12]
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	4413      	add	r3, r2
 800539c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800539e:	4b14      	ldr	r3, [pc, #80]	; (80053f0 <prvAddCurrentTaskToDelayedList+0x94>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	68ba      	ldr	r2, [r7, #8]
 80053a4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80053a6:	68ba      	ldr	r2, [r7, #8]
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	429a      	cmp	r2, r3
 80053ac:	d209      	bcs.n	80053c2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80053ae:	4b12      	ldr	r3, [pc, #72]	; (80053f8 <prvAddCurrentTaskToDelayedList+0x9c>)
 80053b0:	681a      	ldr	r2, [r3, #0]
 80053b2:	4b0f      	ldr	r3, [pc, #60]	; (80053f0 <prvAddCurrentTaskToDelayedList+0x94>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	3304      	adds	r3, #4
 80053b8:	4619      	mov	r1, r3
 80053ba:	4610      	mov	r0, r2
 80053bc:	f7fe fbd5 	bl	8003b6a <vListInsert>
}
 80053c0:	e010      	b.n	80053e4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80053c2:	4b0e      	ldr	r3, [pc, #56]	; (80053fc <prvAddCurrentTaskToDelayedList+0xa0>)
 80053c4:	681a      	ldr	r2, [r3, #0]
 80053c6:	4b0a      	ldr	r3, [pc, #40]	; (80053f0 <prvAddCurrentTaskToDelayedList+0x94>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	3304      	adds	r3, #4
 80053cc:	4619      	mov	r1, r3
 80053ce:	4610      	mov	r0, r2
 80053d0:	f7fe fbcb 	bl	8003b6a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80053d4:	4b0a      	ldr	r3, [pc, #40]	; (8005400 <prvAddCurrentTaskToDelayedList+0xa4>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	68ba      	ldr	r2, [r7, #8]
 80053da:	429a      	cmp	r2, r3
 80053dc:	d202      	bcs.n	80053e4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80053de:	4a08      	ldr	r2, [pc, #32]	; (8005400 <prvAddCurrentTaskToDelayedList+0xa4>)
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	6013      	str	r3, [r2, #0]
}
 80053e4:	bf00      	nop
 80053e6:	3710      	adds	r7, #16
 80053e8:	46bd      	mov	sp, r7
 80053ea:	bd80      	pop	{r7, pc}
 80053ec:	20000cf4 	.word	0x20000cf4
 80053f0:	2000081c 	.word	0x2000081c
 80053f4:	20000cdc 	.word	0x20000cdc
 80053f8:	20000cac 	.word	0x20000cac
 80053fc:	20000ca8 	.word	0x20000ca8
 8005400:	20000d10 	.word	0x20000d10

08005404 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b08a      	sub	sp, #40	; 0x28
 8005408:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800540a:	2300      	movs	r3, #0
 800540c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800540e:	f000 fb07 	bl	8005a20 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005412:	4b1c      	ldr	r3, [pc, #112]	; (8005484 <xTimerCreateTimerTask+0x80>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d021      	beq.n	800545e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800541a:	2300      	movs	r3, #0
 800541c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800541e:	2300      	movs	r3, #0
 8005420:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005422:	1d3a      	adds	r2, r7, #4
 8005424:	f107 0108 	add.w	r1, r7, #8
 8005428:	f107 030c 	add.w	r3, r7, #12
 800542c:	4618      	mov	r0, r3
 800542e:	f7fe fb31 	bl	8003a94 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005432:	6879      	ldr	r1, [r7, #4]
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	68fa      	ldr	r2, [r7, #12]
 8005438:	9202      	str	r2, [sp, #8]
 800543a:	9301      	str	r3, [sp, #4]
 800543c:	2302      	movs	r3, #2
 800543e:	9300      	str	r3, [sp, #0]
 8005440:	2300      	movs	r3, #0
 8005442:	460a      	mov	r2, r1
 8005444:	4910      	ldr	r1, [pc, #64]	; (8005488 <xTimerCreateTimerTask+0x84>)
 8005446:	4811      	ldr	r0, [pc, #68]	; (800548c <xTimerCreateTimerTask+0x88>)
 8005448:	f7ff f8de 	bl	8004608 <xTaskCreateStatic>
 800544c:	4603      	mov	r3, r0
 800544e:	4a10      	ldr	r2, [pc, #64]	; (8005490 <xTimerCreateTimerTask+0x8c>)
 8005450:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005452:	4b0f      	ldr	r3, [pc, #60]	; (8005490 <xTimerCreateTimerTask+0x8c>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d001      	beq.n	800545e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800545a:	2301      	movs	r3, #1
 800545c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800545e:	697b      	ldr	r3, [r7, #20]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d10a      	bne.n	800547a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005464:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005468:	f383 8811 	msr	BASEPRI, r3
 800546c:	f3bf 8f6f 	isb	sy
 8005470:	f3bf 8f4f 	dsb	sy
 8005474:	613b      	str	r3, [r7, #16]
}
 8005476:	bf00      	nop
 8005478:	e7fe      	b.n	8005478 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800547a:	697b      	ldr	r3, [r7, #20]
}
 800547c:	4618      	mov	r0, r3
 800547e:	3718      	adds	r7, #24
 8005480:	46bd      	mov	sp, r7
 8005482:	bd80      	pop	{r7, pc}
 8005484:	20000d4c 	.word	0x20000d4c
 8005488:	08006cb0 	.word	0x08006cb0
 800548c:	080055c9 	.word	0x080055c9
 8005490:	20000d50 	.word	0x20000d50

08005494 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b08a      	sub	sp, #40	; 0x28
 8005498:	af00      	add	r7, sp, #0
 800549a:	60f8      	str	r0, [r7, #12]
 800549c:	60b9      	str	r1, [r7, #8]
 800549e:	607a      	str	r2, [r7, #4]
 80054a0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80054a2:	2300      	movs	r3, #0
 80054a4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d10a      	bne.n	80054c2 <xTimerGenericCommand+0x2e>
	__asm volatile
 80054ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054b0:	f383 8811 	msr	BASEPRI, r3
 80054b4:	f3bf 8f6f 	isb	sy
 80054b8:	f3bf 8f4f 	dsb	sy
 80054bc:	623b      	str	r3, [r7, #32]
}
 80054be:	bf00      	nop
 80054c0:	e7fe      	b.n	80054c0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80054c2:	4b1a      	ldr	r3, [pc, #104]	; (800552c <xTimerGenericCommand+0x98>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d02a      	beq.n	8005520 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	2b05      	cmp	r3, #5
 80054da:	dc18      	bgt.n	800550e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80054dc:	f7ff feb2 	bl	8005244 <xTaskGetSchedulerState>
 80054e0:	4603      	mov	r3, r0
 80054e2:	2b02      	cmp	r3, #2
 80054e4:	d109      	bne.n	80054fa <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80054e6:	4b11      	ldr	r3, [pc, #68]	; (800552c <xTimerGenericCommand+0x98>)
 80054e8:	6818      	ldr	r0, [r3, #0]
 80054ea:	f107 0110 	add.w	r1, r7, #16
 80054ee:	2300      	movs	r3, #0
 80054f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054f2:	f7fe fca1 	bl	8003e38 <xQueueGenericSend>
 80054f6:	6278      	str	r0, [r7, #36]	; 0x24
 80054f8:	e012      	b.n	8005520 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80054fa:	4b0c      	ldr	r3, [pc, #48]	; (800552c <xTimerGenericCommand+0x98>)
 80054fc:	6818      	ldr	r0, [r3, #0]
 80054fe:	f107 0110 	add.w	r1, r7, #16
 8005502:	2300      	movs	r3, #0
 8005504:	2200      	movs	r2, #0
 8005506:	f7fe fc97 	bl	8003e38 <xQueueGenericSend>
 800550a:	6278      	str	r0, [r7, #36]	; 0x24
 800550c:	e008      	b.n	8005520 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800550e:	4b07      	ldr	r3, [pc, #28]	; (800552c <xTimerGenericCommand+0x98>)
 8005510:	6818      	ldr	r0, [r3, #0]
 8005512:	f107 0110 	add.w	r1, r7, #16
 8005516:	2300      	movs	r3, #0
 8005518:	683a      	ldr	r2, [r7, #0]
 800551a:	f7fe fd8b 	bl	8004034 <xQueueGenericSendFromISR>
 800551e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005522:	4618      	mov	r0, r3
 8005524:	3728      	adds	r7, #40	; 0x28
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}
 800552a:	bf00      	nop
 800552c:	20000d4c 	.word	0x20000d4c

08005530 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b088      	sub	sp, #32
 8005534:	af02      	add	r7, sp, #8
 8005536:	6078      	str	r0, [r7, #4]
 8005538:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800553a:	4b22      	ldr	r3, [pc, #136]	; (80055c4 <prvProcessExpiredTimer+0x94>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	68db      	ldr	r3, [r3, #12]
 8005540:	68db      	ldr	r3, [r3, #12]
 8005542:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005544:	697b      	ldr	r3, [r7, #20]
 8005546:	3304      	adds	r3, #4
 8005548:	4618      	mov	r0, r3
 800554a:	f7fe fb47 	bl	8003bdc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800554e:	697b      	ldr	r3, [r7, #20]
 8005550:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005554:	f003 0304 	and.w	r3, r3, #4
 8005558:	2b00      	cmp	r3, #0
 800555a:	d022      	beq.n	80055a2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800555c:	697b      	ldr	r3, [r7, #20]
 800555e:	699a      	ldr	r2, [r3, #24]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	18d1      	adds	r1, r2, r3
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	683a      	ldr	r2, [r7, #0]
 8005568:	6978      	ldr	r0, [r7, #20]
 800556a:	f000 f8d1 	bl	8005710 <prvInsertTimerInActiveList>
 800556e:	4603      	mov	r3, r0
 8005570:	2b00      	cmp	r3, #0
 8005572:	d01f      	beq.n	80055b4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005574:	2300      	movs	r3, #0
 8005576:	9300      	str	r3, [sp, #0]
 8005578:	2300      	movs	r3, #0
 800557a:	687a      	ldr	r2, [r7, #4]
 800557c:	2100      	movs	r1, #0
 800557e:	6978      	ldr	r0, [r7, #20]
 8005580:	f7ff ff88 	bl	8005494 <xTimerGenericCommand>
 8005584:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005586:	693b      	ldr	r3, [r7, #16]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d113      	bne.n	80055b4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800558c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005590:	f383 8811 	msr	BASEPRI, r3
 8005594:	f3bf 8f6f 	isb	sy
 8005598:	f3bf 8f4f 	dsb	sy
 800559c:	60fb      	str	r3, [r7, #12]
}
 800559e:	bf00      	nop
 80055a0:	e7fe      	b.n	80055a0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80055a2:	697b      	ldr	r3, [r7, #20]
 80055a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80055a8:	f023 0301 	bic.w	r3, r3, #1
 80055ac:	b2da      	uxtb	r2, r3
 80055ae:	697b      	ldr	r3, [r7, #20]
 80055b0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80055b4:	697b      	ldr	r3, [r7, #20]
 80055b6:	6a1b      	ldr	r3, [r3, #32]
 80055b8:	6978      	ldr	r0, [r7, #20]
 80055ba:	4798      	blx	r3
}
 80055bc:	bf00      	nop
 80055be:	3718      	adds	r7, #24
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bd80      	pop	{r7, pc}
 80055c4:	20000d44 	.word	0x20000d44

080055c8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b084      	sub	sp, #16
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80055d0:	f107 0308 	add.w	r3, r7, #8
 80055d4:	4618      	mov	r0, r3
 80055d6:	f000 f857 	bl	8005688 <prvGetNextExpireTime>
 80055da:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	4619      	mov	r1, r3
 80055e0:	68f8      	ldr	r0, [r7, #12]
 80055e2:	f000 f803 	bl	80055ec <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80055e6:	f000 f8d5 	bl	8005794 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80055ea:	e7f1      	b.n	80055d0 <prvTimerTask+0x8>

080055ec <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b084      	sub	sp, #16
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
 80055f4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80055f6:	f7ff fa43 	bl	8004a80 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80055fa:	f107 0308 	add.w	r3, r7, #8
 80055fe:	4618      	mov	r0, r3
 8005600:	f000 f866 	bl	80056d0 <prvSampleTimeNow>
 8005604:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d130      	bne.n	800566e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d10a      	bne.n	8005628 <prvProcessTimerOrBlockTask+0x3c>
 8005612:	687a      	ldr	r2, [r7, #4]
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	429a      	cmp	r2, r3
 8005618:	d806      	bhi.n	8005628 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800561a:	f7ff fa3f 	bl	8004a9c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800561e:	68f9      	ldr	r1, [r7, #12]
 8005620:	6878      	ldr	r0, [r7, #4]
 8005622:	f7ff ff85 	bl	8005530 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005626:	e024      	b.n	8005672 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d008      	beq.n	8005640 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800562e:	4b13      	ldr	r3, [pc, #76]	; (800567c <prvProcessTimerOrBlockTask+0x90>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d101      	bne.n	800563c <prvProcessTimerOrBlockTask+0x50>
 8005638:	2301      	movs	r3, #1
 800563a:	e000      	b.n	800563e <prvProcessTimerOrBlockTask+0x52>
 800563c:	2300      	movs	r3, #0
 800563e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005640:	4b0f      	ldr	r3, [pc, #60]	; (8005680 <prvProcessTimerOrBlockTask+0x94>)
 8005642:	6818      	ldr	r0, [r3, #0]
 8005644:	687a      	ldr	r2, [r7, #4]
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	1ad3      	subs	r3, r2, r3
 800564a:	683a      	ldr	r2, [r7, #0]
 800564c:	4619      	mov	r1, r3
 800564e:	f7fe ffa7 	bl	80045a0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005652:	f7ff fa23 	bl	8004a9c <xTaskResumeAll>
 8005656:	4603      	mov	r3, r0
 8005658:	2b00      	cmp	r3, #0
 800565a:	d10a      	bne.n	8005672 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800565c:	4b09      	ldr	r3, [pc, #36]	; (8005684 <prvProcessTimerOrBlockTask+0x98>)
 800565e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005662:	601a      	str	r2, [r3, #0]
 8005664:	f3bf 8f4f 	dsb	sy
 8005668:	f3bf 8f6f 	isb	sy
}
 800566c:	e001      	b.n	8005672 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800566e:	f7ff fa15 	bl	8004a9c <xTaskResumeAll>
}
 8005672:	bf00      	nop
 8005674:	3710      	adds	r7, #16
 8005676:	46bd      	mov	sp, r7
 8005678:	bd80      	pop	{r7, pc}
 800567a:	bf00      	nop
 800567c:	20000d48 	.word	0x20000d48
 8005680:	20000d4c 	.word	0x20000d4c
 8005684:	e000ed04 	.word	0xe000ed04

08005688 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005688:	b480      	push	{r7}
 800568a:	b085      	sub	sp, #20
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005690:	4b0e      	ldr	r3, [pc, #56]	; (80056cc <prvGetNextExpireTime+0x44>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d101      	bne.n	800569e <prvGetNextExpireTime+0x16>
 800569a:	2201      	movs	r2, #1
 800569c:	e000      	b.n	80056a0 <prvGetNextExpireTime+0x18>
 800569e:	2200      	movs	r2, #0
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d105      	bne.n	80056b8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80056ac:	4b07      	ldr	r3, [pc, #28]	; (80056cc <prvGetNextExpireTime+0x44>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	68db      	ldr	r3, [r3, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	60fb      	str	r3, [r7, #12]
 80056b6:	e001      	b.n	80056bc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80056b8:	2300      	movs	r3, #0
 80056ba:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80056bc:	68fb      	ldr	r3, [r7, #12]
}
 80056be:	4618      	mov	r0, r3
 80056c0:	3714      	adds	r7, #20
 80056c2:	46bd      	mov	sp, r7
 80056c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c8:	4770      	bx	lr
 80056ca:	bf00      	nop
 80056cc:	20000d44 	.word	0x20000d44

080056d0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b084      	sub	sp, #16
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80056d8:	f7ff fa7e 	bl	8004bd8 <xTaskGetTickCount>
 80056dc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80056de:	4b0b      	ldr	r3, [pc, #44]	; (800570c <prvSampleTimeNow+0x3c>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	68fa      	ldr	r2, [r7, #12]
 80056e4:	429a      	cmp	r2, r3
 80056e6:	d205      	bcs.n	80056f4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80056e8:	f000 f936 	bl	8005958 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2201      	movs	r2, #1
 80056f0:	601a      	str	r2, [r3, #0]
 80056f2:	e002      	b.n	80056fa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2200      	movs	r2, #0
 80056f8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80056fa:	4a04      	ldr	r2, [pc, #16]	; (800570c <prvSampleTimeNow+0x3c>)
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005700:	68fb      	ldr	r3, [r7, #12]
}
 8005702:	4618      	mov	r0, r3
 8005704:	3710      	adds	r7, #16
 8005706:	46bd      	mov	sp, r7
 8005708:	bd80      	pop	{r7, pc}
 800570a:	bf00      	nop
 800570c:	20000d54 	.word	0x20000d54

08005710 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b086      	sub	sp, #24
 8005714:	af00      	add	r7, sp, #0
 8005716:	60f8      	str	r0, [r7, #12]
 8005718:	60b9      	str	r1, [r7, #8]
 800571a:	607a      	str	r2, [r7, #4]
 800571c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800571e:	2300      	movs	r3, #0
 8005720:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	68ba      	ldr	r2, [r7, #8]
 8005726:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	68fa      	ldr	r2, [r7, #12]
 800572c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800572e:	68ba      	ldr	r2, [r7, #8]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	429a      	cmp	r2, r3
 8005734:	d812      	bhi.n	800575c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005736:	687a      	ldr	r2, [r7, #4]
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	1ad2      	subs	r2, r2, r3
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	699b      	ldr	r3, [r3, #24]
 8005740:	429a      	cmp	r2, r3
 8005742:	d302      	bcc.n	800574a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005744:	2301      	movs	r3, #1
 8005746:	617b      	str	r3, [r7, #20]
 8005748:	e01b      	b.n	8005782 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800574a:	4b10      	ldr	r3, [pc, #64]	; (800578c <prvInsertTimerInActiveList+0x7c>)
 800574c:	681a      	ldr	r2, [r3, #0]
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	3304      	adds	r3, #4
 8005752:	4619      	mov	r1, r3
 8005754:	4610      	mov	r0, r2
 8005756:	f7fe fa08 	bl	8003b6a <vListInsert>
 800575a:	e012      	b.n	8005782 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800575c:	687a      	ldr	r2, [r7, #4]
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	429a      	cmp	r2, r3
 8005762:	d206      	bcs.n	8005772 <prvInsertTimerInActiveList+0x62>
 8005764:	68ba      	ldr	r2, [r7, #8]
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	429a      	cmp	r2, r3
 800576a:	d302      	bcc.n	8005772 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800576c:	2301      	movs	r3, #1
 800576e:	617b      	str	r3, [r7, #20]
 8005770:	e007      	b.n	8005782 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005772:	4b07      	ldr	r3, [pc, #28]	; (8005790 <prvInsertTimerInActiveList+0x80>)
 8005774:	681a      	ldr	r2, [r3, #0]
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	3304      	adds	r3, #4
 800577a:	4619      	mov	r1, r3
 800577c:	4610      	mov	r0, r2
 800577e:	f7fe f9f4 	bl	8003b6a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005782:	697b      	ldr	r3, [r7, #20]
}
 8005784:	4618      	mov	r0, r3
 8005786:	3718      	adds	r7, #24
 8005788:	46bd      	mov	sp, r7
 800578a:	bd80      	pop	{r7, pc}
 800578c:	20000d48 	.word	0x20000d48
 8005790:	20000d44 	.word	0x20000d44

08005794 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b08e      	sub	sp, #56	; 0x38
 8005798:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800579a:	e0ca      	b.n	8005932 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	da18      	bge.n	80057d4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80057a2:	1d3b      	adds	r3, r7, #4
 80057a4:	3304      	adds	r3, #4
 80057a6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80057a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d10a      	bne.n	80057c4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80057ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057b2:	f383 8811 	msr	BASEPRI, r3
 80057b6:	f3bf 8f6f 	isb	sy
 80057ba:	f3bf 8f4f 	dsb	sy
 80057be:	61fb      	str	r3, [r7, #28]
}
 80057c0:	bf00      	nop
 80057c2:	e7fe      	b.n	80057c2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80057c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80057ca:	6850      	ldr	r0, [r2, #4]
 80057cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80057ce:	6892      	ldr	r2, [r2, #8]
 80057d0:	4611      	mov	r1, r2
 80057d2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	f2c0 80ab 	blt.w	8005932 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80057e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057e2:	695b      	ldr	r3, [r3, #20]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d004      	beq.n	80057f2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80057e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ea:	3304      	adds	r3, #4
 80057ec:	4618      	mov	r0, r3
 80057ee:	f7fe f9f5 	bl	8003bdc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80057f2:	463b      	mov	r3, r7
 80057f4:	4618      	mov	r0, r3
 80057f6:	f7ff ff6b 	bl	80056d0 <prvSampleTimeNow>
 80057fa:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2b09      	cmp	r3, #9
 8005800:	f200 8096 	bhi.w	8005930 <prvProcessReceivedCommands+0x19c>
 8005804:	a201      	add	r2, pc, #4	; (adr r2, 800580c <prvProcessReceivedCommands+0x78>)
 8005806:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800580a:	bf00      	nop
 800580c:	08005835 	.word	0x08005835
 8005810:	08005835 	.word	0x08005835
 8005814:	08005835 	.word	0x08005835
 8005818:	080058a9 	.word	0x080058a9
 800581c:	080058bd 	.word	0x080058bd
 8005820:	08005907 	.word	0x08005907
 8005824:	08005835 	.word	0x08005835
 8005828:	08005835 	.word	0x08005835
 800582c:	080058a9 	.word	0x080058a9
 8005830:	080058bd 	.word	0x080058bd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005836:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800583a:	f043 0301 	orr.w	r3, r3, #1
 800583e:	b2da      	uxtb	r2, r3
 8005840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005842:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005846:	68ba      	ldr	r2, [r7, #8]
 8005848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800584a:	699b      	ldr	r3, [r3, #24]
 800584c:	18d1      	adds	r1, r2, r3
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005852:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005854:	f7ff ff5c 	bl	8005710 <prvInsertTimerInActiveList>
 8005858:	4603      	mov	r3, r0
 800585a:	2b00      	cmp	r3, #0
 800585c:	d069      	beq.n	8005932 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800585e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005860:	6a1b      	ldr	r3, [r3, #32]
 8005862:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005864:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005868:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800586c:	f003 0304 	and.w	r3, r3, #4
 8005870:	2b00      	cmp	r3, #0
 8005872:	d05e      	beq.n	8005932 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005874:	68ba      	ldr	r2, [r7, #8]
 8005876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005878:	699b      	ldr	r3, [r3, #24]
 800587a:	441a      	add	r2, r3
 800587c:	2300      	movs	r3, #0
 800587e:	9300      	str	r3, [sp, #0]
 8005880:	2300      	movs	r3, #0
 8005882:	2100      	movs	r1, #0
 8005884:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005886:	f7ff fe05 	bl	8005494 <xTimerGenericCommand>
 800588a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800588c:	6a3b      	ldr	r3, [r7, #32]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d14f      	bne.n	8005932 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8005892:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005896:	f383 8811 	msr	BASEPRI, r3
 800589a:	f3bf 8f6f 	isb	sy
 800589e:	f3bf 8f4f 	dsb	sy
 80058a2:	61bb      	str	r3, [r7, #24]
}
 80058a4:	bf00      	nop
 80058a6:	e7fe      	b.n	80058a6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80058a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80058ae:	f023 0301 	bic.w	r3, r3, #1
 80058b2:	b2da      	uxtb	r2, r3
 80058b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80058ba:	e03a      	b.n	8005932 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80058bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80058c2:	f043 0301 	orr.w	r3, r3, #1
 80058c6:	b2da      	uxtb	r2, r3
 80058c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80058ce:	68ba      	ldr	r2, [r7, #8]
 80058d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058d2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80058d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058d6:	699b      	ldr	r3, [r3, #24]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d10a      	bne.n	80058f2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80058dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058e0:	f383 8811 	msr	BASEPRI, r3
 80058e4:	f3bf 8f6f 	isb	sy
 80058e8:	f3bf 8f4f 	dsb	sy
 80058ec:	617b      	str	r3, [r7, #20]
}
 80058ee:	bf00      	nop
 80058f0:	e7fe      	b.n	80058f0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80058f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058f4:	699a      	ldr	r2, [r3, #24]
 80058f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f8:	18d1      	adds	r1, r2, r3
 80058fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005900:	f7ff ff06 	bl	8005710 <prvInsertTimerInActiveList>
					break;
 8005904:	e015      	b.n	8005932 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005908:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800590c:	f003 0302 	and.w	r3, r3, #2
 8005910:	2b00      	cmp	r3, #0
 8005912:	d103      	bne.n	800591c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8005914:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005916:	f000 fbdb 	bl	80060d0 <vPortFree>
 800591a:	e00a      	b.n	8005932 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800591c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800591e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005922:	f023 0301 	bic.w	r3, r3, #1
 8005926:	b2da      	uxtb	r2, r3
 8005928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800592a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800592e:	e000      	b.n	8005932 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8005930:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005932:	4b08      	ldr	r3, [pc, #32]	; (8005954 <prvProcessReceivedCommands+0x1c0>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	1d39      	adds	r1, r7, #4
 8005938:	2200      	movs	r2, #0
 800593a:	4618      	mov	r0, r3
 800593c:	f7fe fc16 	bl	800416c <xQueueReceive>
 8005940:	4603      	mov	r3, r0
 8005942:	2b00      	cmp	r3, #0
 8005944:	f47f af2a 	bne.w	800579c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005948:	bf00      	nop
 800594a:	bf00      	nop
 800594c:	3730      	adds	r7, #48	; 0x30
 800594e:	46bd      	mov	sp, r7
 8005950:	bd80      	pop	{r7, pc}
 8005952:	bf00      	nop
 8005954:	20000d4c 	.word	0x20000d4c

08005958 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b088      	sub	sp, #32
 800595c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800595e:	e048      	b.n	80059f2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005960:	4b2d      	ldr	r3, [pc, #180]	; (8005a18 <prvSwitchTimerLists+0xc0>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	68db      	ldr	r3, [r3, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800596a:	4b2b      	ldr	r3, [pc, #172]	; (8005a18 <prvSwitchTimerLists+0xc0>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	68db      	ldr	r3, [r3, #12]
 8005970:	68db      	ldr	r3, [r3, #12]
 8005972:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	3304      	adds	r3, #4
 8005978:	4618      	mov	r0, r3
 800597a:	f7fe f92f 	bl	8003bdc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	6a1b      	ldr	r3, [r3, #32]
 8005982:	68f8      	ldr	r0, [r7, #12]
 8005984:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800598c:	f003 0304 	and.w	r3, r3, #4
 8005990:	2b00      	cmp	r3, #0
 8005992:	d02e      	beq.n	80059f2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	699b      	ldr	r3, [r3, #24]
 8005998:	693a      	ldr	r2, [r7, #16]
 800599a:	4413      	add	r3, r2
 800599c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800599e:	68ba      	ldr	r2, [r7, #8]
 80059a0:	693b      	ldr	r3, [r7, #16]
 80059a2:	429a      	cmp	r2, r3
 80059a4:	d90e      	bls.n	80059c4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	68ba      	ldr	r2, [r7, #8]
 80059aa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	68fa      	ldr	r2, [r7, #12]
 80059b0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80059b2:	4b19      	ldr	r3, [pc, #100]	; (8005a18 <prvSwitchTimerLists+0xc0>)
 80059b4:	681a      	ldr	r2, [r3, #0]
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	3304      	adds	r3, #4
 80059ba:	4619      	mov	r1, r3
 80059bc:	4610      	mov	r0, r2
 80059be:	f7fe f8d4 	bl	8003b6a <vListInsert>
 80059c2:	e016      	b.n	80059f2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80059c4:	2300      	movs	r3, #0
 80059c6:	9300      	str	r3, [sp, #0]
 80059c8:	2300      	movs	r3, #0
 80059ca:	693a      	ldr	r2, [r7, #16]
 80059cc:	2100      	movs	r1, #0
 80059ce:	68f8      	ldr	r0, [r7, #12]
 80059d0:	f7ff fd60 	bl	8005494 <xTimerGenericCommand>
 80059d4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d10a      	bne.n	80059f2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80059dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059e0:	f383 8811 	msr	BASEPRI, r3
 80059e4:	f3bf 8f6f 	isb	sy
 80059e8:	f3bf 8f4f 	dsb	sy
 80059ec:	603b      	str	r3, [r7, #0]
}
 80059ee:	bf00      	nop
 80059f0:	e7fe      	b.n	80059f0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80059f2:	4b09      	ldr	r3, [pc, #36]	; (8005a18 <prvSwitchTimerLists+0xc0>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d1b1      	bne.n	8005960 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80059fc:	4b06      	ldr	r3, [pc, #24]	; (8005a18 <prvSwitchTimerLists+0xc0>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005a02:	4b06      	ldr	r3, [pc, #24]	; (8005a1c <prvSwitchTimerLists+0xc4>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4a04      	ldr	r2, [pc, #16]	; (8005a18 <prvSwitchTimerLists+0xc0>)
 8005a08:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005a0a:	4a04      	ldr	r2, [pc, #16]	; (8005a1c <prvSwitchTimerLists+0xc4>)
 8005a0c:	697b      	ldr	r3, [r7, #20]
 8005a0e:	6013      	str	r3, [r2, #0]
}
 8005a10:	bf00      	nop
 8005a12:	3718      	adds	r7, #24
 8005a14:	46bd      	mov	sp, r7
 8005a16:	bd80      	pop	{r7, pc}
 8005a18:	20000d44 	.word	0x20000d44
 8005a1c:	20000d48 	.word	0x20000d48

08005a20 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b082      	sub	sp, #8
 8005a24:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005a26:	f000 f965 	bl	8005cf4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005a2a:	4b15      	ldr	r3, [pc, #84]	; (8005a80 <prvCheckForValidListAndQueue+0x60>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d120      	bne.n	8005a74 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005a32:	4814      	ldr	r0, [pc, #80]	; (8005a84 <prvCheckForValidListAndQueue+0x64>)
 8005a34:	f7fe f848 	bl	8003ac8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005a38:	4813      	ldr	r0, [pc, #76]	; (8005a88 <prvCheckForValidListAndQueue+0x68>)
 8005a3a:	f7fe f845 	bl	8003ac8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005a3e:	4b13      	ldr	r3, [pc, #76]	; (8005a8c <prvCheckForValidListAndQueue+0x6c>)
 8005a40:	4a10      	ldr	r2, [pc, #64]	; (8005a84 <prvCheckForValidListAndQueue+0x64>)
 8005a42:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005a44:	4b12      	ldr	r3, [pc, #72]	; (8005a90 <prvCheckForValidListAndQueue+0x70>)
 8005a46:	4a10      	ldr	r2, [pc, #64]	; (8005a88 <prvCheckForValidListAndQueue+0x68>)
 8005a48:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	9300      	str	r3, [sp, #0]
 8005a4e:	4b11      	ldr	r3, [pc, #68]	; (8005a94 <prvCheckForValidListAndQueue+0x74>)
 8005a50:	4a11      	ldr	r2, [pc, #68]	; (8005a98 <prvCheckForValidListAndQueue+0x78>)
 8005a52:	2110      	movs	r1, #16
 8005a54:	200a      	movs	r0, #10
 8005a56:	f7fe f953 	bl	8003d00 <xQueueGenericCreateStatic>
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	4a08      	ldr	r2, [pc, #32]	; (8005a80 <prvCheckForValidListAndQueue+0x60>)
 8005a5e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005a60:	4b07      	ldr	r3, [pc, #28]	; (8005a80 <prvCheckForValidListAndQueue+0x60>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d005      	beq.n	8005a74 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005a68:	4b05      	ldr	r3, [pc, #20]	; (8005a80 <prvCheckForValidListAndQueue+0x60>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	490b      	ldr	r1, [pc, #44]	; (8005a9c <prvCheckForValidListAndQueue+0x7c>)
 8005a6e:	4618      	mov	r0, r3
 8005a70:	f7fe fd6c 	bl	800454c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005a74:	f000 f96e 	bl	8005d54 <vPortExitCritical>
}
 8005a78:	bf00      	nop
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bd80      	pop	{r7, pc}
 8005a7e:	bf00      	nop
 8005a80:	20000d4c 	.word	0x20000d4c
 8005a84:	20000d1c 	.word	0x20000d1c
 8005a88:	20000d30 	.word	0x20000d30
 8005a8c:	20000d44 	.word	0x20000d44
 8005a90:	20000d48 	.word	0x20000d48
 8005a94:	20000df8 	.word	0x20000df8
 8005a98:	20000d58 	.word	0x20000d58
 8005a9c:	08006cb8 	.word	0x08006cb8

08005aa0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	b085      	sub	sp, #20
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	60f8      	str	r0, [r7, #12]
 8005aa8:	60b9      	str	r1, [r7, #8]
 8005aaa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	3b04      	subs	r3, #4
 8005ab0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005ab8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	3b04      	subs	r3, #4
 8005abe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	f023 0201 	bic.w	r2, r3, #1
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	3b04      	subs	r3, #4
 8005ace:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005ad0:	4a0c      	ldr	r2, [pc, #48]	; (8005b04 <pxPortInitialiseStack+0x64>)
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	3b14      	subs	r3, #20
 8005ada:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005adc:	687a      	ldr	r2, [r7, #4]
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	3b04      	subs	r3, #4
 8005ae6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	f06f 0202 	mvn.w	r2, #2
 8005aee:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	3b20      	subs	r3, #32
 8005af4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005af6:	68fb      	ldr	r3, [r7, #12]
}
 8005af8:	4618      	mov	r0, r3
 8005afa:	3714      	adds	r7, #20
 8005afc:	46bd      	mov	sp, r7
 8005afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b02:	4770      	bx	lr
 8005b04:	08005b09 	.word	0x08005b09

08005b08 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b085      	sub	sp, #20
 8005b0c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005b0e:	2300      	movs	r3, #0
 8005b10:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005b12:	4b12      	ldr	r3, [pc, #72]	; (8005b5c <prvTaskExitError+0x54>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b1a:	d00a      	beq.n	8005b32 <prvTaskExitError+0x2a>
	__asm volatile
 8005b1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b20:	f383 8811 	msr	BASEPRI, r3
 8005b24:	f3bf 8f6f 	isb	sy
 8005b28:	f3bf 8f4f 	dsb	sy
 8005b2c:	60fb      	str	r3, [r7, #12]
}
 8005b2e:	bf00      	nop
 8005b30:	e7fe      	b.n	8005b30 <prvTaskExitError+0x28>
	__asm volatile
 8005b32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b36:	f383 8811 	msr	BASEPRI, r3
 8005b3a:	f3bf 8f6f 	isb	sy
 8005b3e:	f3bf 8f4f 	dsb	sy
 8005b42:	60bb      	str	r3, [r7, #8]
}
 8005b44:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005b46:	bf00      	nop
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d0fc      	beq.n	8005b48 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005b4e:	bf00      	nop
 8005b50:	bf00      	nop
 8005b52:	3714      	adds	r7, #20
 8005b54:	46bd      	mov	sp, r7
 8005b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5a:	4770      	bx	lr
 8005b5c:	2000000c 	.word	0x2000000c

08005b60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005b60:	4b07      	ldr	r3, [pc, #28]	; (8005b80 <pxCurrentTCBConst2>)
 8005b62:	6819      	ldr	r1, [r3, #0]
 8005b64:	6808      	ldr	r0, [r1, #0]
 8005b66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b6a:	f380 8809 	msr	PSP, r0
 8005b6e:	f3bf 8f6f 	isb	sy
 8005b72:	f04f 0000 	mov.w	r0, #0
 8005b76:	f380 8811 	msr	BASEPRI, r0
 8005b7a:	4770      	bx	lr
 8005b7c:	f3af 8000 	nop.w

08005b80 <pxCurrentTCBConst2>:
 8005b80:	2000081c 	.word	0x2000081c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005b84:	bf00      	nop
 8005b86:	bf00      	nop

08005b88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005b88:	4808      	ldr	r0, [pc, #32]	; (8005bac <prvPortStartFirstTask+0x24>)
 8005b8a:	6800      	ldr	r0, [r0, #0]
 8005b8c:	6800      	ldr	r0, [r0, #0]
 8005b8e:	f380 8808 	msr	MSP, r0
 8005b92:	f04f 0000 	mov.w	r0, #0
 8005b96:	f380 8814 	msr	CONTROL, r0
 8005b9a:	b662      	cpsie	i
 8005b9c:	b661      	cpsie	f
 8005b9e:	f3bf 8f4f 	dsb	sy
 8005ba2:	f3bf 8f6f 	isb	sy
 8005ba6:	df00      	svc	0
 8005ba8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005baa:	bf00      	nop
 8005bac:	e000ed08 	.word	0xe000ed08

08005bb0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b086      	sub	sp, #24
 8005bb4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005bb6:	4b46      	ldr	r3, [pc, #280]	; (8005cd0 <xPortStartScheduler+0x120>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	4a46      	ldr	r2, [pc, #280]	; (8005cd4 <xPortStartScheduler+0x124>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d10a      	bne.n	8005bd6 <xPortStartScheduler+0x26>
	__asm volatile
 8005bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bc4:	f383 8811 	msr	BASEPRI, r3
 8005bc8:	f3bf 8f6f 	isb	sy
 8005bcc:	f3bf 8f4f 	dsb	sy
 8005bd0:	613b      	str	r3, [r7, #16]
}
 8005bd2:	bf00      	nop
 8005bd4:	e7fe      	b.n	8005bd4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005bd6:	4b3e      	ldr	r3, [pc, #248]	; (8005cd0 <xPortStartScheduler+0x120>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4a3f      	ldr	r2, [pc, #252]	; (8005cd8 <xPortStartScheduler+0x128>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d10a      	bne.n	8005bf6 <xPortStartScheduler+0x46>
	__asm volatile
 8005be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005be4:	f383 8811 	msr	BASEPRI, r3
 8005be8:	f3bf 8f6f 	isb	sy
 8005bec:	f3bf 8f4f 	dsb	sy
 8005bf0:	60fb      	str	r3, [r7, #12]
}
 8005bf2:	bf00      	nop
 8005bf4:	e7fe      	b.n	8005bf4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005bf6:	4b39      	ldr	r3, [pc, #228]	; (8005cdc <xPortStartScheduler+0x12c>)
 8005bf8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	781b      	ldrb	r3, [r3, #0]
 8005bfe:	b2db      	uxtb	r3, r3
 8005c00:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005c02:	697b      	ldr	r3, [r7, #20]
 8005c04:	22ff      	movs	r2, #255	; 0xff
 8005c06:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005c08:	697b      	ldr	r3, [r7, #20]
 8005c0a:	781b      	ldrb	r3, [r3, #0]
 8005c0c:	b2db      	uxtb	r3, r3
 8005c0e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005c10:	78fb      	ldrb	r3, [r7, #3]
 8005c12:	b2db      	uxtb	r3, r3
 8005c14:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005c18:	b2da      	uxtb	r2, r3
 8005c1a:	4b31      	ldr	r3, [pc, #196]	; (8005ce0 <xPortStartScheduler+0x130>)
 8005c1c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005c1e:	4b31      	ldr	r3, [pc, #196]	; (8005ce4 <xPortStartScheduler+0x134>)
 8005c20:	2207      	movs	r2, #7
 8005c22:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005c24:	e009      	b.n	8005c3a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005c26:	4b2f      	ldr	r3, [pc, #188]	; (8005ce4 <xPortStartScheduler+0x134>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	3b01      	subs	r3, #1
 8005c2c:	4a2d      	ldr	r2, [pc, #180]	; (8005ce4 <xPortStartScheduler+0x134>)
 8005c2e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005c30:	78fb      	ldrb	r3, [r7, #3]
 8005c32:	b2db      	uxtb	r3, r3
 8005c34:	005b      	lsls	r3, r3, #1
 8005c36:	b2db      	uxtb	r3, r3
 8005c38:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005c3a:	78fb      	ldrb	r3, [r7, #3]
 8005c3c:	b2db      	uxtb	r3, r3
 8005c3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c42:	2b80      	cmp	r3, #128	; 0x80
 8005c44:	d0ef      	beq.n	8005c26 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005c46:	4b27      	ldr	r3, [pc, #156]	; (8005ce4 <xPortStartScheduler+0x134>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f1c3 0307 	rsb	r3, r3, #7
 8005c4e:	2b04      	cmp	r3, #4
 8005c50:	d00a      	beq.n	8005c68 <xPortStartScheduler+0xb8>
	__asm volatile
 8005c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c56:	f383 8811 	msr	BASEPRI, r3
 8005c5a:	f3bf 8f6f 	isb	sy
 8005c5e:	f3bf 8f4f 	dsb	sy
 8005c62:	60bb      	str	r3, [r7, #8]
}
 8005c64:	bf00      	nop
 8005c66:	e7fe      	b.n	8005c66 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005c68:	4b1e      	ldr	r3, [pc, #120]	; (8005ce4 <xPortStartScheduler+0x134>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	021b      	lsls	r3, r3, #8
 8005c6e:	4a1d      	ldr	r2, [pc, #116]	; (8005ce4 <xPortStartScheduler+0x134>)
 8005c70:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005c72:	4b1c      	ldr	r3, [pc, #112]	; (8005ce4 <xPortStartScheduler+0x134>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005c7a:	4a1a      	ldr	r2, [pc, #104]	; (8005ce4 <xPortStartScheduler+0x134>)
 8005c7c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	b2da      	uxtb	r2, r3
 8005c82:	697b      	ldr	r3, [r7, #20]
 8005c84:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005c86:	4b18      	ldr	r3, [pc, #96]	; (8005ce8 <xPortStartScheduler+0x138>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4a17      	ldr	r2, [pc, #92]	; (8005ce8 <xPortStartScheduler+0x138>)
 8005c8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005c90:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005c92:	4b15      	ldr	r3, [pc, #84]	; (8005ce8 <xPortStartScheduler+0x138>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4a14      	ldr	r2, [pc, #80]	; (8005ce8 <xPortStartScheduler+0x138>)
 8005c98:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005c9c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005c9e:	f000 f8dd 	bl	8005e5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005ca2:	4b12      	ldr	r3, [pc, #72]	; (8005cec <xPortStartScheduler+0x13c>)
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005ca8:	f000 f8fc 	bl	8005ea4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005cac:	4b10      	ldr	r3, [pc, #64]	; (8005cf0 <xPortStartScheduler+0x140>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4a0f      	ldr	r2, [pc, #60]	; (8005cf0 <xPortStartScheduler+0x140>)
 8005cb2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005cb6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005cb8:	f7ff ff66 	bl	8005b88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005cbc:	f7ff f856 	bl	8004d6c <vTaskSwitchContext>
	prvTaskExitError();
 8005cc0:	f7ff ff22 	bl	8005b08 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005cc4:	2300      	movs	r3, #0
}
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	3718      	adds	r7, #24
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	bd80      	pop	{r7, pc}
 8005cce:	bf00      	nop
 8005cd0:	e000ed00 	.word	0xe000ed00
 8005cd4:	410fc271 	.word	0x410fc271
 8005cd8:	410fc270 	.word	0x410fc270
 8005cdc:	e000e400 	.word	0xe000e400
 8005ce0:	20000e48 	.word	0x20000e48
 8005ce4:	20000e4c 	.word	0x20000e4c
 8005ce8:	e000ed20 	.word	0xe000ed20
 8005cec:	2000000c 	.word	0x2000000c
 8005cf0:	e000ef34 	.word	0xe000ef34

08005cf4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005cf4:	b480      	push	{r7}
 8005cf6:	b083      	sub	sp, #12
 8005cf8:	af00      	add	r7, sp, #0
	__asm volatile
 8005cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cfe:	f383 8811 	msr	BASEPRI, r3
 8005d02:	f3bf 8f6f 	isb	sy
 8005d06:	f3bf 8f4f 	dsb	sy
 8005d0a:	607b      	str	r3, [r7, #4]
}
 8005d0c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005d0e:	4b0f      	ldr	r3, [pc, #60]	; (8005d4c <vPortEnterCritical+0x58>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	3301      	adds	r3, #1
 8005d14:	4a0d      	ldr	r2, [pc, #52]	; (8005d4c <vPortEnterCritical+0x58>)
 8005d16:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005d18:	4b0c      	ldr	r3, [pc, #48]	; (8005d4c <vPortEnterCritical+0x58>)
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	2b01      	cmp	r3, #1
 8005d1e:	d10f      	bne.n	8005d40 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005d20:	4b0b      	ldr	r3, [pc, #44]	; (8005d50 <vPortEnterCritical+0x5c>)
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	b2db      	uxtb	r3, r3
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d00a      	beq.n	8005d40 <vPortEnterCritical+0x4c>
	__asm volatile
 8005d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d2e:	f383 8811 	msr	BASEPRI, r3
 8005d32:	f3bf 8f6f 	isb	sy
 8005d36:	f3bf 8f4f 	dsb	sy
 8005d3a:	603b      	str	r3, [r7, #0]
}
 8005d3c:	bf00      	nop
 8005d3e:	e7fe      	b.n	8005d3e <vPortEnterCritical+0x4a>
	}
}
 8005d40:	bf00      	nop
 8005d42:	370c      	adds	r7, #12
 8005d44:	46bd      	mov	sp, r7
 8005d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4a:	4770      	bx	lr
 8005d4c:	2000000c 	.word	0x2000000c
 8005d50:	e000ed04 	.word	0xe000ed04

08005d54 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005d54:	b480      	push	{r7}
 8005d56:	b083      	sub	sp, #12
 8005d58:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005d5a:	4b12      	ldr	r3, [pc, #72]	; (8005da4 <vPortExitCritical+0x50>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d10a      	bne.n	8005d78 <vPortExitCritical+0x24>
	__asm volatile
 8005d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d66:	f383 8811 	msr	BASEPRI, r3
 8005d6a:	f3bf 8f6f 	isb	sy
 8005d6e:	f3bf 8f4f 	dsb	sy
 8005d72:	607b      	str	r3, [r7, #4]
}
 8005d74:	bf00      	nop
 8005d76:	e7fe      	b.n	8005d76 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005d78:	4b0a      	ldr	r3, [pc, #40]	; (8005da4 <vPortExitCritical+0x50>)
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	3b01      	subs	r3, #1
 8005d7e:	4a09      	ldr	r2, [pc, #36]	; (8005da4 <vPortExitCritical+0x50>)
 8005d80:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005d82:	4b08      	ldr	r3, [pc, #32]	; (8005da4 <vPortExitCritical+0x50>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d105      	bne.n	8005d96 <vPortExitCritical+0x42>
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	f383 8811 	msr	BASEPRI, r3
}
 8005d94:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005d96:	bf00      	nop
 8005d98:	370c      	adds	r7, #12
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da0:	4770      	bx	lr
 8005da2:	bf00      	nop
 8005da4:	2000000c 	.word	0x2000000c
	...

08005db0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005db0:	f3ef 8009 	mrs	r0, PSP
 8005db4:	f3bf 8f6f 	isb	sy
 8005db8:	4b15      	ldr	r3, [pc, #84]	; (8005e10 <pxCurrentTCBConst>)
 8005dba:	681a      	ldr	r2, [r3, #0]
 8005dbc:	f01e 0f10 	tst.w	lr, #16
 8005dc0:	bf08      	it	eq
 8005dc2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005dc6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dca:	6010      	str	r0, [r2, #0]
 8005dcc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005dd0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005dd4:	f380 8811 	msr	BASEPRI, r0
 8005dd8:	f3bf 8f4f 	dsb	sy
 8005ddc:	f3bf 8f6f 	isb	sy
 8005de0:	f7fe ffc4 	bl	8004d6c <vTaskSwitchContext>
 8005de4:	f04f 0000 	mov.w	r0, #0
 8005de8:	f380 8811 	msr	BASEPRI, r0
 8005dec:	bc09      	pop	{r0, r3}
 8005dee:	6819      	ldr	r1, [r3, #0]
 8005df0:	6808      	ldr	r0, [r1, #0]
 8005df2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005df6:	f01e 0f10 	tst.w	lr, #16
 8005dfa:	bf08      	it	eq
 8005dfc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005e00:	f380 8809 	msr	PSP, r0
 8005e04:	f3bf 8f6f 	isb	sy
 8005e08:	4770      	bx	lr
 8005e0a:	bf00      	nop
 8005e0c:	f3af 8000 	nop.w

08005e10 <pxCurrentTCBConst>:
 8005e10:	2000081c 	.word	0x2000081c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005e14:	bf00      	nop
 8005e16:	bf00      	nop

08005e18 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b082      	sub	sp, #8
 8005e1c:	af00      	add	r7, sp, #0
	__asm volatile
 8005e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e22:	f383 8811 	msr	BASEPRI, r3
 8005e26:	f3bf 8f6f 	isb	sy
 8005e2a:	f3bf 8f4f 	dsb	sy
 8005e2e:	607b      	str	r3, [r7, #4]
}
 8005e30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005e32:	f7fe fee1 	bl	8004bf8 <xTaskIncrementTick>
 8005e36:	4603      	mov	r3, r0
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d003      	beq.n	8005e44 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005e3c:	4b06      	ldr	r3, [pc, #24]	; (8005e58 <xPortSysTickHandler+0x40>)
 8005e3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e42:	601a      	str	r2, [r3, #0]
 8005e44:	2300      	movs	r3, #0
 8005e46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	f383 8811 	msr	BASEPRI, r3
}
 8005e4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005e50:	bf00      	nop
 8005e52:	3708      	adds	r7, #8
 8005e54:	46bd      	mov	sp, r7
 8005e56:	bd80      	pop	{r7, pc}
 8005e58:	e000ed04 	.word	0xe000ed04

08005e5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005e60:	4b0b      	ldr	r3, [pc, #44]	; (8005e90 <vPortSetupTimerInterrupt+0x34>)
 8005e62:	2200      	movs	r2, #0
 8005e64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005e66:	4b0b      	ldr	r3, [pc, #44]	; (8005e94 <vPortSetupTimerInterrupt+0x38>)
 8005e68:	2200      	movs	r2, #0
 8005e6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005e6c:	4b0a      	ldr	r3, [pc, #40]	; (8005e98 <vPortSetupTimerInterrupt+0x3c>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	4a0a      	ldr	r2, [pc, #40]	; (8005e9c <vPortSetupTimerInterrupt+0x40>)
 8005e72:	fba2 2303 	umull	r2, r3, r2, r3
 8005e76:	099b      	lsrs	r3, r3, #6
 8005e78:	4a09      	ldr	r2, [pc, #36]	; (8005ea0 <vPortSetupTimerInterrupt+0x44>)
 8005e7a:	3b01      	subs	r3, #1
 8005e7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005e7e:	4b04      	ldr	r3, [pc, #16]	; (8005e90 <vPortSetupTimerInterrupt+0x34>)
 8005e80:	2207      	movs	r2, #7
 8005e82:	601a      	str	r2, [r3, #0]
}
 8005e84:	bf00      	nop
 8005e86:	46bd      	mov	sp, r7
 8005e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8c:	4770      	bx	lr
 8005e8e:	bf00      	nop
 8005e90:	e000e010 	.word	0xe000e010
 8005e94:	e000e018 	.word	0xe000e018
 8005e98:	20000000 	.word	0x20000000
 8005e9c:	10624dd3 	.word	0x10624dd3
 8005ea0:	e000e014 	.word	0xe000e014

08005ea4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005ea4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005eb4 <vPortEnableVFP+0x10>
 8005ea8:	6801      	ldr	r1, [r0, #0]
 8005eaa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005eae:	6001      	str	r1, [r0, #0]
 8005eb0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005eb2:	bf00      	nop
 8005eb4:	e000ed88 	.word	0xe000ed88

08005eb8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005eb8:	b480      	push	{r7}
 8005eba:	b085      	sub	sp, #20
 8005ebc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005ebe:	f3ef 8305 	mrs	r3, IPSR
 8005ec2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	2b0f      	cmp	r3, #15
 8005ec8:	d914      	bls.n	8005ef4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005eca:	4a17      	ldr	r2, [pc, #92]	; (8005f28 <vPortValidateInterruptPriority+0x70>)
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	4413      	add	r3, r2
 8005ed0:	781b      	ldrb	r3, [r3, #0]
 8005ed2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005ed4:	4b15      	ldr	r3, [pc, #84]	; (8005f2c <vPortValidateInterruptPriority+0x74>)
 8005ed6:	781b      	ldrb	r3, [r3, #0]
 8005ed8:	7afa      	ldrb	r2, [r7, #11]
 8005eda:	429a      	cmp	r2, r3
 8005edc:	d20a      	bcs.n	8005ef4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8005ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ee2:	f383 8811 	msr	BASEPRI, r3
 8005ee6:	f3bf 8f6f 	isb	sy
 8005eea:	f3bf 8f4f 	dsb	sy
 8005eee:	607b      	str	r3, [r7, #4]
}
 8005ef0:	bf00      	nop
 8005ef2:	e7fe      	b.n	8005ef2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005ef4:	4b0e      	ldr	r3, [pc, #56]	; (8005f30 <vPortValidateInterruptPriority+0x78>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005efc:	4b0d      	ldr	r3, [pc, #52]	; (8005f34 <vPortValidateInterruptPriority+0x7c>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	429a      	cmp	r2, r3
 8005f02:	d90a      	bls.n	8005f1a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f08:	f383 8811 	msr	BASEPRI, r3
 8005f0c:	f3bf 8f6f 	isb	sy
 8005f10:	f3bf 8f4f 	dsb	sy
 8005f14:	603b      	str	r3, [r7, #0]
}
 8005f16:	bf00      	nop
 8005f18:	e7fe      	b.n	8005f18 <vPortValidateInterruptPriority+0x60>
	}
 8005f1a:	bf00      	nop
 8005f1c:	3714      	adds	r7, #20
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f24:	4770      	bx	lr
 8005f26:	bf00      	nop
 8005f28:	e000e3f0 	.word	0xe000e3f0
 8005f2c:	20000e48 	.word	0x20000e48
 8005f30:	e000ed0c 	.word	0xe000ed0c
 8005f34:	20000e4c 	.word	0x20000e4c

08005f38 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b08a      	sub	sp, #40	; 0x28
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005f40:	2300      	movs	r3, #0
 8005f42:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005f44:	f7fe fd9c 	bl	8004a80 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005f48:	4b5b      	ldr	r3, [pc, #364]	; (80060b8 <pvPortMalloc+0x180>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d101      	bne.n	8005f54 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005f50:	f000 f920 	bl	8006194 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005f54:	4b59      	ldr	r3, [pc, #356]	; (80060bc <pvPortMalloc+0x184>)
 8005f56:	681a      	ldr	r2, [r3, #0]
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	4013      	ands	r3, r2
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	f040 8093 	bne.w	8006088 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d01d      	beq.n	8005fa4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005f68:	2208      	movs	r2, #8
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	4413      	add	r3, r2
 8005f6e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	f003 0307 	and.w	r3, r3, #7
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d014      	beq.n	8005fa4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	f023 0307 	bic.w	r3, r3, #7
 8005f80:	3308      	adds	r3, #8
 8005f82:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	f003 0307 	and.w	r3, r3, #7
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d00a      	beq.n	8005fa4 <pvPortMalloc+0x6c>
	__asm volatile
 8005f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f92:	f383 8811 	msr	BASEPRI, r3
 8005f96:	f3bf 8f6f 	isb	sy
 8005f9a:	f3bf 8f4f 	dsb	sy
 8005f9e:	617b      	str	r3, [r7, #20]
}
 8005fa0:	bf00      	nop
 8005fa2:	e7fe      	b.n	8005fa2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d06e      	beq.n	8006088 <pvPortMalloc+0x150>
 8005faa:	4b45      	ldr	r3, [pc, #276]	; (80060c0 <pvPortMalloc+0x188>)
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	687a      	ldr	r2, [r7, #4]
 8005fb0:	429a      	cmp	r2, r3
 8005fb2:	d869      	bhi.n	8006088 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005fb4:	4b43      	ldr	r3, [pc, #268]	; (80060c4 <pvPortMalloc+0x18c>)
 8005fb6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005fb8:	4b42      	ldr	r3, [pc, #264]	; (80060c4 <pvPortMalloc+0x18c>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005fbe:	e004      	b.n	8005fca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fcc:	685b      	ldr	r3, [r3, #4]
 8005fce:	687a      	ldr	r2, [r7, #4]
 8005fd0:	429a      	cmp	r2, r3
 8005fd2:	d903      	bls.n	8005fdc <pvPortMalloc+0xa4>
 8005fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d1f1      	bne.n	8005fc0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005fdc:	4b36      	ldr	r3, [pc, #216]	; (80060b8 <pvPortMalloc+0x180>)
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fe2:	429a      	cmp	r2, r3
 8005fe4:	d050      	beq.n	8006088 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005fe6:	6a3b      	ldr	r3, [r7, #32]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	2208      	movs	r2, #8
 8005fec:	4413      	add	r3, r2
 8005fee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff2:	681a      	ldr	r2, [r3, #0]
 8005ff4:	6a3b      	ldr	r3, [r7, #32]
 8005ff6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ffa:	685a      	ldr	r2, [r3, #4]
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	1ad2      	subs	r2, r2, r3
 8006000:	2308      	movs	r3, #8
 8006002:	005b      	lsls	r3, r3, #1
 8006004:	429a      	cmp	r2, r3
 8006006:	d91f      	bls.n	8006048 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006008:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	4413      	add	r3, r2
 800600e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006010:	69bb      	ldr	r3, [r7, #24]
 8006012:	f003 0307 	and.w	r3, r3, #7
 8006016:	2b00      	cmp	r3, #0
 8006018:	d00a      	beq.n	8006030 <pvPortMalloc+0xf8>
	__asm volatile
 800601a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800601e:	f383 8811 	msr	BASEPRI, r3
 8006022:	f3bf 8f6f 	isb	sy
 8006026:	f3bf 8f4f 	dsb	sy
 800602a:	613b      	str	r3, [r7, #16]
}
 800602c:	bf00      	nop
 800602e:	e7fe      	b.n	800602e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006032:	685a      	ldr	r2, [r3, #4]
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	1ad2      	subs	r2, r2, r3
 8006038:	69bb      	ldr	r3, [r7, #24]
 800603a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800603c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800603e:	687a      	ldr	r2, [r7, #4]
 8006040:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006042:	69b8      	ldr	r0, [r7, #24]
 8006044:	f000 f908 	bl	8006258 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006048:	4b1d      	ldr	r3, [pc, #116]	; (80060c0 <pvPortMalloc+0x188>)
 800604a:	681a      	ldr	r2, [r3, #0]
 800604c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800604e:	685b      	ldr	r3, [r3, #4]
 8006050:	1ad3      	subs	r3, r2, r3
 8006052:	4a1b      	ldr	r2, [pc, #108]	; (80060c0 <pvPortMalloc+0x188>)
 8006054:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006056:	4b1a      	ldr	r3, [pc, #104]	; (80060c0 <pvPortMalloc+0x188>)
 8006058:	681a      	ldr	r2, [r3, #0]
 800605a:	4b1b      	ldr	r3, [pc, #108]	; (80060c8 <pvPortMalloc+0x190>)
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	429a      	cmp	r2, r3
 8006060:	d203      	bcs.n	800606a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006062:	4b17      	ldr	r3, [pc, #92]	; (80060c0 <pvPortMalloc+0x188>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4a18      	ldr	r2, [pc, #96]	; (80060c8 <pvPortMalloc+0x190>)
 8006068:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800606a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800606c:	685a      	ldr	r2, [r3, #4]
 800606e:	4b13      	ldr	r3, [pc, #76]	; (80060bc <pvPortMalloc+0x184>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	431a      	orrs	r2, r3
 8006074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006076:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800607a:	2200      	movs	r2, #0
 800607c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800607e:	4b13      	ldr	r3, [pc, #76]	; (80060cc <pvPortMalloc+0x194>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	3301      	adds	r3, #1
 8006084:	4a11      	ldr	r2, [pc, #68]	; (80060cc <pvPortMalloc+0x194>)
 8006086:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006088:	f7fe fd08 	bl	8004a9c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800608c:	69fb      	ldr	r3, [r7, #28]
 800608e:	f003 0307 	and.w	r3, r3, #7
 8006092:	2b00      	cmp	r3, #0
 8006094:	d00a      	beq.n	80060ac <pvPortMalloc+0x174>
	__asm volatile
 8006096:	f04f 0350 	mov.w	r3, #80	; 0x50
 800609a:	f383 8811 	msr	BASEPRI, r3
 800609e:	f3bf 8f6f 	isb	sy
 80060a2:	f3bf 8f4f 	dsb	sy
 80060a6:	60fb      	str	r3, [r7, #12]
}
 80060a8:	bf00      	nop
 80060aa:	e7fe      	b.n	80060aa <pvPortMalloc+0x172>
	return pvReturn;
 80060ac:	69fb      	ldr	r3, [r7, #28]
}
 80060ae:	4618      	mov	r0, r3
 80060b0:	3728      	adds	r7, #40	; 0x28
 80060b2:	46bd      	mov	sp, r7
 80060b4:	bd80      	pop	{r7, pc}
 80060b6:	bf00      	nop
 80060b8:	20004a58 	.word	0x20004a58
 80060bc:	20004a6c 	.word	0x20004a6c
 80060c0:	20004a5c 	.word	0x20004a5c
 80060c4:	20004a50 	.word	0x20004a50
 80060c8:	20004a60 	.word	0x20004a60
 80060cc:	20004a64 	.word	0x20004a64

080060d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b086      	sub	sp, #24
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d04d      	beq.n	800617e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80060e2:	2308      	movs	r3, #8
 80060e4:	425b      	negs	r3, r3
 80060e6:	697a      	ldr	r2, [r7, #20]
 80060e8:	4413      	add	r3, r2
 80060ea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80060ec:	697b      	ldr	r3, [r7, #20]
 80060ee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80060f0:	693b      	ldr	r3, [r7, #16]
 80060f2:	685a      	ldr	r2, [r3, #4]
 80060f4:	4b24      	ldr	r3, [pc, #144]	; (8006188 <vPortFree+0xb8>)
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4013      	ands	r3, r2
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d10a      	bne.n	8006114 <vPortFree+0x44>
	__asm volatile
 80060fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006102:	f383 8811 	msr	BASEPRI, r3
 8006106:	f3bf 8f6f 	isb	sy
 800610a:	f3bf 8f4f 	dsb	sy
 800610e:	60fb      	str	r3, [r7, #12]
}
 8006110:	bf00      	nop
 8006112:	e7fe      	b.n	8006112 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006114:	693b      	ldr	r3, [r7, #16]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d00a      	beq.n	8006132 <vPortFree+0x62>
	__asm volatile
 800611c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006120:	f383 8811 	msr	BASEPRI, r3
 8006124:	f3bf 8f6f 	isb	sy
 8006128:	f3bf 8f4f 	dsb	sy
 800612c:	60bb      	str	r3, [r7, #8]
}
 800612e:	bf00      	nop
 8006130:	e7fe      	b.n	8006130 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006132:	693b      	ldr	r3, [r7, #16]
 8006134:	685a      	ldr	r2, [r3, #4]
 8006136:	4b14      	ldr	r3, [pc, #80]	; (8006188 <vPortFree+0xb8>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4013      	ands	r3, r2
 800613c:	2b00      	cmp	r3, #0
 800613e:	d01e      	beq.n	800617e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006140:	693b      	ldr	r3, [r7, #16]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d11a      	bne.n	800617e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006148:	693b      	ldr	r3, [r7, #16]
 800614a:	685a      	ldr	r2, [r3, #4]
 800614c:	4b0e      	ldr	r3, [pc, #56]	; (8006188 <vPortFree+0xb8>)
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	43db      	mvns	r3, r3
 8006152:	401a      	ands	r2, r3
 8006154:	693b      	ldr	r3, [r7, #16]
 8006156:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006158:	f7fe fc92 	bl	8004a80 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800615c:	693b      	ldr	r3, [r7, #16]
 800615e:	685a      	ldr	r2, [r3, #4]
 8006160:	4b0a      	ldr	r3, [pc, #40]	; (800618c <vPortFree+0xbc>)
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	4413      	add	r3, r2
 8006166:	4a09      	ldr	r2, [pc, #36]	; (800618c <vPortFree+0xbc>)
 8006168:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800616a:	6938      	ldr	r0, [r7, #16]
 800616c:	f000 f874 	bl	8006258 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006170:	4b07      	ldr	r3, [pc, #28]	; (8006190 <vPortFree+0xc0>)
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	3301      	adds	r3, #1
 8006176:	4a06      	ldr	r2, [pc, #24]	; (8006190 <vPortFree+0xc0>)
 8006178:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800617a:	f7fe fc8f 	bl	8004a9c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800617e:	bf00      	nop
 8006180:	3718      	adds	r7, #24
 8006182:	46bd      	mov	sp, r7
 8006184:	bd80      	pop	{r7, pc}
 8006186:	bf00      	nop
 8006188:	20004a6c 	.word	0x20004a6c
 800618c:	20004a5c 	.word	0x20004a5c
 8006190:	20004a68 	.word	0x20004a68

08006194 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006194:	b480      	push	{r7}
 8006196:	b085      	sub	sp, #20
 8006198:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800619a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800619e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80061a0:	4b27      	ldr	r3, [pc, #156]	; (8006240 <prvHeapInit+0xac>)
 80061a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	f003 0307 	and.w	r3, r3, #7
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d00c      	beq.n	80061c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	3307      	adds	r3, #7
 80061b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	f023 0307 	bic.w	r3, r3, #7
 80061ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80061bc:	68ba      	ldr	r2, [r7, #8]
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	1ad3      	subs	r3, r2, r3
 80061c2:	4a1f      	ldr	r2, [pc, #124]	; (8006240 <prvHeapInit+0xac>)
 80061c4:	4413      	add	r3, r2
 80061c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80061cc:	4a1d      	ldr	r2, [pc, #116]	; (8006244 <prvHeapInit+0xb0>)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80061d2:	4b1c      	ldr	r3, [pc, #112]	; (8006244 <prvHeapInit+0xb0>)
 80061d4:	2200      	movs	r2, #0
 80061d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	68ba      	ldr	r2, [r7, #8]
 80061dc:	4413      	add	r3, r2
 80061de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80061e0:	2208      	movs	r2, #8
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	1a9b      	subs	r3, r3, r2
 80061e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	f023 0307 	bic.w	r3, r3, #7
 80061ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	4a15      	ldr	r2, [pc, #84]	; (8006248 <prvHeapInit+0xb4>)
 80061f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80061f6:	4b14      	ldr	r3, [pc, #80]	; (8006248 <prvHeapInit+0xb4>)
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	2200      	movs	r2, #0
 80061fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80061fe:	4b12      	ldr	r3, [pc, #72]	; (8006248 <prvHeapInit+0xb4>)
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	2200      	movs	r2, #0
 8006204:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	68fa      	ldr	r2, [r7, #12]
 800620e:	1ad2      	subs	r2, r2, r3
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006214:	4b0c      	ldr	r3, [pc, #48]	; (8006248 <prvHeapInit+0xb4>)
 8006216:	681a      	ldr	r2, [r3, #0]
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	685b      	ldr	r3, [r3, #4]
 8006220:	4a0a      	ldr	r2, [pc, #40]	; (800624c <prvHeapInit+0xb8>)
 8006222:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	685b      	ldr	r3, [r3, #4]
 8006228:	4a09      	ldr	r2, [pc, #36]	; (8006250 <prvHeapInit+0xbc>)
 800622a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800622c:	4b09      	ldr	r3, [pc, #36]	; (8006254 <prvHeapInit+0xc0>)
 800622e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006232:	601a      	str	r2, [r3, #0]
}
 8006234:	bf00      	nop
 8006236:	3714      	adds	r7, #20
 8006238:	46bd      	mov	sp, r7
 800623a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623e:	4770      	bx	lr
 8006240:	20000e50 	.word	0x20000e50
 8006244:	20004a50 	.word	0x20004a50
 8006248:	20004a58 	.word	0x20004a58
 800624c:	20004a60 	.word	0x20004a60
 8006250:	20004a5c 	.word	0x20004a5c
 8006254:	20004a6c 	.word	0x20004a6c

08006258 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006258:	b480      	push	{r7}
 800625a:	b085      	sub	sp, #20
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006260:	4b28      	ldr	r3, [pc, #160]	; (8006304 <prvInsertBlockIntoFreeList+0xac>)
 8006262:	60fb      	str	r3, [r7, #12]
 8006264:	e002      	b.n	800626c <prvInsertBlockIntoFreeList+0x14>
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	60fb      	str	r3, [r7, #12]
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	687a      	ldr	r2, [r7, #4]
 8006272:	429a      	cmp	r2, r3
 8006274:	d8f7      	bhi.n	8006266 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	685b      	ldr	r3, [r3, #4]
 800627e:	68ba      	ldr	r2, [r7, #8]
 8006280:	4413      	add	r3, r2
 8006282:	687a      	ldr	r2, [r7, #4]
 8006284:	429a      	cmp	r2, r3
 8006286:	d108      	bne.n	800629a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	685a      	ldr	r2, [r3, #4]
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	685b      	ldr	r3, [r3, #4]
 8006290:	441a      	add	r2, r3
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	68ba      	ldr	r2, [r7, #8]
 80062a4:	441a      	add	r2, r3
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	429a      	cmp	r2, r3
 80062ac:	d118      	bne.n	80062e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681a      	ldr	r2, [r3, #0]
 80062b2:	4b15      	ldr	r3, [pc, #84]	; (8006308 <prvInsertBlockIntoFreeList+0xb0>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	429a      	cmp	r2, r3
 80062b8:	d00d      	beq.n	80062d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	685a      	ldr	r2, [r3, #4]
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	685b      	ldr	r3, [r3, #4]
 80062c4:	441a      	add	r2, r3
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	681a      	ldr	r2, [r3, #0]
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	601a      	str	r2, [r3, #0]
 80062d4:	e008      	b.n	80062e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80062d6:	4b0c      	ldr	r3, [pc, #48]	; (8006308 <prvInsertBlockIntoFreeList+0xb0>)
 80062d8:	681a      	ldr	r2, [r3, #0]
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	601a      	str	r2, [r3, #0]
 80062de:	e003      	b.n	80062e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681a      	ldr	r2, [r3, #0]
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80062e8:	68fa      	ldr	r2, [r7, #12]
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	429a      	cmp	r2, r3
 80062ee:	d002      	beq.n	80062f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	687a      	ldr	r2, [r7, #4]
 80062f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80062f6:	bf00      	nop
 80062f8:	3714      	adds	r7, #20
 80062fa:	46bd      	mov	sp, r7
 80062fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006300:	4770      	bx	lr
 8006302:	bf00      	nop
 8006304:	20004a50 	.word	0x20004a50
 8006308:	20004a58 	.word	0x20004a58

0800630c <siprintf>:
 800630c:	b40e      	push	{r1, r2, r3}
 800630e:	b500      	push	{lr}
 8006310:	b09c      	sub	sp, #112	; 0x70
 8006312:	ab1d      	add	r3, sp, #116	; 0x74
 8006314:	9002      	str	r0, [sp, #8]
 8006316:	9006      	str	r0, [sp, #24]
 8006318:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800631c:	4809      	ldr	r0, [pc, #36]	; (8006344 <siprintf+0x38>)
 800631e:	9107      	str	r1, [sp, #28]
 8006320:	9104      	str	r1, [sp, #16]
 8006322:	4909      	ldr	r1, [pc, #36]	; (8006348 <siprintf+0x3c>)
 8006324:	f853 2b04 	ldr.w	r2, [r3], #4
 8006328:	9105      	str	r1, [sp, #20]
 800632a:	6800      	ldr	r0, [r0, #0]
 800632c:	9301      	str	r3, [sp, #4]
 800632e:	a902      	add	r1, sp, #8
 8006330:	f000 f9a0 	bl	8006674 <_svfiprintf_r>
 8006334:	9b02      	ldr	r3, [sp, #8]
 8006336:	2200      	movs	r2, #0
 8006338:	701a      	strb	r2, [r3, #0]
 800633a:	b01c      	add	sp, #112	; 0x70
 800633c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006340:	b003      	add	sp, #12
 8006342:	4770      	bx	lr
 8006344:	2000005c 	.word	0x2000005c
 8006348:	ffff0208 	.word	0xffff0208

0800634c <memset>:
 800634c:	4402      	add	r2, r0
 800634e:	4603      	mov	r3, r0
 8006350:	4293      	cmp	r3, r2
 8006352:	d100      	bne.n	8006356 <memset+0xa>
 8006354:	4770      	bx	lr
 8006356:	f803 1b01 	strb.w	r1, [r3], #1
 800635a:	e7f9      	b.n	8006350 <memset+0x4>

0800635c <__errno>:
 800635c:	4b01      	ldr	r3, [pc, #4]	; (8006364 <__errno+0x8>)
 800635e:	6818      	ldr	r0, [r3, #0]
 8006360:	4770      	bx	lr
 8006362:	bf00      	nop
 8006364:	2000005c 	.word	0x2000005c

08006368 <__libc_init_array>:
 8006368:	b570      	push	{r4, r5, r6, lr}
 800636a:	4d0d      	ldr	r5, [pc, #52]	; (80063a0 <__libc_init_array+0x38>)
 800636c:	4c0d      	ldr	r4, [pc, #52]	; (80063a4 <__libc_init_array+0x3c>)
 800636e:	1b64      	subs	r4, r4, r5
 8006370:	10a4      	asrs	r4, r4, #2
 8006372:	2600      	movs	r6, #0
 8006374:	42a6      	cmp	r6, r4
 8006376:	d109      	bne.n	800638c <__libc_init_array+0x24>
 8006378:	4d0b      	ldr	r5, [pc, #44]	; (80063a8 <__libc_init_array+0x40>)
 800637a:	4c0c      	ldr	r4, [pc, #48]	; (80063ac <__libc_init_array+0x44>)
 800637c:	f000 fc6a 	bl	8006c54 <_init>
 8006380:	1b64      	subs	r4, r4, r5
 8006382:	10a4      	asrs	r4, r4, #2
 8006384:	2600      	movs	r6, #0
 8006386:	42a6      	cmp	r6, r4
 8006388:	d105      	bne.n	8006396 <__libc_init_array+0x2e>
 800638a:	bd70      	pop	{r4, r5, r6, pc}
 800638c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006390:	4798      	blx	r3
 8006392:	3601      	adds	r6, #1
 8006394:	e7ee      	b.n	8006374 <__libc_init_array+0xc>
 8006396:	f855 3b04 	ldr.w	r3, [r5], #4
 800639a:	4798      	blx	r3
 800639c:	3601      	adds	r6, #1
 800639e:	e7f2      	b.n	8006386 <__libc_init_array+0x1e>
 80063a0:	08006d5c 	.word	0x08006d5c
 80063a4:	08006d5c 	.word	0x08006d5c
 80063a8:	08006d5c 	.word	0x08006d5c
 80063ac:	08006d60 	.word	0x08006d60

080063b0 <__retarget_lock_acquire_recursive>:
 80063b0:	4770      	bx	lr

080063b2 <__retarget_lock_release_recursive>:
 80063b2:	4770      	bx	lr

080063b4 <memcpy>:
 80063b4:	440a      	add	r2, r1
 80063b6:	4291      	cmp	r1, r2
 80063b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80063bc:	d100      	bne.n	80063c0 <memcpy+0xc>
 80063be:	4770      	bx	lr
 80063c0:	b510      	push	{r4, lr}
 80063c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80063c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80063ca:	4291      	cmp	r1, r2
 80063cc:	d1f9      	bne.n	80063c2 <memcpy+0xe>
 80063ce:	bd10      	pop	{r4, pc}

080063d0 <_free_r>:
 80063d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80063d2:	2900      	cmp	r1, #0
 80063d4:	d044      	beq.n	8006460 <_free_r+0x90>
 80063d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80063da:	9001      	str	r0, [sp, #4]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	f1a1 0404 	sub.w	r4, r1, #4
 80063e2:	bfb8      	it	lt
 80063e4:	18e4      	addlt	r4, r4, r3
 80063e6:	f000 f8df 	bl	80065a8 <__malloc_lock>
 80063ea:	4a1e      	ldr	r2, [pc, #120]	; (8006464 <_free_r+0x94>)
 80063ec:	9801      	ldr	r0, [sp, #4]
 80063ee:	6813      	ldr	r3, [r2, #0]
 80063f0:	b933      	cbnz	r3, 8006400 <_free_r+0x30>
 80063f2:	6063      	str	r3, [r4, #4]
 80063f4:	6014      	str	r4, [r2, #0]
 80063f6:	b003      	add	sp, #12
 80063f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80063fc:	f000 b8da 	b.w	80065b4 <__malloc_unlock>
 8006400:	42a3      	cmp	r3, r4
 8006402:	d908      	bls.n	8006416 <_free_r+0x46>
 8006404:	6825      	ldr	r5, [r4, #0]
 8006406:	1961      	adds	r1, r4, r5
 8006408:	428b      	cmp	r3, r1
 800640a:	bf01      	itttt	eq
 800640c:	6819      	ldreq	r1, [r3, #0]
 800640e:	685b      	ldreq	r3, [r3, #4]
 8006410:	1949      	addeq	r1, r1, r5
 8006412:	6021      	streq	r1, [r4, #0]
 8006414:	e7ed      	b.n	80063f2 <_free_r+0x22>
 8006416:	461a      	mov	r2, r3
 8006418:	685b      	ldr	r3, [r3, #4]
 800641a:	b10b      	cbz	r3, 8006420 <_free_r+0x50>
 800641c:	42a3      	cmp	r3, r4
 800641e:	d9fa      	bls.n	8006416 <_free_r+0x46>
 8006420:	6811      	ldr	r1, [r2, #0]
 8006422:	1855      	adds	r5, r2, r1
 8006424:	42a5      	cmp	r5, r4
 8006426:	d10b      	bne.n	8006440 <_free_r+0x70>
 8006428:	6824      	ldr	r4, [r4, #0]
 800642a:	4421      	add	r1, r4
 800642c:	1854      	adds	r4, r2, r1
 800642e:	42a3      	cmp	r3, r4
 8006430:	6011      	str	r1, [r2, #0]
 8006432:	d1e0      	bne.n	80063f6 <_free_r+0x26>
 8006434:	681c      	ldr	r4, [r3, #0]
 8006436:	685b      	ldr	r3, [r3, #4]
 8006438:	6053      	str	r3, [r2, #4]
 800643a:	440c      	add	r4, r1
 800643c:	6014      	str	r4, [r2, #0]
 800643e:	e7da      	b.n	80063f6 <_free_r+0x26>
 8006440:	d902      	bls.n	8006448 <_free_r+0x78>
 8006442:	230c      	movs	r3, #12
 8006444:	6003      	str	r3, [r0, #0]
 8006446:	e7d6      	b.n	80063f6 <_free_r+0x26>
 8006448:	6825      	ldr	r5, [r4, #0]
 800644a:	1961      	adds	r1, r4, r5
 800644c:	428b      	cmp	r3, r1
 800644e:	bf04      	itt	eq
 8006450:	6819      	ldreq	r1, [r3, #0]
 8006452:	685b      	ldreq	r3, [r3, #4]
 8006454:	6063      	str	r3, [r4, #4]
 8006456:	bf04      	itt	eq
 8006458:	1949      	addeq	r1, r1, r5
 800645a:	6021      	streq	r1, [r4, #0]
 800645c:	6054      	str	r4, [r2, #4]
 800645e:	e7ca      	b.n	80063f6 <_free_r+0x26>
 8006460:	b003      	add	sp, #12
 8006462:	bd30      	pop	{r4, r5, pc}
 8006464:	20004bb0 	.word	0x20004bb0

08006468 <sbrk_aligned>:
 8006468:	b570      	push	{r4, r5, r6, lr}
 800646a:	4e0e      	ldr	r6, [pc, #56]	; (80064a4 <sbrk_aligned+0x3c>)
 800646c:	460c      	mov	r4, r1
 800646e:	6831      	ldr	r1, [r6, #0]
 8006470:	4605      	mov	r5, r0
 8006472:	b911      	cbnz	r1, 800647a <sbrk_aligned+0x12>
 8006474:	f000 fba6 	bl	8006bc4 <_sbrk_r>
 8006478:	6030      	str	r0, [r6, #0]
 800647a:	4621      	mov	r1, r4
 800647c:	4628      	mov	r0, r5
 800647e:	f000 fba1 	bl	8006bc4 <_sbrk_r>
 8006482:	1c43      	adds	r3, r0, #1
 8006484:	d00a      	beq.n	800649c <sbrk_aligned+0x34>
 8006486:	1cc4      	adds	r4, r0, #3
 8006488:	f024 0403 	bic.w	r4, r4, #3
 800648c:	42a0      	cmp	r0, r4
 800648e:	d007      	beq.n	80064a0 <sbrk_aligned+0x38>
 8006490:	1a21      	subs	r1, r4, r0
 8006492:	4628      	mov	r0, r5
 8006494:	f000 fb96 	bl	8006bc4 <_sbrk_r>
 8006498:	3001      	adds	r0, #1
 800649a:	d101      	bne.n	80064a0 <sbrk_aligned+0x38>
 800649c:	f04f 34ff 	mov.w	r4, #4294967295
 80064a0:	4620      	mov	r0, r4
 80064a2:	bd70      	pop	{r4, r5, r6, pc}
 80064a4:	20004bb4 	.word	0x20004bb4

080064a8 <_malloc_r>:
 80064a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80064ac:	1ccd      	adds	r5, r1, #3
 80064ae:	f025 0503 	bic.w	r5, r5, #3
 80064b2:	3508      	adds	r5, #8
 80064b4:	2d0c      	cmp	r5, #12
 80064b6:	bf38      	it	cc
 80064b8:	250c      	movcc	r5, #12
 80064ba:	2d00      	cmp	r5, #0
 80064bc:	4607      	mov	r7, r0
 80064be:	db01      	blt.n	80064c4 <_malloc_r+0x1c>
 80064c0:	42a9      	cmp	r1, r5
 80064c2:	d905      	bls.n	80064d0 <_malloc_r+0x28>
 80064c4:	230c      	movs	r3, #12
 80064c6:	603b      	str	r3, [r7, #0]
 80064c8:	2600      	movs	r6, #0
 80064ca:	4630      	mov	r0, r6
 80064cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80064d0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80065a4 <_malloc_r+0xfc>
 80064d4:	f000 f868 	bl	80065a8 <__malloc_lock>
 80064d8:	f8d8 3000 	ldr.w	r3, [r8]
 80064dc:	461c      	mov	r4, r3
 80064de:	bb5c      	cbnz	r4, 8006538 <_malloc_r+0x90>
 80064e0:	4629      	mov	r1, r5
 80064e2:	4638      	mov	r0, r7
 80064e4:	f7ff ffc0 	bl	8006468 <sbrk_aligned>
 80064e8:	1c43      	adds	r3, r0, #1
 80064ea:	4604      	mov	r4, r0
 80064ec:	d155      	bne.n	800659a <_malloc_r+0xf2>
 80064ee:	f8d8 4000 	ldr.w	r4, [r8]
 80064f2:	4626      	mov	r6, r4
 80064f4:	2e00      	cmp	r6, #0
 80064f6:	d145      	bne.n	8006584 <_malloc_r+0xdc>
 80064f8:	2c00      	cmp	r4, #0
 80064fa:	d048      	beq.n	800658e <_malloc_r+0xe6>
 80064fc:	6823      	ldr	r3, [r4, #0]
 80064fe:	4631      	mov	r1, r6
 8006500:	4638      	mov	r0, r7
 8006502:	eb04 0903 	add.w	r9, r4, r3
 8006506:	f000 fb5d 	bl	8006bc4 <_sbrk_r>
 800650a:	4581      	cmp	r9, r0
 800650c:	d13f      	bne.n	800658e <_malloc_r+0xe6>
 800650e:	6821      	ldr	r1, [r4, #0]
 8006510:	1a6d      	subs	r5, r5, r1
 8006512:	4629      	mov	r1, r5
 8006514:	4638      	mov	r0, r7
 8006516:	f7ff ffa7 	bl	8006468 <sbrk_aligned>
 800651a:	3001      	adds	r0, #1
 800651c:	d037      	beq.n	800658e <_malloc_r+0xe6>
 800651e:	6823      	ldr	r3, [r4, #0]
 8006520:	442b      	add	r3, r5
 8006522:	6023      	str	r3, [r4, #0]
 8006524:	f8d8 3000 	ldr.w	r3, [r8]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d038      	beq.n	800659e <_malloc_r+0xf6>
 800652c:	685a      	ldr	r2, [r3, #4]
 800652e:	42a2      	cmp	r2, r4
 8006530:	d12b      	bne.n	800658a <_malloc_r+0xe2>
 8006532:	2200      	movs	r2, #0
 8006534:	605a      	str	r2, [r3, #4]
 8006536:	e00f      	b.n	8006558 <_malloc_r+0xb0>
 8006538:	6822      	ldr	r2, [r4, #0]
 800653a:	1b52      	subs	r2, r2, r5
 800653c:	d41f      	bmi.n	800657e <_malloc_r+0xd6>
 800653e:	2a0b      	cmp	r2, #11
 8006540:	d917      	bls.n	8006572 <_malloc_r+0xca>
 8006542:	1961      	adds	r1, r4, r5
 8006544:	42a3      	cmp	r3, r4
 8006546:	6025      	str	r5, [r4, #0]
 8006548:	bf18      	it	ne
 800654a:	6059      	strne	r1, [r3, #4]
 800654c:	6863      	ldr	r3, [r4, #4]
 800654e:	bf08      	it	eq
 8006550:	f8c8 1000 	streq.w	r1, [r8]
 8006554:	5162      	str	r2, [r4, r5]
 8006556:	604b      	str	r3, [r1, #4]
 8006558:	4638      	mov	r0, r7
 800655a:	f104 060b 	add.w	r6, r4, #11
 800655e:	f000 f829 	bl	80065b4 <__malloc_unlock>
 8006562:	f026 0607 	bic.w	r6, r6, #7
 8006566:	1d23      	adds	r3, r4, #4
 8006568:	1af2      	subs	r2, r6, r3
 800656a:	d0ae      	beq.n	80064ca <_malloc_r+0x22>
 800656c:	1b9b      	subs	r3, r3, r6
 800656e:	50a3      	str	r3, [r4, r2]
 8006570:	e7ab      	b.n	80064ca <_malloc_r+0x22>
 8006572:	42a3      	cmp	r3, r4
 8006574:	6862      	ldr	r2, [r4, #4]
 8006576:	d1dd      	bne.n	8006534 <_malloc_r+0x8c>
 8006578:	f8c8 2000 	str.w	r2, [r8]
 800657c:	e7ec      	b.n	8006558 <_malloc_r+0xb0>
 800657e:	4623      	mov	r3, r4
 8006580:	6864      	ldr	r4, [r4, #4]
 8006582:	e7ac      	b.n	80064de <_malloc_r+0x36>
 8006584:	4634      	mov	r4, r6
 8006586:	6876      	ldr	r6, [r6, #4]
 8006588:	e7b4      	b.n	80064f4 <_malloc_r+0x4c>
 800658a:	4613      	mov	r3, r2
 800658c:	e7cc      	b.n	8006528 <_malloc_r+0x80>
 800658e:	230c      	movs	r3, #12
 8006590:	603b      	str	r3, [r7, #0]
 8006592:	4638      	mov	r0, r7
 8006594:	f000 f80e 	bl	80065b4 <__malloc_unlock>
 8006598:	e797      	b.n	80064ca <_malloc_r+0x22>
 800659a:	6025      	str	r5, [r4, #0]
 800659c:	e7dc      	b.n	8006558 <_malloc_r+0xb0>
 800659e:	605b      	str	r3, [r3, #4]
 80065a0:	deff      	udf	#255	; 0xff
 80065a2:	bf00      	nop
 80065a4:	20004bb0 	.word	0x20004bb0

080065a8 <__malloc_lock>:
 80065a8:	4801      	ldr	r0, [pc, #4]	; (80065b0 <__malloc_lock+0x8>)
 80065aa:	f7ff bf01 	b.w	80063b0 <__retarget_lock_acquire_recursive>
 80065ae:	bf00      	nop
 80065b0:	20004bac 	.word	0x20004bac

080065b4 <__malloc_unlock>:
 80065b4:	4801      	ldr	r0, [pc, #4]	; (80065bc <__malloc_unlock+0x8>)
 80065b6:	f7ff befc 	b.w	80063b2 <__retarget_lock_release_recursive>
 80065ba:	bf00      	nop
 80065bc:	20004bac 	.word	0x20004bac

080065c0 <__ssputs_r>:
 80065c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80065c4:	688e      	ldr	r6, [r1, #8]
 80065c6:	461f      	mov	r7, r3
 80065c8:	42be      	cmp	r6, r7
 80065ca:	680b      	ldr	r3, [r1, #0]
 80065cc:	4682      	mov	sl, r0
 80065ce:	460c      	mov	r4, r1
 80065d0:	4690      	mov	r8, r2
 80065d2:	d82c      	bhi.n	800662e <__ssputs_r+0x6e>
 80065d4:	898a      	ldrh	r2, [r1, #12]
 80065d6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80065da:	d026      	beq.n	800662a <__ssputs_r+0x6a>
 80065dc:	6965      	ldr	r5, [r4, #20]
 80065de:	6909      	ldr	r1, [r1, #16]
 80065e0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80065e4:	eba3 0901 	sub.w	r9, r3, r1
 80065e8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80065ec:	1c7b      	adds	r3, r7, #1
 80065ee:	444b      	add	r3, r9
 80065f0:	106d      	asrs	r5, r5, #1
 80065f2:	429d      	cmp	r5, r3
 80065f4:	bf38      	it	cc
 80065f6:	461d      	movcc	r5, r3
 80065f8:	0553      	lsls	r3, r2, #21
 80065fa:	d527      	bpl.n	800664c <__ssputs_r+0x8c>
 80065fc:	4629      	mov	r1, r5
 80065fe:	f7ff ff53 	bl	80064a8 <_malloc_r>
 8006602:	4606      	mov	r6, r0
 8006604:	b360      	cbz	r0, 8006660 <__ssputs_r+0xa0>
 8006606:	6921      	ldr	r1, [r4, #16]
 8006608:	464a      	mov	r2, r9
 800660a:	f7ff fed3 	bl	80063b4 <memcpy>
 800660e:	89a3      	ldrh	r3, [r4, #12]
 8006610:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006614:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006618:	81a3      	strh	r3, [r4, #12]
 800661a:	6126      	str	r6, [r4, #16]
 800661c:	6165      	str	r5, [r4, #20]
 800661e:	444e      	add	r6, r9
 8006620:	eba5 0509 	sub.w	r5, r5, r9
 8006624:	6026      	str	r6, [r4, #0]
 8006626:	60a5      	str	r5, [r4, #8]
 8006628:	463e      	mov	r6, r7
 800662a:	42be      	cmp	r6, r7
 800662c:	d900      	bls.n	8006630 <__ssputs_r+0x70>
 800662e:	463e      	mov	r6, r7
 8006630:	6820      	ldr	r0, [r4, #0]
 8006632:	4632      	mov	r2, r6
 8006634:	4641      	mov	r1, r8
 8006636:	f000 faab 	bl	8006b90 <memmove>
 800663a:	68a3      	ldr	r3, [r4, #8]
 800663c:	1b9b      	subs	r3, r3, r6
 800663e:	60a3      	str	r3, [r4, #8]
 8006640:	6823      	ldr	r3, [r4, #0]
 8006642:	4433      	add	r3, r6
 8006644:	6023      	str	r3, [r4, #0]
 8006646:	2000      	movs	r0, #0
 8006648:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800664c:	462a      	mov	r2, r5
 800664e:	f000 fac9 	bl	8006be4 <_realloc_r>
 8006652:	4606      	mov	r6, r0
 8006654:	2800      	cmp	r0, #0
 8006656:	d1e0      	bne.n	800661a <__ssputs_r+0x5a>
 8006658:	6921      	ldr	r1, [r4, #16]
 800665a:	4650      	mov	r0, sl
 800665c:	f7ff feb8 	bl	80063d0 <_free_r>
 8006660:	230c      	movs	r3, #12
 8006662:	f8ca 3000 	str.w	r3, [sl]
 8006666:	89a3      	ldrh	r3, [r4, #12]
 8006668:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800666c:	81a3      	strh	r3, [r4, #12]
 800666e:	f04f 30ff 	mov.w	r0, #4294967295
 8006672:	e7e9      	b.n	8006648 <__ssputs_r+0x88>

08006674 <_svfiprintf_r>:
 8006674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006678:	4698      	mov	r8, r3
 800667a:	898b      	ldrh	r3, [r1, #12]
 800667c:	061b      	lsls	r3, r3, #24
 800667e:	b09d      	sub	sp, #116	; 0x74
 8006680:	4607      	mov	r7, r0
 8006682:	460d      	mov	r5, r1
 8006684:	4614      	mov	r4, r2
 8006686:	d50e      	bpl.n	80066a6 <_svfiprintf_r+0x32>
 8006688:	690b      	ldr	r3, [r1, #16]
 800668a:	b963      	cbnz	r3, 80066a6 <_svfiprintf_r+0x32>
 800668c:	2140      	movs	r1, #64	; 0x40
 800668e:	f7ff ff0b 	bl	80064a8 <_malloc_r>
 8006692:	6028      	str	r0, [r5, #0]
 8006694:	6128      	str	r0, [r5, #16]
 8006696:	b920      	cbnz	r0, 80066a2 <_svfiprintf_r+0x2e>
 8006698:	230c      	movs	r3, #12
 800669a:	603b      	str	r3, [r7, #0]
 800669c:	f04f 30ff 	mov.w	r0, #4294967295
 80066a0:	e0d0      	b.n	8006844 <_svfiprintf_r+0x1d0>
 80066a2:	2340      	movs	r3, #64	; 0x40
 80066a4:	616b      	str	r3, [r5, #20]
 80066a6:	2300      	movs	r3, #0
 80066a8:	9309      	str	r3, [sp, #36]	; 0x24
 80066aa:	2320      	movs	r3, #32
 80066ac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80066b0:	f8cd 800c 	str.w	r8, [sp, #12]
 80066b4:	2330      	movs	r3, #48	; 0x30
 80066b6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800685c <_svfiprintf_r+0x1e8>
 80066ba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80066be:	f04f 0901 	mov.w	r9, #1
 80066c2:	4623      	mov	r3, r4
 80066c4:	469a      	mov	sl, r3
 80066c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80066ca:	b10a      	cbz	r2, 80066d0 <_svfiprintf_r+0x5c>
 80066cc:	2a25      	cmp	r2, #37	; 0x25
 80066ce:	d1f9      	bne.n	80066c4 <_svfiprintf_r+0x50>
 80066d0:	ebba 0b04 	subs.w	fp, sl, r4
 80066d4:	d00b      	beq.n	80066ee <_svfiprintf_r+0x7a>
 80066d6:	465b      	mov	r3, fp
 80066d8:	4622      	mov	r2, r4
 80066da:	4629      	mov	r1, r5
 80066dc:	4638      	mov	r0, r7
 80066de:	f7ff ff6f 	bl	80065c0 <__ssputs_r>
 80066e2:	3001      	adds	r0, #1
 80066e4:	f000 80a9 	beq.w	800683a <_svfiprintf_r+0x1c6>
 80066e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80066ea:	445a      	add	r2, fp
 80066ec:	9209      	str	r2, [sp, #36]	; 0x24
 80066ee:	f89a 3000 	ldrb.w	r3, [sl]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	f000 80a1 	beq.w	800683a <_svfiprintf_r+0x1c6>
 80066f8:	2300      	movs	r3, #0
 80066fa:	f04f 32ff 	mov.w	r2, #4294967295
 80066fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006702:	f10a 0a01 	add.w	sl, sl, #1
 8006706:	9304      	str	r3, [sp, #16]
 8006708:	9307      	str	r3, [sp, #28]
 800670a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800670e:	931a      	str	r3, [sp, #104]	; 0x68
 8006710:	4654      	mov	r4, sl
 8006712:	2205      	movs	r2, #5
 8006714:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006718:	4850      	ldr	r0, [pc, #320]	; (800685c <_svfiprintf_r+0x1e8>)
 800671a:	f7f9 fd61 	bl	80001e0 <memchr>
 800671e:	9a04      	ldr	r2, [sp, #16]
 8006720:	b9d8      	cbnz	r0, 800675a <_svfiprintf_r+0xe6>
 8006722:	06d0      	lsls	r0, r2, #27
 8006724:	bf44      	itt	mi
 8006726:	2320      	movmi	r3, #32
 8006728:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800672c:	0711      	lsls	r1, r2, #28
 800672e:	bf44      	itt	mi
 8006730:	232b      	movmi	r3, #43	; 0x2b
 8006732:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006736:	f89a 3000 	ldrb.w	r3, [sl]
 800673a:	2b2a      	cmp	r3, #42	; 0x2a
 800673c:	d015      	beq.n	800676a <_svfiprintf_r+0xf6>
 800673e:	9a07      	ldr	r2, [sp, #28]
 8006740:	4654      	mov	r4, sl
 8006742:	2000      	movs	r0, #0
 8006744:	f04f 0c0a 	mov.w	ip, #10
 8006748:	4621      	mov	r1, r4
 800674a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800674e:	3b30      	subs	r3, #48	; 0x30
 8006750:	2b09      	cmp	r3, #9
 8006752:	d94d      	bls.n	80067f0 <_svfiprintf_r+0x17c>
 8006754:	b1b0      	cbz	r0, 8006784 <_svfiprintf_r+0x110>
 8006756:	9207      	str	r2, [sp, #28]
 8006758:	e014      	b.n	8006784 <_svfiprintf_r+0x110>
 800675a:	eba0 0308 	sub.w	r3, r0, r8
 800675e:	fa09 f303 	lsl.w	r3, r9, r3
 8006762:	4313      	orrs	r3, r2
 8006764:	9304      	str	r3, [sp, #16]
 8006766:	46a2      	mov	sl, r4
 8006768:	e7d2      	b.n	8006710 <_svfiprintf_r+0x9c>
 800676a:	9b03      	ldr	r3, [sp, #12]
 800676c:	1d19      	adds	r1, r3, #4
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	9103      	str	r1, [sp, #12]
 8006772:	2b00      	cmp	r3, #0
 8006774:	bfbb      	ittet	lt
 8006776:	425b      	neglt	r3, r3
 8006778:	f042 0202 	orrlt.w	r2, r2, #2
 800677c:	9307      	strge	r3, [sp, #28]
 800677e:	9307      	strlt	r3, [sp, #28]
 8006780:	bfb8      	it	lt
 8006782:	9204      	strlt	r2, [sp, #16]
 8006784:	7823      	ldrb	r3, [r4, #0]
 8006786:	2b2e      	cmp	r3, #46	; 0x2e
 8006788:	d10c      	bne.n	80067a4 <_svfiprintf_r+0x130>
 800678a:	7863      	ldrb	r3, [r4, #1]
 800678c:	2b2a      	cmp	r3, #42	; 0x2a
 800678e:	d134      	bne.n	80067fa <_svfiprintf_r+0x186>
 8006790:	9b03      	ldr	r3, [sp, #12]
 8006792:	1d1a      	adds	r2, r3, #4
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	9203      	str	r2, [sp, #12]
 8006798:	2b00      	cmp	r3, #0
 800679a:	bfb8      	it	lt
 800679c:	f04f 33ff 	movlt.w	r3, #4294967295
 80067a0:	3402      	adds	r4, #2
 80067a2:	9305      	str	r3, [sp, #20]
 80067a4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800686c <_svfiprintf_r+0x1f8>
 80067a8:	7821      	ldrb	r1, [r4, #0]
 80067aa:	2203      	movs	r2, #3
 80067ac:	4650      	mov	r0, sl
 80067ae:	f7f9 fd17 	bl	80001e0 <memchr>
 80067b2:	b138      	cbz	r0, 80067c4 <_svfiprintf_r+0x150>
 80067b4:	9b04      	ldr	r3, [sp, #16]
 80067b6:	eba0 000a 	sub.w	r0, r0, sl
 80067ba:	2240      	movs	r2, #64	; 0x40
 80067bc:	4082      	lsls	r2, r0
 80067be:	4313      	orrs	r3, r2
 80067c0:	3401      	adds	r4, #1
 80067c2:	9304      	str	r3, [sp, #16]
 80067c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80067c8:	4825      	ldr	r0, [pc, #148]	; (8006860 <_svfiprintf_r+0x1ec>)
 80067ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80067ce:	2206      	movs	r2, #6
 80067d0:	f7f9 fd06 	bl	80001e0 <memchr>
 80067d4:	2800      	cmp	r0, #0
 80067d6:	d038      	beq.n	800684a <_svfiprintf_r+0x1d6>
 80067d8:	4b22      	ldr	r3, [pc, #136]	; (8006864 <_svfiprintf_r+0x1f0>)
 80067da:	bb1b      	cbnz	r3, 8006824 <_svfiprintf_r+0x1b0>
 80067dc:	9b03      	ldr	r3, [sp, #12]
 80067de:	3307      	adds	r3, #7
 80067e0:	f023 0307 	bic.w	r3, r3, #7
 80067e4:	3308      	adds	r3, #8
 80067e6:	9303      	str	r3, [sp, #12]
 80067e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067ea:	4433      	add	r3, r6
 80067ec:	9309      	str	r3, [sp, #36]	; 0x24
 80067ee:	e768      	b.n	80066c2 <_svfiprintf_r+0x4e>
 80067f0:	fb0c 3202 	mla	r2, ip, r2, r3
 80067f4:	460c      	mov	r4, r1
 80067f6:	2001      	movs	r0, #1
 80067f8:	e7a6      	b.n	8006748 <_svfiprintf_r+0xd4>
 80067fa:	2300      	movs	r3, #0
 80067fc:	3401      	adds	r4, #1
 80067fe:	9305      	str	r3, [sp, #20]
 8006800:	4619      	mov	r1, r3
 8006802:	f04f 0c0a 	mov.w	ip, #10
 8006806:	4620      	mov	r0, r4
 8006808:	f810 2b01 	ldrb.w	r2, [r0], #1
 800680c:	3a30      	subs	r2, #48	; 0x30
 800680e:	2a09      	cmp	r2, #9
 8006810:	d903      	bls.n	800681a <_svfiprintf_r+0x1a6>
 8006812:	2b00      	cmp	r3, #0
 8006814:	d0c6      	beq.n	80067a4 <_svfiprintf_r+0x130>
 8006816:	9105      	str	r1, [sp, #20]
 8006818:	e7c4      	b.n	80067a4 <_svfiprintf_r+0x130>
 800681a:	fb0c 2101 	mla	r1, ip, r1, r2
 800681e:	4604      	mov	r4, r0
 8006820:	2301      	movs	r3, #1
 8006822:	e7f0      	b.n	8006806 <_svfiprintf_r+0x192>
 8006824:	ab03      	add	r3, sp, #12
 8006826:	9300      	str	r3, [sp, #0]
 8006828:	462a      	mov	r2, r5
 800682a:	4b0f      	ldr	r3, [pc, #60]	; (8006868 <_svfiprintf_r+0x1f4>)
 800682c:	a904      	add	r1, sp, #16
 800682e:	4638      	mov	r0, r7
 8006830:	f3af 8000 	nop.w
 8006834:	1c42      	adds	r2, r0, #1
 8006836:	4606      	mov	r6, r0
 8006838:	d1d6      	bne.n	80067e8 <_svfiprintf_r+0x174>
 800683a:	89ab      	ldrh	r3, [r5, #12]
 800683c:	065b      	lsls	r3, r3, #25
 800683e:	f53f af2d 	bmi.w	800669c <_svfiprintf_r+0x28>
 8006842:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006844:	b01d      	add	sp, #116	; 0x74
 8006846:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800684a:	ab03      	add	r3, sp, #12
 800684c:	9300      	str	r3, [sp, #0]
 800684e:	462a      	mov	r2, r5
 8006850:	4b05      	ldr	r3, [pc, #20]	; (8006868 <_svfiprintf_r+0x1f4>)
 8006852:	a904      	add	r1, sp, #16
 8006854:	4638      	mov	r0, r7
 8006856:	f000 f879 	bl	800694c <_printf_i>
 800685a:	e7eb      	b.n	8006834 <_svfiprintf_r+0x1c0>
 800685c:	08006d20 	.word	0x08006d20
 8006860:	08006d2a 	.word	0x08006d2a
 8006864:	00000000 	.word	0x00000000
 8006868:	080065c1 	.word	0x080065c1
 800686c:	08006d26 	.word	0x08006d26

08006870 <_printf_common>:
 8006870:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006874:	4616      	mov	r6, r2
 8006876:	4699      	mov	r9, r3
 8006878:	688a      	ldr	r2, [r1, #8]
 800687a:	690b      	ldr	r3, [r1, #16]
 800687c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006880:	4293      	cmp	r3, r2
 8006882:	bfb8      	it	lt
 8006884:	4613      	movlt	r3, r2
 8006886:	6033      	str	r3, [r6, #0]
 8006888:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800688c:	4607      	mov	r7, r0
 800688e:	460c      	mov	r4, r1
 8006890:	b10a      	cbz	r2, 8006896 <_printf_common+0x26>
 8006892:	3301      	adds	r3, #1
 8006894:	6033      	str	r3, [r6, #0]
 8006896:	6823      	ldr	r3, [r4, #0]
 8006898:	0699      	lsls	r1, r3, #26
 800689a:	bf42      	ittt	mi
 800689c:	6833      	ldrmi	r3, [r6, #0]
 800689e:	3302      	addmi	r3, #2
 80068a0:	6033      	strmi	r3, [r6, #0]
 80068a2:	6825      	ldr	r5, [r4, #0]
 80068a4:	f015 0506 	ands.w	r5, r5, #6
 80068a8:	d106      	bne.n	80068b8 <_printf_common+0x48>
 80068aa:	f104 0a19 	add.w	sl, r4, #25
 80068ae:	68e3      	ldr	r3, [r4, #12]
 80068b0:	6832      	ldr	r2, [r6, #0]
 80068b2:	1a9b      	subs	r3, r3, r2
 80068b4:	42ab      	cmp	r3, r5
 80068b6:	dc26      	bgt.n	8006906 <_printf_common+0x96>
 80068b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80068bc:	1e13      	subs	r3, r2, #0
 80068be:	6822      	ldr	r2, [r4, #0]
 80068c0:	bf18      	it	ne
 80068c2:	2301      	movne	r3, #1
 80068c4:	0692      	lsls	r2, r2, #26
 80068c6:	d42b      	bmi.n	8006920 <_printf_common+0xb0>
 80068c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80068cc:	4649      	mov	r1, r9
 80068ce:	4638      	mov	r0, r7
 80068d0:	47c0      	blx	r8
 80068d2:	3001      	adds	r0, #1
 80068d4:	d01e      	beq.n	8006914 <_printf_common+0xa4>
 80068d6:	6823      	ldr	r3, [r4, #0]
 80068d8:	6922      	ldr	r2, [r4, #16]
 80068da:	f003 0306 	and.w	r3, r3, #6
 80068de:	2b04      	cmp	r3, #4
 80068e0:	bf02      	ittt	eq
 80068e2:	68e5      	ldreq	r5, [r4, #12]
 80068e4:	6833      	ldreq	r3, [r6, #0]
 80068e6:	1aed      	subeq	r5, r5, r3
 80068e8:	68a3      	ldr	r3, [r4, #8]
 80068ea:	bf0c      	ite	eq
 80068ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80068f0:	2500      	movne	r5, #0
 80068f2:	4293      	cmp	r3, r2
 80068f4:	bfc4      	itt	gt
 80068f6:	1a9b      	subgt	r3, r3, r2
 80068f8:	18ed      	addgt	r5, r5, r3
 80068fa:	2600      	movs	r6, #0
 80068fc:	341a      	adds	r4, #26
 80068fe:	42b5      	cmp	r5, r6
 8006900:	d11a      	bne.n	8006938 <_printf_common+0xc8>
 8006902:	2000      	movs	r0, #0
 8006904:	e008      	b.n	8006918 <_printf_common+0xa8>
 8006906:	2301      	movs	r3, #1
 8006908:	4652      	mov	r2, sl
 800690a:	4649      	mov	r1, r9
 800690c:	4638      	mov	r0, r7
 800690e:	47c0      	blx	r8
 8006910:	3001      	adds	r0, #1
 8006912:	d103      	bne.n	800691c <_printf_common+0xac>
 8006914:	f04f 30ff 	mov.w	r0, #4294967295
 8006918:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800691c:	3501      	adds	r5, #1
 800691e:	e7c6      	b.n	80068ae <_printf_common+0x3e>
 8006920:	18e1      	adds	r1, r4, r3
 8006922:	1c5a      	adds	r2, r3, #1
 8006924:	2030      	movs	r0, #48	; 0x30
 8006926:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800692a:	4422      	add	r2, r4
 800692c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006930:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006934:	3302      	adds	r3, #2
 8006936:	e7c7      	b.n	80068c8 <_printf_common+0x58>
 8006938:	2301      	movs	r3, #1
 800693a:	4622      	mov	r2, r4
 800693c:	4649      	mov	r1, r9
 800693e:	4638      	mov	r0, r7
 8006940:	47c0      	blx	r8
 8006942:	3001      	adds	r0, #1
 8006944:	d0e6      	beq.n	8006914 <_printf_common+0xa4>
 8006946:	3601      	adds	r6, #1
 8006948:	e7d9      	b.n	80068fe <_printf_common+0x8e>
	...

0800694c <_printf_i>:
 800694c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006950:	7e0f      	ldrb	r7, [r1, #24]
 8006952:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006954:	2f78      	cmp	r7, #120	; 0x78
 8006956:	4691      	mov	r9, r2
 8006958:	4680      	mov	r8, r0
 800695a:	460c      	mov	r4, r1
 800695c:	469a      	mov	sl, r3
 800695e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006962:	d807      	bhi.n	8006974 <_printf_i+0x28>
 8006964:	2f62      	cmp	r7, #98	; 0x62
 8006966:	d80a      	bhi.n	800697e <_printf_i+0x32>
 8006968:	2f00      	cmp	r7, #0
 800696a:	f000 80d4 	beq.w	8006b16 <_printf_i+0x1ca>
 800696e:	2f58      	cmp	r7, #88	; 0x58
 8006970:	f000 80c0 	beq.w	8006af4 <_printf_i+0x1a8>
 8006974:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006978:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800697c:	e03a      	b.n	80069f4 <_printf_i+0xa8>
 800697e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006982:	2b15      	cmp	r3, #21
 8006984:	d8f6      	bhi.n	8006974 <_printf_i+0x28>
 8006986:	a101      	add	r1, pc, #4	; (adr r1, 800698c <_printf_i+0x40>)
 8006988:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800698c:	080069e5 	.word	0x080069e5
 8006990:	080069f9 	.word	0x080069f9
 8006994:	08006975 	.word	0x08006975
 8006998:	08006975 	.word	0x08006975
 800699c:	08006975 	.word	0x08006975
 80069a0:	08006975 	.word	0x08006975
 80069a4:	080069f9 	.word	0x080069f9
 80069a8:	08006975 	.word	0x08006975
 80069ac:	08006975 	.word	0x08006975
 80069b0:	08006975 	.word	0x08006975
 80069b4:	08006975 	.word	0x08006975
 80069b8:	08006afd 	.word	0x08006afd
 80069bc:	08006a25 	.word	0x08006a25
 80069c0:	08006ab7 	.word	0x08006ab7
 80069c4:	08006975 	.word	0x08006975
 80069c8:	08006975 	.word	0x08006975
 80069cc:	08006b1f 	.word	0x08006b1f
 80069d0:	08006975 	.word	0x08006975
 80069d4:	08006a25 	.word	0x08006a25
 80069d8:	08006975 	.word	0x08006975
 80069dc:	08006975 	.word	0x08006975
 80069e0:	08006abf 	.word	0x08006abf
 80069e4:	682b      	ldr	r3, [r5, #0]
 80069e6:	1d1a      	adds	r2, r3, #4
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	602a      	str	r2, [r5, #0]
 80069ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80069f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80069f4:	2301      	movs	r3, #1
 80069f6:	e09f      	b.n	8006b38 <_printf_i+0x1ec>
 80069f8:	6820      	ldr	r0, [r4, #0]
 80069fa:	682b      	ldr	r3, [r5, #0]
 80069fc:	0607      	lsls	r7, r0, #24
 80069fe:	f103 0104 	add.w	r1, r3, #4
 8006a02:	6029      	str	r1, [r5, #0]
 8006a04:	d501      	bpl.n	8006a0a <_printf_i+0xbe>
 8006a06:	681e      	ldr	r6, [r3, #0]
 8006a08:	e003      	b.n	8006a12 <_printf_i+0xc6>
 8006a0a:	0646      	lsls	r6, r0, #25
 8006a0c:	d5fb      	bpl.n	8006a06 <_printf_i+0xba>
 8006a0e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006a12:	2e00      	cmp	r6, #0
 8006a14:	da03      	bge.n	8006a1e <_printf_i+0xd2>
 8006a16:	232d      	movs	r3, #45	; 0x2d
 8006a18:	4276      	negs	r6, r6
 8006a1a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a1e:	485a      	ldr	r0, [pc, #360]	; (8006b88 <_printf_i+0x23c>)
 8006a20:	230a      	movs	r3, #10
 8006a22:	e012      	b.n	8006a4a <_printf_i+0xfe>
 8006a24:	682b      	ldr	r3, [r5, #0]
 8006a26:	6820      	ldr	r0, [r4, #0]
 8006a28:	1d19      	adds	r1, r3, #4
 8006a2a:	6029      	str	r1, [r5, #0]
 8006a2c:	0605      	lsls	r5, r0, #24
 8006a2e:	d501      	bpl.n	8006a34 <_printf_i+0xe8>
 8006a30:	681e      	ldr	r6, [r3, #0]
 8006a32:	e002      	b.n	8006a3a <_printf_i+0xee>
 8006a34:	0641      	lsls	r1, r0, #25
 8006a36:	d5fb      	bpl.n	8006a30 <_printf_i+0xe4>
 8006a38:	881e      	ldrh	r6, [r3, #0]
 8006a3a:	4853      	ldr	r0, [pc, #332]	; (8006b88 <_printf_i+0x23c>)
 8006a3c:	2f6f      	cmp	r7, #111	; 0x6f
 8006a3e:	bf0c      	ite	eq
 8006a40:	2308      	moveq	r3, #8
 8006a42:	230a      	movne	r3, #10
 8006a44:	2100      	movs	r1, #0
 8006a46:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006a4a:	6865      	ldr	r5, [r4, #4]
 8006a4c:	60a5      	str	r5, [r4, #8]
 8006a4e:	2d00      	cmp	r5, #0
 8006a50:	bfa2      	ittt	ge
 8006a52:	6821      	ldrge	r1, [r4, #0]
 8006a54:	f021 0104 	bicge.w	r1, r1, #4
 8006a58:	6021      	strge	r1, [r4, #0]
 8006a5a:	b90e      	cbnz	r6, 8006a60 <_printf_i+0x114>
 8006a5c:	2d00      	cmp	r5, #0
 8006a5e:	d04b      	beq.n	8006af8 <_printf_i+0x1ac>
 8006a60:	4615      	mov	r5, r2
 8006a62:	fbb6 f1f3 	udiv	r1, r6, r3
 8006a66:	fb03 6711 	mls	r7, r3, r1, r6
 8006a6a:	5dc7      	ldrb	r7, [r0, r7]
 8006a6c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006a70:	4637      	mov	r7, r6
 8006a72:	42bb      	cmp	r3, r7
 8006a74:	460e      	mov	r6, r1
 8006a76:	d9f4      	bls.n	8006a62 <_printf_i+0x116>
 8006a78:	2b08      	cmp	r3, #8
 8006a7a:	d10b      	bne.n	8006a94 <_printf_i+0x148>
 8006a7c:	6823      	ldr	r3, [r4, #0]
 8006a7e:	07de      	lsls	r6, r3, #31
 8006a80:	d508      	bpl.n	8006a94 <_printf_i+0x148>
 8006a82:	6923      	ldr	r3, [r4, #16]
 8006a84:	6861      	ldr	r1, [r4, #4]
 8006a86:	4299      	cmp	r1, r3
 8006a88:	bfde      	ittt	le
 8006a8a:	2330      	movle	r3, #48	; 0x30
 8006a8c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006a90:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006a94:	1b52      	subs	r2, r2, r5
 8006a96:	6122      	str	r2, [r4, #16]
 8006a98:	f8cd a000 	str.w	sl, [sp]
 8006a9c:	464b      	mov	r3, r9
 8006a9e:	aa03      	add	r2, sp, #12
 8006aa0:	4621      	mov	r1, r4
 8006aa2:	4640      	mov	r0, r8
 8006aa4:	f7ff fee4 	bl	8006870 <_printf_common>
 8006aa8:	3001      	adds	r0, #1
 8006aaa:	d14a      	bne.n	8006b42 <_printf_i+0x1f6>
 8006aac:	f04f 30ff 	mov.w	r0, #4294967295
 8006ab0:	b004      	add	sp, #16
 8006ab2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ab6:	6823      	ldr	r3, [r4, #0]
 8006ab8:	f043 0320 	orr.w	r3, r3, #32
 8006abc:	6023      	str	r3, [r4, #0]
 8006abe:	4833      	ldr	r0, [pc, #204]	; (8006b8c <_printf_i+0x240>)
 8006ac0:	2778      	movs	r7, #120	; 0x78
 8006ac2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006ac6:	6823      	ldr	r3, [r4, #0]
 8006ac8:	6829      	ldr	r1, [r5, #0]
 8006aca:	061f      	lsls	r7, r3, #24
 8006acc:	f851 6b04 	ldr.w	r6, [r1], #4
 8006ad0:	d402      	bmi.n	8006ad8 <_printf_i+0x18c>
 8006ad2:	065f      	lsls	r7, r3, #25
 8006ad4:	bf48      	it	mi
 8006ad6:	b2b6      	uxthmi	r6, r6
 8006ad8:	07df      	lsls	r7, r3, #31
 8006ada:	bf48      	it	mi
 8006adc:	f043 0320 	orrmi.w	r3, r3, #32
 8006ae0:	6029      	str	r1, [r5, #0]
 8006ae2:	bf48      	it	mi
 8006ae4:	6023      	strmi	r3, [r4, #0]
 8006ae6:	b91e      	cbnz	r6, 8006af0 <_printf_i+0x1a4>
 8006ae8:	6823      	ldr	r3, [r4, #0]
 8006aea:	f023 0320 	bic.w	r3, r3, #32
 8006aee:	6023      	str	r3, [r4, #0]
 8006af0:	2310      	movs	r3, #16
 8006af2:	e7a7      	b.n	8006a44 <_printf_i+0xf8>
 8006af4:	4824      	ldr	r0, [pc, #144]	; (8006b88 <_printf_i+0x23c>)
 8006af6:	e7e4      	b.n	8006ac2 <_printf_i+0x176>
 8006af8:	4615      	mov	r5, r2
 8006afa:	e7bd      	b.n	8006a78 <_printf_i+0x12c>
 8006afc:	682b      	ldr	r3, [r5, #0]
 8006afe:	6826      	ldr	r6, [r4, #0]
 8006b00:	6961      	ldr	r1, [r4, #20]
 8006b02:	1d18      	adds	r0, r3, #4
 8006b04:	6028      	str	r0, [r5, #0]
 8006b06:	0635      	lsls	r5, r6, #24
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	d501      	bpl.n	8006b10 <_printf_i+0x1c4>
 8006b0c:	6019      	str	r1, [r3, #0]
 8006b0e:	e002      	b.n	8006b16 <_printf_i+0x1ca>
 8006b10:	0670      	lsls	r0, r6, #25
 8006b12:	d5fb      	bpl.n	8006b0c <_printf_i+0x1c0>
 8006b14:	8019      	strh	r1, [r3, #0]
 8006b16:	2300      	movs	r3, #0
 8006b18:	6123      	str	r3, [r4, #16]
 8006b1a:	4615      	mov	r5, r2
 8006b1c:	e7bc      	b.n	8006a98 <_printf_i+0x14c>
 8006b1e:	682b      	ldr	r3, [r5, #0]
 8006b20:	1d1a      	adds	r2, r3, #4
 8006b22:	602a      	str	r2, [r5, #0]
 8006b24:	681d      	ldr	r5, [r3, #0]
 8006b26:	6862      	ldr	r2, [r4, #4]
 8006b28:	2100      	movs	r1, #0
 8006b2a:	4628      	mov	r0, r5
 8006b2c:	f7f9 fb58 	bl	80001e0 <memchr>
 8006b30:	b108      	cbz	r0, 8006b36 <_printf_i+0x1ea>
 8006b32:	1b40      	subs	r0, r0, r5
 8006b34:	6060      	str	r0, [r4, #4]
 8006b36:	6863      	ldr	r3, [r4, #4]
 8006b38:	6123      	str	r3, [r4, #16]
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b40:	e7aa      	b.n	8006a98 <_printf_i+0x14c>
 8006b42:	6923      	ldr	r3, [r4, #16]
 8006b44:	462a      	mov	r2, r5
 8006b46:	4649      	mov	r1, r9
 8006b48:	4640      	mov	r0, r8
 8006b4a:	47d0      	blx	sl
 8006b4c:	3001      	adds	r0, #1
 8006b4e:	d0ad      	beq.n	8006aac <_printf_i+0x160>
 8006b50:	6823      	ldr	r3, [r4, #0]
 8006b52:	079b      	lsls	r3, r3, #30
 8006b54:	d413      	bmi.n	8006b7e <_printf_i+0x232>
 8006b56:	68e0      	ldr	r0, [r4, #12]
 8006b58:	9b03      	ldr	r3, [sp, #12]
 8006b5a:	4298      	cmp	r0, r3
 8006b5c:	bfb8      	it	lt
 8006b5e:	4618      	movlt	r0, r3
 8006b60:	e7a6      	b.n	8006ab0 <_printf_i+0x164>
 8006b62:	2301      	movs	r3, #1
 8006b64:	4632      	mov	r2, r6
 8006b66:	4649      	mov	r1, r9
 8006b68:	4640      	mov	r0, r8
 8006b6a:	47d0      	blx	sl
 8006b6c:	3001      	adds	r0, #1
 8006b6e:	d09d      	beq.n	8006aac <_printf_i+0x160>
 8006b70:	3501      	adds	r5, #1
 8006b72:	68e3      	ldr	r3, [r4, #12]
 8006b74:	9903      	ldr	r1, [sp, #12]
 8006b76:	1a5b      	subs	r3, r3, r1
 8006b78:	42ab      	cmp	r3, r5
 8006b7a:	dcf2      	bgt.n	8006b62 <_printf_i+0x216>
 8006b7c:	e7eb      	b.n	8006b56 <_printf_i+0x20a>
 8006b7e:	2500      	movs	r5, #0
 8006b80:	f104 0619 	add.w	r6, r4, #25
 8006b84:	e7f5      	b.n	8006b72 <_printf_i+0x226>
 8006b86:	bf00      	nop
 8006b88:	08006d31 	.word	0x08006d31
 8006b8c:	08006d42 	.word	0x08006d42

08006b90 <memmove>:
 8006b90:	4288      	cmp	r0, r1
 8006b92:	b510      	push	{r4, lr}
 8006b94:	eb01 0402 	add.w	r4, r1, r2
 8006b98:	d902      	bls.n	8006ba0 <memmove+0x10>
 8006b9a:	4284      	cmp	r4, r0
 8006b9c:	4623      	mov	r3, r4
 8006b9e:	d807      	bhi.n	8006bb0 <memmove+0x20>
 8006ba0:	1e43      	subs	r3, r0, #1
 8006ba2:	42a1      	cmp	r1, r4
 8006ba4:	d008      	beq.n	8006bb8 <memmove+0x28>
 8006ba6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006baa:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006bae:	e7f8      	b.n	8006ba2 <memmove+0x12>
 8006bb0:	4402      	add	r2, r0
 8006bb2:	4601      	mov	r1, r0
 8006bb4:	428a      	cmp	r2, r1
 8006bb6:	d100      	bne.n	8006bba <memmove+0x2a>
 8006bb8:	bd10      	pop	{r4, pc}
 8006bba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006bbe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006bc2:	e7f7      	b.n	8006bb4 <memmove+0x24>

08006bc4 <_sbrk_r>:
 8006bc4:	b538      	push	{r3, r4, r5, lr}
 8006bc6:	4d06      	ldr	r5, [pc, #24]	; (8006be0 <_sbrk_r+0x1c>)
 8006bc8:	2300      	movs	r3, #0
 8006bca:	4604      	mov	r4, r0
 8006bcc:	4608      	mov	r0, r1
 8006bce:	602b      	str	r3, [r5, #0]
 8006bd0:	f7fa f8b0 	bl	8000d34 <_sbrk>
 8006bd4:	1c43      	adds	r3, r0, #1
 8006bd6:	d102      	bne.n	8006bde <_sbrk_r+0x1a>
 8006bd8:	682b      	ldr	r3, [r5, #0]
 8006bda:	b103      	cbz	r3, 8006bde <_sbrk_r+0x1a>
 8006bdc:	6023      	str	r3, [r4, #0]
 8006bde:	bd38      	pop	{r3, r4, r5, pc}
 8006be0:	20004ba8 	.word	0x20004ba8

08006be4 <_realloc_r>:
 8006be4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006be8:	4680      	mov	r8, r0
 8006bea:	4614      	mov	r4, r2
 8006bec:	460e      	mov	r6, r1
 8006bee:	b921      	cbnz	r1, 8006bfa <_realloc_r+0x16>
 8006bf0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006bf4:	4611      	mov	r1, r2
 8006bf6:	f7ff bc57 	b.w	80064a8 <_malloc_r>
 8006bfa:	b92a      	cbnz	r2, 8006c08 <_realloc_r+0x24>
 8006bfc:	f7ff fbe8 	bl	80063d0 <_free_r>
 8006c00:	4625      	mov	r5, r4
 8006c02:	4628      	mov	r0, r5
 8006c04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c08:	f000 f81b 	bl	8006c42 <_malloc_usable_size_r>
 8006c0c:	4284      	cmp	r4, r0
 8006c0e:	4607      	mov	r7, r0
 8006c10:	d802      	bhi.n	8006c18 <_realloc_r+0x34>
 8006c12:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006c16:	d812      	bhi.n	8006c3e <_realloc_r+0x5a>
 8006c18:	4621      	mov	r1, r4
 8006c1a:	4640      	mov	r0, r8
 8006c1c:	f7ff fc44 	bl	80064a8 <_malloc_r>
 8006c20:	4605      	mov	r5, r0
 8006c22:	2800      	cmp	r0, #0
 8006c24:	d0ed      	beq.n	8006c02 <_realloc_r+0x1e>
 8006c26:	42bc      	cmp	r4, r7
 8006c28:	4622      	mov	r2, r4
 8006c2a:	4631      	mov	r1, r6
 8006c2c:	bf28      	it	cs
 8006c2e:	463a      	movcs	r2, r7
 8006c30:	f7ff fbc0 	bl	80063b4 <memcpy>
 8006c34:	4631      	mov	r1, r6
 8006c36:	4640      	mov	r0, r8
 8006c38:	f7ff fbca 	bl	80063d0 <_free_r>
 8006c3c:	e7e1      	b.n	8006c02 <_realloc_r+0x1e>
 8006c3e:	4635      	mov	r5, r6
 8006c40:	e7df      	b.n	8006c02 <_realloc_r+0x1e>

08006c42 <_malloc_usable_size_r>:
 8006c42:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c46:	1f18      	subs	r0, r3, #4
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	bfbc      	itt	lt
 8006c4c:	580b      	ldrlt	r3, [r1, r0]
 8006c4e:	18c0      	addlt	r0, r0, r3
 8006c50:	4770      	bx	lr
	...

08006c54 <_init>:
 8006c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c56:	bf00      	nop
 8006c58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c5a:	bc08      	pop	{r3}
 8006c5c:	469e      	mov	lr, r3
 8006c5e:	4770      	bx	lr

08006c60 <_fini>:
 8006c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c62:	bf00      	nop
 8006c64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c66:	bc08      	pop	{r3}
 8006c68:	469e      	mov	lr, r3
 8006c6a:	4770      	bx	lr
