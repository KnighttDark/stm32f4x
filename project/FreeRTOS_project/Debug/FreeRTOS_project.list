
FreeRTOS_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000826c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000154  080083fc  080083fc  000183fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008550  08008550  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  08008550  08008550  00018550  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008558  08008558  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008558  08008558  00018558  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800855c  0800855c  0001855c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08008560  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020060  2**0
                  CONTENTS
 10 .bss          00004bc4  20000060  20000060  00020060  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20004c24  20004c24  00020060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001877e  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000367b  00000000  00000000  00038851  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001568  00000000  00000000  0003bed0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000010ad  00000000  00000000  0003d438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00023e6a  00000000  00000000  0003e4e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00018898  00000000  00000000  0006234f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e1f94  00000000  00000000  0007abe7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00006098  00000000  00000000  0015cb7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000053  00000000  00000000  00162c14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080083e4 	.word	0x080083e4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	080083e4 	.word	0x080083e4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2uiz>:
 8000a1c:	004a      	lsls	r2, r1, #1
 8000a1e:	d211      	bcs.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a24:	d211      	bcs.n	8000a4a <__aeabi_d2uiz+0x2e>
 8000a26:	d50d      	bpl.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d40e      	bmi.n	8000a50 <__aeabi_d2uiz+0x34>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a4e:	d102      	bne.n	8000a56 <__aeabi_d2uiz+0x3a>
 8000a50:	f04f 30ff 	mov.w	r0, #4294967295
 8000a54:	4770      	bx	lr
 8000a56:	f04f 0000 	mov.w	r0, #0
 8000a5a:	4770      	bx	lr

08000a5c <__aeabi_uldivmod>:
 8000a5c:	b953      	cbnz	r3, 8000a74 <__aeabi_uldivmod+0x18>
 8000a5e:	b94a      	cbnz	r2, 8000a74 <__aeabi_uldivmod+0x18>
 8000a60:	2900      	cmp	r1, #0
 8000a62:	bf08      	it	eq
 8000a64:	2800      	cmpeq	r0, #0
 8000a66:	bf1c      	itt	ne
 8000a68:	f04f 31ff 	movne.w	r1, #4294967295
 8000a6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a70:	f000 b970 	b.w	8000d54 <__aeabi_idiv0>
 8000a74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a7c:	f000 f806 	bl	8000a8c <__udivmoddi4>
 8000a80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a88:	b004      	add	sp, #16
 8000a8a:	4770      	bx	lr

08000a8c <__udivmoddi4>:
 8000a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a90:	9e08      	ldr	r6, [sp, #32]
 8000a92:	460d      	mov	r5, r1
 8000a94:	4604      	mov	r4, r0
 8000a96:	460f      	mov	r7, r1
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d14a      	bne.n	8000b32 <__udivmoddi4+0xa6>
 8000a9c:	428a      	cmp	r2, r1
 8000a9e:	4694      	mov	ip, r2
 8000aa0:	d965      	bls.n	8000b6e <__udivmoddi4+0xe2>
 8000aa2:	fab2 f382 	clz	r3, r2
 8000aa6:	b143      	cbz	r3, 8000aba <__udivmoddi4+0x2e>
 8000aa8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000aac:	f1c3 0220 	rsb	r2, r3, #32
 8000ab0:	409f      	lsls	r7, r3
 8000ab2:	fa20 f202 	lsr.w	r2, r0, r2
 8000ab6:	4317      	orrs	r7, r2
 8000ab8:	409c      	lsls	r4, r3
 8000aba:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000abe:	fa1f f58c 	uxth.w	r5, ip
 8000ac2:	fbb7 f1fe 	udiv	r1, r7, lr
 8000ac6:	0c22      	lsrs	r2, r4, #16
 8000ac8:	fb0e 7711 	mls	r7, lr, r1, r7
 8000acc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000ad0:	fb01 f005 	mul.w	r0, r1, r5
 8000ad4:	4290      	cmp	r0, r2
 8000ad6:	d90a      	bls.n	8000aee <__udivmoddi4+0x62>
 8000ad8:	eb1c 0202 	adds.w	r2, ip, r2
 8000adc:	f101 37ff 	add.w	r7, r1, #4294967295
 8000ae0:	f080 811c 	bcs.w	8000d1c <__udivmoddi4+0x290>
 8000ae4:	4290      	cmp	r0, r2
 8000ae6:	f240 8119 	bls.w	8000d1c <__udivmoddi4+0x290>
 8000aea:	3902      	subs	r1, #2
 8000aec:	4462      	add	r2, ip
 8000aee:	1a12      	subs	r2, r2, r0
 8000af0:	b2a4      	uxth	r4, r4
 8000af2:	fbb2 f0fe 	udiv	r0, r2, lr
 8000af6:	fb0e 2210 	mls	r2, lr, r0, r2
 8000afa:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000afe:	fb00 f505 	mul.w	r5, r0, r5
 8000b02:	42a5      	cmp	r5, r4
 8000b04:	d90a      	bls.n	8000b1c <__udivmoddi4+0x90>
 8000b06:	eb1c 0404 	adds.w	r4, ip, r4
 8000b0a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b0e:	f080 8107 	bcs.w	8000d20 <__udivmoddi4+0x294>
 8000b12:	42a5      	cmp	r5, r4
 8000b14:	f240 8104 	bls.w	8000d20 <__udivmoddi4+0x294>
 8000b18:	4464      	add	r4, ip
 8000b1a:	3802      	subs	r0, #2
 8000b1c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b20:	1b64      	subs	r4, r4, r5
 8000b22:	2100      	movs	r1, #0
 8000b24:	b11e      	cbz	r6, 8000b2e <__udivmoddi4+0xa2>
 8000b26:	40dc      	lsrs	r4, r3
 8000b28:	2300      	movs	r3, #0
 8000b2a:	e9c6 4300 	strd	r4, r3, [r6]
 8000b2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b32:	428b      	cmp	r3, r1
 8000b34:	d908      	bls.n	8000b48 <__udivmoddi4+0xbc>
 8000b36:	2e00      	cmp	r6, #0
 8000b38:	f000 80ed 	beq.w	8000d16 <__udivmoddi4+0x28a>
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	e9c6 0500 	strd	r0, r5, [r6]
 8000b42:	4608      	mov	r0, r1
 8000b44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b48:	fab3 f183 	clz	r1, r3
 8000b4c:	2900      	cmp	r1, #0
 8000b4e:	d149      	bne.n	8000be4 <__udivmoddi4+0x158>
 8000b50:	42ab      	cmp	r3, r5
 8000b52:	d302      	bcc.n	8000b5a <__udivmoddi4+0xce>
 8000b54:	4282      	cmp	r2, r0
 8000b56:	f200 80f8 	bhi.w	8000d4a <__udivmoddi4+0x2be>
 8000b5a:	1a84      	subs	r4, r0, r2
 8000b5c:	eb65 0203 	sbc.w	r2, r5, r3
 8000b60:	2001      	movs	r0, #1
 8000b62:	4617      	mov	r7, r2
 8000b64:	2e00      	cmp	r6, #0
 8000b66:	d0e2      	beq.n	8000b2e <__udivmoddi4+0xa2>
 8000b68:	e9c6 4700 	strd	r4, r7, [r6]
 8000b6c:	e7df      	b.n	8000b2e <__udivmoddi4+0xa2>
 8000b6e:	b902      	cbnz	r2, 8000b72 <__udivmoddi4+0xe6>
 8000b70:	deff      	udf	#255	; 0xff
 8000b72:	fab2 f382 	clz	r3, r2
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	f040 8090 	bne.w	8000c9c <__udivmoddi4+0x210>
 8000b7c:	1a8a      	subs	r2, r1, r2
 8000b7e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b82:	fa1f fe8c 	uxth.w	lr, ip
 8000b86:	2101      	movs	r1, #1
 8000b88:	fbb2 f5f7 	udiv	r5, r2, r7
 8000b8c:	fb07 2015 	mls	r0, r7, r5, r2
 8000b90:	0c22      	lsrs	r2, r4, #16
 8000b92:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000b96:	fb0e f005 	mul.w	r0, lr, r5
 8000b9a:	4290      	cmp	r0, r2
 8000b9c:	d908      	bls.n	8000bb0 <__udivmoddi4+0x124>
 8000b9e:	eb1c 0202 	adds.w	r2, ip, r2
 8000ba2:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ba6:	d202      	bcs.n	8000bae <__udivmoddi4+0x122>
 8000ba8:	4290      	cmp	r0, r2
 8000baa:	f200 80cb 	bhi.w	8000d44 <__udivmoddi4+0x2b8>
 8000bae:	4645      	mov	r5, r8
 8000bb0:	1a12      	subs	r2, r2, r0
 8000bb2:	b2a4      	uxth	r4, r4
 8000bb4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000bb8:	fb07 2210 	mls	r2, r7, r0, r2
 8000bbc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000bc0:	fb0e fe00 	mul.w	lr, lr, r0
 8000bc4:	45a6      	cmp	lr, r4
 8000bc6:	d908      	bls.n	8000bda <__udivmoddi4+0x14e>
 8000bc8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bcc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bd0:	d202      	bcs.n	8000bd8 <__udivmoddi4+0x14c>
 8000bd2:	45a6      	cmp	lr, r4
 8000bd4:	f200 80bb 	bhi.w	8000d4e <__udivmoddi4+0x2c2>
 8000bd8:	4610      	mov	r0, r2
 8000bda:	eba4 040e 	sub.w	r4, r4, lr
 8000bde:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000be2:	e79f      	b.n	8000b24 <__udivmoddi4+0x98>
 8000be4:	f1c1 0720 	rsb	r7, r1, #32
 8000be8:	408b      	lsls	r3, r1
 8000bea:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bee:	ea4c 0c03 	orr.w	ip, ip, r3
 8000bf2:	fa05 f401 	lsl.w	r4, r5, r1
 8000bf6:	fa20 f307 	lsr.w	r3, r0, r7
 8000bfa:	40fd      	lsrs	r5, r7
 8000bfc:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c00:	4323      	orrs	r3, r4
 8000c02:	fbb5 f8f9 	udiv	r8, r5, r9
 8000c06:	fa1f fe8c 	uxth.w	lr, ip
 8000c0a:	fb09 5518 	mls	r5, r9, r8, r5
 8000c0e:	0c1c      	lsrs	r4, r3, #16
 8000c10:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c14:	fb08 f50e 	mul.w	r5, r8, lr
 8000c18:	42a5      	cmp	r5, r4
 8000c1a:	fa02 f201 	lsl.w	r2, r2, r1
 8000c1e:	fa00 f001 	lsl.w	r0, r0, r1
 8000c22:	d90b      	bls.n	8000c3c <__udivmoddi4+0x1b0>
 8000c24:	eb1c 0404 	adds.w	r4, ip, r4
 8000c28:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c2c:	f080 8088 	bcs.w	8000d40 <__udivmoddi4+0x2b4>
 8000c30:	42a5      	cmp	r5, r4
 8000c32:	f240 8085 	bls.w	8000d40 <__udivmoddi4+0x2b4>
 8000c36:	f1a8 0802 	sub.w	r8, r8, #2
 8000c3a:	4464      	add	r4, ip
 8000c3c:	1b64      	subs	r4, r4, r5
 8000c3e:	b29d      	uxth	r5, r3
 8000c40:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c44:	fb09 4413 	mls	r4, r9, r3, r4
 8000c48:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000c4c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000c50:	45a6      	cmp	lr, r4
 8000c52:	d908      	bls.n	8000c66 <__udivmoddi4+0x1da>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f103 35ff 	add.w	r5, r3, #4294967295
 8000c5c:	d26c      	bcs.n	8000d38 <__udivmoddi4+0x2ac>
 8000c5e:	45a6      	cmp	lr, r4
 8000c60:	d96a      	bls.n	8000d38 <__udivmoddi4+0x2ac>
 8000c62:	3b02      	subs	r3, #2
 8000c64:	4464      	add	r4, ip
 8000c66:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c6a:	fba3 9502 	umull	r9, r5, r3, r2
 8000c6e:	eba4 040e 	sub.w	r4, r4, lr
 8000c72:	42ac      	cmp	r4, r5
 8000c74:	46c8      	mov	r8, r9
 8000c76:	46ae      	mov	lr, r5
 8000c78:	d356      	bcc.n	8000d28 <__udivmoddi4+0x29c>
 8000c7a:	d053      	beq.n	8000d24 <__udivmoddi4+0x298>
 8000c7c:	b156      	cbz	r6, 8000c94 <__udivmoddi4+0x208>
 8000c7e:	ebb0 0208 	subs.w	r2, r0, r8
 8000c82:	eb64 040e 	sbc.w	r4, r4, lr
 8000c86:	fa04 f707 	lsl.w	r7, r4, r7
 8000c8a:	40ca      	lsrs	r2, r1
 8000c8c:	40cc      	lsrs	r4, r1
 8000c8e:	4317      	orrs	r7, r2
 8000c90:	e9c6 7400 	strd	r7, r4, [r6]
 8000c94:	4618      	mov	r0, r3
 8000c96:	2100      	movs	r1, #0
 8000c98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9c:	f1c3 0120 	rsb	r1, r3, #32
 8000ca0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ca4:	fa20 f201 	lsr.w	r2, r0, r1
 8000ca8:	fa25 f101 	lsr.w	r1, r5, r1
 8000cac:	409d      	lsls	r5, r3
 8000cae:	432a      	orrs	r2, r5
 8000cb0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cb4:	fa1f fe8c 	uxth.w	lr, ip
 8000cb8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cbc:	fb07 1510 	mls	r5, r7, r0, r1
 8000cc0:	0c11      	lsrs	r1, r2, #16
 8000cc2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000cc6:	fb00 f50e 	mul.w	r5, r0, lr
 8000cca:	428d      	cmp	r5, r1
 8000ccc:	fa04 f403 	lsl.w	r4, r4, r3
 8000cd0:	d908      	bls.n	8000ce4 <__udivmoddi4+0x258>
 8000cd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cd6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cda:	d22f      	bcs.n	8000d3c <__udivmoddi4+0x2b0>
 8000cdc:	428d      	cmp	r5, r1
 8000cde:	d92d      	bls.n	8000d3c <__udivmoddi4+0x2b0>
 8000ce0:	3802      	subs	r0, #2
 8000ce2:	4461      	add	r1, ip
 8000ce4:	1b49      	subs	r1, r1, r5
 8000ce6:	b292      	uxth	r2, r2
 8000ce8:	fbb1 f5f7 	udiv	r5, r1, r7
 8000cec:	fb07 1115 	mls	r1, r7, r5, r1
 8000cf0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000cf4:	fb05 f10e 	mul.w	r1, r5, lr
 8000cf8:	4291      	cmp	r1, r2
 8000cfa:	d908      	bls.n	8000d0e <__udivmoddi4+0x282>
 8000cfc:	eb1c 0202 	adds.w	r2, ip, r2
 8000d00:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d04:	d216      	bcs.n	8000d34 <__udivmoddi4+0x2a8>
 8000d06:	4291      	cmp	r1, r2
 8000d08:	d914      	bls.n	8000d34 <__udivmoddi4+0x2a8>
 8000d0a:	3d02      	subs	r5, #2
 8000d0c:	4462      	add	r2, ip
 8000d0e:	1a52      	subs	r2, r2, r1
 8000d10:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000d14:	e738      	b.n	8000b88 <__udivmoddi4+0xfc>
 8000d16:	4631      	mov	r1, r6
 8000d18:	4630      	mov	r0, r6
 8000d1a:	e708      	b.n	8000b2e <__udivmoddi4+0xa2>
 8000d1c:	4639      	mov	r1, r7
 8000d1e:	e6e6      	b.n	8000aee <__udivmoddi4+0x62>
 8000d20:	4610      	mov	r0, r2
 8000d22:	e6fb      	b.n	8000b1c <__udivmoddi4+0x90>
 8000d24:	4548      	cmp	r0, r9
 8000d26:	d2a9      	bcs.n	8000c7c <__udivmoddi4+0x1f0>
 8000d28:	ebb9 0802 	subs.w	r8, r9, r2
 8000d2c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000d30:	3b01      	subs	r3, #1
 8000d32:	e7a3      	b.n	8000c7c <__udivmoddi4+0x1f0>
 8000d34:	4645      	mov	r5, r8
 8000d36:	e7ea      	b.n	8000d0e <__udivmoddi4+0x282>
 8000d38:	462b      	mov	r3, r5
 8000d3a:	e794      	b.n	8000c66 <__udivmoddi4+0x1da>
 8000d3c:	4640      	mov	r0, r8
 8000d3e:	e7d1      	b.n	8000ce4 <__udivmoddi4+0x258>
 8000d40:	46d0      	mov	r8, sl
 8000d42:	e77b      	b.n	8000c3c <__udivmoddi4+0x1b0>
 8000d44:	3d02      	subs	r5, #2
 8000d46:	4462      	add	r2, ip
 8000d48:	e732      	b.n	8000bb0 <__udivmoddi4+0x124>
 8000d4a:	4608      	mov	r0, r1
 8000d4c:	e70a      	b.n	8000b64 <__udivmoddi4+0xd8>
 8000d4e:	4464      	add	r4, ip
 8000d50:	3802      	subs	r0, #2
 8000d52:	e742      	b.n	8000bda <__udivmoddi4+0x14e>

08000d54 <__aeabi_idiv0>:
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop

08000d58 <microDelay>:
#include "dht11.h"
extern TIM_HandleTypeDef htim1;
void microDelay(uint16_t delay)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b083      	sub	sp, #12
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	4603      	mov	r3, r0
 8000d60:	80fb      	strh	r3, [r7, #6]
  __HAL_TIM_SET_COUNTER(&htim1, 0);
 8000d62:	4b09      	ldr	r3, [pc, #36]	; (8000d88 <microDelay+0x30>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	2200      	movs	r2, #0
 8000d68:	625a      	str	r2, [r3, #36]	; 0x24
  while (__HAL_TIM_GET_COUNTER(&htim1) < delay);
 8000d6a:	bf00      	nop
 8000d6c:	4b06      	ldr	r3, [pc, #24]	; (8000d88 <microDelay+0x30>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000d72:	88fb      	ldrh	r3, [r7, #6]
 8000d74:	429a      	cmp	r2, r3
 8000d76:	d3f9      	bcc.n	8000d6c <microDelay+0x14>
}
 8000d78:	bf00      	nop
 8000d7a:	bf00      	nop
 8000d7c:	370c      	adds	r7, #12
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop
 8000d88:	200000c4 	.word	0x200000c4

08000d8c <DHT11_Start>:

uint8_t DHT11_Start(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b088      	sub	sp, #32
 8000d90:	af00      	add	r7, sp, #0
  uint8_t Response = 0;
 8000d92:	2300      	movs	r3, #0
 8000d94:	77fb      	strb	r3, [r7, #31]
  GPIO_InitTypeDef GPIO_InitStructPrivate = {0};
 8000d96:	463b      	mov	r3, r7
 8000d98:	2200      	movs	r2, #0
 8000d9a:	601a      	str	r2, [r3, #0]
 8000d9c:	605a      	str	r2, [r3, #4]
 8000d9e:	609a      	str	r2, [r3, #8]
 8000da0:	60da      	str	r2, [r3, #12]
 8000da2:	611a      	str	r2, [r3, #16]
  GPIO_InitStructPrivate.Pin = DHT11_PIN;
 8000da4:	2320      	movs	r3, #32
 8000da6:	603b      	str	r3, [r7, #0]
  GPIO_InitStructPrivate.Mode = GPIO_MODE_OUTPUT_PP;
 8000da8:	2301      	movs	r3, #1
 8000daa:	607b      	str	r3, [r7, #4]
  GPIO_InitStructPrivate.Speed = GPIO_SPEED_FREQ_LOW;
 8000dac:	2300      	movs	r3, #0
 8000dae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructPrivate.Pull = GPIO_NOPULL;
 8000db0:	2300      	movs	r3, #0
 8000db2:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStructPrivate); // set the pin as output
 8000db4:	463b      	mov	r3, r7
 8000db6:	4619      	mov	r1, r3
 8000db8:	4826      	ldr	r0, [pc, #152]	; (8000e54 <DHT11_Start+0xc8>)
 8000dba:	f001 fc43 	bl	8002644 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(DHT11_PORT, DHT11_PIN, 0);   // pull the pin low
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	2120      	movs	r1, #32
 8000dc2:	4824      	ldr	r0, [pc, #144]	; (8000e54 <DHT11_Start+0xc8>)
 8000dc4:	f001 fdf2 	bl	80029ac <HAL_GPIO_WritePin>
  HAL_Delay(20);   // wait for 20ms
 8000dc8:	2014      	movs	r0, #20
 8000dca:	f000 fea7 	bl	8001b1c <HAL_Delay>
  HAL_GPIO_WritePin(DHT11_PORT, DHT11_PIN, 1);   // pull the pin high
 8000dce:	2201      	movs	r2, #1
 8000dd0:	2120      	movs	r1, #32
 8000dd2:	4820      	ldr	r0, [pc, #128]	; (8000e54 <DHT11_Start+0xc8>)
 8000dd4:	f001 fdea 	bl	80029ac <HAL_GPIO_WritePin>
  microDelay(30);   // wait for 30us
 8000dd8:	201e      	movs	r0, #30
 8000dda:	f7ff ffbd 	bl	8000d58 <microDelay>
  GPIO_InitStructPrivate.Mode = GPIO_MODE_INPUT;
 8000dde:	2300      	movs	r3, #0
 8000de0:	607b      	str	r3, [r7, #4]
  GPIO_InitStructPrivate.Pull = GPIO_PULLUP;
 8000de2:	2301      	movs	r3, #1
 8000de4:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStructPrivate); // set the pin as input
 8000de6:	463b      	mov	r3, r7
 8000de8:	4619      	mov	r1, r3
 8000dea:	481a      	ldr	r0, [pc, #104]	; (8000e54 <DHT11_Start+0xc8>)
 8000dec:	f001 fc2a 	bl	8002644 <HAL_GPIO_Init>
  microDelay(40);
 8000df0:	2028      	movs	r0, #40	; 0x28
 8000df2:	f7ff ffb1 	bl	8000d58 <microDelay>
  if (!(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)))
 8000df6:	2120      	movs	r1, #32
 8000df8:	4816      	ldr	r0, [pc, #88]	; (8000e54 <DHT11_Start+0xc8>)
 8000dfa:	f001 fdbf 	bl	800297c <HAL_GPIO_ReadPin>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d10b      	bne.n	8000e1c <DHT11_Start+0x90>
  {
    microDelay(80);
 8000e04:	2050      	movs	r0, #80	; 0x50
 8000e06:	f7ff ffa7 	bl	8000d58 <microDelay>
    if ((HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN))) Response = 1;
 8000e0a:	2120      	movs	r1, #32
 8000e0c:	4811      	ldr	r0, [pc, #68]	; (8000e54 <DHT11_Start+0xc8>)
 8000e0e:	f001 fdb5 	bl	800297c <HAL_GPIO_ReadPin>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d001      	beq.n	8000e1c <DHT11_Start+0x90>
 8000e18:	2301      	movs	r3, #1
 8000e1a:	77fb      	strb	r3, [r7, #31]
  }
  uint32_t pMillis = HAL_GetTick();
 8000e1c:	f000 fe72 	bl	8001b04 <HAL_GetTick>
 8000e20:	6178      	str	r0, [r7, #20]
  uint32_t cMillis = HAL_GetTick();
 8000e22:	f000 fe6f 	bl	8001b04 <HAL_GetTick>
 8000e26:	61b8      	str	r0, [r7, #24]
  while ((HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8000e28:	e002      	b.n	8000e30 <DHT11_Start+0xa4>
  {
    cMillis = HAL_GetTick();
 8000e2a:	f000 fe6b 	bl	8001b04 <HAL_GetTick>
 8000e2e:	61b8      	str	r0, [r7, #24]
  while ((HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8000e30:	2120      	movs	r1, #32
 8000e32:	4808      	ldr	r0, [pc, #32]	; (8000e54 <DHT11_Start+0xc8>)
 8000e34:	f001 fda2 	bl	800297c <HAL_GPIO_ReadPin>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d004      	beq.n	8000e48 <DHT11_Start+0xbc>
 8000e3e:	697b      	ldr	r3, [r7, #20]
 8000e40:	3302      	adds	r3, #2
 8000e42:	69ba      	ldr	r2, [r7, #24]
 8000e44:	429a      	cmp	r2, r3
 8000e46:	d3f0      	bcc.n	8000e2a <DHT11_Start+0x9e>
  }
  return Response;
 8000e48:	7ffb      	ldrb	r3, [r7, #31]
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	3720      	adds	r7, #32
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	40021000 	.word	0x40021000

08000e58 <DHT11_Read>:

uint8_t DHT11_Read(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b084      	sub	sp, #16
 8000e5c:	af00      	add	r7, sp, #0
  uint8_t a, b = 0;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	73bb      	strb	r3, [r7, #14]
  for (a = 0; a < 8; a++)
 8000e62:	2300      	movs	r3, #0
 8000e64:	73fb      	strb	r3, [r7, #15]
 8000e66:	e053      	b.n	8000f10 <DHT11_Read+0xb8>
  {
    uint32_t pMillis = HAL_GetTick();
 8000e68:	f000 fe4c 	bl	8001b04 <HAL_GetTick>
 8000e6c:	6078      	str	r0, [r7, #4]
    uint32_t cMillis = HAL_GetTick();
 8000e6e:	f000 fe49 	bl	8001b04 <HAL_GetTick>
 8000e72:	60b8      	str	r0, [r7, #8]
    while (!(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8000e74:	e002      	b.n	8000e7c <DHT11_Read+0x24>
    {
      cMillis = HAL_GetTick();
 8000e76:	f000 fe45 	bl	8001b04 <HAL_GetTick>
 8000e7a:	60b8      	str	r0, [r7, #8]
    while (!(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8000e7c:	2120      	movs	r1, #32
 8000e7e:	4828      	ldr	r0, [pc, #160]	; (8000f20 <DHT11_Read+0xc8>)
 8000e80:	f001 fd7c 	bl	800297c <HAL_GPIO_ReadPin>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d104      	bne.n	8000e94 <DHT11_Read+0x3c>
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	3302      	adds	r3, #2
 8000e8e:	68ba      	ldr	r2, [r7, #8]
 8000e90:	429a      	cmp	r2, r3
 8000e92:	d3f0      	bcc.n	8000e76 <DHT11_Read+0x1e>
    }
    microDelay(40);   // wait for 40 us
 8000e94:	2028      	movs	r0, #40	; 0x28
 8000e96:	f7ff ff5f 	bl	8000d58 <microDelay>
    if (!(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)))   // if the pin is low
 8000e9a:	2120      	movs	r1, #32
 8000e9c:	4820      	ldr	r0, [pc, #128]	; (8000f20 <DHT11_Read+0xc8>)
 8000e9e:	f001 fd6d 	bl	800297c <HAL_GPIO_ReadPin>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d10e      	bne.n	8000ec6 <DHT11_Read+0x6e>
      b &= ~(1 << (7 - a));
 8000ea8:	7bfb      	ldrb	r3, [r7, #15]
 8000eaa:	f1c3 0307 	rsb	r3, r3, #7
 8000eae:	2201      	movs	r2, #1
 8000eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb4:	b25b      	sxtb	r3, r3
 8000eb6:	43db      	mvns	r3, r3
 8000eb8:	b25a      	sxtb	r2, r3
 8000eba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000ebe:	4013      	ands	r3, r2
 8000ec0:	b25b      	sxtb	r3, r3
 8000ec2:	73bb      	strb	r3, [r7, #14]
 8000ec4:	e00b      	b.n	8000ede <DHT11_Read+0x86>
    else
      b |= (1 << (7 - a));
 8000ec6:	7bfb      	ldrb	r3, [r7, #15]
 8000ec8:	f1c3 0307 	rsb	r3, r3, #7
 8000ecc:	2201      	movs	r2, #1
 8000ece:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed2:	b25a      	sxtb	r2, r3
 8000ed4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000ed8:	4313      	orrs	r3, r2
 8000eda:	b25b      	sxtb	r3, r3
 8000edc:	73bb      	strb	r3, [r7, #14]
    pMillis = HAL_GetTick();
 8000ede:	f000 fe11 	bl	8001b04 <HAL_GetTick>
 8000ee2:	6078      	str	r0, [r7, #4]
    cMillis = HAL_GetTick();
 8000ee4:	f000 fe0e 	bl	8001b04 <HAL_GetTick>
 8000ee8:	60b8      	str	r0, [r7, #8]
    while ((HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8000eea:	e002      	b.n	8000ef2 <DHT11_Read+0x9a>
    {
      cMillis = HAL_GetTick();
 8000eec:	f000 fe0a 	bl	8001b04 <HAL_GetTick>
 8000ef0:	60b8      	str	r0, [r7, #8]
    while ((HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8000ef2:	2120      	movs	r1, #32
 8000ef4:	480a      	ldr	r0, [pc, #40]	; (8000f20 <DHT11_Read+0xc8>)
 8000ef6:	f001 fd41 	bl	800297c <HAL_GPIO_ReadPin>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d004      	beq.n	8000f0a <DHT11_Read+0xb2>
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	3302      	adds	r3, #2
 8000f04:	68ba      	ldr	r2, [r7, #8]
 8000f06:	429a      	cmp	r2, r3
 8000f08:	d3f0      	bcc.n	8000eec <DHT11_Read+0x94>
  for (a = 0; a < 8; a++)
 8000f0a:	7bfb      	ldrb	r3, [r7, #15]
 8000f0c:	3301      	adds	r3, #1
 8000f0e:	73fb      	strb	r3, [r7, #15]
 8000f10:	7bfb      	ldrb	r3, [r7, #15]
 8000f12:	2b07      	cmp	r3, #7
 8000f14:	d9a8      	bls.n	8000e68 <DHT11_Read+0x10>
    }
  }
  return b;
 8000f16:	7bbb      	ldrb	r3, [r7, #14]
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	3710      	adds	r7, #16
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	40021000 	.word	0x40021000

08000f24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
  HAL_Init();
 8000f28:	f000 fd86 	bl	8001a38 <HAL_Init>
  SystemClock_Config();
 8000f2c:	f000 f856 	bl	8000fdc <SystemClock_Config>
  MX_GPIO_Init();
 8000f30:	f000 f988 	bl	8001244 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000f34:	f000 f90c 	bl	8001150 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8000f38:	f000 f95a 	bl	80011f0 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000f3c:	f000 f8b6 	bl	80010ac <MX_ADC1_Init>
  HAL_TIM_Base_Start(&htim1);
 8000f40:	4817      	ldr	r0, [pc, #92]	; (8000fa0 <main+0x7c>)
 8000f42:	f002 f9f5 	bl	8003330 <HAL_TIM_Base_Start>
  HAL_ADC_Start(&hadc1);
 8000f46:	4817      	ldr	r0, [pc, #92]	; (8000fa4 <main+0x80>)
 8000f48:	f000 fe50 	bl	8001bec <HAL_ADC_Start>
  HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	2140      	movs	r1, #64	; 0x40
 8000f50:	4815      	ldr	r0, [pc, #84]	; (8000fa8 <main+0x84>)
 8000f52:	f001 fd2b 	bl	80029ac <HAL_GPIO_WritePin>
  osKernelInitialize();
 8000f56:	f003 fe67 	bl	8004c28 <osKernelInitialize>

  TaskDHT11Handle = osThreadNew(StartTaskDHT11, NULL, &TaskDHT11_attributes);
 8000f5a:	4a14      	ldr	r2, [pc, #80]	; (8000fac <main+0x88>)
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	4814      	ldr	r0, [pc, #80]	; (8000fb0 <main+0x8c>)
 8000f60:	f003 feac 	bl	8004cbc <osThreadNew>
 8000f64:	4603      	mov	r3, r0
 8000f66:	4a13      	ldr	r2, [pc, #76]	; (8000fb4 <main+0x90>)
 8000f68:	6013      	str	r3, [r2, #0]
  TaskHCHandle = osThreadNew(StartTaskHC, NULL, &TaskHC_attributes);
 8000f6a:	4a13      	ldr	r2, [pc, #76]	; (8000fb8 <main+0x94>)
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	4813      	ldr	r0, [pc, #76]	; (8000fbc <main+0x98>)
 8000f70:	f003 fea4 	bl	8004cbc <osThreadNew>
 8000f74:	4603      	mov	r3, r0
 8000f76:	4a12      	ldr	r2, [pc, #72]	; (8000fc0 <main+0x9c>)
 8000f78:	6013      	str	r3, [r2, #0]
  TaskRainSensorHandle = osThreadNew(StartTaskRainSensor, NULL, &TaskRainSensor_attributes);
 8000f7a:	4a12      	ldr	r2, [pc, #72]	; (8000fc4 <main+0xa0>)
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	4812      	ldr	r0, [pc, #72]	; (8000fc8 <main+0xa4>)
 8000f80:	f003 fe9c 	bl	8004cbc <osThreadNew>
 8000f84:	4603      	mov	r3, r0
 8000f86:	4a11      	ldr	r2, [pc, #68]	; (8000fcc <main+0xa8>)
 8000f88:	6013      	str	r3, [r2, #0]
  TaskLEDHandle = osThreadNew(StartTaskLED, NULL, &TaskLED_attributes);
 8000f8a:	4a11      	ldr	r2, [pc, #68]	; (8000fd0 <main+0xac>)
 8000f8c:	2100      	movs	r1, #0
 8000f8e:	4811      	ldr	r0, [pc, #68]	; (8000fd4 <main+0xb0>)
 8000f90:	f003 fe94 	bl	8004cbc <osThreadNew>
 8000f94:	4603      	mov	r3, r0
 8000f96:	4a10      	ldr	r2, [pc, #64]	; (8000fd8 <main+0xb4>)
 8000f98:	6013      	str	r3, [r2, #0]

  osKernelStart();
 8000f9a:	f003 fe69 	bl	8004c70 <osKernelStart>

  while (1)
 8000f9e:	e7fe      	b.n	8000f9e <main+0x7a>
 8000fa0:	200000c4 	.word	0x200000c4
 8000fa4:	2000007c 	.word	0x2000007c
 8000fa8:	40020c00 	.word	0x40020c00
 8000fac:	08008474 	.word	0x08008474
 8000fb0:	080013b1 	.word	0x080013b1
 8000fb4:	20000150 	.word	0x20000150
 8000fb8:	08008498 	.word	0x08008498
 8000fbc:	08001499 	.word	0x08001499
 8000fc0:	20000154 	.word	0x20000154
 8000fc4:	080084bc 	.word	0x080084bc
 8000fc8:	080015fd 	.word	0x080015fd
 8000fcc:	20000158 	.word	0x20000158
 8000fd0:	080084e0 	.word	0x080084e0
 8000fd4:	0800168d 	.word	0x0800168d
 8000fd8:	2000015c 	.word	0x2000015c

08000fdc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b094      	sub	sp, #80	; 0x50
 8000fe0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fe2:	f107 0320 	add.w	r3, r7, #32
 8000fe6:	2230      	movs	r2, #48	; 0x30
 8000fe8:	2100      	movs	r1, #0
 8000fea:	4618      	mov	r0, r3
 8000fec:	f006 fd76 	bl	8007adc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ff0:	f107 030c 	add.w	r3, r7, #12
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	601a      	str	r2, [r3, #0]
 8000ff8:	605a      	str	r2, [r3, #4]
 8000ffa:	609a      	str	r2, [r3, #8]
 8000ffc:	60da      	str	r2, [r3, #12]
 8000ffe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001000:	2300      	movs	r3, #0
 8001002:	60bb      	str	r3, [r7, #8]
 8001004:	4b27      	ldr	r3, [pc, #156]	; (80010a4 <SystemClock_Config+0xc8>)
 8001006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001008:	4a26      	ldr	r2, [pc, #152]	; (80010a4 <SystemClock_Config+0xc8>)
 800100a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800100e:	6413      	str	r3, [r2, #64]	; 0x40
 8001010:	4b24      	ldr	r3, [pc, #144]	; (80010a4 <SystemClock_Config+0xc8>)
 8001012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001014:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001018:	60bb      	str	r3, [r7, #8]
 800101a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800101c:	2300      	movs	r3, #0
 800101e:	607b      	str	r3, [r7, #4]
 8001020:	4b21      	ldr	r3, [pc, #132]	; (80010a8 <SystemClock_Config+0xcc>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a20      	ldr	r2, [pc, #128]	; (80010a8 <SystemClock_Config+0xcc>)
 8001026:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800102a:	6013      	str	r3, [r2, #0]
 800102c:	4b1e      	ldr	r3, [pc, #120]	; (80010a8 <SystemClock_Config+0xcc>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001034:	607b      	str	r3, [r7, #4]
 8001036:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001038:	2302      	movs	r3, #2
 800103a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800103c:	2301      	movs	r3, #1
 800103e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001040:	2310      	movs	r3, #16
 8001042:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001044:	2302      	movs	r3, #2
 8001046:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001048:	2300      	movs	r3, #0
 800104a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800104c:	2308      	movs	r3, #8
 800104e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001050:	2348      	movs	r3, #72	; 0x48
 8001052:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001054:	2302      	movs	r3, #2
 8001056:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001058:	2304      	movs	r3, #4
 800105a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800105c:	f107 0320 	add.w	r3, r7, #32
 8001060:	4618      	mov	r0, r3
 8001062:	f001 fcbd 	bl	80029e0 <HAL_RCC_OscConfig>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800106c:	f000 fb38 	bl	80016e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001070:	230f      	movs	r3, #15
 8001072:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001074:	2302      	movs	r3, #2
 8001076:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001078:	2300      	movs	r3, #0
 800107a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800107c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001080:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001082:	2300      	movs	r3, #0
 8001084:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001086:	f107 030c 	add.w	r3, r7, #12
 800108a:	2102      	movs	r1, #2
 800108c:	4618      	mov	r0, r3
 800108e:	f001 ff1f 	bl	8002ed0 <HAL_RCC_ClockConfig>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001098:	f000 fb22 	bl	80016e0 <Error_Handler>
  }
}
 800109c:	bf00      	nop
 800109e:	3750      	adds	r7, #80	; 0x50
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	40023800 	.word	0x40023800
 80010a8:	40007000 	.word	0x40007000

080010ac <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b084      	sub	sp, #16
 80010b0:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80010b2:	463b      	mov	r3, r7
 80010b4:	2200      	movs	r2, #0
 80010b6:	601a      	str	r2, [r3, #0]
 80010b8:	605a      	str	r2, [r3, #4]
 80010ba:	609a      	str	r2, [r3, #8]
 80010bc:	60da      	str	r2, [r3, #12]

  hadc1.Instance = ADC1;
 80010be:	4b21      	ldr	r3, [pc, #132]	; (8001144 <MX_ADC1_Init+0x98>)
 80010c0:	4a21      	ldr	r2, [pc, #132]	; (8001148 <MX_ADC1_Init+0x9c>)
 80010c2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80010c4:	4b1f      	ldr	r3, [pc, #124]	; (8001144 <MX_ADC1_Init+0x98>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80010ca:	4b1e      	ldr	r3, [pc, #120]	; (8001144 <MX_ADC1_Init+0x98>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80010d0:	4b1c      	ldr	r3, [pc, #112]	; (8001144 <MX_ADC1_Init+0x98>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80010d6:	4b1b      	ldr	r3, [pc, #108]	; (8001144 <MX_ADC1_Init+0x98>)
 80010d8:	2200      	movs	r2, #0
 80010da:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010dc:	4b19      	ldr	r3, [pc, #100]	; (8001144 <MX_ADC1_Init+0x98>)
 80010de:	2200      	movs	r2, #0
 80010e0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010e4:	4b17      	ldr	r3, [pc, #92]	; (8001144 <MX_ADC1_Init+0x98>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010ea:	4b16      	ldr	r3, [pc, #88]	; (8001144 <MX_ADC1_Init+0x98>)
 80010ec:	4a17      	ldr	r2, [pc, #92]	; (800114c <MX_ADC1_Init+0xa0>)
 80010ee:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010f0:	4b14      	ldr	r3, [pc, #80]	; (8001144 <MX_ADC1_Init+0x98>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80010f6:	4b13      	ldr	r3, [pc, #76]	; (8001144 <MX_ADC1_Init+0x98>)
 80010f8:	2201      	movs	r2, #1
 80010fa:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010fc:	4b11      	ldr	r3, [pc, #68]	; (8001144 <MX_ADC1_Init+0x98>)
 80010fe:	2200      	movs	r2, #0
 8001100:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001104:	4b0f      	ldr	r3, [pc, #60]	; (8001144 <MX_ADC1_Init+0x98>)
 8001106:	2201      	movs	r2, #1
 8001108:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800110a:	480e      	ldr	r0, [pc, #56]	; (8001144 <MX_ADC1_Init+0x98>)
 800110c:	f000 fd2a 	bl	8001b64 <HAL_ADC_Init>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001116:	f000 fae3 	bl	80016e0 <Error_Handler>
  }

  sConfig.Channel = ADC_CHANNEL_0;
 800111a:	2300      	movs	r3, #0
 800111c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800111e:	2301      	movs	r3, #1
 8001120:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001122:	2300      	movs	r3, #0
 8001124:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001126:	463b      	mov	r3, r7
 8001128:	4619      	mov	r1, r3
 800112a:	4806      	ldr	r0, [pc, #24]	; (8001144 <MX_ADC1_Init+0x98>)
 800112c:	f000 fec8 	bl	8001ec0 <HAL_ADC_ConfigChannel>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001136:	f000 fad3 	bl	80016e0 <Error_Handler>
  }
}
 800113a:	bf00      	nop
 800113c:	3710      	adds	r7, #16
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	2000007c 	.word	0x2000007c
 8001148:	40012000 	.word	0x40012000
 800114c:	0f000001 	.word	0x0f000001

08001150 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b086      	sub	sp, #24
 8001154:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001156:	f107 0308 	add.w	r3, r7, #8
 800115a:	2200      	movs	r2, #0
 800115c:	601a      	str	r2, [r3, #0]
 800115e:	605a      	str	r2, [r3, #4]
 8001160:	609a      	str	r2, [r3, #8]
 8001162:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001164:	463b      	mov	r3, r7
 8001166:	2200      	movs	r2, #0
 8001168:	601a      	str	r2, [r3, #0]
 800116a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800116c:	4b1e      	ldr	r3, [pc, #120]	; (80011e8 <MX_TIM1_Init+0x98>)
 800116e:	4a1f      	ldr	r2, [pc, #124]	; (80011ec <MX_TIM1_Init+0x9c>)
 8001170:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8001172:	4b1d      	ldr	r3, [pc, #116]	; (80011e8 <MX_TIM1_Init+0x98>)
 8001174:	2247      	movs	r2, #71	; 0x47
 8001176:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001178:	4b1b      	ldr	r3, [pc, #108]	; (80011e8 <MX_TIM1_Init+0x98>)
 800117a:	2200      	movs	r2, #0
 800117c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800117e:	4b1a      	ldr	r3, [pc, #104]	; (80011e8 <MX_TIM1_Init+0x98>)
 8001180:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001184:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001186:	4b18      	ldr	r3, [pc, #96]	; (80011e8 <MX_TIM1_Init+0x98>)
 8001188:	2200      	movs	r2, #0
 800118a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800118c:	4b16      	ldr	r3, [pc, #88]	; (80011e8 <MX_TIM1_Init+0x98>)
 800118e:	2200      	movs	r2, #0
 8001190:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001192:	4b15      	ldr	r3, [pc, #84]	; (80011e8 <MX_TIM1_Init+0x98>)
 8001194:	2200      	movs	r2, #0
 8001196:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001198:	4813      	ldr	r0, [pc, #76]	; (80011e8 <MX_TIM1_Init+0x98>)
 800119a:	f002 f879 	bl	8003290 <HAL_TIM_Base_Init>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80011a4:	f000 fa9c 	bl	80016e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011ac:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80011ae:	f107 0308 	add.w	r3, r7, #8
 80011b2:	4619      	mov	r1, r3
 80011b4:	480c      	ldr	r0, [pc, #48]	; (80011e8 <MX_TIM1_Init+0x98>)
 80011b6:	f002 fa2b 	bl	8003610 <HAL_TIM_ConfigClockSource>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80011c0:	f000 fa8e 	bl	80016e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011c4:	2300      	movs	r3, #0
 80011c6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011c8:	2300      	movs	r3, #0
 80011ca:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80011cc:	463b      	mov	r3, r7
 80011ce:	4619      	mov	r1, r3
 80011d0:	4805      	ldr	r0, [pc, #20]	; (80011e8 <MX_TIM1_Init+0x98>)
 80011d2:	f002 fc51 	bl	8003a78 <HAL_TIMEx_MasterConfigSynchronization>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80011dc:	f000 fa80 	bl	80016e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80011e0:	bf00      	nop
 80011e2:	3718      	adds	r7, #24
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	200000c4 	.word	0x200000c4
 80011ec:	40010000 	.word	0x40010000

080011f0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011f4:	4b11      	ldr	r3, [pc, #68]	; (800123c <MX_USART2_UART_Init+0x4c>)
 80011f6:	4a12      	ldr	r2, [pc, #72]	; (8001240 <MX_USART2_UART_Init+0x50>)
 80011f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80011fa:	4b10      	ldr	r3, [pc, #64]	; (800123c <MX_USART2_UART_Init+0x4c>)
 80011fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001200:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001202:	4b0e      	ldr	r3, [pc, #56]	; (800123c <MX_USART2_UART_Init+0x4c>)
 8001204:	2200      	movs	r2, #0
 8001206:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001208:	4b0c      	ldr	r3, [pc, #48]	; (800123c <MX_USART2_UART_Init+0x4c>)
 800120a:	2200      	movs	r2, #0
 800120c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800120e:	4b0b      	ldr	r3, [pc, #44]	; (800123c <MX_USART2_UART_Init+0x4c>)
 8001210:	2200      	movs	r2, #0
 8001212:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001214:	4b09      	ldr	r3, [pc, #36]	; (800123c <MX_USART2_UART_Init+0x4c>)
 8001216:	220c      	movs	r2, #12
 8001218:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800121a:	4b08      	ldr	r3, [pc, #32]	; (800123c <MX_USART2_UART_Init+0x4c>)
 800121c:	2200      	movs	r2, #0
 800121e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001220:	4b06      	ldr	r3, [pc, #24]	; (800123c <MX_USART2_UART_Init+0x4c>)
 8001222:	2200      	movs	r2, #0
 8001224:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001226:	4805      	ldr	r0, [pc, #20]	; (800123c <MX_USART2_UART_Init+0x4c>)
 8001228:	f002 fcb6 	bl	8003b98 <HAL_UART_Init>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001232:	f000 fa55 	bl	80016e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001236:	bf00      	nop
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	2000010c 	.word	0x2000010c
 8001240:	40004400 	.word	0x40004400

08001244 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b08a      	sub	sp, #40	; 0x28
 8001248:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800124a:	f107 0314 	add.w	r3, r7, #20
 800124e:	2200      	movs	r2, #0
 8001250:	601a      	str	r2, [r3, #0]
 8001252:	605a      	str	r2, [r3, #4]
 8001254:	609a      	str	r2, [r3, #8]
 8001256:	60da      	str	r2, [r3, #12]
 8001258:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800125a:	2300      	movs	r3, #0
 800125c:	613b      	str	r3, [r7, #16]
 800125e:	4b50      	ldr	r3, [pc, #320]	; (80013a0 <MX_GPIO_Init+0x15c>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001262:	4a4f      	ldr	r2, [pc, #316]	; (80013a0 <MX_GPIO_Init+0x15c>)
 8001264:	f043 0310 	orr.w	r3, r3, #16
 8001268:	6313      	str	r3, [r2, #48]	; 0x30
 800126a:	4b4d      	ldr	r3, [pc, #308]	; (80013a0 <MX_GPIO_Init+0x15c>)
 800126c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126e:	f003 0310 	and.w	r3, r3, #16
 8001272:	613b      	str	r3, [r7, #16]
 8001274:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001276:	2300      	movs	r3, #0
 8001278:	60fb      	str	r3, [r7, #12]
 800127a:	4b49      	ldr	r3, [pc, #292]	; (80013a0 <MX_GPIO_Init+0x15c>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127e:	4a48      	ldr	r2, [pc, #288]	; (80013a0 <MX_GPIO_Init+0x15c>)
 8001280:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001284:	6313      	str	r3, [r2, #48]	; 0x30
 8001286:	4b46      	ldr	r3, [pc, #280]	; (80013a0 <MX_GPIO_Init+0x15c>)
 8001288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800128e:	60fb      	str	r3, [r7, #12]
 8001290:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001292:	2300      	movs	r3, #0
 8001294:	60bb      	str	r3, [r7, #8]
 8001296:	4b42      	ldr	r3, [pc, #264]	; (80013a0 <MX_GPIO_Init+0x15c>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129a:	4a41      	ldr	r2, [pc, #260]	; (80013a0 <MX_GPIO_Init+0x15c>)
 800129c:	f043 0301 	orr.w	r3, r3, #1
 80012a0:	6313      	str	r3, [r2, #48]	; 0x30
 80012a2:	4b3f      	ldr	r3, [pc, #252]	; (80013a0 <MX_GPIO_Init+0x15c>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a6:	f003 0301 	and.w	r3, r3, #1
 80012aa:	60bb      	str	r3, [r7, #8]
 80012ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012ae:	2300      	movs	r3, #0
 80012b0:	607b      	str	r3, [r7, #4]
 80012b2:	4b3b      	ldr	r3, [pc, #236]	; (80013a0 <MX_GPIO_Init+0x15c>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b6:	4a3a      	ldr	r2, [pc, #232]	; (80013a0 <MX_GPIO_Init+0x15c>)
 80012b8:	f043 0308 	orr.w	r3, r3, #8
 80012bc:	6313      	str	r3, [r2, #48]	; 0x30
 80012be:	4b38      	ldr	r3, [pc, #224]	; (80013a0 <MX_GPIO_Init+0x15c>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c2:	f003 0308 	and.w	r3, r3, #8
 80012c6:	607b      	str	r3, [r7, #4]
 80012c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_RESET);
 80012ca:	2200      	movs	r2, #0
 80012cc:	2120      	movs	r1, #32
 80012ce:	4835      	ldr	r0, [pc, #212]	; (80013a4 <MX_GPIO_Init+0x160>)
 80012d0:	f001 fb6c 	bl	80029ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_9, GPIO_PIN_RESET);
 80012d4:	2200      	movs	r2, #0
 80012d6:	f44f 7108 	mov.w	r1, #544	; 0x220
 80012da:	4833      	ldr	r0, [pc, #204]	; (80013a8 <MX_GPIO_Init+0x164>)
 80012dc:	f001 fb66 	bl	80029ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_RESET);
 80012e0:	2200      	movs	r2, #0
 80012e2:	2140      	movs	r1, #64	; 0x40
 80012e4:	4831      	ldr	r0, [pc, #196]	; (80013ac <MX_GPIO_Init+0x168>)
 80012e6:	f001 fb61 	bl	80029ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 80012ea:	2200      	movs	r2, #0
 80012ec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012f0:	482e      	ldr	r0, [pc, #184]	; (80013ac <MX_GPIO_Init+0x168>)
 80012f2:	f001 fb5b 	bl	80029ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80012f6:	2320      	movs	r3, #32
 80012f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012fa:	2301      	movs	r3, #1
 80012fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fe:	2300      	movs	r3, #0
 8001300:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001302:	2300      	movs	r3, #0
 8001304:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001306:	f107 0314 	add.w	r3, r7, #20
 800130a:	4619      	mov	r1, r3
 800130c:	4825      	ldr	r0, [pc, #148]	; (80013a4 <MX_GPIO_Init+0x160>)
 800130e:	f001 f999 	bl	8002644 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_9;
 8001312:	f44f 7308 	mov.w	r3, #544	; 0x220
 8001316:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001318:	2301      	movs	r3, #1
 800131a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131c:	2300      	movs	r3, #0
 800131e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001320:	2300      	movs	r3, #0
 8001322:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001324:	f107 0314 	add.w	r3, r7, #20
 8001328:	4619      	mov	r1, r3
 800132a:	481f      	ldr	r0, [pc, #124]	; (80013a8 <MX_GPIO_Init+0x164>)
 800132c:	f001 f98a 	bl	8002644 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001330:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001334:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001336:	2300      	movs	r3, #0
 8001338:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133a:	2300      	movs	r3, #0
 800133c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800133e:	f107 0314 	add.w	r3, r7, #20
 8001342:	4619      	mov	r1, r3
 8001344:	4818      	ldr	r0, [pc, #96]	; (80013a8 <MX_GPIO_Init+0x164>)
 8001346:	f001 f97d 	bl	8002644 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800134a:	2320      	movs	r3, #32
 800134c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800134e:	2300      	movs	r3, #0
 8001350:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001352:	2300      	movs	r3, #0
 8001354:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001356:	f107 0314 	add.w	r3, r7, #20
 800135a:	4619      	mov	r1, r3
 800135c:	4813      	ldr	r0, [pc, #76]	; (80013ac <MX_GPIO_Init+0x168>)
 800135e:	f001 f971 	bl	8002644 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_13;
 8001362:	f44f 5301 	mov.w	r3, #8256	; 0x2040
 8001366:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001368:	2301      	movs	r3, #1
 800136a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136c:	2300      	movs	r3, #0
 800136e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001370:	2300      	movs	r3, #0
 8001372:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001374:	f107 0314 	add.w	r3, r7, #20
 8001378:	4619      	mov	r1, r3
 800137a:	480c      	ldr	r0, [pc, #48]	; (80013ac <MX_GPIO_Init+0x168>)
 800137c:	f001 f962 	bl	8002644 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001380:	2302      	movs	r3, #2
 8001382:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001384:	2303      	movs	r3, #3
 8001386:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001388:	2300      	movs	r3, #0
 800138a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800138c:	f107 0314 	add.w	r3, r7, #20
 8001390:	4619      	mov	r1, r3
 8001392:	4804      	ldr	r0, [pc, #16]	; (80013a4 <MX_GPIO_Init+0x160>)
 8001394:	f001 f956 	bl	8002644 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001398:	bf00      	nop
 800139a:	3728      	adds	r7, #40	; 0x28
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	40023800 	.word	0x40023800
 80013a4:	40021000 	.word	0x40021000
 80013a8:	40020000 	.word	0x40020000
 80013ac:	40020c00 	.word	0x40020c00

080013b0 <StartTaskDHT11>:
  */

osMessageQueueId_t DHT11QueueHandle;

void StartTaskDHT11(void * argument)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b092      	sub	sp, #72	; 0x48
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
	DHT11QueueHandle = osMessageQueueNew(DHT11_QUEUE_SIZE, sizeof(uint32_t[5]), NULL);
 80013b8:	2200      	movs	r2, #0
 80013ba:	2114      	movs	r1, #20
 80013bc:	2005      	movs	r0, #5
 80013be:	f003 fd2a 	bl	8004e16 <osMessageQueueNew>
 80013c2:	4603      	mov	r3, r0
 80013c4:	4a2b      	ldr	r2, [pc, #172]	; (8001474 <StartTaskDHT11+0xc4>)
 80013c6:	6013      	str	r3, [r2, #0]
  for(;;)
  {
    if (DHT11_Start())
 80013c8:	f7ff fce0 	bl	8000d8c <DHT11_Start>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d04b      	beq.n	800146a <StartTaskDHT11+0xba>
    {
      RHI = DHT11_Read(); // Relative humidity integral
 80013d2:	f7ff fd41 	bl	8000e58 <DHT11_Read>
 80013d6:	4603      	mov	r3, r0
 80013d8:	461a      	mov	r2, r3
 80013da:	4b27      	ldr	r3, [pc, #156]	; (8001478 <StartTaskDHT11+0xc8>)
 80013dc:	701a      	strb	r2, [r3, #0]
      RHD = DHT11_Read(); // Relative humidity decimal
 80013de:	f7ff fd3b 	bl	8000e58 <DHT11_Read>
 80013e2:	4603      	mov	r3, r0
 80013e4:	461a      	mov	r2, r3
 80013e6:	4b25      	ldr	r3, [pc, #148]	; (800147c <StartTaskDHT11+0xcc>)
 80013e8:	701a      	strb	r2, [r3, #0]
      TCI = DHT11_Read(); // Celsius integral
 80013ea:	f7ff fd35 	bl	8000e58 <DHT11_Read>
 80013ee:	4603      	mov	r3, r0
 80013f0:	461a      	mov	r2, r3
 80013f2:	4b23      	ldr	r3, [pc, #140]	; (8001480 <StartTaskDHT11+0xd0>)
 80013f4:	701a      	strb	r2, [r3, #0]
      TCD = DHT11_Read(); // Celsius decimal
 80013f6:	f7ff fd2f 	bl	8000e58 <DHT11_Read>
 80013fa:	4603      	mov	r3, r0
 80013fc:	461a      	mov	r2, r3
 80013fe:	4b21      	ldr	r3, [pc, #132]	; (8001484 <StartTaskDHT11+0xd4>)
 8001400:	701a      	strb	r2, [r3, #0]
      SUM = DHT11_Read(); // Check sum
 8001402:	f7ff fd29 	bl	8000e58 <DHT11_Read>
 8001406:	4603      	mov	r3, r0
 8001408:	461a      	mov	r2, r3
 800140a:	4b1f      	ldr	r3, [pc, #124]	; (8001488 <StartTaskDHT11+0xd8>)
 800140c:	701a      	strb	r2, [r3, #0]


      char temp[32];
      char humi[32];

      sprintf(temp, "Temp:%d\n", TCI);
 800140e:	4b1c      	ldr	r3, [pc, #112]	; (8001480 <StartTaskDHT11+0xd0>)
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	461a      	mov	r2, r3
 8001414:	f107 0308 	add.w	r3, r7, #8
 8001418:	491c      	ldr	r1, [pc, #112]	; (800148c <StartTaskDHT11+0xdc>)
 800141a:	4618      	mov	r0, r3
 800141c:	f006 fb3e 	bl	8007a9c <siprintf>
      sprintf(humi, "Humi:%d\n", RHI);
 8001420:	4b15      	ldr	r3, [pc, #84]	; (8001478 <StartTaskDHT11+0xc8>)
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	461a      	mov	r2, r3
 8001426:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800142a:	4919      	ldr	r1, [pc, #100]	; (8001490 <StartTaskDHT11+0xe0>)
 800142c:	4618      	mov	r0, r3
 800142e:	f006 fb35 	bl	8007a9c <siprintf>
      HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp), 1000);
 8001432:	f107 0308 	add.w	r3, r7, #8
 8001436:	4618      	mov	r0, r3
 8001438:	f7fe feca 	bl	80001d0 <strlen>
 800143c:	4603      	mov	r3, r0
 800143e:	b29a      	uxth	r2, r3
 8001440:	f107 0108 	add.w	r1, r7, #8
 8001444:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001448:	4812      	ldr	r0, [pc, #72]	; (8001494 <StartTaskDHT11+0xe4>)
 800144a:	f002 fbf2 	bl	8003c32 <HAL_UART_Transmit>
      HAL_UART_Transmit(&huart2, (uint8_t*)humi, strlen(humi), 1000);
 800144e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001452:	4618      	mov	r0, r3
 8001454:	f7fe febc 	bl	80001d0 <strlen>
 8001458:	4603      	mov	r3, r0
 800145a:	b29a      	uxth	r2, r3
 800145c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001460:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001464:	480b      	ldr	r0, [pc, #44]	; (8001494 <StartTaskDHT11+0xe4>)
 8001466:	f002 fbe4 	bl	8003c32 <HAL_UART_Transmit>

    }
    osDelay(2000);
 800146a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800146e:	f003 fcb7 	bl	8004de0 <osDelay>
    if (DHT11_Start())
 8001472:	e7a9      	b.n	80013c8 <StartTaskDHT11+0x18>
 8001474:	20000178 	.word	0x20000178
 8001478:	20000160 	.word	0x20000160
 800147c:	20000161 	.word	0x20000161
 8001480:	20000162 	.word	0x20000162
 8001484:	20000163 	.word	0x20000163
 8001488:	20000164 	.word	0x20000164
 800148c:	08008428 	.word	0x08008428
 8001490:	08008434 	.word	0x08008434
 8001494:	2000010c 	.word	0x2000010c

08001498 <StartTaskHC>:
/* USER CODE END Header_StartTaskHC */
osMessageQueueId_t HCQueueHandle;


void StartTaskHC(void *argument)
{
 8001498:	b590      	push	{r4, r7, lr}
 800149a:	b08b      	sub	sp, #44	; 0x2c
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  HCQueueHandle = osMessageQueueNew(HC_QUEUE_SIZE, sizeof(uint16_t), NULL);
 80014a0:	2200      	movs	r2, #0
 80014a2:	2102      	movs	r1, #2
 80014a4:	2005      	movs	r0, #5
 80014a6:	f003 fcb6 	bl	8004e16 <osMessageQueueNew>
 80014aa:	4603      	mov	r3, r0
 80014ac:	4a4a      	ldr	r2, [pc, #296]	; (80015d8 <StartTaskHC+0x140>)
 80014ae:	6013      	str	r3, [r2, #0]
  for (;;)
  {
    HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);
 80014b0:	2201      	movs	r2, #1
 80014b2:	2140      	movs	r1, #64	; 0x40
 80014b4:	4849      	ldr	r0, [pc, #292]	; (80015dc <StartTaskHC+0x144>)
 80014b6:	f001 fa79 	bl	80029ac <HAL_GPIO_WritePin>
    __HAL_TIM_SET_COUNTER(&htim1, 0);
 80014ba:	4b49      	ldr	r3, [pc, #292]	; (80015e0 <StartTaskHC+0x148>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	2200      	movs	r2, #0
 80014c0:	625a      	str	r2, [r3, #36]	; 0x24
    while (__HAL_TIM_GET_COUNTER(&htim1) < 10);
 80014c2:	bf00      	nop
 80014c4:	4b46      	ldr	r3, [pc, #280]	; (80015e0 <StartTaskHC+0x148>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ca:	2b09      	cmp	r3, #9
 80014cc:	d9fa      	bls.n	80014c4 <StartTaskHC+0x2c>
    HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);
 80014ce:	2200      	movs	r2, #0
 80014d0:	2140      	movs	r1, #64	; 0x40
 80014d2:	4842      	ldr	r0, [pc, #264]	; (80015dc <StartTaskHC+0x144>)
 80014d4:	f001 fa6a 	bl	80029ac <HAL_GPIO_WritePin>

    pMillis = HAL_GetTick();
 80014d8:	f000 fb14 	bl	8001b04 <HAL_GetTick>
 80014dc:	4603      	mov	r3, r0
 80014de:	4a41      	ldr	r2, [pc, #260]	; (80015e4 <StartTaskHC+0x14c>)
 80014e0:	6013      	str	r3, [r2, #0]
    while (!(HAL_GPIO_ReadPin(ECHO_PORT, ECHO_PIN)) && pMillis + 10 > HAL_GetTick());
 80014e2:	bf00      	nop
 80014e4:	2120      	movs	r1, #32
 80014e6:	483d      	ldr	r0, [pc, #244]	; (80015dc <StartTaskHC+0x144>)
 80014e8:	f001 fa48 	bl	800297c <HAL_GPIO_ReadPin>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d108      	bne.n	8001504 <StartTaskHC+0x6c>
 80014f2:	4b3c      	ldr	r3, [pc, #240]	; (80015e4 <StartTaskHC+0x14c>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f103 040a 	add.w	r4, r3, #10
 80014fa:	f000 fb03 	bl	8001b04 <HAL_GetTick>
 80014fe:	4603      	mov	r3, r0
 8001500:	429c      	cmp	r4, r3
 8001502:	d8ef      	bhi.n	80014e4 <StartTaskHC+0x4c>
    Value1 = __HAL_TIM_GET_COUNTER(&htim1);
 8001504:	4b36      	ldr	r3, [pc, #216]	; (80015e0 <StartTaskHC+0x148>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800150a:	4a37      	ldr	r2, [pc, #220]	; (80015e8 <StartTaskHC+0x150>)
 800150c:	6013      	str	r3, [r2, #0]

    pMillis = HAL_GetTick();
 800150e:	f000 faf9 	bl	8001b04 <HAL_GetTick>
 8001512:	4603      	mov	r3, r0
 8001514:	4a33      	ldr	r2, [pc, #204]	; (80015e4 <StartTaskHC+0x14c>)
 8001516:	6013      	str	r3, [r2, #0]
    while ((HAL_GPIO_ReadPin(ECHO_PORT, ECHO_PIN)) && pMillis + 50 > HAL_GetTick());
 8001518:	bf00      	nop
 800151a:	2120      	movs	r1, #32
 800151c:	482f      	ldr	r0, [pc, #188]	; (80015dc <StartTaskHC+0x144>)
 800151e:	f001 fa2d 	bl	800297c <HAL_GPIO_ReadPin>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d008      	beq.n	800153a <StartTaskHC+0xa2>
 8001528:	4b2e      	ldr	r3, [pc, #184]	; (80015e4 <StartTaskHC+0x14c>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f103 0432 	add.w	r4, r3, #50	; 0x32
 8001530:	f000 fae8 	bl	8001b04 <HAL_GetTick>
 8001534:	4603      	mov	r3, r0
 8001536:	429c      	cmp	r4, r3
 8001538:	d8ef      	bhi.n	800151a <StartTaskHC+0x82>
    Value2 = __HAL_TIM_GET_COUNTER(&htim1);
 800153a:	4b29      	ldr	r3, [pc, #164]	; (80015e0 <StartTaskHC+0x148>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001540:	4a2a      	ldr	r2, [pc, #168]	; (80015ec <StartTaskHC+0x154>)
 8001542:	6013      	str	r3, [r2, #0]

    Distance = ((Value2 - Value1) * 0.034) / 2;
 8001544:	4b29      	ldr	r3, [pc, #164]	; (80015ec <StartTaskHC+0x154>)
 8001546:	681a      	ldr	r2, [r3, #0]
 8001548:	4b27      	ldr	r3, [pc, #156]	; (80015e8 <StartTaskHC+0x150>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	4618      	mov	r0, r3
 8001550:	f7fe ffd8 	bl	8000504 <__aeabi_ui2d>
 8001554:	a31e      	add	r3, pc, #120	; (adr r3, 80015d0 <StartTaskHC+0x138>)
 8001556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800155a:	f7ff f84d 	bl	80005f8 <__aeabi_dmul>
 800155e:	4602      	mov	r2, r0
 8001560:	460b      	mov	r3, r1
 8001562:	4610      	mov	r0, r2
 8001564:	4619      	mov	r1, r3
 8001566:	f04f 0200 	mov.w	r2, #0
 800156a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800156e:	f7ff f96d 	bl	800084c <__aeabi_ddiv>
 8001572:	4602      	mov	r2, r0
 8001574:	460b      	mov	r3, r1
 8001576:	4610      	mov	r0, r2
 8001578:	4619      	mov	r1, r3
 800157a:	f7ff fa4f 	bl	8000a1c <__aeabi_d2uiz>
 800157e:	4603      	mov	r3, r0
 8001580:	b29a      	uxth	r2, r3
 8001582:	4b1b      	ldr	r3, [pc, #108]	; (80015f0 <StartTaskHC+0x158>)
 8001584:	801a      	strh	r2, [r3, #0]
    osMessageQueuePut(HCQueueHandle, &Distance, 0, 0);
 8001586:	4b14      	ldr	r3, [pc, #80]	; (80015d8 <StartTaskHC+0x140>)
 8001588:	6818      	ldr	r0, [r3, #0]
 800158a:	2300      	movs	r3, #0
 800158c:	2200      	movs	r2, #0
 800158e:	4918      	ldr	r1, [pc, #96]	; (80015f0 <StartTaskHC+0x158>)
 8001590:	f003 fcb4 	bl	8004efc <osMessageQueuePut>

    char dis[32];
    sprintf(dis, "Distance:%d\n", Distance);
 8001594:	4b16      	ldr	r3, [pc, #88]	; (80015f0 <StartTaskHC+0x158>)
 8001596:	881b      	ldrh	r3, [r3, #0]
 8001598:	461a      	mov	r2, r3
 800159a:	f107 0308 	add.w	r3, r7, #8
 800159e:	4915      	ldr	r1, [pc, #84]	; (80015f4 <StartTaskHC+0x15c>)
 80015a0:	4618      	mov	r0, r3
 80015a2:	f006 fa7b 	bl	8007a9c <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t *)dis, strlen(dis), 1000);
 80015a6:	f107 0308 	add.w	r3, r7, #8
 80015aa:	4618      	mov	r0, r3
 80015ac:	f7fe fe10 	bl	80001d0 <strlen>
 80015b0:	4603      	mov	r3, r0
 80015b2:	b29a      	uxth	r2, r3
 80015b4:	f107 0108 	add.w	r1, r7, #8
 80015b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015bc:	480e      	ldr	r0, [pc, #56]	; (80015f8 <StartTaskHC+0x160>)
 80015be:	f002 fb38 	bl	8003c32 <HAL_UART_Transmit>

    osDelay(2000);
 80015c2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80015c6:	f003 fc0b 	bl	8004de0 <osDelay>
  {
 80015ca:	e771      	b.n	80014b0 <StartTaskHC+0x18>
 80015cc:	f3af 8000 	nop.w
 80015d0:	b020c49c 	.word	0xb020c49c
 80015d4:	3fa16872 	.word	0x3fa16872
 80015d8:	2000017c 	.word	0x2000017c
 80015dc:	40020c00 	.word	0x40020c00
 80015e0:	200000c4 	.word	0x200000c4
 80015e4:	20000168 	.word	0x20000168
 80015e8:	2000016c 	.word	0x2000016c
 80015ec:	20000170 	.word	0x20000170
 80015f0:	20000174 	.word	0x20000174
 80015f4:	08008440 	.word	0x08008440
 80015f8:	2000010c 	.word	0x2000010c

080015fc <StartTaskRainSensor>:
*/
/* USER CODE END Header_StartTaskRainSensor */

osMessageQueueId_t RainSensorQueueHandle;
void StartTaskRainSensor(void *argument)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b08a      	sub	sp, #40	; 0x28
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
	 RainSensorQueueHandle = osMessageQueueNew(RAIN_SENSOR_QUEUE_SIZE, sizeof(uint16_t), NULL);
 8001604:	2200      	movs	r2, #0
 8001606:	2102      	movs	r1, #2
 8001608:	2005      	movs	r0, #5
 800160a:	f003 fc04 	bl	8004e16 <osMessageQueueNew>
 800160e:	4603      	mov	r3, r0
 8001610:	4a19      	ldr	r2, [pc, #100]	; (8001678 <StartTaskRainSensor+0x7c>)
 8001612:	6013      	str	r3, [r2, #0]
  for(;;)
  {
    HAL_ADC_Start(&hadc1);
 8001614:	4819      	ldr	r0, [pc, #100]	; (800167c <StartTaskRainSensor+0x80>)
 8001616:	f000 fae9 	bl	8001bec <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, 20);
 800161a:	2114      	movs	r1, #20
 800161c:	4817      	ldr	r0, [pc, #92]	; (800167c <StartTaskRainSensor+0x80>)
 800161e:	f000 fbb7 	bl	8001d90 <HAL_ADC_PollForConversion>
    rainSensor = HAL_ADC_GetValue(&hadc1);
 8001622:	4816      	ldr	r0, [pc, #88]	; (800167c <StartTaskRainSensor+0x80>)
 8001624:	f000 fc3f 	bl	8001ea6 <HAL_ADC_GetValue>
 8001628:	4603      	mov	r3, r0
 800162a:	b29a      	uxth	r2, r3
 800162c:	4b14      	ldr	r3, [pc, #80]	; (8001680 <StartTaskRainSensor+0x84>)
 800162e:	801a      	strh	r2, [r3, #0]

    char rain[32];
    sprintf(rain, "Rain:%d\n", rainSensor);
 8001630:	4b13      	ldr	r3, [pc, #76]	; (8001680 <StartTaskRainSensor+0x84>)
 8001632:	881b      	ldrh	r3, [r3, #0]
 8001634:	461a      	mov	r2, r3
 8001636:	f107 0308 	add.w	r3, r7, #8
 800163a:	4912      	ldr	r1, [pc, #72]	; (8001684 <StartTaskRainSensor+0x88>)
 800163c:	4618      	mov	r0, r3
 800163e:	f006 fa2d 	bl	8007a9c <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)rain, strlen(rain), 1000);
 8001642:	f107 0308 	add.w	r3, r7, #8
 8001646:	4618      	mov	r0, r3
 8001648:	f7fe fdc2 	bl	80001d0 <strlen>
 800164c:	4603      	mov	r3, r0
 800164e:	b29a      	uxth	r2, r3
 8001650:	f107 0108 	add.w	r1, r7, #8
 8001654:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001658:	480b      	ldr	r0, [pc, #44]	; (8001688 <StartTaskRainSensor+0x8c>)
 800165a:	f002 faea 	bl	8003c32 <HAL_UART_Transmit>

    osMessageQueuePut(RainSensorQueueHandle, &rainSensor, 0, 0);
 800165e:	4b06      	ldr	r3, [pc, #24]	; (8001678 <StartTaskRainSensor+0x7c>)
 8001660:	6818      	ldr	r0, [r3, #0]
 8001662:	2300      	movs	r3, #0
 8001664:	2200      	movs	r2, #0
 8001666:	4906      	ldr	r1, [pc, #24]	; (8001680 <StartTaskRainSensor+0x84>)
 8001668:	f003 fc48 	bl	8004efc <osMessageQueuePut>

    osDelay(2000);
 800166c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001670:	f003 fbb6 	bl	8004de0 <osDelay>
  {
 8001674:	e7ce      	b.n	8001614 <StartTaskRainSensor+0x18>
 8001676:	bf00      	nop
 8001678:	20000180 	.word	0x20000180
 800167c:	2000007c 	.word	0x2000007c
 8001680:	20000176 	.word	0x20000176
 8001684:	08008450 	.word	0x08008450
 8001688:	2000010c 	.word	0x2000010c

0800168c <StartTaskLED>:
  }
}

void StartTaskLED(void *argument)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b084      	sub	sp, #16
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  for (;;)
  {
    uint16_t distance;
    if (osMessageQueueGet(HCQueueHandle, &distance, NULL, osWaitForever) == osOK)
 8001694:	4b10      	ldr	r3, [pc, #64]	; (80016d8 <StartTaskLED+0x4c>)
 8001696:	6818      	ldr	r0, [r3, #0]
 8001698:	f107 010e 	add.w	r1, r7, #14
 800169c:	f04f 33ff 	mov.w	r3, #4294967295
 80016a0:	2200      	movs	r2, #0
 80016a2:	f003 fc8b 	bl	8004fbc <osMessageQueueGet>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d1f3      	bne.n	8001694 <StartTaskLED+0x8>
    {
      if (distance < 10 || distance > 800)
 80016ac:	89fb      	ldrh	r3, [r7, #14]
 80016ae:	2b09      	cmp	r3, #9
 80016b0:	d903      	bls.n	80016ba <StartTaskLED+0x2e>
 80016b2:	89fb      	ldrh	r3, [r7, #14]
 80016b4:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80016b8:	d906      	bls.n	80016c8 <StartTaskLED+0x3c>
      {
        HAL_GPIO_WritePin(LED_PORT, LED_PIN, GPIO_PIN_SET);
 80016ba:	2201      	movs	r2, #1
 80016bc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016c0:	4806      	ldr	r0, [pc, #24]	; (80016dc <StartTaskLED+0x50>)
 80016c2:	f001 f973 	bl	80029ac <HAL_GPIO_WritePin>
 80016c6:	e005      	b.n	80016d4 <StartTaskLED+0x48>
//        sprintf(msg, "FLOOD:\n");
//        HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), 1000);
      }
      else
      {
        HAL_GPIO_WritePin(LED_PORT, LED_PIN, GPIO_PIN_RESET);
 80016c8:	2200      	movs	r2, #0
 80016ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016ce:	4803      	ldr	r0, [pc, #12]	; (80016dc <StartTaskLED+0x50>)
 80016d0:	f001 f96c 	bl	80029ac <HAL_GPIO_WritePin>
  {
 80016d4:	e7de      	b.n	8001694 <StartTaskLED+0x8>
 80016d6:	bf00      	nop
 80016d8:	2000017c 	.word	0x2000017c
 80016dc:	40020c00 	.word	0x40020c00

080016e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016e4:	b672      	cpsid	i
}
 80016e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016e8:	e7fe      	b.n	80016e8 <Error_Handler+0x8>
	...

080016ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016f2:	2300      	movs	r3, #0
 80016f4:	607b      	str	r3, [r7, #4]
 80016f6:	4b12      	ldr	r3, [pc, #72]	; (8001740 <HAL_MspInit+0x54>)
 80016f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016fa:	4a11      	ldr	r2, [pc, #68]	; (8001740 <HAL_MspInit+0x54>)
 80016fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001700:	6453      	str	r3, [r2, #68]	; 0x44
 8001702:	4b0f      	ldr	r3, [pc, #60]	; (8001740 <HAL_MspInit+0x54>)
 8001704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001706:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800170a:	607b      	str	r3, [r7, #4]
 800170c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800170e:	2300      	movs	r3, #0
 8001710:	603b      	str	r3, [r7, #0]
 8001712:	4b0b      	ldr	r3, [pc, #44]	; (8001740 <HAL_MspInit+0x54>)
 8001714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001716:	4a0a      	ldr	r2, [pc, #40]	; (8001740 <HAL_MspInit+0x54>)
 8001718:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800171c:	6413      	str	r3, [r2, #64]	; 0x40
 800171e:	4b08      	ldr	r3, [pc, #32]	; (8001740 <HAL_MspInit+0x54>)
 8001720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001722:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001726:	603b      	str	r3, [r7, #0]
 8001728:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800172a:	2200      	movs	r2, #0
 800172c:	210f      	movs	r1, #15
 800172e:	f06f 0001 	mvn.w	r0, #1
 8001732:	f000 febe 	bl	80024b2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001736:	bf00      	nop
 8001738:	3708      	adds	r7, #8
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	40023800 	.word	0x40023800

08001744 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b08a      	sub	sp, #40	; 0x28
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800174c:	f107 0314 	add.w	r3, r7, #20
 8001750:	2200      	movs	r2, #0
 8001752:	601a      	str	r2, [r3, #0]
 8001754:	605a      	str	r2, [r3, #4]
 8001756:	609a      	str	r2, [r3, #8]
 8001758:	60da      	str	r2, [r3, #12]
 800175a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a17      	ldr	r2, [pc, #92]	; (80017c0 <HAL_ADC_MspInit+0x7c>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d127      	bne.n	80017b6 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001766:	2300      	movs	r3, #0
 8001768:	613b      	str	r3, [r7, #16]
 800176a:	4b16      	ldr	r3, [pc, #88]	; (80017c4 <HAL_ADC_MspInit+0x80>)
 800176c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800176e:	4a15      	ldr	r2, [pc, #84]	; (80017c4 <HAL_ADC_MspInit+0x80>)
 8001770:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001774:	6453      	str	r3, [r2, #68]	; 0x44
 8001776:	4b13      	ldr	r3, [pc, #76]	; (80017c4 <HAL_ADC_MspInit+0x80>)
 8001778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800177a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800177e:	613b      	str	r3, [r7, #16]
 8001780:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001782:	2300      	movs	r3, #0
 8001784:	60fb      	str	r3, [r7, #12]
 8001786:	4b0f      	ldr	r3, [pc, #60]	; (80017c4 <HAL_ADC_MspInit+0x80>)
 8001788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178a:	4a0e      	ldr	r2, [pc, #56]	; (80017c4 <HAL_ADC_MspInit+0x80>)
 800178c:	f043 0301 	orr.w	r3, r3, #1
 8001790:	6313      	str	r3, [r2, #48]	; 0x30
 8001792:	4b0c      	ldr	r3, [pc, #48]	; (80017c4 <HAL_ADC_MspInit+0x80>)
 8001794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001796:	f003 0301 	and.w	r3, r3, #1
 800179a:	60fb      	str	r3, [r7, #12]
 800179c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800179e:	2301      	movs	r3, #1
 80017a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017a2:	2303      	movs	r3, #3
 80017a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a6:	2300      	movs	r3, #0
 80017a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017aa:	f107 0314 	add.w	r3, r7, #20
 80017ae:	4619      	mov	r1, r3
 80017b0:	4805      	ldr	r0, [pc, #20]	; (80017c8 <HAL_ADC_MspInit+0x84>)
 80017b2:	f000 ff47 	bl	8002644 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80017b6:	bf00      	nop
 80017b8:	3728      	adds	r7, #40	; 0x28
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	40012000 	.word	0x40012000
 80017c4:	40023800 	.word	0x40023800
 80017c8:	40020000 	.word	0x40020000

080017cc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b084      	sub	sp, #16
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a18      	ldr	r2, [pc, #96]	; (800183c <HAL_TIM_Base_MspInit+0x70>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d116      	bne.n	800180c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80017de:	2300      	movs	r3, #0
 80017e0:	60fb      	str	r3, [r7, #12]
 80017e2:	4b17      	ldr	r3, [pc, #92]	; (8001840 <HAL_TIM_Base_MspInit+0x74>)
 80017e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017e6:	4a16      	ldr	r2, [pc, #88]	; (8001840 <HAL_TIM_Base_MspInit+0x74>)
 80017e8:	f043 0301 	orr.w	r3, r3, #1
 80017ec:	6453      	str	r3, [r2, #68]	; 0x44
 80017ee:	4b14      	ldr	r3, [pc, #80]	; (8001840 <HAL_TIM_Base_MspInit+0x74>)
 80017f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017f2:	f003 0301 	and.w	r3, r3, #1
 80017f6:	60fb      	str	r3, [r7, #12]
 80017f8:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 80017fa:	2200      	movs	r2, #0
 80017fc:	2105      	movs	r1, #5
 80017fe:	201b      	movs	r0, #27
 8001800:	f000 fe57 	bl	80024b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001804:	201b      	movs	r0, #27
 8001806:	f000 fe70 	bl	80024ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800180a:	e012      	b.n	8001832 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM2)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001814:	d10d      	bne.n	8001832 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001816:	2300      	movs	r3, #0
 8001818:	60bb      	str	r3, [r7, #8]
 800181a:	4b09      	ldr	r3, [pc, #36]	; (8001840 <HAL_TIM_Base_MspInit+0x74>)
 800181c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181e:	4a08      	ldr	r2, [pc, #32]	; (8001840 <HAL_TIM_Base_MspInit+0x74>)
 8001820:	f043 0301 	orr.w	r3, r3, #1
 8001824:	6413      	str	r3, [r2, #64]	; 0x40
 8001826:	4b06      	ldr	r3, [pc, #24]	; (8001840 <HAL_TIM_Base_MspInit+0x74>)
 8001828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182a:	f003 0301 	and.w	r3, r3, #1
 800182e:	60bb      	str	r3, [r7, #8]
 8001830:	68bb      	ldr	r3, [r7, #8]
}
 8001832:	bf00      	nop
 8001834:	3710      	adds	r7, #16
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	40010000 	.word	0x40010000
 8001840:	40023800 	.word	0x40023800

08001844 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b08a      	sub	sp, #40	; 0x28
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800184c:	f107 0314 	add.w	r3, r7, #20
 8001850:	2200      	movs	r2, #0
 8001852:	601a      	str	r2, [r3, #0]
 8001854:	605a      	str	r2, [r3, #4]
 8001856:	609a      	str	r2, [r3, #8]
 8001858:	60da      	str	r2, [r3, #12]
 800185a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a1d      	ldr	r2, [pc, #116]	; (80018d8 <HAL_UART_MspInit+0x94>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d133      	bne.n	80018ce <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001866:	2300      	movs	r3, #0
 8001868:	613b      	str	r3, [r7, #16]
 800186a:	4b1c      	ldr	r3, [pc, #112]	; (80018dc <HAL_UART_MspInit+0x98>)
 800186c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186e:	4a1b      	ldr	r2, [pc, #108]	; (80018dc <HAL_UART_MspInit+0x98>)
 8001870:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001874:	6413      	str	r3, [r2, #64]	; 0x40
 8001876:	4b19      	ldr	r3, [pc, #100]	; (80018dc <HAL_UART_MspInit+0x98>)
 8001878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800187e:	613b      	str	r3, [r7, #16]
 8001880:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001882:	2300      	movs	r3, #0
 8001884:	60fb      	str	r3, [r7, #12]
 8001886:	4b15      	ldr	r3, [pc, #84]	; (80018dc <HAL_UART_MspInit+0x98>)
 8001888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188a:	4a14      	ldr	r2, [pc, #80]	; (80018dc <HAL_UART_MspInit+0x98>)
 800188c:	f043 0301 	orr.w	r3, r3, #1
 8001890:	6313      	str	r3, [r2, #48]	; 0x30
 8001892:	4b12      	ldr	r3, [pc, #72]	; (80018dc <HAL_UART_MspInit+0x98>)
 8001894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001896:	f003 0301 	and.w	r3, r3, #1
 800189a:	60fb      	str	r3, [r7, #12]
 800189c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800189e:	230c      	movs	r3, #12
 80018a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a2:	2302      	movs	r3, #2
 80018a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a6:	2300      	movs	r3, #0
 80018a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018aa:	2303      	movs	r3, #3
 80018ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80018ae:	2307      	movs	r3, #7
 80018b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018b2:	f107 0314 	add.w	r3, r7, #20
 80018b6:	4619      	mov	r1, r3
 80018b8:	4809      	ldr	r0, [pc, #36]	; (80018e0 <HAL_UART_MspInit+0x9c>)
 80018ba:	f000 fec3 	bl	8002644 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80018be:	2200      	movs	r2, #0
 80018c0:	2105      	movs	r1, #5
 80018c2:	2026      	movs	r0, #38	; 0x26
 80018c4:	f000 fdf5 	bl	80024b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80018c8:	2026      	movs	r0, #38	; 0x26
 80018ca:	f000 fe0e 	bl	80024ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80018ce:	bf00      	nop
 80018d0:	3728      	adds	r7, #40	; 0x28
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	40004400 	.word	0x40004400
 80018dc:	40023800 	.word	0x40023800
 80018e0:	40020000 	.word	0x40020000

080018e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018e8:	e7fe      	b.n	80018e8 <NMI_Handler+0x4>

080018ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018ea:	b480      	push	{r7}
 80018ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018ee:	e7fe      	b.n	80018ee <HardFault_Handler+0x4>

080018f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018f4:	e7fe      	b.n	80018f4 <MemManage_Handler+0x4>

080018f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018f6:	b480      	push	{r7}
 80018f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018fa:	e7fe      	b.n	80018fa <BusFault_Handler+0x4>

080018fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001900:	e7fe      	b.n	8001900 <UsageFault_Handler+0x4>

08001902 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001902:	b480      	push	{r7}
 8001904:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001906:	bf00      	nop
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr

08001910 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001914:	f000 f8e2 	bl	8001adc <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001918:	f005 f85a 	bl	80069d0 <xTaskGetSchedulerState>
 800191c:	4603      	mov	r3, r0
 800191e:	2b01      	cmp	r3, #1
 8001920:	d001      	beq.n	8001926 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001922:	f005 fe41 	bl	80075a8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001926:	bf00      	nop
 8001928:	bd80      	pop	{r7, pc}
	...

0800192c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001930:	4802      	ldr	r0, [pc, #8]	; (800193c <TIM1_CC_IRQHandler+0x10>)
 8001932:	f001 fd65 	bl	8003400 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001936:	bf00      	nop
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	200000c4 	.word	0x200000c4

08001940 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001944:	4802      	ldr	r0, [pc, #8]	; (8001950 <USART2_IRQHandler+0x10>)
 8001946:	f002 fa07 	bl	8003d58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800194a:	bf00      	nop
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	2000010c 	.word	0x2000010c

08001954 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b086      	sub	sp, #24
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800195c:	4a14      	ldr	r2, [pc, #80]	; (80019b0 <_sbrk+0x5c>)
 800195e:	4b15      	ldr	r3, [pc, #84]	; (80019b4 <_sbrk+0x60>)
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001968:	4b13      	ldr	r3, [pc, #76]	; (80019b8 <_sbrk+0x64>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d102      	bne.n	8001976 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001970:	4b11      	ldr	r3, [pc, #68]	; (80019b8 <_sbrk+0x64>)
 8001972:	4a12      	ldr	r2, [pc, #72]	; (80019bc <_sbrk+0x68>)
 8001974:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001976:	4b10      	ldr	r3, [pc, #64]	; (80019b8 <_sbrk+0x64>)
 8001978:	681a      	ldr	r2, [r3, #0]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	4413      	add	r3, r2
 800197e:	693a      	ldr	r2, [r7, #16]
 8001980:	429a      	cmp	r2, r3
 8001982:	d207      	bcs.n	8001994 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001984:	f006 f8b2 	bl	8007aec <__errno>
 8001988:	4603      	mov	r3, r0
 800198a:	220c      	movs	r2, #12
 800198c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800198e:	f04f 33ff 	mov.w	r3, #4294967295
 8001992:	e009      	b.n	80019a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001994:	4b08      	ldr	r3, [pc, #32]	; (80019b8 <_sbrk+0x64>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800199a:	4b07      	ldr	r3, [pc, #28]	; (80019b8 <_sbrk+0x64>)
 800199c:	681a      	ldr	r2, [r3, #0]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	4413      	add	r3, r2
 80019a2:	4a05      	ldr	r2, [pc, #20]	; (80019b8 <_sbrk+0x64>)
 80019a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019a6:	68fb      	ldr	r3, [r7, #12]
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	3718      	adds	r7, #24
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	20020000 	.word	0x20020000
 80019b4:	00000400 	.word	0x00000400
 80019b8:	20000184 	.word	0x20000184
 80019bc:	20004c28 	.word	0x20004c28

080019c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019c4:	4b06      	ldr	r3, [pc, #24]	; (80019e0 <SystemInit+0x20>)
 80019c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019ca:	4a05      	ldr	r2, [pc, #20]	; (80019e0 <SystemInit+0x20>)
 80019cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019d4:	bf00      	nop
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr
 80019de:	bf00      	nop
 80019e0:	e000ed00 	.word	0xe000ed00

080019e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80019e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a1c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80019e8:	480d      	ldr	r0, [pc, #52]	; (8001a20 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80019ea:	490e      	ldr	r1, [pc, #56]	; (8001a24 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80019ec:	4a0e      	ldr	r2, [pc, #56]	; (8001a28 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80019ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019f0:	e002      	b.n	80019f8 <LoopCopyDataInit>

080019f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019f6:	3304      	adds	r3, #4

080019f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019fc:	d3f9      	bcc.n	80019f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019fe:	4a0b      	ldr	r2, [pc, #44]	; (8001a2c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001a00:	4c0b      	ldr	r4, [pc, #44]	; (8001a30 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001a02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a04:	e001      	b.n	8001a0a <LoopFillZerobss>

08001a06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a08:	3204      	adds	r2, #4

08001a0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a0c:	d3fb      	bcc.n	8001a06 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001a0e:	f7ff ffd7 	bl	80019c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a12:	f006 f871 	bl	8007af8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a16:	f7ff fa85 	bl	8000f24 <main>
  bx  lr    
 8001a1a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001a1c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001a20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a24:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001a28:	08008560 	.word	0x08008560
  ldr r2, =_sbss
 8001a2c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001a30:	20004c24 	.word	0x20004c24

08001a34 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a34:	e7fe      	b.n	8001a34 <ADC_IRQHandler>
	...

08001a38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a3c:	4b0e      	ldr	r3, [pc, #56]	; (8001a78 <HAL_Init+0x40>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a0d      	ldr	r2, [pc, #52]	; (8001a78 <HAL_Init+0x40>)
 8001a42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a46:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a48:	4b0b      	ldr	r3, [pc, #44]	; (8001a78 <HAL_Init+0x40>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a0a      	ldr	r2, [pc, #40]	; (8001a78 <HAL_Init+0x40>)
 8001a4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a52:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a54:	4b08      	ldr	r3, [pc, #32]	; (8001a78 <HAL_Init+0x40>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a07      	ldr	r2, [pc, #28]	; (8001a78 <HAL_Init+0x40>)
 8001a5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a60:	2003      	movs	r0, #3
 8001a62:	f000 fd1b 	bl	800249c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a66:	200f      	movs	r0, #15
 8001a68:	f000 f808 	bl	8001a7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a6c:	f7ff fe3e 	bl	80016ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a70:	2300      	movs	r3, #0
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	40023c00 	.word	0x40023c00

08001a7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a84:	4b12      	ldr	r3, [pc, #72]	; (8001ad0 <HAL_InitTick+0x54>)
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	4b12      	ldr	r3, [pc, #72]	; (8001ad4 <HAL_InitTick+0x58>)
 8001a8a:	781b      	ldrb	r3, [r3, #0]
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a92:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a96:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f000 fd33 	bl	8002506 <HAL_SYSTICK_Config>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d001      	beq.n	8001aaa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e00e      	b.n	8001ac8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2b0f      	cmp	r3, #15
 8001aae:	d80a      	bhi.n	8001ac6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	6879      	ldr	r1, [r7, #4]
 8001ab4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ab8:	f000 fcfb 	bl	80024b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001abc:	4a06      	ldr	r2, [pc, #24]	; (8001ad8 <HAL_InitTick+0x5c>)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	e000      	b.n	8001ac8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	3708      	adds	r7, #8
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	20000000 	.word	0x20000000
 8001ad4:	20000008 	.word	0x20000008
 8001ad8:	20000004 	.word	0x20000004

08001adc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ae0:	4b06      	ldr	r3, [pc, #24]	; (8001afc <HAL_IncTick+0x20>)
 8001ae2:	781b      	ldrb	r3, [r3, #0]
 8001ae4:	461a      	mov	r2, r3
 8001ae6:	4b06      	ldr	r3, [pc, #24]	; (8001b00 <HAL_IncTick+0x24>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4413      	add	r3, r2
 8001aec:	4a04      	ldr	r2, [pc, #16]	; (8001b00 <HAL_IncTick+0x24>)
 8001aee:	6013      	str	r3, [r2, #0]
}
 8001af0:	bf00      	nop
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr
 8001afa:	bf00      	nop
 8001afc:	20000008 	.word	0x20000008
 8001b00:	20000188 	.word	0x20000188

08001b04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
  return uwTick;
 8001b08:	4b03      	ldr	r3, [pc, #12]	; (8001b18 <HAL_GetTick+0x14>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr
 8001b16:	bf00      	nop
 8001b18:	20000188 	.word	0x20000188

08001b1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b084      	sub	sp, #16
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b24:	f7ff ffee 	bl	8001b04 <HAL_GetTick>
 8001b28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b34:	d005      	beq.n	8001b42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b36:	4b0a      	ldr	r3, [pc, #40]	; (8001b60 <HAL_Delay+0x44>)
 8001b38:	781b      	ldrb	r3, [r3, #0]
 8001b3a:	461a      	mov	r2, r3
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	4413      	add	r3, r2
 8001b40:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b42:	bf00      	nop
 8001b44:	f7ff ffde 	bl	8001b04 <HAL_GetTick>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	68bb      	ldr	r3, [r7, #8]
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	68fa      	ldr	r2, [r7, #12]
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d8f7      	bhi.n	8001b44 <HAL_Delay+0x28>
  {
  }
}
 8001b54:	bf00      	nop
 8001b56:	bf00      	nop
 8001b58:	3710      	adds	r7, #16
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	20000008 	.word	0x20000008

08001b64 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b084      	sub	sp, #16
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d101      	bne.n	8001b7a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e033      	b.n	8001be2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d109      	bne.n	8001b96 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b82:	6878      	ldr	r0, [r7, #4]
 8001b84:	f7ff fdde 	bl	8001744 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2200      	movs	r2, #0
 8001b92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9a:	f003 0310 	and.w	r3, r3, #16
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d118      	bne.n	8001bd4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001baa:	f023 0302 	bic.w	r3, r3, #2
 8001bae:	f043 0202 	orr.w	r2, r3, #2
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	f000 faa4 	bl	8002104 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc6:	f023 0303 	bic.w	r3, r3, #3
 8001bca:	f043 0201 	orr.w	r2, r3, #1
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	641a      	str	r2, [r3, #64]	; 0x40
 8001bd2:	e001      	b.n	8001bd8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2200      	movs	r2, #0
 8001bdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001be0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3710      	adds	r7, #16
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
	...

08001bec <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b085      	sub	sp, #20
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001bfe:	2b01      	cmp	r3, #1
 8001c00:	d101      	bne.n	8001c06 <HAL_ADC_Start+0x1a>
 8001c02:	2302      	movs	r3, #2
 8001c04:	e0b2      	b.n	8001d6c <HAL_ADC_Start+0x180>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2201      	movs	r2, #1
 8001c0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	f003 0301 	and.w	r3, r3, #1
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	d018      	beq.n	8001c4e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	689a      	ldr	r2, [r3, #8]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f042 0201 	orr.w	r2, r2, #1
 8001c2a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001c2c:	4b52      	ldr	r3, [pc, #328]	; (8001d78 <HAL_ADC_Start+0x18c>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a52      	ldr	r2, [pc, #328]	; (8001d7c <HAL_ADC_Start+0x190>)
 8001c32:	fba2 2303 	umull	r2, r3, r2, r3
 8001c36:	0c9a      	lsrs	r2, r3, #18
 8001c38:	4613      	mov	r3, r2
 8001c3a:	005b      	lsls	r3, r3, #1
 8001c3c:	4413      	add	r3, r2
 8001c3e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001c40:	e002      	b.n	8001c48 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001c42:	68bb      	ldr	r3, [r7, #8]
 8001c44:	3b01      	subs	r3, #1
 8001c46:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d1f9      	bne.n	8001c42 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	689b      	ldr	r3, [r3, #8]
 8001c54:	f003 0301 	and.w	r3, r3, #1
 8001c58:	2b01      	cmp	r3, #1
 8001c5a:	d17a      	bne.n	8001d52 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c60:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001c64:	f023 0301 	bic.w	r3, r3, #1
 8001c68:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d007      	beq.n	8001c8e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c82:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001c86:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c92:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c9a:	d106      	bne.n	8001caa <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ca0:	f023 0206 	bic.w	r2, r3, #6
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	645a      	str	r2, [r3, #68]	; 0x44
 8001ca8:	e002      	b.n	8001cb0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2200      	movs	r2, #0
 8001cae:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001cb8:	4b31      	ldr	r3, [pc, #196]	; (8001d80 <HAL_ADC_Start+0x194>)
 8001cba:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001cc4:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	f003 031f 	and.w	r3, r3, #31
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d12a      	bne.n	8001d28 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a2b      	ldr	r2, [pc, #172]	; (8001d84 <HAL_ADC_Start+0x198>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d015      	beq.n	8001d08 <HAL_ADC_Start+0x11c>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a29      	ldr	r2, [pc, #164]	; (8001d88 <HAL_ADC_Start+0x19c>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d105      	bne.n	8001cf2 <HAL_ADC_Start+0x106>
 8001ce6:	4b26      	ldr	r3, [pc, #152]	; (8001d80 <HAL_ADC_Start+0x194>)
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	f003 031f 	and.w	r3, r3, #31
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d00a      	beq.n	8001d08 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a25      	ldr	r2, [pc, #148]	; (8001d8c <HAL_ADC_Start+0x1a0>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d136      	bne.n	8001d6a <HAL_ADC_Start+0x17e>
 8001cfc:	4b20      	ldr	r3, [pc, #128]	; (8001d80 <HAL_ADC_Start+0x194>)
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	f003 0310 	and.w	r3, r3, #16
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d130      	bne.n	8001d6a <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d129      	bne.n	8001d6a <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	689a      	ldr	r2, [r3, #8]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001d24:	609a      	str	r2, [r3, #8]
 8001d26:	e020      	b.n	8001d6a <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a15      	ldr	r2, [pc, #84]	; (8001d84 <HAL_ADC_Start+0x198>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d11b      	bne.n	8001d6a <HAL_ADC_Start+0x17e>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d114      	bne.n	8001d6a <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	689a      	ldr	r2, [r3, #8]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001d4e:	609a      	str	r2, [r3, #8]
 8001d50:	e00b      	b.n	8001d6a <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d56:	f043 0210 	orr.w	r2, r3, #16
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d62:	f043 0201 	orr.w	r2, r3, #1
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001d6a:	2300      	movs	r3, #0
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	3714      	adds	r7, #20
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr
 8001d78:	20000000 	.word	0x20000000
 8001d7c:	431bde83 	.word	0x431bde83
 8001d80:	40012300 	.word	0x40012300
 8001d84:	40012000 	.word	0x40012000
 8001d88:	40012100 	.word	0x40012100
 8001d8c:	40012200 	.word	0x40012200

08001d90 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b084      	sub	sp, #16
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
 8001d98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001da8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001dac:	d113      	bne.n	8001dd6 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001db8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001dbc:	d10b      	bne.n	8001dd6 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc2:	f043 0220 	orr.w	r2, r3, #32
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e063      	b.n	8001e9e <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001dd6:	f7ff fe95 	bl	8001b04 <HAL_GetTick>
 8001dda:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001ddc:	e021      	b.n	8001e22 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001de4:	d01d      	beq.n	8001e22 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d007      	beq.n	8001dfc <HAL_ADC_PollForConversion+0x6c>
 8001dec:	f7ff fe8a 	bl	8001b04 <HAL_GetTick>
 8001df0:	4602      	mov	r2, r0
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	683a      	ldr	r2, [r7, #0]
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	d212      	bcs.n	8001e22 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 0302 	and.w	r3, r3, #2
 8001e06:	2b02      	cmp	r3, #2
 8001e08:	d00b      	beq.n	8001e22 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0e:	f043 0204 	orr.w	r2, r3, #4
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2200      	movs	r2, #0
 8001e1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	e03d      	b.n	8001e9e <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f003 0302 	and.w	r3, r3, #2
 8001e2c:	2b02      	cmp	r3, #2
 8001e2e:	d1d6      	bne.n	8001dde <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f06f 0212 	mvn.w	r2, #18
 8001e38:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d123      	bne.n	8001e9c <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d11f      	bne.n	8001e9c <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e62:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d006      	beq.n	8001e78 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d111      	bne.n	8001e9c <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d105      	bne.n	8001e9c <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e94:	f043 0201 	orr.w	r2, r3, #1
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001e9c:	2300      	movs	r3, #0
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	3710      	adds	r7, #16
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}

08001ea6 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001ea6:	b480      	push	{r7}
 8001ea8:	b083      	sub	sp, #12
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	370c      	adds	r7, #12
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr

08001ec0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b085      	sub	sp, #20
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
 8001ec8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	d101      	bne.n	8001edc <HAL_ADC_ConfigChannel+0x1c>
 8001ed8:	2302      	movs	r3, #2
 8001eda:	e105      	b.n	80020e8 <HAL_ADC_ConfigChannel+0x228>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2201      	movs	r2, #1
 8001ee0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	2b09      	cmp	r3, #9
 8001eea:	d925      	bls.n	8001f38 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	68d9      	ldr	r1, [r3, #12]
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	b29b      	uxth	r3, r3
 8001ef8:	461a      	mov	r2, r3
 8001efa:	4613      	mov	r3, r2
 8001efc:	005b      	lsls	r3, r3, #1
 8001efe:	4413      	add	r3, r2
 8001f00:	3b1e      	subs	r3, #30
 8001f02:	2207      	movs	r2, #7
 8001f04:	fa02 f303 	lsl.w	r3, r2, r3
 8001f08:	43da      	mvns	r2, r3
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	400a      	ands	r2, r1
 8001f10:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	68d9      	ldr	r1, [r3, #12]
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	689a      	ldr	r2, [r3, #8]
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	b29b      	uxth	r3, r3
 8001f22:	4618      	mov	r0, r3
 8001f24:	4603      	mov	r3, r0
 8001f26:	005b      	lsls	r3, r3, #1
 8001f28:	4403      	add	r3, r0
 8001f2a:	3b1e      	subs	r3, #30
 8001f2c:	409a      	lsls	r2, r3
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	430a      	orrs	r2, r1
 8001f34:	60da      	str	r2, [r3, #12]
 8001f36:	e022      	b.n	8001f7e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	6919      	ldr	r1, [r3, #16]
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	b29b      	uxth	r3, r3
 8001f44:	461a      	mov	r2, r3
 8001f46:	4613      	mov	r3, r2
 8001f48:	005b      	lsls	r3, r3, #1
 8001f4a:	4413      	add	r3, r2
 8001f4c:	2207      	movs	r2, #7
 8001f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f52:	43da      	mvns	r2, r3
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	400a      	ands	r2, r1
 8001f5a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	6919      	ldr	r1, [r3, #16]
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	689a      	ldr	r2, [r3, #8]
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	b29b      	uxth	r3, r3
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	4603      	mov	r3, r0
 8001f70:	005b      	lsls	r3, r3, #1
 8001f72:	4403      	add	r3, r0
 8001f74:	409a      	lsls	r2, r3
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	430a      	orrs	r2, r1
 8001f7c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	2b06      	cmp	r3, #6
 8001f84:	d824      	bhi.n	8001fd0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	685a      	ldr	r2, [r3, #4]
 8001f90:	4613      	mov	r3, r2
 8001f92:	009b      	lsls	r3, r3, #2
 8001f94:	4413      	add	r3, r2
 8001f96:	3b05      	subs	r3, #5
 8001f98:	221f      	movs	r2, #31
 8001f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9e:	43da      	mvns	r2, r3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	400a      	ands	r2, r1
 8001fa6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	b29b      	uxth	r3, r3
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	685a      	ldr	r2, [r3, #4]
 8001fba:	4613      	mov	r3, r2
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	4413      	add	r3, r2
 8001fc0:	3b05      	subs	r3, #5
 8001fc2:	fa00 f203 	lsl.w	r2, r0, r3
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	430a      	orrs	r2, r1
 8001fcc:	635a      	str	r2, [r3, #52]	; 0x34
 8001fce:	e04c      	b.n	800206a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	2b0c      	cmp	r3, #12
 8001fd6:	d824      	bhi.n	8002022 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	685a      	ldr	r2, [r3, #4]
 8001fe2:	4613      	mov	r3, r2
 8001fe4:	009b      	lsls	r3, r3, #2
 8001fe6:	4413      	add	r3, r2
 8001fe8:	3b23      	subs	r3, #35	; 0x23
 8001fea:	221f      	movs	r2, #31
 8001fec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff0:	43da      	mvns	r2, r3
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	400a      	ands	r2, r1
 8001ff8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	b29b      	uxth	r3, r3
 8002006:	4618      	mov	r0, r3
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	685a      	ldr	r2, [r3, #4]
 800200c:	4613      	mov	r3, r2
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	4413      	add	r3, r2
 8002012:	3b23      	subs	r3, #35	; 0x23
 8002014:	fa00 f203 	lsl.w	r2, r0, r3
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	430a      	orrs	r2, r1
 800201e:	631a      	str	r2, [r3, #48]	; 0x30
 8002020:	e023      	b.n	800206a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	685a      	ldr	r2, [r3, #4]
 800202c:	4613      	mov	r3, r2
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	4413      	add	r3, r2
 8002032:	3b41      	subs	r3, #65	; 0x41
 8002034:	221f      	movs	r2, #31
 8002036:	fa02 f303 	lsl.w	r3, r2, r3
 800203a:	43da      	mvns	r2, r3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	400a      	ands	r2, r1
 8002042:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	b29b      	uxth	r3, r3
 8002050:	4618      	mov	r0, r3
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	685a      	ldr	r2, [r3, #4]
 8002056:	4613      	mov	r3, r2
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	4413      	add	r3, r2
 800205c:	3b41      	subs	r3, #65	; 0x41
 800205e:	fa00 f203 	lsl.w	r2, r0, r3
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	430a      	orrs	r2, r1
 8002068:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800206a:	4b22      	ldr	r3, [pc, #136]	; (80020f4 <HAL_ADC_ConfigChannel+0x234>)
 800206c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a21      	ldr	r2, [pc, #132]	; (80020f8 <HAL_ADC_ConfigChannel+0x238>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d109      	bne.n	800208c <HAL_ADC_ConfigChannel+0x1cc>
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	2b12      	cmp	r3, #18
 800207e:	d105      	bne.n	800208c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a19      	ldr	r2, [pc, #100]	; (80020f8 <HAL_ADC_ConfigChannel+0x238>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d123      	bne.n	80020de <HAL_ADC_ConfigChannel+0x21e>
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	2b10      	cmp	r3, #16
 800209c:	d003      	beq.n	80020a6 <HAL_ADC_ConfigChannel+0x1e6>
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	2b11      	cmp	r3, #17
 80020a4:	d11b      	bne.n	80020de <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	2b10      	cmp	r3, #16
 80020b8:	d111      	bne.n	80020de <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80020ba:	4b10      	ldr	r3, [pc, #64]	; (80020fc <HAL_ADC_ConfigChannel+0x23c>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a10      	ldr	r2, [pc, #64]	; (8002100 <HAL_ADC_ConfigChannel+0x240>)
 80020c0:	fba2 2303 	umull	r2, r3, r2, r3
 80020c4:	0c9a      	lsrs	r2, r3, #18
 80020c6:	4613      	mov	r3, r2
 80020c8:	009b      	lsls	r3, r3, #2
 80020ca:	4413      	add	r3, r2
 80020cc:	005b      	lsls	r3, r3, #1
 80020ce:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80020d0:	e002      	b.n	80020d8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80020d2:	68bb      	ldr	r3, [r7, #8]
 80020d4:	3b01      	subs	r3, #1
 80020d6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d1f9      	bne.n	80020d2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2200      	movs	r2, #0
 80020e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80020e6:	2300      	movs	r3, #0
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	3714      	adds	r7, #20
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr
 80020f4:	40012300 	.word	0x40012300
 80020f8:	40012000 	.word	0x40012000
 80020fc:	20000000 	.word	0x20000000
 8002100:	431bde83 	.word	0x431bde83

08002104 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002104:	b480      	push	{r7}
 8002106:	b085      	sub	sp, #20
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800210c:	4b79      	ldr	r3, [pc, #484]	; (80022f4 <ADC_Init+0x1f0>)
 800210e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	685a      	ldr	r2, [r3, #4]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	431a      	orrs	r2, r3
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	685a      	ldr	r2, [r3, #4]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002138:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	6859      	ldr	r1, [r3, #4]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	691b      	ldr	r3, [r3, #16]
 8002144:	021a      	lsls	r2, r3, #8
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	430a      	orrs	r2, r1
 800214c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	685a      	ldr	r2, [r3, #4]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800215c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	6859      	ldr	r1, [r3, #4]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	689a      	ldr	r2, [r3, #8]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	430a      	orrs	r2, r1
 800216e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	689a      	ldr	r2, [r3, #8]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800217e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	6899      	ldr	r1, [r3, #8]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	68da      	ldr	r2, [r3, #12]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	430a      	orrs	r2, r1
 8002190:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002196:	4a58      	ldr	r2, [pc, #352]	; (80022f8 <ADC_Init+0x1f4>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d022      	beq.n	80021e2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	689a      	ldr	r2, [r3, #8]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80021aa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	6899      	ldr	r1, [r3, #8]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	430a      	orrs	r2, r1
 80021bc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	689a      	ldr	r2, [r3, #8]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80021cc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	6899      	ldr	r1, [r3, #8]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	430a      	orrs	r2, r1
 80021de:	609a      	str	r2, [r3, #8]
 80021e0:	e00f      	b.n	8002202 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	689a      	ldr	r2, [r3, #8]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80021f0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	689a      	ldr	r2, [r3, #8]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002200:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	689a      	ldr	r2, [r3, #8]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f022 0202 	bic.w	r2, r2, #2
 8002210:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	6899      	ldr	r1, [r3, #8]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	7e1b      	ldrb	r3, [r3, #24]
 800221c:	005a      	lsls	r2, r3, #1
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	430a      	orrs	r2, r1
 8002224:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	f893 3020 	ldrb.w	r3, [r3, #32]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d01b      	beq.n	8002268 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	685a      	ldr	r2, [r3, #4]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800223e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	685a      	ldr	r2, [r3, #4]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800224e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	6859      	ldr	r1, [r3, #4]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800225a:	3b01      	subs	r3, #1
 800225c:	035a      	lsls	r2, r3, #13
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	430a      	orrs	r2, r1
 8002264:	605a      	str	r2, [r3, #4]
 8002266:	e007      	b.n	8002278 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	685a      	ldr	r2, [r3, #4]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002276:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002286:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	69db      	ldr	r3, [r3, #28]
 8002292:	3b01      	subs	r3, #1
 8002294:	051a      	lsls	r2, r3, #20
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	430a      	orrs	r2, r1
 800229c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	689a      	ldr	r2, [r3, #8]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80022ac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	6899      	ldr	r1, [r3, #8]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80022ba:	025a      	lsls	r2, r3, #9
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	430a      	orrs	r2, r1
 80022c2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	689a      	ldr	r2, [r3, #8]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022d2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	6899      	ldr	r1, [r3, #8]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	695b      	ldr	r3, [r3, #20]
 80022de:	029a      	lsls	r2, r3, #10
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	430a      	orrs	r2, r1
 80022e6:	609a      	str	r2, [r3, #8]
}
 80022e8:	bf00      	nop
 80022ea:	3714      	adds	r7, #20
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr
 80022f4:	40012300 	.word	0x40012300
 80022f8:	0f000001 	.word	0x0f000001

080022fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b085      	sub	sp, #20
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	f003 0307 	and.w	r3, r3, #7
 800230a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800230c:	4b0c      	ldr	r3, [pc, #48]	; (8002340 <__NVIC_SetPriorityGrouping+0x44>)
 800230e:	68db      	ldr	r3, [r3, #12]
 8002310:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002312:	68ba      	ldr	r2, [r7, #8]
 8002314:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002318:	4013      	ands	r3, r2
 800231a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002324:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002328:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800232c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800232e:	4a04      	ldr	r2, [pc, #16]	; (8002340 <__NVIC_SetPriorityGrouping+0x44>)
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	60d3      	str	r3, [r2, #12]
}
 8002334:	bf00      	nop
 8002336:	3714      	adds	r7, #20
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr
 8002340:	e000ed00 	.word	0xe000ed00

08002344 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002344:	b480      	push	{r7}
 8002346:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002348:	4b04      	ldr	r3, [pc, #16]	; (800235c <__NVIC_GetPriorityGrouping+0x18>)
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	0a1b      	lsrs	r3, r3, #8
 800234e:	f003 0307 	and.w	r3, r3, #7
}
 8002352:	4618      	mov	r0, r3
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr
 800235c:	e000ed00 	.word	0xe000ed00

08002360 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002360:	b480      	push	{r7}
 8002362:	b083      	sub	sp, #12
 8002364:	af00      	add	r7, sp, #0
 8002366:	4603      	mov	r3, r0
 8002368:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800236a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800236e:	2b00      	cmp	r3, #0
 8002370:	db0b      	blt.n	800238a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002372:	79fb      	ldrb	r3, [r7, #7]
 8002374:	f003 021f 	and.w	r2, r3, #31
 8002378:	4907      	ldr	r1, [pc, #28]	; (8002398 <__NVIC_EnableIRQ+0x38>)
 800237a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800237e:	095b      	lsrs	r3, r3, #5
 8002380:	2001      	movs	r0, #1
 8002382:	fa00 f202 	lsl.w	r2, r0, r2
 8002386:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800238a:	bf00      	nop
 800238c:	370c      	adds	r7, #12
 800238e:	46bd      	mov	sp, r7
 8002390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002394:	4770      	bx	lr
 8002396:	bf00      	nop
 8002398:	e000e100 	.word	0xe000e100

0800239c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800239c:	b480      	push	{r7}
 800239e:	b083      	sub	sp, #12
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	4603      	mov	r3, r0
 80023a4:	6039      	str	r1, [r7, #0]
 80023a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	db0a      	blt.n	80023c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	b2da      	uxtb	r2, r3
 80023b4:	490c      	ldr	r1, [pc, #48]	; (80023e8 <__NVIC_SetPriority+0x4c>)
 80023b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ba:	0112      	lsls	r2, r2, #4
 80023bc:	b2d2      	uxtb	r2, r2
 80023be:	440b      	add	r3, r1
 80023c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023c4:	e00a      	b.n	80023dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	b2da      	uxtb	r2, r3
 80023ca:	4908      	ldr	r1, [pc, #32]	; (80023ec <__NVIC_SetPriority+0x50>)
 80023cc:	79fb      	ldrb	r3, [r7, #7]
 80023ce:	f003 030f 	and.w	r3, r3, #15
 80023d2:	3b04      	subs	r3, #4
 80023d4:	0112      	lsls	r2, r2, #4
 80023d6:	b2d2      	uxtb	r2, r2
 80023d8:	440b      	add	r3, r1
 80023da:	761a      	strb	r2, [r3, #24]
}
 80023dc:	bf00      	nop
 80023de:	370c      	adds	r7, #12
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr
 80023e8:	e000e100 	.word	0xe000e100
 80023ec:	e000ed00 	.word	0xe000ed00

080023f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b089      	sub	sp, #36	; 0x24
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	60f8      	str	r0, [r7, #12]
 80023f8:	60b9      	str	r1, [r7, #8]
 80023fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	f003 0307 	and.w	r3, r3, #7
 8002402:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002404:	69fb      	ldr	r3, [r7, #28]
 8002406:	f1c3 0307 	rsb	r3, r3, #7
 800240a:	2b04      	cmp	r3, #4
 800240c:	bf28      	it	cs
 800240e:	2304      	movcs	r3, #4
 8002410:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002412:	69fb      	ldr	r3, [r7, #28]
 8002414:	3304      	adds	r3, #4
 8002416:	2b06      	cmp	r3, #6
 8002418:	d902      	bls.n	8002420 <NVIC_EncodePriority+0x30>
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	3b03      	subs	r3, #3
 800241e:	e000      	b.n	8002422 <NVIC_EncodePriority+0x32>
 8002420:	2300      	movs	r3, #0
 8002422:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002424:	f04f 32ff 	mov.w	r2, #4294967295
 8002428:	69bb      	ldr	r3, [r7, #24]
 800242a:	fa02 f303 	lsl.w	r3, r2, r3
 800242e:	43da      	mvns	r2, r3
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	401a      	ands	r2, r3
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002438:	f04f 31ff 	mov.w	r1, #4294967295
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	fa01 f303 	lsl.w	r3, r1, r3
 8002442:	43d9      	mvns	r1, r3
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002448:	4313      	orrs	r3, r2
         );
}
 800244a:	4618      	mov	r0, r3
 800244c:	3724      	adds	r7, #36	; 0x24
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr
	...

08002458 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b082      	sub	sp, #8
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	3b01      	subs	r3, #1
 8002464:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002468:	d301      	bcc.n	800246e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800246a:	2301      	movs	r3, #1
 800246c:	e00f      	b.n	800248e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800246e:	4a0a      	ldr	r2, [pc, #40]	; (8002498 <SysTick_Config+0x40>)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	3b01      	subs	r3, #1
 8002474:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002476:	210f      	movs	r1, #15
 8002478:	f04f 30ff 	mov.w	r0, #4294967295
 800247c:	f7ff ff8e 	bl	800239c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002480:	4b05      	ldr	r3, [pc, #20]	; (8002498 <SysTick_Config+0x40>)
 8002482:	2200      	movs	r2, #0
 8002484:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002486:	4b04      	ldr	r3, [pc, #16]	; (8002498 <SysTick_Config+0x40>)
 8002488:	2207      	movs	r2, #7
 800248a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800248c:	2300      	movs	r3, #0
}
 800248e:	4618      	mov	r0, r3
 8002490:	3708      	adds	r7, #8
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	e000e010 	.word	0xe000e010

0800249c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b082      	sub	sp, #8
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024a4:	6878      	ldr	r0, [r7, #4]
 80024a6:	f7ff ff29 	bl	80022fc <__NVIC_SetPriorityGrouping>
}
 80024aa:	bf00      	nop
 80024ac:	3708      	adds	r7, #8
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}

080024b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024b2:	b580      	push	{r7, lr}
 80024b4:	b086      	sub	sp, #24
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	4603      	mov	r3, r0
 80024ba:	60b9      	str	r1, [r7, #8]
 80024bc:	607a      	str	r2, [r7, #4]
 80024be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024c0:	2300      	movs	r3, #0
 80024c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024c4:	f7ff ff3e 	bl	8002344 <__NVIC_GetPriorityGrouping>
 80024c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024ca:	687a      	ldr	r2, [r7, #4]
 80024cc:	68b9      	ldr	r1, [r7, #8]
 80024ce:	6978      	ldr	r0, [r7, #20]
 80024d0:	f7ff ff8e 	bl	80023f0 <NVIC_EncodePriority>
 80024d4:	4602      	mov	r2, r0
 80024d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024da:	4611      	mov	r1, r2
 80024dc:	4618      	mov	r0, r3
 80024de:	f7ff ff5d 	bl	800239c <__NVIC_SetPriority>
}
 80024e2:	bf00      	nop
 80024e4:	3718      	adds	r7, #24
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}

080024ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024ea:	b580      	push	{r7, lr}
 80024ec:	b082      	sub	sp, #8
 80024ee:	af00      	add	r7, sp, #0
 80024f0:	4603      	mov	r3, r0
 80024f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024f8:	4618      	mov	r0, r3
 80024fa:	f7ff ff31 	bl	8002360 <__NVIC_EnableIRQ>
}
 80024fe:	bf00      	nop
 8002500:	3708      	adds	r7, #8
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}

08002506 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002506:	b580      	push	{r7, lr}
 8002508:	b082      	sub	sp, #8
 800250a:	af00      	add	r7, sp, #0
 800250c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	f7ff ffa2 	bl	8002458 <SysTick_Config>
 8002514:	4603      	mov	r3, r0
}
 8002516:	4618      	mov	r0, r3
 8002518:	3708      	adds	r7, #8
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}

0800251e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800251e:	b580      	push	{r7, lr}
 8002520:	b084      	sub	sp, #16
 8002522:	af00      	add	r7, sp, #0
 8002524:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800252a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800252c:	f7ff faea 	bl	8001b04 <HAL_GetTick>
 8002530:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002538:	b2db      	uxtb	r3, r3
 800253a:	2b02      	cmp	r3, #2
 800253c:	d008      	beq.n	8002550 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2280      	movs	r2, #128	; 0x80
 8002542:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2200      	movs	r2, #0
 8002548:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	e052      	b.n	80025f6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	681a      	ldr	r2, [r3, #0]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f022 0216 	bic.w	r2, r2, #22
 800255e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	695a      	ldr	r2, [r3, #20]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800256e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002574:	2b00      	cmp	r3, #0
 8002576:	d103      	bne.n	8002580 <HAL_DMA_Abort+0x62>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800257c:	2b00      	cmp	r3, #0
 800257e:	d007      	beq.n	8002590 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f022 0208 	bic.w	r2, r2, #8
 800258e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f022 0201 	bic.w	r2, r2, #1
 800259e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025a0:	e013      	b.n	80025ca <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80025a2:	f7ff faaf 	bl	8001b04 <HAL_GetTick>
 80025a6:	4602      	mov	r2, r0
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	1ad3      	subs	r3, r2, r3
 80025ac:	2b05      	cmp	r3, #5
 80025ae:	d90c      	bls.n	80025ca <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2220      	movs	r2, #32
 80025b4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2203      	movs	r2, #3
 80025ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2200      	movs	r2, #0
 80025c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80025c6:	2303      	movs	r3, #3
 80025c8:	e015      	b.n	80025f6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f003 0301 	and.w	r3, r3, #1
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d1e4      	bne.n	80025a2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025dc:	223f      	movs	r2, #63	; 0x3f
 80025de:	409a      	lsls	r2, r3
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2201      	movs	r2, #1
 80025e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2200      	movs	r2, #0
 80025f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80025f4:	2300      	movs	r3, #0
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3710      	adds	r7, #16
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}

080025fe <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80025fe:	b480      	push	{r7}
 8002600:	b083      	sub	sp, #12
 8002602:	af00      	add	r7, sp, #0
 8002604:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800260c:	b2db      	uxtb	r3, r3
 800260e:	2b02      	cmp	r3, #2
 8002610:	d004      	beq.n	800261c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2280      	movs	r2, #128	; 0x80
 8002616:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	e00c      	b.n	8002636 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2205      	movs	r2, #5
 8002620:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f022 0201 	bic.w	r2, r2, #1
 8002632:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002634:	2300      	movs	r3, #0
}
 8002636:	4618      	mov	r0, r3
 8002638:	370c      	adds	r7, #12
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr
	...

08002644 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002644:	b480      	push	{r7}
 8002646:	b089      	sub	sp, #36	; 0x24
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
 800264c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800264e:	2300      	movs	r3, #0
 8002650:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002652:	2300      	movs	r3, #0
 8002654:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002656:	2300      	movs	r3, #0
 8002658:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800265a:	2300      	movs	r3, #0
 800265c:	61fb      	str	r3, [r7, #28]
 800265e:	e16b      	b.n	8002938 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002660:	2201      	movs	r2, #1
 8002662:	69fb      	ldr	r3, [r7, #28]
 8002664:	fa02 f303 	lsl.w	r3, r2, r3
 8002668:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	697a      	ldr	r2, [r7, #20]
 8002670:	4013      	ands	r3, r2
 8002672:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002674:	693a      	ldr	r2, [r7, #16]
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	429a      	cmp	r2, r3
 800267a:	f040 815a 	bne.w	8002932 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	f003 0303 	and.w	r3, r3, #3
 8002686:	2b01      	cmp	r3, #1
 8002688:	d005      	beq.n	8002696 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002692:	2b02      	cmp	r3, #2
 8002694:	d130      	bne.n	80026f8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	005b      	lsls	r3, r3, #1
 80026a0:	2203      	movs	r2, #3
 80026a2:	fa02 f303 	lsl.w	r3, r2, r3
 80026a6:	43db      	mvns	r3, r3
 80026a8:	69ba      	ldr	r2, [r7, #24]
 80026aa:	4013      	ands	r3, r2
 80026ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	68da      	ldr	r2, [r3, #12]
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	005b      	lsls	r3, r3, #1
 80026b6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ba:	69ba      	ldr	r2, [r7, #24]
 80026bc:	4313      	orrs	r3, r2
 80026be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	69ba      	ldr	r2, [r7, #24]
 80026c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80026cc:	2201      	movs	r2, #1
 80026ce:	69fb      	ldr	r3, [r7, #28]
 80026d0:	fa02 f303 	lsl.w	r3, r2, r3
 80026d4:	43db      	mvns	r3, r3
 80026d6:	69ba      	ldr	r2, [r7, #24]
 80026d8:	4013      	ands	r3, r2
 80026da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	091b      	lsrs	r3, r3, #4
 80026e2:	f003 0201 	and.w	r2, r3, #1
 80026e6:	69fb      	ldr	r3, [r7, #28]
 80026e8:	fa02 f303 	lsl.w	r3, r2, r3
 80026ec:	69ba      	ldr	r2, [r7, #24]
 80026ee:	4313      	orrs	r3, r2
 80026f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	69ba      	ldr	r2, [r7, #24]
 80026f6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	f003 0303 	and.w	r3, r3, #3
 8002700:	2b03      	cmp	r3, #3
 8002702:	d017      	beq.n	8002734 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800270a:	69fb      	ldr	r3, [r7, #28]
 800270c:	005b      	lsls	r3, r3, #1
 800270e:	2203      	movs	r2, #3
 8002710:	fa02 f303 	lsl.w	r3, r2, r3
 8002714:	43db      	mvns	r3, r3
 8002716:	69ba      	ldr	r2, [r7, #24]
 8002718:	4013      	ands	r3, r2
 800271a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	689a      	ldr	r2, [r3, #8]
 8002720:	69fb      	ldr	r3, [r7, #28]
 8002722:	005b      	lsls	r3, r3, #1
 8002724:	fa02 f303 	lsl.w	r3, r2, r3
 8002728:	69ba      	ldr	r2, [r7, #24]
 800272a:	4313      	orrs	r3, r2
 800272c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	69ba      	ldr	r2, [r7, #24]
 8002732:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	f003 0303 	and.w	r3, r3, #3
 800273c:	2b02      	cmp	r3, #2
 800273e:	d123      	bne.n	8002788 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002740:	69fb      	ldr	r3, [r7, #28]
 8002742:	08da      	lsrs	r2, r3, #3
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	3208      	adds	r2, #8
 8002748:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800274c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800274e:	69fb      	ldr	r3, [r7, #28]
 8002750:	f003 0307 	and.w	r3, r3, #7
 8002754:	009b      	lsls	r3, r3, #2
 8002756:	220f      	movs	r2, #15
 8002758:	fa02 f303 	lsl.w	r3, r2, r3
 800275c:	43db      	mvns	r3, r3
 800275e:	69ba      	ldr	r2, [r7, #24]
 8002760:	4013      	ands	r3, r2
 8002762:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	691a      	ldr	r2, [r3, #16]
 8002768:	69fb      	ldr	r3, [r7, #28]
 800276a:	f003 0307 	and.w	r3, r3, #7
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	fa02 f303 	lsl.w	r3, r2, r3
 8002774:	69ba      	ldr	r2, [r7, #24]
 8002776:	4313      	orrs	r3, r2
 8002778:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800277a:	69fb      	ldr	r3, [r7, #28]
 800277c:	08da      	lsrs	r2, r3, #3
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	3208      	adds	r2, #8
 8002782:	69b9      	ldr	r1, [r7, #24]
 8002784:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800278e:	69fb      	ldr	r3, [r7, #28]
 8002790:	005b      	lsls	r3, r3, #1
 8002792:	2203      	movs	r2, #3
 8002794:	fa02 f303 	lsl.w	r3, r2, r3
 8002798:	43db      	mvns	r3, r3
 800279a:	69ba      	ldr	r2, [r7, #24]
 800279c:	4013      	ands	r3, r2
 800279e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	f003 0203 	and.w	r2, r3, #3
 80027a8:	69fb      	ldr	r3, [r7, #28]
 80027aa:	005b      	lsls	r3, r3, #1
 80027ac:	fa02 f303 	lsl.w	r3, r2, r3
 80027b0:	69ba      	ldr	r2, [r7, #24]
 80027b2:	4313      	orrs	r3, r2
 80027b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	69ba      	ldr	r2, [r7, #24]
 80027ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	f000 80b4 	beq.w	8002932 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027ca:	2300      	movs	r3, #0
 80027cc:	60fb      	str	r3, [r7, #12]
 80027ce:	4b60      	ldr	r3, [pc, #384]	; (8002950 <HAL_GPIO_Init+0x30c>)
 80027d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027d2:	4a5f      	ldr	r2, [pc, #380]	; (8002950 <HAL_GPIO_Init+0x30c>)
 80027d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027d8:	6453      	str	r3, [r2, #68]	; 0x44
 80027da:	4b5d      	ldr	r3, [pc, #372]	; (8002950 <HAL_GPIO_Init+0x30c>)
 80027dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027e2:	60fb      	str	r3, [r7, #12]
 80027e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80027e6:	4a5b      	ldr	r2, [pc, #364]	; (8002954 <HAL_GPIO_Init+0x310>)
 80027e8:	69fb      	ldr	r3, [r7, #28]
 80027ea:	089b      	lsrs	r3, r3, #2
 80027ec:	3302      	adds	r3, #2
 80027ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80027f4:	69fb      	ldr	r3, [r7, #28]
 80027f6:	f003 0303 	and.w	r3, r3, #3
 80027fa:	009b      	lsls	r3, r3, #2
 80027fc:	220f      	movs	r2, #15
 80027fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002802:	43db      	mvns	r3, r3
 8002804:	69ba      	ldr	r2, [r7, #24]
 8002806:	4013      	ands	r3, r2
 8002808:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	4a52      	ldr	r2, [pc, #328]	; (8002958 <HAL_GPIO_Init+0x314>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d02b      	beq.n	800286a <HAL_GPIO_Init+0x226>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	4a51      	ldr	r2, [pc, #324]	; (800295c <HAL_GPIO_Init+0x318>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d025      	beq.n	8002866 <HAL_GPIO_Init+0x222>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	4a50      	ldr	r2, [pc, #320]	; (8002960 <HAL_GPIO_Init+0x31c>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d01f      	beq.n	8002862 <HAL_GPIO_Init+0x21e>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	4a4f      	ldr	r2, [pc, #316]	; (8002964 <HAL_GPIO_Init+0x320>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d019      	beq.n	800285e <HAL_GPIO_Init+0x21a>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	4a4e      	ldr	r2, [pc, #312]	; (8002968 <HAL_GPIO_Init+0x324>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d013      	beq.n	800285a <HAL_GPIO_Init+0x216>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	4a4d      	ldr	r2, [pc, #308]	; (800296c <HAL_GPIO_Init+0x328>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d00d      	beq.n	8002856 <HAL_GPIO_Init+0x212>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	4a4c      	ldr	r2, [pc, #304]	; (8002970 <HAL_GPIO_Init+0x32c>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d007      	beq.n	8002852 <HAL_GPIO_Init+0x20e>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	4a4b      	ldr	r2, [pc, #300]	; (8002974 <HAL_GPIO_Init+0x330>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d101      	bne.n	800284e <HAL_GPIO_Init+0x20a>
 800284a:	2307      	movs	r3, #7
 800284c:	e00e      	b.n	800286c <HAL_GPIO_Init+0x228>
 800284e:	2308      	movs	r3, #8
 8002850:	e00c      	b.n	800286c <HAL_GPIO_Init+0x228>
 8002852:	2306      	movs	r3, #6
 8002854:	e00a      	b.n	800286c <HAL_GPIO_Init+0x228>
 8002856:	2305      	movs	r3, #5
 8002858:	e008      	b.n	800286c <HAL_GPIO_Init+0x228>
 800285a:	2304      	movs	r3, #4
 800285c:	e006      	b.n	800286c <HAL_GPIO_Init+0x228>
 800285e:	2303      	movs	r3, #3
 8002860:	e004      	b.n	800286c <HAL_GPIO_Init+0x228>
 8002862:	2302      	movs	r3, #2
 8002864:	e002      	b.n	800286c <HAL_GPIO_Init+0x228>
 8002866:	2301      	movs	r3, #1
 8002868:	e000      	b.n	800286c <HAL_GPIO_Init+0x228>
 800286a:	2300      	movs	r3, #0
 800286c:	69fa      	ldr	r2, [r7, #28]
 800286e:	f002 0203 	and.w	r2, r2, #3
 8002872:	0092      	lsls	r2, r2, #2
 8002874:	4093      	lsls	r3, r2
 8002876:	69ba      	ldr	r2, [r7, #24]
 8002878:	4313      	orrs	r3, r2
 800287a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800287c:	4935      	ldr	r1, [pc, #212]	; (8002954 <HAL_GPIO_Init+0x310>)
 800287e:	69fb      	ldr	r3, [r7, #28]
 8002880:	089b      	lsrs	r3, r3, #2
 8002882:	3302      	adds	r3, #2
 8002884:	69ba      	ldr	r2, [r7, #24]
 8002886:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800288a:	4b3b      	ldr	r3, [pc, #236]	; (8002978 <HAL_GPIO_Init+0x334>)
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	43db      	mvns	r3, r3
 8002894:	69ba      	ldr	r2, [r7, #24]
 8002896:	4013      	ands	r3, r2
 8002898:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d003      	beq.n	80028ae <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80028a6:	69ba      	ldr	r2, [r7, #24]
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	4313      	orrs	r3, r2
 80028ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80028ae:	4a32      	ldr	r2, [pc, #200]	; (8002978 <HAL_GPIO_Init+0x334>)
 80028b0:	69bb      	ldr	r3, [r7, #24]
 80028b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80028b4:	4b30      	ldr	r3, [pc, #192]	; (8002978 <HAL_GPIO_Init+0x334>)
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	43db      	mvns	r3, r3
 80028be:	69ba      	ldr	r2, [r7, #24]
 80028c0:	4013      	ands	r3, r2
 80028c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d003      	beq.n	80028d8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80028d0:	69ba      	ldr	r2, [r7, #24]
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	4313      	orrs	r3, r2
 80028d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80028d8:	4a27      	ldr	r2, [pc, #156]	; (8002978 <HAL_GPIO_Init+0x334>)
 80028da:	69bb      	ldr	r3, [r7, #24]
 80028dc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80028de:	4b26      	ldr	r3, [pc, #152]	; (8002978 <HAL_GPIO_Init+0x334>)
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	43db      	mvns	r3, r3
 80028e8:	69ba      	ldr	r2, [r7, #24]
 80028ea:	4013      	ands	r3, r2
 80028ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d003      	beq.n	8002902 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80028fa:	69ba      	ldr	r2, [r7, #24]
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	4313      	orrs	r3, r2
 8002900:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002902:	4a1d      	ldr	r2, [pc, #116]	; (8002978 <HAL_GPIO_Init+0x334>)
 8002904:	69bb      	ldr	r3, [r7, #24]
 8002906:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002908:	4b1b      	ldr	r3, [pc, #108]	; (8002978 <HAL_GPIO_Init+0x334>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	43db      	mvns	r3, r3
 8002912:	69ba      	ldr	r2, [r7, #24]
 8002914:	4013      	ands	r3, r2
 8002916:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002920:	2b00      	cmp	r3, #0
 8002922:	d003      	beq.n	800292c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002924:	69ba      	ldr	r2, [r7, #24]
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	4313      	orrs	r3, r2
 800292a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800292c:	4a12      	ldr	r2, [pc, #72]	; (8002978 <HAL_GPIO_Init+0x334>)
 800292e:	69bb      	ldr	r3, [r7, #24]
 8002930:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002932:	69fb      	ldr	r3, [r7, #28]
 8002934:	3301      	adds	r3, #1
 8002936:	61fb      	str	r3, [r7, #28]
 8002938:	69fb      	ldr	r3, [r7, #28]
 800293a:	2b0f      	cmp	r3, #15
 800293c:	f67f ae90 	bls.w	8002660 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002940:	bf00      	nop
 8002942:	bf00      	nop
 8002944:	3724      	adds	r7, #36	; 0x24
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr
 800294e:	bf00      	nop
 8002950:	40023800 	.word	0x40023800
 8002954:	40013800 	.word	0x40013800
 8002958:	40020000 	.word	0x40020000
 800295c:	40020400 	.word	0x40020400
 8002960:	40020800 	.word	0x40020800
 8002964:	40020c00 	.word	0x40020c00
 8002968:	40021000 	.word	0x40021000
 800296c:	40021400 	.word	0x40021400
 8002970:	40021800 	.word	0x40021800
 8002974:	40021c00 	.word	0x40021c00
 8002978:	40013c00 	.word	0x40013c00

0800297c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800297c:	b480      	push	{r7}
 800297e:	b085      	sub	sp, #20
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
 8002984:	460b      	mov	r3, r1
 8002986:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	691a      	ldr	r2, [r3, #16]
 800298c:	887b      	ldrh	r3, [r7, #2]
 800298e:	4013      	ands	r3, r2
 8002990:	2b00      	cmp	r3, #0
 8002992:	d002      	beq.n	800299a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002994:	2301      	movs	r3, #1
 8002996:	73fb      	strb	r3, [r7, #15]
 8002998:	e001      	b.n	800299e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800299a:	2300      	movs	r3, #0
 800299c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800299e:	7bfb      	ldrb	r3, [r7, #15]
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	3714      	adds	r7, #20
 80029a4:	46bd      	mov	sp, r7
 80029a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029aa:	4770      	bx	lr

080029ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b083      	sub	sp, #12
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
 80029b4:	460b      	mov	r3, r1
 80029b6:	807b      	strh	r3, [r7, #2]
 80029b8:	4613      	mov	r3, r2
 80029ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80029bc:	787b      	ldrb	r3, [r7, #1]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d003      	beq.n	80029ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029c2:	887a      	ldrh	r2, [r7, #2]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80029c8:	e003      	b.n	80029d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80029ca:	887b      	ldrh	r3, [r7, #2]
 80029cc:	041a      	lsls	r2, r3, #16
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	619a      	str	r2, [r3, #24]
}
 80029d2:	bf00      	nop
 80029d4:	370c      	adds	r7, #12
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr
	...

080029e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b086      	sub	sp, #24
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d101      	bne.n	80029f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e267      	b.n	8002ec2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 0301 	and.w	r3, r3, #1
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d075      	beq.n	8002aea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80029fe:	4b88      	ldr	r3, [pc, #544]	; (8002c20 <HAL_RCC_OscConfig+0x240>)
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	f003 030c 	and.w	r3, r3, #12
 8002a06:	2b04      	cmp	r3, #4
 8002a08:	d00c      	beq.n	8002a24 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a0a:	4b85      	ldr	r3, [pc, #532]	; (8002c20 <HAL_RCC_OscConfig+0x240>)
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a12:	2b08      	cmp	r3, #8
 8002a14:	d112      	bne.n	8002a3c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a16:	4b82      	ldr	r3, [pc, #520]	; (8002c20 <HAL_RCC_OscConfig+0x240>)
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a1e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a22:	d10b      	bne.n	8002a3c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a24:	4b7e      	ldr	r3, [pc, #504]	; (8002c20 <HAL_RCC_OscConfig+0x240>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d05b      	beq.n	8002ae8 <HAL_RCC_OscConfig+0x108>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d157      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	e242      	b.n	8002ec2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a44:	d106      	bne.n	8002a54 <HAL_RCC_OscConfig+0x74>
 8002a46:	4b76      	ldr	r3, [pc, #472]	; (8002c20 <HAL_RCC_OscConfig+0x240>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a75      	ldr	r2, [pc, #468]	; (8002c20 <HAL_RCC_OscConfig+0x240>)
 8002a4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a50:	6013      	str	r3, [r2, #0]
 8002a52:	e01d      	b.n	8002a90 <HAL_RCC_OscConfig+0xb0>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a5c:	d10c      	bne.n	8002a78 <HAL_RCC_OscConfig+0x98>
 8002a5e:	4b70      	ldr	r3, [pc, #448]	; (8002c20 <HAL_RCC_OscConfig+0x240>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a6f      	ldr	r2, [pc, #444]	; (8002c20 <HAL_RCC_OscConfig+0x240>)
 8002a64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a68:	6013      	str	r3, [r2, #0]
 8002a6a:	4b6d      	ldr	r3, [pc, #436]	; (8002c20 <HAL_RCC_OscConfig+0x240>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a6c      	ldr	r2, [pc, #432]	; (8002c20 <HAL_RCC_OscConfig+0x240>)
 8002a70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a74:	6013      	str	r3, [r2, #0]
 8002a76:	e00b      	b.n	8002a90 <HAL_RCC_OscConfig+0xb0>
 8002a78:	4b69      	ldr	r3, [pc, #420]	; (8002c20 <HAL_RCC_OscConfig+0x240>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a68      	ldr	r2, [pc, #416]	; (8002c20 <HAL_RCC_OscConfig+0x240>)
 8002a7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a82:	6013      	str	r3, [r2, #0]
 8002a84:	4b66      	ldr	r3, [pc, #408]	; (8002c20 <HAL_RCC_OscConfig+0x240>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a65      	ldr	r2, [pc, #404]	; (8002c20 <HAL_RCC_OscConfig+0x240>)
 8002a8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d013      	beq.n	8002ac0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a98:	f7ff f834 	bl	8001b04 <HAL_GetTick>
 8002a9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a9e:	e008      	b.n	8002ab2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002aa0:	f7ff f830 	bl	8001b04 <HAL_GetTick>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	2b64      	cmp	r3, #100	; 0x64
 8002aac:	d901      	bls.n	8002ab2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002aae:	2303      	movs	r3, #3
 8002ab0:	e207      	b.n	8002ec2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ab2:	4b5b      	ldr	r3, [pc, #364]	; (8002c20 <HAL_RCC_OscConfig+0x240>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d0f0      	beq.n	8002aa0 <HAL_RCC_OscConfig+0xc0>
 8002abe:	e014      	b.n	8002aea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ac0:	f7ff f820 	bl	8001b04 <HAL_GetTick>
 8002ac4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ac6:	e008      	b.n	8002ada <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ac8:	f7ff f81c 	bl	8001b04 <HAL_GetTick>
 8002acc:	4602      	mov	r2, r0
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	1ad3      	subs	r3, r2, r3
 8002ad2:	2b64      	cmp	r3, #100	; 0x64
 8002ad4:	d901      	bls.n	8002ada <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002ad6:	2303      	movs	r3, #3
 8002ad8:	e1f3      	b.n	8002ec2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ada:	4b51      	ldr	r3, [pc, #324]	; (8002c20 <HAL_RCC_OscConfig+0x240>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d1f0      	bne.n	8002ac8 <HAL_RCC_OscConfig+0xe8>
 8002ae6:	e000      	b.n	8002aea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ae8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f003 0302 	and.w	r3, r3, #2
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d063      	beq.n	8002bbe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002af6:	4b4a      	ldr	r3, [pc, #296]	; (8002c20 <HAL_RCC_OscConfig+0x240>)
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	f003 030c 	and.w	r3, r3, #12
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d00b      	beq.n	8002b1a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b02:	4b47      	ldr	r3, [pc, #284]	; (8002c20 <HAL_RCC_OscConfig+0x240>)
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b0a:	2b08      	cmp	r3, #8
 8002b0c:	d11c      	bne.n	8002b48 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b0e:	4b44      	ldr	r3, [pc, #272]	; (8002c20 <HAL_RCC_OscConfig+0x240>)
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d116      	bne.n	8002b48 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b1a:	4b41      	ldr	r3, [pc, #260]	; (8002c20 <HAL_RCC_OscConfig+0x240>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 0302 	and.w	r3, r3, #2
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d005      	beq.n	8002b32 <HAL_RCC_OscConfig+0x152>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	68db      	ldr	r3, [r3, #12]
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d001      	beq.n	8002b32 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e1c7      	b.n	8002ec2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b32:	4b3b      	ldr	r3, [pc, #236]	; (8002c20 <HAL_RCC_OscConfig+0x240>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	691b      	ldr	r3, [r3, #16]
 8002b3e:	00db      	lsls	r3, r3, #3
 8002b40:	4937      	ldr	r1, [pc, #220]	; (8002c20 <HAL_RCC_OscConfig+0x240>)
 8002b42:	4313      	orrs	r3, r2
 8002b44:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b46:	e03a      	b.n	8002bbe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	68db      	ldr	r3, [r3, #12]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d020      	beq.n	8002b92 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b50:	4b34      	ldr	r3, [pc, #208]	; (8002c24 <HAL_RCC_OscConfig+0x244>)
 8002b52:	2201      	movs	r2, #1
 8002b54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b56:	f7fe ffd5 	bl	8001b04 <HAL_GetTick>
 8002b5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b5c:	e008      	b.n	8002b70 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b5e:	f7fe ffd1 	bl	8001b04 <HAL_GetTick>
 8002b62:	4602      	mov	r2, r0
 8002b64:	693b      	ldr	r3, [r7, #16]
 8002b66:	1ad3      	subs	r3, r2, r3
 8002b68:	2b02      	cmp	r3, #2
 8002b6a:	d901      	bls.n	8002b70 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002b6c:	2303      	movs	r3, #3
 8002b6e:	e1a8      	b.n	8002ec2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b70:	4b2b      	ldr	r3, [pc, #172]	; (8002c20 <HAL_RCC_OscConfig+0x240>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f003 0302 	and.w	r3, r3, #2
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d0f0      	beq.n	8002b5e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b7c:	4b28      	ldr	r3, [pc, #160]	; (8002c20 <HAL_RCC_OscConfig+0x240>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	691b      	ldr	r3, [r3, #16]
 8002b88:	00db      	lsls	r3, r3, #3
 8002b8a:	4925      	ldr	r1, [pc, #148]	; (8002c20 <HAL_RCC_OscConfig+0x240>)
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	600b      	str	r3, [r1, #0]
 8002b90:	e015      	b.n	8002bbe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b92:	4b24      	ldr	r3, [pc, #144]	; (8002c24 <HAL_RCC_OscConfig+0x244>)
 8002b94:	2200      	movs	r2, #0
 8002b96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b98:	f7fe ffb4 	bl	8001b04 <HAL_GetTick>
 8002b9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b9e:	e008      	b.n	8002bb2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ba0:	f7fe ffb0 	bl	8001b04 <HAL_GetTick>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	1ad3      	subs	r3, r2, r3
 8002baa:	2b02      	cmp	r3, #2
 8002bac:	d901      	bls.n	8002bb2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002bae:	2303      	movs	r3, #3
 8002bb0:	e187      	b.n	8002ec2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bb2:	4b1b      	ldr	r3, [pc, #108]	; (8002c20 <HAL_RCC_OscConfig+0x240>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 0302 	and.w	r3, r3, #2
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d1f0      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 0308 	and.w	r3, r3, #8
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d036      	beq.n	8002c38 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	695b      	ldr	r3, [r3, #20]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d016      	beq.n	8002c00 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bd2:	4b15      	ldr	r3, [pc, #84]	; (8002c28 <HAL_RCC_OscConfig+0x248>)
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bd8:	f7fe ff94 	bl	8001b04 <HAL_GetTick>
 8002bdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bde:	e008      	b.n	8002bf2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002be0:	f7fe ff90 	bl	8001b04 <HAL_GetTick>
 8002be4:	4602      	mov	r2, r0
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	1ad3      	subs	r3, r2, r3
 8002bea:	2b02      	cmp	r3, #2
 8002bec:	d901      	bls.n	8002bf2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002bee:	2303      	movs	r3, #3
 8002bf0:	e167      	b.n	8002ec2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bf2:	4b0b      	ldr	r3, [pc, #44]	; (8002c20 <HAL_RCC_OscConfig+0x240>)
 8002bf4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bf6:	f003 0302 	and.w	r3, r3, #2
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d0f0      	beq.n	8002be0 <HAL_RCC_OscConfig+0x200>
 8002bfe:	e01b      	b.n	8002c38 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c00:	4b09      	ldr	r3, [pc, #36]	; (8002c28 <HAL_RCC_OscConfig+0x248>)
 8002c02:	2200      	movs	r2, #0
 8002c04:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c06:	f7fe ff7d 	bl	8001b04 <HAL_GetTick>
 8002c0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c0c:	e00e      	b.n	8002c2c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c0e:	f7fe ff79 	bl	8001b04 <HAL_GetTick>
 8002c12:	4602      	mov	r2, r0
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	1ad3      	subs	r3, r2, r3
 8002c18:	2b02      	cmp	r3, #2
 8002c1a:	d907      	bls.n	8002c2c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002c1c:	2303      	movs	r3, #3
 8002c1e:	e150      	b.n	8002ec2 <HAL_RCC_OscConfig+0x4e2>
 8002c20:	40023800 	.word	0x40023800
 8002c24:	42470000 	.word	0x42470000
 8002c28:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c2c:	4b88      	ldr	r3, [pc, #544]	; (8002e50 <HAL_RCC_OscConfig+0x470>)
 8002c2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c30:	f003 0302 	and.w	r3, r3, #2
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d1ea      	bne.n	8002c0e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f003 0304 	and.w	r3, r3, #4
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	f000 8097 	beq.w	8002d74 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c46:	2300      	movs	r3, #0
 8002c48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c4a:	4b81      	ldr	r3, [pc, #516]	; (8002e50 <HAL_RCC_OscConfig+0x470>)
 8002c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d10f      	bne.n	8002c76 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c56:	2300      	movs	r3, #0
 8002c58:	60bb      	str	r3, [r7, #8]
 8002c5a:	4b7d      	ldr	r3, [pc, #500]	; (8002e50 <HAL_RCC_OscConfig+0x470>)
 8002c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c5e:	4a7c      	ldr	r2, [pc, #496]	; (8002e50 <HAL_RCC_OscConfig+0x470>)
 8002c60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c64:	6413      	str	r3, [r2, #64]	; 0x40
 8002c66:	4b7a      	ldr	r3, [pc, #488]	; (8002e50 <HAL_RCC_OscConfig+0x470>)
 8002c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c6e:	60bb      	str	r3, [r7, #8]
 8002c70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c72:	2301      	movs	r3, #1
 8002c74:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c76:	4b77      	ldr	r3, [pc, #476]	; (8002e54 <HAL_RCC_OscConfig+0x474>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d118      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c82:	4b74      	ldr	r3, [pc, #464]	; (8002e54 <HAL_RCC_OscConfig+0x474>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a73      	ldr	r2, [pc, #460]	; (8002e54 <HAL_RCC_OscConfig+0x474>)
 8002c88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c8e:	f7fe ff39 	bl	8001b04 <HAL_GetTick>
 8002c92:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c94:	e008      	b.n	8002ca8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c96:	f7fe ff35 	bl	8001b04 <HAL_GetTick>
 8002c9a:	4602      	mov	r2, r0
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	1ad3      	subs	r3, r2, r3
 8002ca0:	2b02      	cmp	r3, #2
 8002ca2:	d901      	bls.n	8002ca8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002ca4:	2303      	movs	r3, #3
 8002ca6:	e10c      	b.n	8002ec2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ca8:	4b6a      	ldr	r3, [pc, #424]	; (8002e54 <HAL_RCC_OscConfig+0x474>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d0f0      	beq.n	8002c96 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	d106      	bne.n	8002cca <HAL_RCC_OscConfig+0x2ea>
 8002cbc:	4b64      	ldr	r3, [pc, #400]	; (8002e50 <HAL_RCC_OscConfig+0x470>)
 8002cbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cc0:	4a63      	ldr	r2, [pc, #396]	; (8002e50 <HAL_RCC_OscConfig+0x470>)
 8002cc2:	f043 0301 	orr.w	r3, r3, #1
 8002cc6:	6713      	str	r3, [r2, #112]	; 0x70
 8002cc8:	e01c      	b.n	8002d04 <HAL_RCC_OscConfig+0x324>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	2b05      	cmp	r3, #5
 8002cd0:	d10c      	bne.n	8002cec <HAL_RCC_OscConfig+0x30c>
 8002cd2:	4b5f      	ldr	r3, [pc, #380]	; (8002e50 <HAL_RCC_OscConfig+0x470>)
 8002cd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cd6:	4a5e      	ldr	r2, [pc, #376]	; (8002e50 <HAL_RCC_OscConfig+0x470>)
 8002cd8:	f043 0304 	orr.w	r3, r3, #4
 8002cdc:	6713      	str	r3, [r2, #112]	; 0x70
 8002cde:	4b5c      	ldr	r3, [pc, #368]	; (8002e50 <HAL_RCC_OscConfig+0x470>)
 8002ce0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ce2:	4a5b      	ldr	r2, [pc, #364]	; (8002e50 <HAL_RCC_OscConfig+0x470>)
 8002ce4:	f043 0301 	orr.w	r3, r3, #1
 8002ce8:	6713      	str	r3, [r2, #112]	; 0x70
 8002cea:	e00b      	b.n	8002d04 <HAL_RCC_OscConfig+0x324>
 8002cec:	4b58      	ldr	r3, [pc, #352]	; (8002e50 <HAL_RCC_OscConfig+0x470>)
 8002cee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cf0:	4a57      	ldr	r2, [pc, #348]	; (8002e50 <HAL_RCC_OscConfig+0x470>)
 8002cf2:	f023 0301 	bic.w	r3, r3, #1
 8002cf6:	6713      	str	r3, [r2, #112]	; 0x70
 8002cf8:	4b55      	ldr	r3, [pc, #340]	; (8002e50 <HAL_RCC_OscConfig+0x470>)
 8002cfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cfc:	4a54      	ldr	r2, [pc, #336]	; (8002e50 <HAL_RCC_OscConfig+0x470>)
 8002cfe:	f023 0304 	bic.w	r3, r3, #4
 8002d02:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	689b      	ldr	r3, [r3, #8]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d015      	beq.n	8002d38 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d0c:	f7fe fefa 	bl	8001b04 <HAL_GetTick>
 8002d10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d12:	e00a      	b.n	8002d2a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d14:	f7fe fef6 	bl	8001b04 <HAL_GetTick>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	1ad3      	subs	r3, r2, r3
 8002d1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d901      	bls.n	8002d2a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002d26:	2303      	movs	r3, #3
 8002d28:	e0cb      	b.n	8002ec2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d2a:	4b49      	ldr	r3, [pc, #292]	; (8002e50 <HAL_RCC_OscConfig+0x470>)
 8002d2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d2e:	f003 0302 	and.w	r3, r3, #2
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d0ee      	beq.n	8002d14 <HAL_RCC_OscConfig+0x334>
 8002d36:	e014      	b.n	8002d62 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d38:	f7fe fee4 	bl	8001b04 <HAL_GetTick>
 8002d3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d3e:	e00a      	b.n	8002d56 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d40:	f7fe fee0 	bl	8001b04 <HAL_GetTick>
 8002d44:	4602      	mov	r2, r0
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	1ad3      	subs	r3, r2, r3
 8002d4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d901      	bls.n	8002d56 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002d52:	2303      	movs	r3, #3
 8002d54:	e0b5      	b.n	8002ec2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d56:	4b3e      	ldr	r3, [pc, #248]	; (8002e50 <HAL_RCC_OscConfig+0x470>)
 8002d58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d5a:	f003 0302 	and.w	r3, r3, #2
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d1ee      	bne.n	8002d40 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d62:	7dfb      	ldrb	r3, [r7, #23]
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d105      	bne.n	8002d74 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d68:	4b39      	ldr	r3, [pc, #228]	; (8002e50 <HAL_RCC_OscConfig+0x470>)
 8002d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6c:	4a38      	ldr	r2, [pc, #224]	; (8002e50 <HAL_RCC_OscConfig+0x470>)
 8002d6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d72:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	699b      	ldr	r3, [r3, #24]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	f000 80a1 	beq.w	8002ec0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d7e:	4b34      	ldr	r3, [pc, #208]	; (8002e50 <HAL_RCC_OscConfig+0x470>)
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	f003 030c 	and.w	r3, r3, #12
 8002d86:	2b08      	cmp	r3, #8
 8002d88:	d05c      	beq.n	8002e44 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	699b      	ldr	r3, [r3, #24]
 8002d8e:	2b02      	cmp	r3, #2
 8002d90:	d141      	bne.n	8002e16 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d92:	4b31      	ldr	r3, [pc, #196]	; (8002e58 <HAL_RCC_OscConfig+0x478>)
 8002d94:	2200      	movs	r2, #0
 8002d96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d98:	f7fe feb4 	bl	8001b04 <HAL_GetTick>
 8002d9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d9e:	e008      	b.n	8002db2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002da0:	f7fe feb0 	bl	8001b04 <HAL_GetTick>
 8002da4:	4602      	mov	r2, r0
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	1ad3      	subs	r3, r2, r3
 8002daa:	2b02      	cmp	r3, #2
 8002dac:	d901      	bls.n	8002db2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002dae:	2303      	movs	r3, #3
 8002db0:	e087      	b.n	8002ec2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002db2:	4b27      	ldr	r3, [pc, #156]	; (8002e50 <HAL_RCC_OscConfig+0x470>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d1f0      	bne.n	8002da0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	69da      	ldr	r2, [r3, #28]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6a1b      	ldr	r3, [r3, #32]
 8002dc6:	431a      	orrs	r2, r3
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dcc:	019b      	lsls	r3, r3, #6
 8002dce:	431a      	orrs	r2, r3
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dd4:	085b      	lsrs	r3, r3, #1
 8002dd6:	3b01      	subs	r3, #1
 8002dd8:	041b      	lsls	r3, r3, #16
 8002dda:	431a      	orrs	r2, r3
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002de0:	061b      	lsls	r3, r3, #24
 8002de2:	491b      	ldr	r1, [pc, #108]	; (8002e50 <HAL_RCC_OscConfig+0x470>)
 8002de4:	4313      	orrs	r3, r2
 8002de6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002de8:	4b1b      	ldr	r3, [pc, #108]	; (8002e58 <HAL_RCC_OscConfig+0x478>)
 8002dea:	2201      	movs	r2, #1
 8002dec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dee:	f7fe fe89 	bl	8001b04 <HAL_GetTick>
 8002df2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002df4:	e008      	b.n	8002e08 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002df6:	f7fe fe85 	bl	8001b04 <HAL_GetTick>
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	1ad3      	subs	r3, r2, r3
 8002e00:	2b02      	cmp	r3, #2
 8002e02:	d901      	bls.n	8002e08 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002e04:	2303      	movs	r3, #3
 8002e06:	e05c      	b.n	8002ec2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e08:	4b11      	ldr	r3, [pc, #68]	; (8002e50 <HAL_RCC_OscConfig+0x470>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d0f0      	beq.n	8002df6 <HAL_RCC_OscConfig+0x416>
 8002e14:	e054      	b.n	8002ec0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e16:	4b10      	ldr	r3, [pc, #64]	; (8002e58 <HAL_RCC_OscConfig+0x478>)
 8002e18:	2200      	movs	r2, #0
 8002e1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e1c:	f7fe fe72 	bl	8001b04 <HAL_GetTick>
 8002e20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e22:	e008      	b.n	8002e36 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e24:	f7fe fe6e 	bl	8001b04 <HAL_GetTick>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	1ad3      	subs	r3, r2, r3
 8002e2e:	2b02      	cmp	r3, #2
 8002e30:	d901      	bls.n	8002e36 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002e32:	2303      	movs	r3, #3
 8002e34:	e045      	b.n	8002ec2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e36:	4b06      	ldr	r3, [pc, #24]	; (8002e50 <HAL_RCC_OscConfig+0x470>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d1f0      	bne.n	8002e24 <HAL_RCC_OscConfig+0x444>
 8002e42:	e03d      	b.n	8002ec0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	699b      	ldr	r3, [r3, #24]
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d107      	bne.n	8002e5c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	e038      	b.n	8002ec2 <HAL_RCC_OscConfig+0x4e2>
 8002e50:	40023800 	.word	0x40023800
 8002e54:	40007000 	.word	0x40007000
 8002e58:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002e5c:	4b1b      	ldr	r3, [pc, #108]	; (8002ecc <HAL_RCC_OscConfig+0x4ec>)
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	699b      	ldr	r3, [r3, #24]
 8002e66:	2b01      	cmp	r3, #1
 8002e68:	d028      	beq.n	8002ebc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e74:	429a      	cmp	r2, r3
 8002e76:	d121      	bne.n	8002ebc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e82:	429a      	cmp	r2, r3
 8002e84:	d11a      	bne.n	8002ebc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e86:	68fa      	ldr	r2, [r7, #12]
 8002e88:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	687a      	ldr	r2, [r7, #4]
 8002e90:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002e92:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d111      	bne.n	8002ebc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ea2:	085b      	lsrs	r3, r3, #1
 8002ea4:	3b01      	subs	r3, #1
 8002ea6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	d107      	bne.n	8002ebc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eb6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	d001      	beq.n	8002ec0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	e000      	b.n	8002ec2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002ec0:	2300      	movs	r3, #0
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	3718      	adds	r7, #24
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}
 8002eca:	bf00      	nop
 8002ecc:	40023800 	.word	0x40023800

08002ed0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b084      	sub	sp, #16
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
 8002ed8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d101      	bne.n	8002ee4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	e0cc      	b.n	800307e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ee4:	4b68      	ldr	r3, [pc, #416]	; (8003088 <HAL_RCC_ClockConfig+0x1b8>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f003 0307 	and.w	r3, r3, #7
 8002eec:	683a      	ldr	r2, [r7, #0]
 8002eee:	429a      	cmp	r2, r3
 8002ef0:	d90c      	bls.n	8002f0c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ef2:	4b65      	ldr	r3, [pc, #404]	; (8003088 <HAL_RCC_ClockConfig+0x1b8>)
 8002ef4:	683a      	ldr	r2, [r7, #0]
 8002ef6:	b2d2      	uxtb	r2, r2
 8002ef8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002efa:	4b63      	ldr	r3, [pc, #396]	; (8003088 <HAL_RCC_ClockConfig+0x1b8>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 0307 	and.w	r3, r3, #7
 8002f02:	683a      	ldr	r2, [r7, #0]
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d001      	beq.n	8002f0c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e0b8      	b.n	800307e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f003 0302 	and.w	r3, r3, #2
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d020      	beq.n	8002f5a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f003 0304 	and.w	r3, r3, #4
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d005      	beq.n	8002f30 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f24:	4b59      	ldr	r3, [pc, #356]	; (800308c <HAL_RCC_ClockConfig+0x1bc>)
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	4a58      	ldr	r2, [pc, #352]	; (800308c <HAL_RCC_ClockConfig+0x1bc>)
 8002f2a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002f2e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f003 0308 	and.w	r3, r3, #8
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d005      	beq.n	8002f48 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f3c:	4b53      	ldr	r3, [pc, #332]	; (800308c <HAL_RCC_ClockConfig+0x1bc>)
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	4a52      	ldr	r2, [pc, #328]	; (800308c <HAL_RCC_ClockConfig+0x1bc>)
 8002f42:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002f46:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f48:	4b50      	ldr	r3, [pc, #320]	; (800308c <HAL_RCC_ClockConfig+0x1bc>)
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	494d      	ldr	r1, [pc, #308]	; (800308c <HAL_RCC_ClockConfig+0x1bc>)
 8002f56:	4313      	orrs	r3, r2
 8002f58:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 0301 	and.w	r3, r3, #1
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d044      	beq.n	8002ff0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d107      	bne.n	8002f7e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f6e:	4b47      	ldr	r3, [pc, #284]	; (800308c <HAL_RCC_ClockConfig+0x1bc>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d119      	bne.n	8002fae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e07f      	b.n	800307e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	2b02      	cmp	r3, #2
 8002f84:	d003      	beq.n	8002f8e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f8a:	2b03      	cmp	r3, #3
 8002f8c:	d107      	bne.n	8002f9e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f8e:	4b3f      	ldr	r3, [pc, #252]	; (800308c <HAL_RCC_ClockConfig+0x1bc>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d109      	bne.n	8002fae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e06f      	b.n	800307e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f9e:	4b3b      	ldr	r3, [pc, #236]	; (800308c <HAL_RCC_ClockConfig+0x1bc>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 0302 	and.w	r3, r3, #2
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d101      	bne.n	8002fae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e067      	b.n	800307e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002fae:	4b37      	ldr	r3, [pc, #220]	; (800308c <HAL_RCC_ClockConfig+0x1bc>)
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	f023 0203 	bic.w	r2, r3, #3
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	4934      	ldr	r1, [pc, #208]	; (800308c <HAL_RCC_ClockConfig+0x1bc>)
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002fc0:	f7fe fda0 	bl	8001b04 <HAL_GetTick>
 8002fc4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fc6:	e00a      	b.n	8002fde <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fc8:	f7fe fd9c 	bl	8001b04 <HAL_GetTick>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	1ad3      	subs	r3, r2, r3
 8002fd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d901      	bls.n	8002fde <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002fda:	2303      	movs	r3, #3
 8002fdc:	e04f      	b.n	800307e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fde:	4b2b      	ldr	r3, [pc, #172]	; (800308c <HAL_RCC_ClockConfig+0x1bc>)
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	f003 020c 	and.w	r2, r3, #12
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	429a      	cmp	r2, r3
 8002fee:	d1eb      	bne.n	8002fc8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ff0:	4b25      	ldr	r3, [pc, #148]	; (8003088 <HAL_RCC_ClockConfig+0x1b8>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f003 0307 	and.w	r3, r3, #7
 8002ff8:	683a      	ldr	r2, [r7, #0]
 8002ffa:	429a      	cmp	r2, r3
 8002ffc:	d20c      	bcs.n	8003018 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ffe:	4b22      	ldr	r3, [pc, #136]	; (8003088 <HAL_RCC_ClockConfig+0x1b8>)
 8003000:	683a      	ldr	r2, [r7, #0]
 8003002:	b2d2      	uxtb	r2, r2
 8003004:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003006:	4b20      	ldr	r3, [pc, #128]	; (8003088 <HAL_RCC_ClockConfig+0x1b8>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 0307 	and.w	r3, r3, #7
 800300e:	683a      	ldr	r2, [r7, #0]
 8003010:	429a      	cmp	r2, r3
 8003012:	d001      	beq.n	8003018 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	e032      	b.n	800307e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f003 0304 	and.w	r3, r3, #4
 8003020:	2b00      	cmp	r3, #0
 8003022:	d008      	beq.n	8003036 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003024:	4b19      	ldr	r3, [pc, #100]	; (800308c <HAL_RCC_ClockConfig+0x1bc>)
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	68db      	ldr	r3, [r3, #12]
 8003030:	4916      	ldr	r1, [pc, #88]	; (800308c <HAL_RCC_ClockConfig+0x1bc>)
 8003032:	4313      	orrs	r3, r2
 8003034:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 0308 	and.w	r3, r3, #8
 800303e:	2b00      	cmp	r3, #0
 8003040:	d009      	beq.n	8003056 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003042:	4b12      	ldr	r3, [pc, #72]	; (800308c <HAL_RCC_ClockConfig+0x1bc>)
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	691b      	ldr	r3, [r3, #16]
 800304e:	00db      	lsls	r3, r3, #3
 8003050:	490e      	ldr	r1, [pc, #56]	; (800308c <HAL_RCC_ClockConfig+0x1bc>)
 8003052:	4313      	orrs	r3, r2
 8003054:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003056:	f000 f821 	bl	800309c <HAL_RCC_GetSysClockFreq>
 800305a:	4602      	mov	r2, r0
 800305c:	4b0b      	ldr	r3, [pc, #44]	; (800308c <HAL_RCC_ClockConfig+0x1bc>)
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	091b      	lsrs	r3, r3, #4
 8003062:	f003 030f 	and.w	r3, r3, #15
 8003066:	490a      	ldr	r1, [pc, #40]	; (8003090 <HAL_RCC_ClockConfig+0x1c0>)
 8003068:	5ccb      	ldrb	r3, [r1, r3]
 800306a:	fa22 f303 	lsr.w	r3, r2, r3
 800306e:	4a09      	ldr	r2, [pc, #36]	; (8003094 <HAL_RCC_ClockConfig+0x1c4>)
 8003070:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003072:	4b09      	ldr	r3, [pc, #36]	; (8003098 <HAL_RCC_ClockConfig+0x1c8>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4618      	mov	r0, r3
 8003078:	f7fe fd00 	bl	8001a7c <HAL_InitTick>

  return HAL_OK;
 800307c:	2300      	movs	r3, #0
}
 800307e:	4618      	mov	r0, r3
 8003080:	3710      	adds	r7, #16
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}
 8003086:	bf00      	nop
 8003088:	40023c00 	.word	0x40023c00
 800308c:	40023800 	.word	0x40023800
 8003090:	08008504 	.word	0x08008504
 8003094:	20000000 	.word	0x20000000
 8003098:	20000004 	.word	0x20000004

0800309c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800309c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030a0:	b090      	sub	sp, #64	; 0x40
 80030a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80030a4:	2300      	movs	r3, #0
 80030a6:	637b      	str	r3, [r7, #52]	; 0x34
 80030a8:	2300      	movs	r3, #0
 80030aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030ac:	2300      	movs	r3, #0
 80030ae:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80030b0:	2300      	movs	r3, #0
 80030b2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80030b4:	4b59      	ldr	r3, [pc, #356]	; (800321c <HAL_RCC_GetSysClockFreq+0x180>)
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	f003 030c 	and.w	r3, r3, #12
 80030bc:	2b08      	cmp	r3, #8
 80030be:	d00d      	beq.n	80030dc <HAL_RCC_GetSysClockFreq+0x40>
 80030c0:	2b08      	cmp	r3, #8
 80030c2:	f200 80a1 	bhi.w	8003208 <HAL_RCC_GetSysClockFreq+0x16c>
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d002      	beq.n	80030d0 <HAL_RCC_GetSysClockFreq+0x34>
 80030ca:	2b04      	cmp	r3, #4
 80030cc:	d003      	beq.n	80030d6 <HAL_RCC_GetSysClockFreq+0x3a>
 80030ce:	e09b      	b.n	8003208 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80030d0:	4b53      	ldr	r3, [pc, #332]	; (8003220 <HAL_RCC_GetSysClockFreq+0x184>)
 80030d2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80030d4:	e09b      	b.n	800320e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80030d6:	4b53      	ldr	r3, [pc, #332]	; (8003224 <HAL_RCC_GetSysClockFreq+0x188>)
 80030d8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80030da:	e098      	b.n	800320e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80030dc:	4b4f      	ldr	r3, [pc, #316]	; (800321c <HAL_RCC_GetSysClockFreq+0x180>)
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80030e4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80030e6:	4b4d      	ldr	r3, [pc, #308]	; (800321c <HAL_RCC_GetSysClockFreq+0x180>)
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d028      	beq.n	8003144 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030f2:	4b4a      	ldr	r3, [pc, #296]	; (800321c <HAL_RCC_GetSysClockFreq+0x180>)
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	099b      	lsrs	r3, r3, #6
 80030f8:	2200      	movs	r2, #0
 80030fa:	623b      	str	r3, [r7, #32]
 80030fc:	627a      	str	r2, [r7, #36]	; 0x24
 80030fe:	6a3b      	ldr	r3, [r7, #32]
 8003100:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003104:	2100      	movs	r1, #0
 8003106:	4b47      	ldr	r3, [pc, #284]	; (8003224 <HAL_RCC_GetSysClockFreq+0x188>)
 8003108:	fb03 f201 	mul.w	r2, r3, r1
 800310c:	2300      	movs	r3, #0
 800310e:	fb00 f303 	mul.w	r3, r0, r3
 8003112:	4413      	add	r3, r2
 8003114:	4a43      	ldr	r2, [pc, #268]	; (8003224 <HAL_RCC_GetSysClockFreq+0x188>)
 8003116:	fba0 1202 	umull	r1, r2, r0, r2
 800311a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800311c:	460a      	mov	r2, r1
 800311e:	62ba      	str	r2, [r7, #40]	; 0x28
 8003120:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003122:	4413      	add	r3, r2
 8003124:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003126:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003128:	2200      	movs	r2, #0
 800312a:	61bb      	str	r3, [r7, #24]
 800312c:	61fa      	str	r2, [r7, #28]
 800312e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003132:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003136:	f7fd fc91 	bl	8000a5c <__aeabi_uldivmod>
 800313a:	4602      	mov	r2, r0
 800313c:	460b      	mov	r3, r1
 800313e:	4613      	mov	r3, r2
 8003140:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003142:	e053      	b.n	80031ec <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003144:	4b35      	ldr	r3, [pc, #212]	; (800321c <HAL_RCC_GetSysClockFreq+0x180>)
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	099b      	lsrs	r3, r3, #6
 800314a:	2200      	movs	r2, #0
 800314c:	613b      	str	r3, [r7, #16]
 800314e:	617a      	str	r2, [r7, #20]
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003156:	f04f 0b00 	mov.w	fp, #0
 800315a:	4652      	mov	r2, sl
 800315c:	465b      	mov	r3, fp
 800315e:	f04f 0000 	mov.w	r0, #0
 8003162:	f04f 0100 	mov.w	r1, #0
 8003166:	0159      	lsls	r1, r3, #5
 8003168:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800316c:	0150      	lsls	r0, r2, #5
 800316e:	4602      	mov	r2, r0
 8003170:	460b      	mov	r3, r1
 8003172:	ebb2 080a 	subs.w	r8, r2, sl
 8003176:	eb63 090b 	sbc.w	r9, r3, fp
 800317a:	f04f 0200 	mov.w	r2, #0
 800317e:	f04f 0300 	mov.w	r3, #0
 8003182:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003186:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800318a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800318e:	ebb2 0408 	subs.w	r4, r2, r8
 8003192:	eb63 0509 	sbc.w	r5, r3, r9
 8003196:	f04f 0200 	mov.w	r2, #0
 800319a:	f04f 0300 	mov.w	r3, #0
 800319e:	00eb      	lsls	r3, r5, #3
 80031a0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80031a4:	00e2      	lsls	r2, r4, #3
 80031a6:	4614      	mov	r4, r2
 80031a8:	461d      	mov	r5, r3
 80031aa:	eb14 030a 	adds.w	r3, r4, sl
 80031ae:	603b      	str	r3, [r7, #0]
 80031b0:	eb45 030b 	adc.w	r3, r5, fp
 80031b4:	607b      	str	r3, [r7, #4]
 80031b6:	f04f 0200 	mov.w	r2, #0
 80031ba:	f04f 0300 	mov.w	r3, #0
 80031be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80031c2:	4629      	mov	r1, r5
 80031c4:	028b      	lsls	r3, r1, #10
 80031c6:	4621      	mov	r1, r4
 80031c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80031cc:	4621      	mov	r1, r4
 80031ce:	028a      	lsls	r2, r1, #10
 80031d0:	4610      	mov	r0, r2
 80031d2:	4619      	mov	r1, r3
 80031d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031d6:	2200      	movs	r2, #0
 80031d8:	60bb      	str	r3, [r7, #8]
 80031da:	60fa      	str	r2, [r7, #12]
 80031dc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80031e0:	f7fd fc3c 	bl	8000a5c <__aeabi_uldivmod>
 80031e4:	4602      	mov	r2, r0
 80031e6:	460b      	mov	r3, r1
 80031e8:	4613      	mov	r3, r2
 80031ea:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80031ec:	4b0b      	ldr	r3, [pc, #44]	; (800321c <HAL_RCC_GetSysClockFreq+0x180>)
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	0c1b      	lsrs	r3, r3, #16
 80031f2:	f003 0303 	and.w	r3, r3, #3
 80031f6:	3301      	adds	r3, #1
 80031f8:	005b      	lsls	r3, r3, #1
 80031fa:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80031fc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80031fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003200:	fbb2 f3f3 	udiv	r3, r2, r3
 8003204:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003206:	e002      	b.n	800320e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003208:	4b05      	ldr	r3, [pc, #20]	; (8003220 <HAL_RCC_GetSysClockFreq+0x184>)
 800320a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800320c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800320e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003210:	4618      	mov	r0, r3
 8003212:	3740      	adds	r7, #64	; 0x40
 8003214:	46bd      	mov	sp, r7
 8003216:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800321a:	bf00      	nop
 800321c:	40023800 	.word	0x40023800
 8003220:	00f42400 	.word	0x00f42400
 8003224:	017d7840 	.word	0x017d7840

08003228 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003228:	b480      	push	{r7}
 800322a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800322c:	4b03      	ldr	r3, [pc, #12]	; (800323c <HAL_RCC_GetHCLKFreq+0x14>)
 800322e:	681b      	ldr	r3, [r3, #0]
}
 8003230:	4618      	mov	r0, r3
 8003232:	46bd      	mov	sp, r7
 8003234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003238:	4770      	bx	lr
 800323a:	bf00      	nop
 800323c:	20000000 	.word	0x20000000

08003240 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003244:	f7ff fff0 	bl	8003228 <HAL_RCC_GetHCLKFreq>
 8003248:	4602      	mov	r2, r0
 800324a:	4b05      	ldr	r3, [pc, #20]	; (8003260 <HAL_RCC_GetPCLK1Freq+0x20>)
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	0a9b      	lsrs	r3, r3, #10
 8003250:	f003 0307 	and.w	r3, r3, #7
 8003254:	4903      	ldr	r1, [pc, #12]	; (8003264 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003256:	5ccb      	ldrb	r3, [r1, r3]
 8003258:	fa22 f303 	lsr.w	r3, r2, r3
}
 800325c:	4618      	mov	r0, r3
 800325e:	bd80      	pop	{r7, pc}
 8003260:	40023800 	.word	0x40023800
 8003264:	08008514 	.word	0x08008514

08003268 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800326c:	f7ff ffdc 	bl	8003228 <HAL_RCC_GetHCLKFreq>
 8003270:	4602      	mov	r2, r0
 8003272:	4b05      	ldr	r3, [pc, #20]	; (8003288 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	0b5b      	lsrs	r3, r3, #13
 8003278:	f003 0307 	and.w	r3, r3, #7
 800327c:	4903      	ldr	r1, [pc, #12]	; (800328c <HAL_RCC_GetPCLK2Freq+0x24>)
 800327e:	5ccb      	ldrb	r3, [r1, r3]
 8003280:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003284:	4618      	mov	r0, r3
 8003286:	bd80      	pop	{r7, pc}
 8003288:	40023800 	.word	0x40023800
 800328c:	08008514 	.word	0x08008514

08003290 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b082      	sub	sp, #8
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d101      	bne.n	80032a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	e041      	b.n	8003326 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032a8:	b2db      	uxtb	r3, r3
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d106      	bne.n	80032bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2200      	movs	r2, #0
 80032b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	f7fe fa88 	bl	80017cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2202      	movs	r2, #2
 80032c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	3304      	adds	r3, #4
 80032cc:	4619      	mov	r1, r3
 80032ce:	4610      	mov	r0, r2
 80032d0:	f000 fa98 	bl	8003804 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2201      	movs	r2, #1
 80032d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2201      	movs	r2, #1
 80032e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2201      	movs	r2, #1
 80032e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2201      	movs	r2, #1
 80032f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2201      	movs	r2, #1
 80032f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2201      	movs	r2, #1
 8003300:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2201      	movs	r2, #1
 8003308:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2201      	movs	r2, #1
 8003310:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2201      	movs	r2, #1
 8003318:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2201      	movs	r2, #1
 8003320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003324:	2300      	movs	r3, #0
}
 8003326:	4618      	mov	r0, r3
 8003328:	3708      	adds	r7, #8
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}
	...

08003330 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003330:	b480      	push	{r7}
 8003332:	b085      	sub	sp, #20
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800333e:	b2db      	uxtb	r3, r3
 8003340:	2b01      	cmp	r3, #1
 8003342:	d001      	beq.n	8003348 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003344:	2301      	movs	r3, #1
 8003346:	e046      	b.n	80033d6 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2202      	movs	r2, #2
 800334c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a23      	ldr	r2, [pc, #140]	; (80033e4 <HAL_TIM_Base_Start+0xb4>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d022      	beq.n	80033a0 <HAL_TIM_Base_Start+0x70>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003362:	d01d      	beq.n	80033a0 <HAL_TIM_Base_Start+0x70>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a1f      	ldr	r2, [pc, #124]	; (80033e8 <HAL_TIM_Base_Start+0xb8>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d018      	beq.n	80033a0 <HAL_TIM_Base_Start+0x70>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a1e      	ldr	r2, [pc, #120]	; (80033ec <HAL_TIM_Base_Start+0xbc>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d013      	beq.n	80033a0 <HAL_TIM_Base_Start+0x70>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a1c      	ldr	r2, [pc, #112]	; (80033f0 <HAL_TIM_Base_Start+0xc0>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d00e      	beq.n	80033a0 <HAL_TIM_Base_Start+0x70>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a1b      	ldr	r2, [pc, #108]	; (80033f4 <HAL_TIM_Base_Start+0xc4>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d009      	beq.n	80033a0 <HAL_TIM_Base_Start+0x70>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a19      	ldr	r2, [pc, #100]	; (80033f8 <HAL_TIM_Base_Start+0xc8>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d004      	beq.n	80033a0 <HAL_TIM_Base_Start+0x70>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a18      	ldr	r2, [pc, #96]	; (80033fc <HAL_TIM_Base_Start+0xcc>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d111      	bne.n	80033c4 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	f003 0307 	and.w	r3, r3, #7
 80033aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2b06      	cmp	r3, #6
 80033b0:	d010      	beq.n	80033d4 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f042 0201 	orr.w	r2, r2, #1
 80033c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033c2:	e007      	b.n	80033d4 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f042 0201 	orr.w	r2, r2, #1
 80033d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80033d4:	2300      	movs	r3, #0
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	3714      	adds	r7, #20
 80033da:	46bd      	mov	sp, r7
 80033dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e0:	4770      	bx	lr
 80033e2:	bf00      	nop
 80033e4:	40010000 	.word	0x40010000
 80033e8:	40000400 	.word	0x40000400
 80033ec:	40000800 	.word	0x40000800
 80033f0:	40000c00 	.word	0x40000c00
 80033f4:	40010400 	.word	0x40010400
 80033f8:	40014000 	.word	0x40014000
 80033fc:	40001800 	.word	0x40001800

08003400 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b082      	sub	sp, #8
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	691b      	ldr	r3, [r3, #16]
 800340e:	f003 0302 	and.w	r3, r3, #2
 8003412:	2b02      	cmp	r3, #2
 8003414:	d122      	bne.n	800345c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	68db      	ldr	r3, [r3, #12]
 800341c:	f003 0302 	and.w	r3, r3, #2
 8003420:	2b02      	cmp	r3, #2
 8003422:	d11b      	bne.n	800345c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f06f 0202 	mvn.w	r2, #2
 800342c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2201      	movs	r2, #1
 8003432:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	699b      	ldr	r3, [r3, #24]
 800343a:	f003 0303 	and.w	r3, r3, #3
 800343e:	2b00      	cmp	r3, #0
 8003440:	d003      	beq.n	800344a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	f000 f9bf 	bl	80037c6 <HAL_TIM_IC_CaptureCallback>
 8003448:	e005      	b.n	8003456 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f000 f9b1 	bl	80037b2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003450:	6878      	ldr	r0, [r7, #4]
 8003452:	f000 f9c2 	bl	80037da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2200      	movs	r2, #0
 800345a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	691b      	ldr	r3, [r3, #16]
 8003462:	f003 0304 	and.w	r3, r3, #4
 8003466:	2b04      	cmp	r3, #4
 8003468:	d122      	bne.n	80034b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	68db      	ldr	r3, [r3, #12]
 8003470:	f003 0304 	and.w	r3, r3, #4
 8003474:	2b04      	cmp	r3, #4
 8003476:	d11b      	bne.n	80034b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f06f 0204 	mvn.w	r2, #4
 8003480:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2202      	movs	r2, #2
 8003486:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	699b      	ldr	r3, [r3, #24]
 800348e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003492:	2b00      	cmp	r3, #0
 8003494:	d003      	beq.n	800349e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	f000 f995 	bl	80037c6 <HAL_TIM_IC_CaptureCallback>
 800349c:	e005      	b.n	80034aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f000 f987 	bl	80037b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034a4:	6878      	ldr	r0, [r7, #4]
 80034a6:	f000 f998 	bl	80037da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2200      	movs	r2, #0
 80034ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	691b      	ldr	r3, [r3, #16]
 80034b6:	f003 0308 	and.w	r3, r3, #8
 80034ba:	2b08      	cmp	r3, #8
 80034bc:	d122      	bne.n	8003504 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	68db      	ldr	r3, [r3, #12]
 80034c4:	f003 0308 	and.w	r3, r3, #8
 80034c8:	2b08      	cmp	r3, #8
 80034ca:	d11b      	bne.n	8003504 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f06f 0208 	mvn.w	r2, #8
 80034d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2204      	movs	r2, #4
 80034da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	69db      	ldr	r3, [r3, #28]
 80034e2:	f003 0303 	and.w	r3, r3, #3
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d003      	beq.n	80034f2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	f000 f96b 	bl	80037c6 <HAL_TIM_IC_CaptureCallback>
 80034f0:	e005      	b.n	80034fe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	f000 f95d 	bl	80037b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034f8:	6878      	ldr	r0, [r7, #4]
 80034fa:	f000 f96e 	bl	80037da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2200      	movs	r2, #0
 8003502:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	691b      	ldr	r3, [r3, #16]
 800350a:	f003 0310 	and.w	r3, r3, #16
 800350e:	2b10      	cmp	r3, #16
 8003510:	d122      	bne.n	8003558 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	68db      	ldr	r3, [r3, #12]
 8003518:	f003 0310 	and.w	r3, r3, #16
 800351c:	2b10      	cmp	r3, #16
 800351e:	d11b      	bne.n	8003558 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f06f 0210 	mvn.w	r2, #16
 8003528:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2208      	movs	r2, #8
 800352e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	69db      	ldr	r3, [r3, #28]
 8003536:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800353a:	2b00      	cmp	r3, #0
 800353c:	d003      	beq.n	8003546 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	f000 f941 	bl	80037c6 <HAL_TIM_IC_CaptureCallback>
 8003544:	e005      	b.n	8003552 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f000 f933 	bl	80037b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800354c:	6878      	ldr	r0, [r7, #4]
 800354e:	f000 f944 	bl	80037da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2200      	movs	r2, #0
 8003556:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	691b      	ldr	r3, [r3, #16]
 800355e:	f003 0301 	and.w	r3, r3, #1
 8003562:	2b01      	cmp	r3, #1
 8003564:	d10e      	bne.n	8003584 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	68db      	ldr	r3, [r3, #12]
 800356c:	f003 0301 	and.w	r3, r3, #1
 8003570:	2b01      	cmp	r3, #1
 8003572:	d107      	bne.n	8003584 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f06f 0201 	mvn.w	r2, #1
 800357c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	f000 f90d 	bl	800379e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	691b      	ldr	r3, [r3, #16]
 800358a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800358e:	2b80      	cmp	r3, #128	; 0x80
 8003590:	d10e      	bne.n	80035b0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	68db      	ldr	r3, [r3, #12]
 8003598:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800359c:	2b80      	cmp	r3, #128	; 0x80
 800359e:	d107      	bne.n	80035b0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80035a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f000 faea 	bl	8003b84 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	691b      	ldr	r3, [r3, #16]
 80035b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035ba:	2b40      	cmp	r3, #64	; 0x40
 80035bc:	d10e      	bne.n	80035dc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	68db      	ldr	r3, [r3, #12]
 80035c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035c8:	2b40      	cmp	r3, #64	; 0x40
 80035ca:	d107      	bne.n	80035dc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80035d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	f000 f909 	bl	80037ee <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	691b      	ldr	r3, [r3, #16]
 80035e2:	f003 0320 	and.w	r3, r3, #32
 80035e6:	2b20      	cmp	r3, #32
 80035e8:	d10e      	bne.n	8003608 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	68db      	ldr	r3, [r3, #12]
 80035f0:	f003 0320 	and.w	r3, r3, #32
 80035f4:	2b20      	cmp	r3, #32
 80035f6:	d107      	bne.n	8003608 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f06f 0220 	mvn.w	r2, #32
 8003600:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f000 fab4 	bl	8003b70 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003608:	bf00      	nop
 800360a:	3708      	adds	r7, #8
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}

08003610 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b084      	sub	sp, #16
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
 8003618:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800361a:	2300      	movs	r3, #0
 800361c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003624:	2b01      	cmp	r3, #1
 8003626:	d101      	bne.n	800362c <HAL_TIM_ConfigClockSource+0x1c>
 8003628:	2302      	movs	r3, #2
 800362a:	e0b4      	b.n	8003796 <HAL_TIM_ConfigClockSource+0x186>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2201      	movs	r2, #1
 8003630:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2202      	movs	r2, #2
 8003638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800364a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003652:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	68ba      	ldr	r2, [r7, #8]
 800365a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003664:	d03e      	beq.n	80036e4 <HAL_TIM_ConfigClockSource+0xd4>
 8003666:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800366a:	f200 8087 	bhi.w	800377c <HAL_TIM_ConfigClockSource+0x16c>
 800366e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003672:	f000 8086 	beq.w	8003782 <HAL_TIM_ConfigClockSource+0x172>
 8003676:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800367a:	d87f      	bhi.n	800377c <HAL_TIM_ConfigClockSource+0x16c>
 800367c:	2b70      	cmp	r3, #112	; 0x70
 800367e:	d01a      	beq.n	80036b6 <HAL_TIM_ConfigClockSource+0xa6>
 8003680:	2b70      	cmp	r3, #112	; 0x70
 8003682:	d87b      	bhi.n	800377c <HAL_TIM_ConfigClockSource+0x16c>
 8003684:	2b60      	cmp	r3, #96	; 0x60
 8003686:	d050      	beq.n	800372a <HAL_TIM_ConfigClockSource+0x11a>
 8003688:	2b60      	cmp	r3, #96	; 0x60
 800368a:	d877      	bhi.n	800377c <HAL_TIM_ConfigClockSource+0x16c>
 800368c:	2b50      	cmp	r3, #80	; 0x50
 800368e:	d03c      	beq.n	800370a <HAL_TIM_ConfigClockSource+0xfa>
 8003690:	2b50      	cmp	r3, #80	; 0x50
 8003692:	d873      	bhi.n	800377c <HAL_TIM_ConfigClockSource+0x16c>
 8003694:	2b40      	cmp	r3, #64	; 0x40
 8003696:	d058      	beq.n	800374a <HAL_TIM_ConfigClockSource+0x13a>
 8003698:	2b40      	cmp	r3, #64	; 0x40
 800369a:	d86f      	bhi.n	800377c <HAL_TIM_ConfigClockSource+0x16c>
 800369c:	2b30      	cmp	r3, #48	; 0x30
 800369e:	d064      	beq.n	800376a <HAL_TIM_ConfigClockSource+0x15a>
 80036a0:	2b30      	cmp	r3, #48	; 0x30
 80036a2:	d86b      	bhi.n	800377c <HAL_TIM_ConfigClockSource+0x16c>
 80036a4:	2b20      	cmp	r3, #32
 80036a6:	d060      	beq.n	800376a <HAL_TIM_ConfigClockSource+0x15a>
 80036a8:	2b20      	cmp	r3, #32
 80036aa:	d867      	bhi.n	800377c <HAL_TIM_ConfigClockSource+0x16c>
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d05c      	beq.n	800376a <HAL_TIM_ConfigClockSource+0x15a>
 80036b0:	2b10      	cmp	r3, #16
 80036b2:	d05a      	beq.n	800376a <HAL_TIM_ConfigClockSource+0x15a>
 80036b4:	e062      	b.n	800377c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6818      	ldr	r0, [r3, #0]
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	6899      	ldr	r1, [r3, #8]
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	685a      	ldr	r2, [r3, #4]
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	68db      	ldr	r3, [r3, #12]
 80036c6:	f000 f9b7 	bl	8003a38 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80036d8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	68ba      	ldr	r2, [r7, #8]
 80036e0:	609a      	str	r2, [r3, #8]
      break;
 80036e2:	e04f      	b.n	8003784 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6818      	ldr	r0, [r3, #0]
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	6899      	ldr	r1, [r3, #8]
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	685a      	ldr	r2, [r3, #4]
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	68db      	ldr	r3, [r3, #12]
 80036f4:	f000 f9a0 	bl	8003a38 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	689a      	ldr	r2, [r3, #8]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003706:	609a      	str	r2, [r3, #8]
      break;
 8003708:	e03c      	b.n	8003784 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6818      	ldr	r0, [r3, #0]
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	6859      	ldr	r1, [r3, #4]
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	68db      	ldr	r3, [r3, #12]
 8003716:	461a      	mov	r2, r3
 8003718:	f000 f914 	bl	8003944 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	2150      	movs	r1, #80	; 0x50
 8003722:	4618      	mov	r0, r3
 8003724:	f000 f96d 	bl	8003a02 <TIM_ITRx_SetConfig>
      break;
 8003728:	e02c      	b.n	8003784 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6818      	ldr	r0, [r3, #0]
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	6859      	ldr	r1, [r3, #4]
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	68db      	ldr	r3, [r3, #12]
 8003736:	461a      	mov	r2, r3
 8003738:	f000 f933 	bl	80039a2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	2160      	movs	r1, #96	; 0x60
 8003742:	4618      	mov	r0, r3
 8003744:	f000 f95d 	bl	8003a02 <TIM_ITRx_SetConfig>
      break;
 8003748:	e01c      	b.n	8003784 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6818      	ldr	r0, [r3, #0]
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	6859      	ldr	r1, [r3, #4]
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	68db      	ldr	r3, [r3, #12]
 8003756:	461a      	mov	r2, r3
 8003758:	f000 f8f4 	bl	8003944 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	2140      	movs	r1, #64	; 0x40
 8003762:	4618      	mov	r0, r3
 8003764:	f000 f94d 	bl	8003a02 <TIM_ITRx_SetConfig>
      break;
 8003768:	e00c      	b.n	8003784 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4619      	mov	r1, r3
 8003774:	4610      	mov	r0, r2
 8003776:	f000 f944 	bl	8003a02 <TIM_ITRx_SetConfig>
      break;
 800377a:	e003      	b.n	8003784 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	73fb      	strb	r3, [r7, #15]
      break;
 8003780:	e000      	b.n	8003784 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003782:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2201      	movs	r2, #1
 8003788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2200      	movs	r2, #0
 8003790:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003794:	7bfb      	ldrb	r3, [r7, #15]
}
 8003796:	4618      	mov	r0, r3
 8003798:	3710      	adds	r7, #16
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}

0800379e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800379e:	b480      	push	{r7}
 80037a0:	b083      	sub	sp, #12
 80037a2:	af00      	add	r7, sp, #0
 80037a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80037a6:	bf00      	nop
 80037a8:	370c      	adds	r7, #12
 80037aa:	46bd      	mov	sp, r7
 80037ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b0:	4770      	bx	lr

080037b2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80037b2:	b480      	push	{r7}
 80037b4:	b083      	sub	sp, #12
 80037b6:	af00      	add	r7, sp, #0
 80037b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80037ba:	bf00      	nop
 80037bc:	370c      	adds	r7, #12
 80037be:	46bd      	mov	sp, r7
 80037c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c4:	4770      	bx	lr

080037c6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80037c6:	b480      	push	{r7}
 80037c8:	b083      	sub	sp, #12
 80037ca:	af00      	add	r7, sp, #0
 80037cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80037ce:	bf00      	nop
 80037d0:	370c      	adds	r7, #12
 80037d2:	46bd      	mov	sp, r7
 80037d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d8:	4770      	bx	lr

080037da <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80037da:	b480      	push	{r7}
 80037dc:	b083      	sub	sp, #12
 80037de:	af00      	add	r7, sp, #0
 80037e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80037e2:	bf00      	nop
 80037e4:	370c      	adds	r7, #12
 80037e6:	46bd      	mov	sp, r7
 80037e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ec:	4770      	bx	lr

080037ee <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80037ee:	b480      	push	{r7}
 80037f0:	b083      	sub	sp, #12
 80037f2:	af00      	add	r7, sp, #0
 80037f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80037f6:	bf00      	nop
 80037f8:	370c      	adds	r7, #12
 80037fa:	46bd      	mov	sp, r7
 80037fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003800:	4770      	bx	lr
	...

08003804 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003804:	b480      	push	{r7}
 8003806:	b085      	sub	sp, #20
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
 800380c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	4a40      	ldr	r2, [pc, #256]	; (8003918 <TIM_Base_SetConfig+0x114>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d013      	beq.n	8003844 <TIM_Base_SetConfig+0x40>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003822:	d00f      	beq.n	8003844 <TIM_Base_SetConfig+0x40>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	4a3d      	ldr	r2, [pc, #244]	; (800391c <TIM_Base_SetConfig+0x118>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d00b      	beq.n	8003844 <TIM_Base_SetConfig+0x40>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	4a3c      	ldr	r2, [pc, #240]	; (8003920 <TIM_Base_SetConfig+0x11c>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d007      	beq.n	8003844 <TIM_Base_SetConfig+0x40>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	4a3b      	ldr	r2, [pc, #236]	; (8003924 <TIM_Base_SetConfig+0x120>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d003      	beq.n	8003844 <TIM_Base_SetConfig+0x40>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	4a3a      	ldr	r2, [pc, #232]	; (8003928 <TIM_Base_SetConfig+0x124>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d108      	bne.n	8003856 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800384a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	68fa      	ldr	r2, [r7, #12]
 8003852:	4313      	orrs	r3, r2
 8003854:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	4a2f      	ldr	r2, [pc, #188]	; (8003918 <TIM_Base_SetConfig+0x114>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d02b      	beq.n	80038b6 <TIM_Base_SetConfig+0xb2>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003864:	d027      	beq.n	80038b6 <TIM_Base_SetConfig+0xb2>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	4a2c      	ldr	r2, [pc, #176]	; (800391c <TIM_Base_SetConfig+0x118>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d023      	beq.n	80038b6 <TIM_Base_SetConfig+0xb2>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	4a2b      	ldr	r2, [pc, #172]	; (8003920 <TIM_Base_SetConfig+0x11c>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d01f      	beq.n	80038b6 <TIM_Base_SetConfig+0xb2>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	4a2a      	ldr	r2, [pc, #168]	; (8003924 <TIM_Base_SetConfig+0x120>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d01b      	beq.n	80038b6 <TIM_Base_SetConfig+0xb2>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	4a29      	ldr	r2, [pc, #164]	; (8003928 <TIM_Base_SetConfig+0x124>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d017      	beq.n	80038b6 <TIM_Base_SetConfig+0xb2>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	4a28      	ldr	r2, [pc, #160]	; (800392c <TIM_Base_SetConfig+0x128>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d013      	beq.n	80038b6 <TIM_Base_SetConfig+0xb2>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	4a27      	ldr	r2, [pc, #156]	; (8003930 <TIM_Base_SetConfig+0x12c>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d00f      	beq.n	80038b6 <TIM_Base_SetConfig+0xb2>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	4a26      	ldr	r2, [pc, #152]	; (8003934 <TIM_Base_SetConfig+0x130>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d00b      	beq.n	80038b6 <TIM_Base_SetConfig+0xb2>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	4a25      	ldr	r2, [pc, #148]	; (8003938 <TIM_Base_SetConfig+0x134>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d007      	beq.n	80038b6 <TIM_Base_SetConfig+0xb2>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	4a24      	ldr	r2, [pc, #144]	; (800393c <TIM_Base_SetConfig+0x138>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d003      	beq.n	80038b6 <TIM_Base_SetConfig+0xb2>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	4a23      	ldr	r2, [pc, #140]	; (8003940 <TIM_Base_SetConfig+0x13c>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d108      	bne.n	80038c8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	68db      	ldr	r3, [r3, #12]
 80038c2:	68fa      	ldr	r2, [r7, #12]
 80038c4:	4313      	orrs	r3, r2
 80038c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	695b      	ldr	r3, [r3, #20]
 80038d2:	4313      	orrs	r3, r2
 80038d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	68fa      	ldr	r2, [r7, #12]
 80038da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	689a      	ldr	r2, [r3, #8]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	681a      	ldr	r2, [r3, #0]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	4a0a      	ldr	r2, [pc, #40]	; (8003918 <TIM_Base_SetConfig+0x114>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d003      	beq.n	80038fc <TIM_Base_SetConfig+0xf8>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	4a0c      	ldr	r2, [pc, #48]	; (8003928 <TIM_Base_SetConfig+0x124>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d103      	bne.n	8003904 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	691a      	ldr	r2, [r3, #16]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2201      	movs	r2, #1
 8003908:	615a      	str	r2, [r3, #20]
}
 800390a:	bf00      	nop
 800390c:	3714      	adds	r7, #20
 800390e:	46bd      	mov	sp, r7
 8003910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003914:	4770      	bx	lr
 8003916:	bf00      	nop
 8003918:	40010000 	.word	0x40010000
 800391c:	40000400 	.word	0x40000400
 8003920:	40000800 	.word	0x40000800
 8003924:	40000c00 	.word	0x40000c00
 8003928:	40010400 	.word	0x40010400
 800392c:	40014000 	.word	0x40014000
 8003930:	40014400 	.word	0x40014400
 8003934:	40014800 	.word	0x40014800
 8003938:	40001800 	.word	0x40001800
 800393c:	40001c00 	.word	0x40001c00
 8003940:	40002000 	.word	0x40002000

08003944 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003944:	b480      	push	{r7}
 8003946:	b087      	sub	sp, #28
 8003948:	af00      	add	r7, sp, #0
 800394a:	60f8      	str	r0, [r7, #12]
 800394c:	60b9      	str	r1, [r7, #8]
 800394e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	6a1b      	ldr	r3, [r3, #32]
 8003954:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	6a1b      	ldr	r3, [r3, #32]
 800395a:	f023 0201 	bic.w	r2, r3, #1
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	699b      	ldr	r3, [r3, #24]
 8003966:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800396e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	011b      	lsls	r3, r3, #4
 8003974:	693a      	ldr	r2, [r7, #16]
 8003976:	4313      	orrs	r3, r2
 8003978:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	f023 030a 	bic.w	r3, r3, #10
 8003980:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003982:	697a      	ldr	r2, [r7, #20]
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	4313      	orrs	r3, r2
 8003988:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	693a      	ldr	r2, [r7, #16]
 800398e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	697a      	ldr	r2, [r7, #20]
 8003994:	621a      	str	r2, [r3, #32]
}
 8003996:	bf00      	nop
 8003998:	371c      	adds	r7, #28
 800399a:	46bd      	mov	sp, r7
 800399c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a0:	4770      	bx	lr

080039a2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80039a2:	b480      	push	{r7}
 80039a4:	b087      	sub	sp, #28
 80039a6:	af00      	add	r7, sp, #0
 80039a8:	60f8      	str	r0, [r7, #12]
 80039aa:	60b9      	str	r1, [r7, #8]
 80039ac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	6a1b      	ldr	r3, [r3, #32]
 80039b2:	f023 0210 	bic.w	r2, r3, #16
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	699b      	ldr	r3, [r3, #24]
 80039be:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	6a1b      	ldr	r3, [r3, #32]
 80039c4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80039cc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	031b      	lsls	r3, r3, #12
 80039d2:	697a      	ldr	r2, [r7, #20]
 80039d4:	4313      	orrs	r3, r2
 80039d6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80039d8:	693b      	ldr	r3, [r7, #16]
 80039da:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80039de:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	011b      	lsls	r3, r3, #4
 80039e4:	693a      	ldr	r2, [r7, #16]
 80039e6:	4313      	orrs	r3, r2
 80039e8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	697a      	ldr	r2, [r7, #20]
 80039ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	693a      	ldr	r2, [r7, #16]
 80039f4:	621a      	str	r2, [r3, #32]
}
 80039f6:	bf00      	nop
 80039f8:	371c      	adds	r7, #28
 80039fa:	46bd      	mov	sp, r7
 80039fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a00:	4770      	bx	lr

08003a02 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003a02:	b480      	push	{r7}
 8003a04:	b085      	sub	sp, #20
 8003a06:	af00      	add	r7, sp, #0
 8003a08:	6078      	str	r0, [r7, #4]
 8003a0a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a18:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a1a:	683a      	ldr	r2, [r7, #0]
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	f043 0307 	orr.w	r3, r3, #7
 8003a24:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	68fa      	ldr	r2, [r7, #12]
 8003a2a:	609a      	str	r2, [r3, #8]
}
 8003a2c:	bf00      	nop
 8003a2e:	3714      	adds	r7, #20
 8003a30:	46bd      	mov	sp, r7
 8003a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a36:	4770      	bx	lr

08003a38 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b087      	sub	sp, #28
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	60f8      	str	r0, [r7, #12]
 8003a40:	60b9      	str	r1, [r7, #8]
 8003a42:	607a      	str	r2, [r7, #4]
 8003a44:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a52:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	021a      	lsls	r2, r3, #8
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	431a      	orrs	r2, r3
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	697a      	ldr	r2, [r7, #20]
 8003a62:	4313      	orrs	r3, r2
 8003a64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	697a      	ldr	r2, [r7, #20]
 8003a6a:	609a      	str	r2, [r3, #8]
}
 8003a6c:	bf00      	nop
 8003a6e:	371c      	adds	r7, #28
 8003a70:	46bd      	mov	sp, r7
 8003a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a76:	4770      	bx	lr

08003a78 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b085      	sub	sp, #20
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
 8003a80:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	d101      	bne.n	8003a90 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a8c:	2302      	movs	r3, #2
 8003a8e:	e05a      	b.n	8003b46 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2201      	movs	r2, #1
 8003a94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2202      	movs	r2, #2
 8003a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ab6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	68fa      	ldr	r2, [r7, #12]
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	68fa      	ldr	r2, [r7, #12]
 8003ac8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a21      	ldr	r2, [pc, #132]	; (8003b54 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d022      	beq.n	8003b1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003adc:	d01d      	beq.n	8003b1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a1d      	ldr	r2, [pc, #116]	; (8003b58 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d018      	beq.n	8003b1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a1b      	ldr	r2, [pc, #108]	; (8003b5c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d013      	beq.n	8003b1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a1a      	ldr	r2, [pc, #104]	; (8003b60 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d00e      	beq.n	8003b1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a18      	ldr	r2, [pc, #96]	; (8003b64 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d009      	beq.n	8003b1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a17      	ldr	r2, [pc, #92]	; (8003b68 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d004      	beq.n	8003b1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a15      	ldr	r2, [pc, #84]	; (8003b6c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d10c      	bne.n	8003b34 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b20:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	68ba      	ldr	r2, [r7, #8]
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	68ba      	ldr	r2, [r7, #8]
 8003b32:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2201      	movs	r2, #1
 8003b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b44:	2300      	movs	r3, #0
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	3714      	adds	r7, #20
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b50:	4770      	bx	lr
 8003b52:	bf00      	nop
 8003b54:	40010000 	.word	0x40010000
 8003b58:	40000400 	.word	0x40000400
 8003b5c:	40000800 	.word	0x40000800
 8003b60:	40000c00 	.word	0x40000c00
 8003b64:	40010400 	.word	0x40010400
 8003b68:	40014000 	.word	0x40014000
 8003b6c:	40001800 	.word	0x40001800

08003b70 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b083      	sub	sp, #12
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003b78:	bf00      	nop
 8003b7a:	370c      	adds	r7, #12
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b82:	4770      	bx	lr

08003b84 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b083      	sub	sp, #12
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003b8c:	bf00      	nop
 8003b8e:	370c      	adds	r7, #12
 8003b90:	46bd      	mov	sp, r7
 8003b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b96:	4770      	bx	lr

08003b98 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b082      	sub	sp, #8
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d101      	bne.n	8003baa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	e03f      	b.n	8003c2a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bb0:	b2db      	uxtb	r3, r3
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d106      	bne.n	8003bc4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	f7fd fe40 	bl	8001844 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2224      	movs	r2, #36	; 0x24
 8003bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	68da      	ldr	r2, [r3, #12]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003bda:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003bdc:	6878      	ldr	r0, [r7, #4]
 8003bde:	f000 fd7b 	bl	80046d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	691a      	ldr	r2, [r3, #16]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003bf0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	695a      	ldr	r2, [r3, #20]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c00:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	68da      	ldr	r2, [r3, #12]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c10:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2200      	movs	r2, #0
 8003c16:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2220      	movs	r2, #32
 8003c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2220      	movs	r2, #32
 8003c24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003c28:	2300      	movs	r3, #0
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3708      	adds	r7, #8
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}

08003c32 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c32:	b580      	push	{r7, lr}
 8003c34:	b08a      	sub	sp, #40	; 0x28
 8003c36:	af02      	add	r7, sp, #8
 8003c38:	60f8      	str	r0, [r7, #12]
 8003c3a:	60b9      	str	r1, [r7, #8]
 8003c3c:	603b      	str	r3, [r7, #0]
 8003c3e:	4613      	mov	r3, r2
 8003c40:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003c42:	2300      	movs	r3, #0
 8003c44:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c4c:	b2db      	uxtb	r3, r3
 8003c4e:	2b20      	cmp	r3, #32
 8003c50:	d17c      	bne.n	8003d4c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d002      	beq.n	8003c5e <HAL_UART_Transmit+0x2c>
 8003c58:	88fb      	ldrh	r3, [r7, #6]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d101      	bne.n	8003c62 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e075      	b.n	8003d4e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	d101      	bne.n	8003c70 <HAL_UART_Transmit+0x3e>
 8003c6c:	2302      	movs	r3, #2
 8003c6e:	e06e      	b.n	8003d4e <HAL_UART_Transmit+0x11c>
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2201      	movs	r2, #1
 8003c74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	2221      	movs	r2, #33	; 0x21
 8003c82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c86:	f7fd ff3d 	bl	8001b04 <HAL_GetTick>
 8003c8a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	88fa      	ldrh	r2, [r7, #6]
 8003c90:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	88fa      	ldrh	r2, [r7, #6]
 8003c96:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ca0:	d108      	bne.n	8003cb4 <HAL_UART_Transmit+0x82>
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	691b      	ldr	r3, [r3, #16]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d104      	bne.n	8003cb4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003caa:	2300      	movs	r3, #0
 8003cac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	61bb      	str	r3, [r7, #24]
 8003cb2:	e003      	b.n	8003cbc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003cb8:	2300      	movs	r3, #0
 8003cba:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003cc4:	e02a      	b.n	8003d1c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	9300      	str	r3, [sp, #0]
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	2180      	movs	r1, #128	; 0x80
 8003cd0:	68f8      	ldr	r0, [r7, #12]
 8003cd2:	f000 faf9 	bl	80042c8 <UART_WaitOnFlagUntilTimeout>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d001      	beq.n	8003ce0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003cdc:	2303      	movs	r3, #3
 8003cde:	e036      	b.n	8003d4e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003ce0:	69fb      	ldr	r3, [r7, #28]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d10b      	bne.n	8003cfe <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003ce6:	69bb      	ldr	r3, [r7, #24]
 8003ce8:	881b      	ldrh	r3, [r3, #0]
 8003cea:	461a      	mov	r2, r3
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003cf4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003cf6:	69bb      	ldr	r3, [r7, #24]
 8003cf8:	3302      	adds	r3, #2
 8003cfa:	61bb      	str	r3, [r7, #24]
 8003cfc:	e007      	b.n	8003d0e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003cfe:	69fb      	ldr	r3, [r7, #28]
 8003d00:	781a      	ldrb	r2, [r3, #0]
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003d08:	69fb      	ldr	r3, [r7, #28]
 8003d0a:	3301      	adds	r3, #1
 8003d0c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d12:	b29b      	uxth	r3, r3
 8003d14:	3b01      	subs	r3, #1
 8003d16:	b29a      	uxth	r2, r3
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d20:	b29b      	uxth	r3, r3
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d1cf      	bne.n	8003cc6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	9300      	str	r3, [sp, #0]
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	2140      	movs	r1, #64	; 0x40
 8003d30:	68f8      	ldr	r0, [r7, #12]
 8003d32:	f000 fac9 	bl	80042c8 <UART_WaitOnFlagUntilTimeout>
 8003d36:	4603      	mov	r3, r0
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d001      	beq.n	8003d40 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003d3c:	2303      	movs	r3, #3
 8003d3e:	e006      	b.n	8003d4e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	2220      	movs	r2, #32
 8003d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	e000      	b.n	8003d4e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003d4c:	2302      	movs	r3, #2
  }
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	3720      	adds	r7, #32
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}
	...

08003d58 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b0ba      	sub	sp, #232	; 0xe8
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	68db      	ldr	r3, [r3, #12]
 8003d70:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	695b      	ldr	r3, [r3, #20]
 8003d7a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003d84:	2300      	movs	r3, #0
 8003d86:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003d8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d8e:	f003 030f 	and.w	r3, r3, #15
 8003d92:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003d96:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d10f      	bne.n	8003dbe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003d9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003da2:	f003 0320 	and.w	r3, r3, #32
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d009      	beq.n	8003dbe <HAL_UART_IRQHandler+0x66>
 8003daa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003dae:	f003 0320 	and.w	r3, r3, #32
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d003      	beq.n	8003dbe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003db6:	6878      	ldr	r0, [r7, #4]
 8003db8:	f000 fbd3 	bl	8004562 <UART_Receive_IT>
      return;
 8003dbc:	e256      	b.n	800426c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003dbe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	f000 80de 	beq.w	8003f84 <HAL_UART_IRQHandler+0x22c>
 8003dc8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003dcc:	f003 0301 	and.w	r3, r3, #1
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d106      	bne.n	8003de2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003dd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003dd8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	f000 80d1 	beq.w	8003f84 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003de2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003de6:	f003 0301 	and.w	r3, r3, #1
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d00b      	beq.n	8003e06 <HAL_UART_IRQHandler+0xae>
 8003dee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003df2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d005      	beq.n	8003e06 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dfe:	f043 0201 	orr.w	r2, r3, #1
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003e06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e0a:	f003 0304 	and.w	r3, r3, #4
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d00b      	beq.n	8003e2a <HAL_UART_IRQHandler+0xd2>
 8003e12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e16:	f003 0301 	and.w	r3, r3, #1
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d005      	beq.n	8003e2a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e22:	f043 0202 	orr.w	r2, r3, #2
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003e2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e2e:	f003 0302 	and.w	r3, r3, #2
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d00b      	beq.n	8003e4e <HAL_UART_IRQHandler+0xf6>
 8003e36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e3a:	f003 0301 	and.w	r3, r3, #1
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d005      	beq.n	8003e4e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e46:	f043 0204 	orr.w	r2, r3, #4
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003e4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e52:	f003 0308 	and.w	r3, r3, #8
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d011      	beq.n	8003e7e <HAL_UART_IRQHandler+0x126>
 8003e5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e5e:	f003 0320 	and.w	r3, r3, #32
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d105      	bne.n	8003e72 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003e66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e6a:	f003 0301 	and.w	r3, r3, #1
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d005      	beq.n	8003e7e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e76:	f043 0208 	orr.w	r2, r3, #8
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	f000 81ed 	beq.w	8004262 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003e88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e8c:	f003 0320 	and.w	r3, r3, #32
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d008      	beq.n	8003ea6 <HAL_UART_IRQHandler+0x14e>
 8003e94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e98:	f003 0320 	and.w	r3, r3, #32
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d002      	beq.n	8003ea6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003ea0:	6878      	ldr	r0, [r7, #4]
 8003ea2:	f000 fb5e 	bl	8004562 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	695b      	ldr	r3, [r3, #20]
 8003eac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eb0:	2b40      	cmp	r3, #64	; 0x40
 8003eb2:	bf0c      	ite	eq
 8003eb4:	2301      	moveq	r3, #1
 8003eb6:	2300      	movne	r3, #0
 8003eb8:	b2db      	uxtb	r3, r3
 8003eba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec2:	f003 0308 	and.w	r3, r3, #8
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d103      	bne.n	8003ed2 <HAL_UART_IRQHandler+0x17a>
 8003eca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d04f      	beq.n	8003f72 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f000 fa66 	bl	80043a4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	695b      	ldr	r3, [r3, #20]
 8003ede:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ee2:	2b40      	cmp	r3, #64	; 0x40
 8003ee4:	d141      	bne.n	8003f6a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	3314      	adds	r3, #20
 8003eec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ef0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003ef4:	e853 3f00 	ldrex	r3, [r3]
 8003ef8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003efc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003f00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f04:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	3314      	adds	r3, #20
 8003f0e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003f12:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003f16:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f1a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003f1e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003f22:	e841 2300 	strex	r3, r2, [r1]
 8003f26:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003f2a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d1d9      	bne.n	8003ee6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d013      	beq.n	8003f62 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f3e:	4a7d      	ldr	r2, [pc, #500]	; (8004134 <HAL_UART_IRQHandler+0x3dc>)
 8003f40:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f46:	4618      	mov	r0, r3
 8003f48:	f7fe fb59 	bl	80025fe <HAL_DMA_Abort_IT>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d016      	beq.n	8003f80 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f58:	687a      	ldr	r2, [r7, #4]
 8003f5a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003f5c:	4610      	mov	r0, r2
 8003f5e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f60:	e00e      	b.n	8003f80 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	f000 f99a 	bl	800429c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f68:	e00a      	b.n	8003f80 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	f000 f996 	bl	800429c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f70:	e006      	b.n	8003f80 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003f72:	6878      	ldr	r0, [r7, #4]
 8003f74:	f000 f992 	bl	800429c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003f7e:	e170      	b.n	8004262 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f80:	bf00      	nop
    return;
 8003f82:	e16e      	b.n	8004262 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f88:	2b01      	cmp	r3, #1
 8003f8a:	f040 814a 	bne.w	8004222 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003f8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f92:	f003 0310 	and.w	r3, r3, #16
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	f000 8143 	beq.w	8004222 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003f9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003fa0:	f003 0310 	and.w	r3, r3, #16
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	f000 813c 	beq.w	8004222 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003faa:	2300      	movs	r3, #0
 8003fac:	60bb      	str	r3, [r7, #8]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	60bb      	str	r3, [r7, #8]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	60bb      	str	r3, [r7, #8]
 8003fbe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	695b      	ldr	r3, [r3, #20]
 8003fc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fca:	2b40      	cmp	r3, #64	; 0x40
 8003fcc:	f040 80b4 	bne.w	8004138 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003fdc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	f000 8140 	beq.w	8004266 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003fea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003fee:	429a      	cmp	r2, r3
 8003ff0:	f080 8139 	bcs.w	8004266 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003ffa:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004000:	69db      	ldr	r3, [r3, #28]
 8004002:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004006:	f000 8088 	beq.w	800411a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	330c      	adds	r3, #12
 8004010:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004014:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004018:	e853 3f00 	ldrex	r3, [r3]
 800401c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004020:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004024:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004028:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	330c      	adds	r3, #12
 8004032:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004036:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800403a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800403e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004042:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004046:	e841 2300 	strex	r3, r2, [r1]
 800404a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800404e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004052:	2b00      	cmp	r3, #0
 8004054:	d1d9      	bne.n	800400a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	3314      	adds	r3, #20
 800405c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800405e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004060:	e853 3f00 	ldrex	r3, [r3]
 8004064:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004066:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004068:	f023 0301 	bic.w	r3, r3, #1
 800406c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	3314      	adds	r3, #20
 8004076:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800407a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800407e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004080:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004082:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004086:	e841 2300 	strex	r3, r2, [r1]
 800408a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800408c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800408e:	2b00      	cmp	r3, #0
 8004090:	d1e1      	bne.n	8004056 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	3314      	adds	r3, #20
 8004098:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800409a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800409c:	e853 3f00 	ldrex	r3, [r3]
 80040a0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80040a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	3314      	adds	r3, #20
 80040b2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80040b6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80040b8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ba:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80040bc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80040be:	e841 2300 	strex	r3, r2, [r1]
 80040c2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80040c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d1e3      	bne.n	8004092 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2220      	movs	r2, #32
 80040ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2200      	movs	r2, #0
 80040d6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	330c      	adds	r3, #12
 80040de:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040e2:	e853 3f00 	ldrex	r3, [r3]
 80040e6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80040e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040ea:	f023 0310 	bic.w	r3, r3, #16
 80040ee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	330c      	adds	r3, #12
 80040f8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80040fc:	65ba      	str	r2, [r7, #88]	; 0x58
 80040fe:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004100:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004102:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004104:	e841 2300 	strex	r3, r2, [r1]
 8004108:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800410a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800410c:	2b00      	cmp	r3, #0
 800410e:	d1e3      	bne.n	80040d8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004114:	4618      	mov	r0, r3
 8004116:	f7fe fa02 	bl	800251e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004122:	b29b      	uxth	r3, r3
 8004124:	1ad3      	subs	r3, r2, r3
 8004126:	b29b      	uxth	r3, r3
 8004128:	4619      	mov	r1, r3
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	f000 f8c0 	bl	80042b0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004130:	e099      	b.n	8004266 <HAL_UART_IRQHandler+0x50e>
 8004132:	bf00      	nop
 8004134:	0800446b 	.word	0x0800446b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004140:	b29b      	uxth	r3, r3
 8004142:	1ad3      	subs	r3, r2, r3
 8004144:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800414c:	b29b      	uxth	r3, r3
 800414e:	2b00      	cmp	r3, #0
 8004150:	f000 808b 	beq.w	800426a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004154:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004158:	2b00      	cmp	r3, #0
 800415a:	f000 8086 	beq.w	800426a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	330c      	adds	r3, #12
 8004164:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004168:	e853 3f00 	ldrex	r3, [r3]
 800416c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800416e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004170:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004174:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	330c      	adds	r3, #12
 800417e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004182:	647a      	str	r2, [r7, #68]	; 0x44
 8004184:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004186:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004188:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800418a:	e841 2300 	strex	r3, r2, [r1]
 800418e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004190:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004192:	2b00      	cmp	r3, #0
 8004194:	d1e3      	bne.n	800415e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	3314      	adds	r3, #20
 800419c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800419e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a0:	e853 3f00 	ldrex	r3, [r3]
 80041a4:	623b      	str	r3, [r7, #32]
   return(result);
 80041a6:	6a3b      	ldr	r3, [r7, #32]
 80041a8:	f023 0301 	bic.w	r3, r3, #1
 80041ac:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	3314      	adds	r3, #20
 80041b6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80041ba:	633a      	str	r2, [r7, #48]	; 0x30
 80041bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80041c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041c2:	e841 2300 	strex	r3, r2, [r1]
 80041c6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80041c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d1e3      	bne.n	8004196 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2220      	movs	r2, #32
 80041d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2200      	movs	r2, #0
 80041da:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	330c      	adds	r3, #12
 80041e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	e853 3f00 	ldrex	r3, [r3]
 80041ea:	60fb      	str	r3, [r7, #12]
   return(result);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	f023 0310 	bic.w	r3, r3, #16
 80041f2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	330c      	adds	r3, #12
 80041fc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004200:	61fa      	str	r2, [r7, #28]
 8004202:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004204:	69b9      	ldr	r1, [r7, #24]
 8004206:	69fa      	ldr	r2, [r7, #28]
 8004208:	e841 2300 	strex	r3, r2, [r1]
 800420c:	617b      	str	r3, [r7, #20]
   return(result);
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d1e3      	bne.n	80041dc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004214:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004218:	4619      	mov	r1, r3
 800421a:	6878      	ldr	r0, [r7, #4]
 800421c:	f000 f848 	bl	80042b0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004220:	e023      	b.n	800426a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004222:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004226:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800422a:	2b00      	cmp	r3, #0
 800422c:	d009      	beq.n	8004242 <HAL_UART_IRQHandler+0x4ea>
 800422e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004232:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004236:	2b00      	cmp	r3, #0
 8004238:	d003      	beq.n	8004242 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	f000 f929 	bl	8004492 <UART_Transmit_IT>
    return;
 8004240:	e014      	b.n	800426c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004242:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004246:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800424a:	2b00      	cmp	r3, #0
 800424c:	d00e      	beq.n	800426c <HAL_UART_IRQHandler+0x514>
 800424e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004252:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004256:	2b00      	cmp	r3, #0
 8004258:	d008      	beq.n	800426c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800425a:	6878      	ldr	r0, [r7, #4]
 800425c:	f000 f969 	bl	8004532 <UART_EndTransmit_IT>
    return;
 8004260:	e004      	b.n	800426c <HAL_UART_IRQHandler+0x514>
    return;
 8004262:	bf00      	nop
 8004264:	e002      	b.n	800426c <HAL_UART_IRQHandler+0x514>
      return;
 8004266:	bf00      	nop
 8004268:	e000      	b.n	800426c <HAL_UART_IRQHandler+0x514>
      return;
 800426a:	bf00      	nop
  }
}
 800426c:	37e8      	adds	r7, #232	; 0xe8
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}
 8004272:	bf00      	nop

08004274 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004274:	b480      	push	{r7}
 8004276:	b083      	sub	sp, #12
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800427c:	bf00      	nop
 800427e:	370c      	adds	r7, #12
 8004280:	46bd      	mov	sp, r7
 8004282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004286:	4770      	bx	lr

08004288 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004288:	b480      	push	{r7}
 800428a:	b083      	sub	sp, #12
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004290:	bf00      	nop
 8004292:	370c      	adds	r7, #12
 8004294:	46bd      	mov	sp, r7
 8004296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429a:	4770      	bx	lr

0800429c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800429c:	b480      	push	{r7}
 800429e:	b083      	sub	sp, #12
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80042a4:	bf00      	nop
 80042a6:	370c      	adds	r7, #12
 80042a8:	46bd      	mov	sp, r7
 80042aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ae:	4770      	bx	lr

080042b0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b083      	sub	sp, #12
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
 80042b8:	460b      	mov	r3, r1
 80042ba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80042bc:	bf00      	nop
 80042be:	370c      	adds	r7, #12
 80042c0:	46bd      	mov	sp, r7
 80042c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c6:	4770      	bx	lr

080042c8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b090      	sub	sp, #64	; 0x40
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	60f8      	str	r0, [r7, #12]
 80042d0:	60b9      	str	r1, [r7, #8]
 80042d2:	603b      	str	r3, [r7, #0]
 80042d4:	4613      	mov	r3, r2
 80042d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042d8:	e050      	b.n	800437c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042e0:	d04c      	beq.n	800437c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80042e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d007      	beq.n	80042f8 <UART_WaitOnFlagUntilTimeout+0x30>
 80042e8:	f7fd fc0c 	bl	8001b04 <HAL_GetTick>
 80042ec:	4602      	mov	r2, r0
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	1ad3      	subs	r3, r2, r3
 80042f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80042f4:	429a      	cmp	r2, r3
 80042f6:	d241      	bcs.n	800437c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	330c      	adds	r3, #12
 80042fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004302:	e853 3f00 	ldrex	r3, [r3]
 8004306:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800430a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800430e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	330c      	adds	r3, #12
 8004316:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004318:	637a      	str	r2, [r7, #52]	; 0x34
 800431a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800431c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800431e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004320:	e841 2300 	strex	r3, r2, [r1]
 8004324:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004328:	2b00      	cmp	r3, #0
 800432a:	d1e5      	bne.n	80042f8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	3314      	adds	r3, #20
 8004332:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	e853 3f00 	ldrex	r3, [r3]
 800433a:	613b      	str	r3, [r7, #16]
   return(result);
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	f023 0301 	bic.w	r3, r3, #1
 8004342:	63bb      	str	r3, [r7, #56]	; 0x38
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	3314      	adds	r3, #20
 800434a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800434c:	623a      	str	r2, [r7, #32]
 800434e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004350:	69f9      	ldr	r1, [r7, #28]
 8004352:	6a3a      	ldr	r2, [r7, #32]
 8004354:	e841 2300 	strex	r3, r2, [r1]
 8004358:	61bb      	str	r3, [r7, #24]
   return(result);
 800435a:	69bb      	ldr	r3, [r7, #24]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d1e5      	bne.n	800432c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	2220      	movs	r2, #32
 8004364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	2220      	movs	r2, #32
 800436c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	2200      	movs	r2, #0
 8004374:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004378:	2303      	movs	r3, #3
 800437a:	e00f      	b.n	800439c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	681a      	ldr	r2, [r3, #0]
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	4013      	ands	r3, r2
 8004386:	68ba      	ldr	r2, [r7, #8]
 8004388:	429a      	cmp	r2, r3
 800438a:	bf0c      	ite	eq
 800438c:	2301      	moveq	r3, #1
 800438e:	2300      	movne	r3, #0
 8004390:	b2db      	uxtb	r3, r3
 8004392:	461a      	mov	r2, r3
 8004394:	79fb      	ldrb	r3, [r7, #7]
 8004396:	429a      	cmp	r2, r3
 8004398:	d09f      	beq.n	80042da <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800439a:	2300      	movs	r3, #0
}
 800439c:	4618      	mov	r0, r3
 800439e:	3740      	adds	r7, #64	; 0x40
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bd80      	pop	{r7, pc}

080043a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80043a4:	b480      	push	{r7}
 80043a6:	b095      	sub	sp, #84	; 0x54
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	330c      	adds	r3, #12
 80043b2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043b6:	e853 3f00 	ldrex	r3, [r3]
 80043ba:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80043bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043be:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80043c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	330c      	adds	r3, #12
 80043ca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80043cc:	643a      	str	r2, [r7, #64]	; 0x40
 80043ce:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043d0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80043d2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80043d4:	e841 2300 	strex	r3, r2, [r1]
 80043d8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80043da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d1e5      	bne.n	80043ac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	3314      	adds	r3, #20
 80043e6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043e8:	6a3b      	ldr	r3, [r7, #32]
 80043ea:	e853 3f00 	ldrex	r3, [r3]
 80043ee:	61fb      	str	r3, [r7, #28]
   return(result);
 80043f0:	69fb      	ldr	r3, [r7, #28]
 80043f2:	f023 0301 	bic.w	r3, r3, #1
 80043f6:	64bb      	str	r3, [r7, #72]	; 0x48
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	3314      	adds	r3, #20
 80043fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004400:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004402:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004404:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004406:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004408:	e841 2300 	strex	r3, r2, [r1]
 800440c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800440e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004410:	2b00      	cmp	r3, #0
 8004412:	d1e5      	bne.n	80043e0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004418:	2b01      	cmp	r3, #1
 800441a:	d119      	bne.n	8004450 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	330c      	adds	r3, #12
 8004422:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	e853 3f00 	ldrex	r3, [r3]
 800442a:	60bb      	str	r3, [r7, #8]
   return(result);
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	f023 0310 	bic.w	r3, r3, #16
 8004432:	647b      	str	r3, [r7, #68]	; 0x44
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	330c      	adds	r3, #12
 800443a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800443c:	61ba      	str	r2, [r7, #24]
 800443e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004440:	6979      	ldr	r1, [r7, #20]
 8004442:	69ba      	ldr	r2, [r7, #24]
 8004444:	e841 2300 	strex	r3, r2, [r1]
 8004448:	613b      	str	r3, [r7, #16]
   return(result);
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d1e5      	bne.n	800441c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2220      	movs	r2, #32
 8004454:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2200      	movs	r2, #0
 800445c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800445e:	bf00      	nop
 8004460:	3754      	adds	r7, #84	; 0x54
 8004462:	46bd      	mov	sp, r7
 8004464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004468:	4770      	bx	lr

0800446a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800446a:	b580      	push	{r7, lr}
 800446c:	b084      	sub	sp, #16
 800446e:	af00      	add	r7, sp, #0
 8004470:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004476:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2200      	movs	r2, #0
 800447c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2200      	movs	r2, #0
 8004482:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004484:	68f8      	ldr	r0, [r7, #12]
 8004486:	f7ff ff09 	bl	800429c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800448a:	bf00      	nop
 800448c:	3710      	adds	r7, #16
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}

08004492 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004492:	b480      	push	{r7}
 8004494:	b085      	sub	sp, #20
 8004496:	af00      	add	r7, sp, #0
 8004498:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044a0:	b2db      	uxtb	r3, r3
 80044a2:	2b21      	cmp	r3, #33	; 0x21
 80044a4:	d13e      	bne.n	8004524 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	689b      	ldr	r3, [r3, #8]
 80044aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044ae:	d114      	bne.n	80044da <UART_Transmit_IT+0x48>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	691b      	ldr	r3, [r3, #16]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d110      	bne.n	80044da <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6a1b      	ldr	r3, [r3, #32]
 80044bc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	881b      	ldrh	r3, [r3, #0]
 80044c2:	461a      	mov	r2, r3
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80044cc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6a1b      	ldr	r3, [r3, #32]
 80044d2:	1c9a      	adds	r2, r3, #2
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	621a      	str	r2, [r3, #32]
 80044d8:	e008      	b.n	80044ec <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6a1b      	ldr	r3, [r3, #32]
 80044de:	1c59      	adds	r1, r3, #1
 80044e0:	687a      	ldr	r2, [r7, #4]
 80044e2:	6211      	str	r1, [r2, #32]
 80044e4:	781a      	ldrb	r2, [r3, #0]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80044f0:	b29b      	uxth	r3, r3
 80044f2:	3b01      	subs	r3, #1
 80044f4:	b29b      	uxth	r3, r3
 80044f6:	687a      	ldr	r2, [r7, #4]
 80044f8:	4619      	mov	r1, r3
 80044fa:	84d1      	strh	r1, [r2, #38]	; 0x26
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d10f      	bne.n	8004520 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	68da      	ldr	r2, [r3, #12]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800450e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	68da      	ldr	r2, [r3, #12]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800451e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004520:	2300      	movs	r3, #0
 8004522:	e000      	b.n	8004526 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004524:	2302      	movs	r3, #2
  }
}
 8004526:	4618      	mov	r0, r3
 8004528:	3714      	adds	r7, #20
 800452a:	46bd      	mov	sp, r7
 800452c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004530:	4770      	bx	lr

08004532 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004532:	b580      	push	{r7, lr}
 8004534:	b082      	sub	sp, #8
 8004536:	af00      	add	r7, sp, #0
 8004538:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	68da      	ldr	r2, [r3, #12]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004548:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2220      	movs	r2, #32
 800454e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004552:	6878      	ldr	r0, [r7, #4]
 8004554:	f7ff fe8e 	bl	8004274 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004558:	2300      	movs	r3, #0
}
 800455a:	4618      	mov	r0, r3
 800455c:	3708      	adds	r7, #8
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}

08004562 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004562:	b580      	push	{r7, lr}
 8004564:	b08c      	sub	sp, #48	; 0x30
 8004566:	af00      	add	r7, sp, #0
 8004568:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004570:	b2db      	uxtb	r3, r3
 8004572:	2b22      	cmp	r3, #34	; 0x22
 8004574:	f040 80ab 	bne.w	80046ce <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004580:	d117      	bne.n	80045b2 <UART_Receive_IT+0x50>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	691b      	ldr	r3, [r3, #16]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d113      	bne.n	80045b2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800458a:	2300      	movs	r3, #0
 800458c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004592:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	b29b      	uxth	r3, r3
 800459c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045a0:	b29a      	uxth	r2, r3
 80045a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045a4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045aa:	1c9a      	adds	r2, r3, #2
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	629a      	str	r2, [r3, #40]	; 0x28
 80045b0:	e026      	b.n	8004600 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045b6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80045b8:	2300      	movs	r3, #0
 80045ba:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	689b      	ldr	r3, [r3, #8]
 80045c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045c4:	d007      	beq.n	80045d6 <UART_Receive_IT+0x74>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d10a      	bne.n	80045e4 <UART_Receive_IT+0x82>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	691b      	ldr	r3, [r3, #16]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d106      	bne.n	80045e4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	b2da      	uxtb	r2, r3
 80045de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045e0:	701a      	strb	r2, [r3, #0]
 80045e2:	e008      	b.n	80045f6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	b2db      	uxtb	r3, r3
 80045ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045f0:	b2da      	uxtb	r2, r3
 80045f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045f4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045fa:	1c5a      	adds	r2, r3, #1
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004604:	b29b      	uxth	r3, r3
 8004606:	3b01      	subs	r3, #1
 8004608:	b29b      	uxth	r3, r3
 800460a:	687a      	ldr	r2, [r7, #4]
 800460c:	4619      	mov	r1, r3
 800460e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004610:	2b00      	cmp	r3, #0
 8004612:	d15a      	bne.n	80046ca <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	68da      	ldr	r2, [r3, #12]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f022 0220 	bic.w	r2, r2, #32
 8004622:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	68da      	ldr	r2, [r3, #12]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004632:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	695a      	ldr	r2, [r3, #20]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f022 0201 	bic.w	r2, r2, #1
 8004642:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2220      	movs	r2, #32
 8004648:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004650:	2b01      	cmp	r3, #1
 8004652:	d135      	bne.n	80046c0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2200      	movs	r2, #0
 8004658:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	330c      	adds	r3, #12
 8004660:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	e853 3f00 	ldrex	r3, [r3]
 8004668:	613b      	str	r3, [r7, #16]
   return(result);
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	f023 0310 	bic.w	r3, r3, #16
 8004670:	627b      	str	r3, [r7, #36]	; 0x24
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	330c      	adds	r3, #12
 8004678:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800467a:	623a      	str	r2, [r7, #32]
 800467c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800467e:	69f9      	ldr	r1, [r7, #28]
 8004680:	6a3a      	ldr	r2, [r7, #32]
 8004682:	e841 2300 	strex	r3, r2, [r1]
 8004686:	61bb      	str	r3, [r7, #24]
   return(result);
 8004688:	69bb      	ldr	r3, [r7, #24]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d1e5      	bne.n	800465a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f003 0310 	and.w	r3, r3, #16
 8004698:	2b10      	cmp	r3, #16
 800469a:	d10a      	bne.n	80046b2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800469c:	2300      	movs	r3, #0
 800469e:	60fb      	str	r3, [r7, #12]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	60fb      	str	r3, [r7, #12]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	60fb      	str	r3, [r7, #12]
 80046b0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80046b6:	4619      	mov	r1, r3
 80046b8:	6878      	ldr	r0, [r7, #4]
 80046ba:	f7ff fdf9 	bl	80042b0 <HAL_UARTEx_RxEventCallback>
 80046be:	e002      	b.n	80046c6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80046c0:	6878      	ldr	r0, [r7, #4]
 80046c2:	f7ff fde1 	bl	8004288 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80046c6:	2300      	movs	r3, #0
 80046c8:	e002      	b.n	80046d0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80046ca:	2300      	movs	r3, #0
 80046cc:	e000      	b.n	80046d0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80046ce:	2302      	movs	r3, #2
  }
}
 80046d0:	4618      	mov	r0, r3
 80046d2:	3730      	adds	r7, #48	; 0x30
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bd80      	pop	{r7, pc}

080046d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80046d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80046dc:	b0c0      	sub	sp, #256	; 0x100
 80046de:	af00      	add	r7, sp, #0
 80046e0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	691b      	ldr	r3, [r3, #16]
 80046ec:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80046f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046f4:	68d9      	ldr	r1, [r3, #12]
 80046f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046fa:	681a      	ldr	r2, [r3, #0]
 80046fc:	ea40 0301 	orr.w	r3, r0, r1
 8004700:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004702:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004706:	689a      	ldr	r2, [r3, #8]
 8004708:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800470c:	691b      	ldr	r3, [r3, #16]
 800470e:	431a      	orrs	r2, r3
 8004710:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004714:	695b      	ldr	r3, [r3, #20]
 8004716:	431a      	orrs	r2, r3
 8004718:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800471c:	69db      	ldr	r3, [r3, #28]
 800471e:	4313      	orrs	r3, r2
 8004720:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004724:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	68db      	ldr	r3, [r3, #12]
 800472c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004730:	f021 010c 	bic.w	r1, r1, #12
 8004734:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004738:	681a      	ldr	r2, [r3, #0]
 800473a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800473e:	430b      	orrs	r3, r1
 8004740:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004742:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	695b      	ldr	r3, [r3, #20]
 800474a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800474e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004752:	6999      	ldr	r1, [r3, #24]
 8004754:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004758:	681a      	ldr	r2, [r3, #0]
 800475a:	ea40 0301 	orr.w	r3, r0, r1
 800475e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004760:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004764:	681a      	ldr	r2, [r3, #0]
 8004766:	4b8f      	ldr	r3, [pc, #572]	; (80049a4 <UART_SetConfig+0x2cc>)
 8004768:	429a      	cmp	r2, r3
 800476a:	d005      	beq.n	8004778 <UART_SetConfig+0xa0>
 800476c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004770:	681a      	ldr	r2, [r3, #0]
 8004772:	4b8d      	ldr	r3, [pc, #564]	; (80049a8 <UART_SetConfig+0x2d0>)
 8004774:	429a      	cmp	r2, r3
 8004776:	d104      	bne.n	8004782 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004778:	f7fe fd76 	bl	8003268 <HAL_RCC_GetPCLK2Freq>
 800477c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004780:	e003      	b.n	800478a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004782:	f7fe fd5d 	bl	8003240 <HAL_RCC_GetPCLK1Freq>
 8004786:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800478a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800478e:	69db      	ldr	r3, [r3, #28]
 8004790:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004794:	f040 810c 	bne.w	80049b0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004798:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800479c:	2200      	movs	r2, #0
 800479e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80047a2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80047a6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80047aa:	4622      	mov	r2, r4
 80047ac:	462b      	mov	r3, r5
 80047ae:	1891      	adds	r1, r2, r2
 80047b0:	65b9      	str	r1, [r7, #88]	; 0x58
 80047b2:	415b      	adcs	r3, r3
 80047b4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80047b6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80047ba:	4621      	mov	r1, r4
 80047bc:	eb12 0801 	adds.w	r8, r2, r1
 80047c0:	4629      	mov	r1, r5
 80047c2:	eb43 0901 	adc.w	r9, r3, r1
 80047c6:	f04f 0200 	mov.w	r2, #0
 80047ca:	f04f 0300 	mov.w	r3, #0
 80047ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80047d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80047d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80047da:	4690      	mov	r8, r2
 80047dc:	4699      	mov	r9, r3
 80047de:	4623      	mov	r3, r4
 80047e0:	eb18 0303 	adds.w	r3, r8, r3
 80047e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80047e8:	462b      	mov	r3, r5
 80047ea:	eb49 0303 	adc.w	r3, r9, r3
 80047ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80047f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	2200      	movs	r2, #0
 80047fa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80047fe:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004802:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004806:	460b      	mov	r3, r1
 8004808:	18db      	adds	r3, r3, r3
 800480a:	653b      	str	r3, [r7, #80]	; 0x50
 800480c:	4613      	mov	r3, r2
 800480e:	eb42 0303 	adc.w	r3, r2, r3
 8004812:	657b      	str	r3, [r7, #84]	; 0x54
 8004814:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004818:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800481c:	f7fc f91e 	bl	8000a5c <__aeabi_uldivmod>
 8004820:	4602      	mov	r2, r0
 8004822:	460b      	mov	r3, r1
 8004824:	4b61      	ldr	r3, [pc, #388]	; (80049ac <UART_SetConfig+0x2d4>)
 8004826:	fba3 2302 	umull	r2, r3, r3, r2
 800482a:	095b      	lsrs	r3, r3, #5
 800482c:	011c      	lsls	r4, r3, #4
 800482e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004832:	2200      	movs	r2, #0
 8004834:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004838:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800483c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004840:	4642      	mov	r2, r8
 8004842:	464b      	mov	r3, r9
 8004844:	1891      	adds	r1, r2, r2
 8004846:	64b9      	str	r1, [r7, #72]	; 0x48
 8004848:	415b      	adcs	r3, r3
 800484a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800484c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004850:	4641      	mov	r1, r8
 8004852:	eb12 0a01 	adds.w	sl, r2, r1
 8004856:	4649      	mov	r1, r9
 8004858:	eb43 0b01 	adc.w	fp, r3, r1
 800485c:	f04f 0200 	mov.w	r2, #0
 8004860:	f04f 0300 	mov.w	r3, #0
 8004864:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004868:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800486c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004870:	4692      	mov	sl, r2
 8004872:	469b      	mov	fp, r3
 8004874:	4643      	mov	r3, r8
 8004876:	eb1a 0303 	adds.w	r3, sl, r3
 800487a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800487e:	464b      	mov	r3, r9
 8004880:	eb4b 0303 	adc.w	r3, fp, r3
 8004884:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004888:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	2200      	movs	r2, #0
 8004890:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004894:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004898:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800489c:	460b      	mov	r3, r1
 800489e:	18db      	adds	r3, r3, r3
 80048a0:	643b      	str	r3, [r7, #64]	; 0x40
 80048a2:	4613      	mov	r3, r2
 80048a4:	eb42 0303 	adc.w	r3, r2, r3
 80048a8:	647b      	str	r3, [r7, #68]	; 0x44
 80048aa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80048ae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80048b2:	f7fc f8d3 	bl	8000a5c <__aeabi_uldivmod>
 80048b6:	4602      	mov	r2, r0
 80048b8:	460b      	mov	r3, r1
 80048ba:	4611      	mov	r1, r2
 80048bc:	4b3b      	ldr	r3, [pc, #236]	; (80049ac <UART_SetConfig+0x2d4>)
 80048be:	fba3 2301 	umull	r2, r3, r3, r1
 80048c2:	095b      	lsrs	r3, r3, #5
 80048c4:	2264      	movs	r2, #100	; 0x64
 80048c6:	fb02 f303 	mul.w	r3, r2, r3
 80048ca:	1acb      	subs	r3, r1, r3
 80048cc:	00db      	lsls	r3, r3, #3
 80048ce:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80048d2:	4b36      	ldr	r3, [pc, #216]	; (80049ac <UART_SetConfig+0x2d4>)
 80048d4:	fba3 2302 	umull	r2, r3, r3, r2
 80048d8:	095b      	lsrs	r3, r3, #5
 80048da:	005b      	lsls	r3, r3, #1
 80048dc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80048e0:	441c      	add	r4, r3
 80048e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80048e6:	2200      	movs	r2, #0
 80048e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80048ec:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80048f0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80048f4:	4642      	mov	r2, r8
 80048f6:	464b      	mov	r3, r9
 80048f8:	1891      	adds	r1, r2, r2
 80048fa:	63b9      	str	r1, [r7, #56]	; 0x38
 80048fc:	415b      	adcs	r3, r3
 80048fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004900:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004904:	4641      	mov	r1, r8
 8004906:	1851      	adds	r1, r2, r1
 8004908:	6339      	str	r1, [r7, #48]	; 0x30
 800490a:	4649      	mov	r1, r9
 800490c:	414b      	adcs	r3, r1
 800490e:	637b      	str	r3, [r7, #52]	; 0x34
 8004910:	f04f 0200 	mov.w	r2, #0
 8004914:	f04f 0300 	mov.w	r3, #0
 8004918:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800491c:	4659      	mov	r1, fp
 800491e:	00cb      	lsls	r3, r1, #3
 8004920:	4651      	mov	r1, sl
 8004922:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004926:	4651      	mov	r1, sl
 8004928:	00ca      	lsls	r2, r1, #3
 800492a:	4610      	mov	r0, r2
 800492c:	4619      	mov	r1, r3
 800492e:	4603      	mov	r3, r0
 8004930:	4642      	mov	r2, r8
 8004932:	189b      	adds	r3, r3, r2
 8004934:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004938:	464b      	mov	r3, r9
 800493a:	460a      	mov	r2, r1
 800493c:	eb42 0303 	adc.w	r3, r2, r3
 8004940:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004944:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	2200      	movs	r2, #0
 800494c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004950:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004954:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004958:	460b      	mov	r3, r1
 800495a:	18db      	adds	r3, r3, r3
 800495c:	62bb      	str	r3, [r7, #40]	; 0x28
 800495e:	4613      	mov	r3, r2
 8004960:	eb42 0303 	adc.w	r3, r2, r3
 8004964:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004966:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800496a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800496e:	f7fc f875 	bl	8000a5c <__aeabi_uldivmod>
 8004972:	4602      	mov	r2, r0
 8004974:	460b      	mov	r3, r1
 8004976:	4b0d      	ldr	r3, [pc, #52]	; (80049ac <UART_SetConfig+0x2d4>)
 8004978:	fba3 1302 	umull	r1, r3, r3, r2
 800497c:	095b      	lsrs	r3, r3, #5
 800497e:	2164      	movs	r1, #100	; 0x64
 8004980:	fb01 f303 	mul.w	r3, r1, r3
 8004984:	1ad3      	subs	r3, r2, r3
 8004986:	00db      	lsls	r3, r3, #3
 8004988:	3332      	adds	r3, #50	; 0x32
 800498a:	4a08      	ldr	r2, [pc, #32]	; (80049ac <UART_SetConfig+0x2d4>)
 800498c:	fba2 2303 	umull	r2, r3, r2, r3
 8004990:	095b      	lsrs	r3, r3, #5
 8004992:	f003 0207 	and.w	r2, r3, #7
 8004996:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4422      	add	r2, r4
 800499e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80049a0:	e106      	b.n	8004bb0 <UART_SetConfig+0x4d8>
 80049a2:	bf00      	nop
 80049a4:	40011000 	.word	0x40011000
 80049a8:	40011400 	.word	0x40011400
 80049ac:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80049b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80049b4:	2200      	movs	r2, #0
 80049b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80049ba:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80049be:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80049c2:	4642      	mov	r2, r8
 80049c4:	464b      	mov	r3, r9
 80049c6:	1891      	adds	r1, r2, r2
 80049c8:	6239      	str	r1, [r7, #32]
 80049ca:	415b      	adcs	r3, r3
 80049cc:	627b      	str	r3, [r7, #36]	; 0x24
 80049ce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80049d2:	4641      	mov	r1, r8
 80049d4:	1854      	adds	r4, r2, r1
 80049d6:	4649      	mov	r1, r9
 80049d8:	eb43 0501 	adc.w	r5, r3, r1
 80049dc:	f04f 0200 	mov.w	r2, #0
 80049e0:	f04f 0300 	mov.w	r3, #0
 80049e4:	00eb      	lsls	r3, r5, #3
 80049e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80049ea:	00e2      	lsls	r2, r4, #3
 80049ec:	4614      	mov	r4, r2
 80049ee:	461d      	mov	r5, r3
 80049f0:	4643      	mov	r3, r8
 80049f2:	18e3      	adds	r3, r4, r3
 80049f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80049f8:	464b      	mov	r3, r9
 80049fa:	eb45 0303 	adc.w	r3, r5, r3
 80049fe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004a02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004a0e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004a12:	f04f 0200 	mov.w	r2, #0
 8004a16:	f04f 0300 	mov.w	r3, #0
 8004a1a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004a1e:	4629      	mov	r1, r5
 8004a20:	008b      	lsls	r3, r1, #2
 8004a22:	4621      	mov	r1, r4
 8004a24:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a28:	4621      	mov	r1, r4
 8004a2a:	008a      	lsls	r2, r1, #2
 8004a2c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004a30:	f7fc f814 	bl	8000a5c <__aeabi_uldivmod>
 8004a34:	4602      	mov	r2, r0
 8004a36:	460b      	mov	r3, r1
 8004a38:	4b60      	ldr	r3, [pc, #384]	; (8004bbc <UART_SetConfig+0x4e4>)
 8004a3a:	fba3 2302 	umull	r2, r3, r3, r2
 8004a3e:	095b      	lsrs	r3, r3, #5
 8004a40:	011c      	lsls	r4, r3, #4
 8004a42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a46:	2200      	movs	r2, #0
 8004a48:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004a4c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004a50:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004a54:	4642      	mov	r2, r8
 8004a56:	464b      	mov	r3, r9
 8004a58:	1891      	adds	r1, r2, r2
 8004a5a:	61b9      	str	r1, [r7, #24]
 8004a5c:	415b      	adcs	r3, r3
 8004a5e:	61fb      	str	r3, [r7, #28]
 8004a60:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a64:	4641      	mov	r1, r8
 8004a66:	1851      	adds	r1, r2, r1
 8004a68:	6139      	str	r1, [r7, #16]
 8004a6a:	4649      	mov	r1, r9
 8004a6c:	414b      	adcs	r3, r1
 8004a6e:	617b      	str	r3, [r7, #20]
 8004a70:	f04f 0200 	mov.w	r2, #0
 8004a74:	f04f 0300 	mov.w	r3, #0
 8004a78:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004a7c:	4659      	mov	r1, fp
 8004a7e:	00cb      	lsls	r3, r1, #3
 8004a80:	4651      	mov	r1, sl
 8004a82:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a86:	4651      	mov	r1, sl
 8004a88:	00ca      	lsls	r2, r1, #3
 8004a8a:	4610      	mov	r0, r2
 8004a8c:	4619      	mov	r1, r3
 8004a8e:	4603      	mov	r3, r0
 8004a90:	4642      	mov	r2, r8
 8004a92:	189b      	adds	r3, r3, r2
 8004a94:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004a98:	464b      	mov	r3, r9
 8004a9a:	460a      	mov	r2, r1
 8004a9c:	eb42 0303 	adc.w	r3, r2, r3
 8004aa0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004aa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	67bb      	str	r3, [r7, #120]	; 0x78
 8004aae:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004ab0:	f04f 0200 	mov.w	r2, #0
 8004ab4:	f04f 0300 	mov.w	r3, #0
 8004ab8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004abc:	4649      	mov	r1, r9
 8004abe:	008b      	lsls	r3, r1, #2
 8004ac0:	4641      	mov	r1, r8
 8004ac2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ac6:	4641      	mov	r1, r8
 8004ac8:	008a      	lsls	r2, r1, #2
 8004aca:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004ace:	f7fb ffc5 	bl	8000a5c <__aeabi_uldivmod>
 8004ad2:	4602      	mov	r2, r0
 8004ad4:	460b      	mov	r3, r1
 8004ad6:	4611      	mov	r1, r2
 8004ad8:	4b38      	ldr	r3, [pc, #224]	; (8004bbc <UART_SetConfig+0x4e4>)
 8004ada:	fba3 2301 	umull	r2, r3, r3, r1
 8004ade:	095b      	lsrs	r3, r3, #5
 8004ae0:	2264      	movs	r2, #100	; 0x64
 8004ae2:	fb02 f303 	mul.w	r3, r2, r3
 8004ae6:	1acb      	subs	r3, r1, r3
 8004ae8:	011b      	lsls	r3, r3, #4
 8004aea:	3332      	adds	r3, #50	; 0x32
 8004aec:	4a33      	ldr	r2, [pc, #204]	; (8004bbc <UART_SetConfig+0x4e4>)
 8004aee:	fba2 2303 	umull	r2, r3, r2, r3
 8004af2:	095b      	lsrs	r3, r3, #5
 8004af4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004af8:	441c      	add	r4, r3
 8004afa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004afe:	2200      	movs	r2, #0
 8004b00:	673b      	str	r3, [r7, #112]	; 0x70
 8004b02:	677a      	str	r2, [r7, #116]	; 0x74
 8004b04:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004b08:	4642      	mov	r2, r8
 8004b0a:	464b      	mov	r3, r9
 8004b0c:	1891      	adds	r1, r2, r2
 8004b0e:	60b9      	str	r1, [r7, #8]
 8004b10:	415b      	adcs	r3, r3
 8004b12:	60fb      	str	r3, [r7, #12]
 8004b14:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004b18:	4641      	mov	r1, r8
 8004b1a:	1851      	adds	r1, r2, r1
 8004b1c:	6039      	str	r1, [r7, #0]
 8004b1e:	4649      	mov	r1, r9
 8004b20:	414b      	adcs	r3, r1
 8004b22:	607b      	str	r3, [r7, #4]
 8004b24:	f04f 0200 	mov.w	r2, #0
 8004b28:	f04f 0300 	mov.w	r3, #0
 8004b2c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004b30:	4659      	mov	r1, fp
 8004b32:	00cb      	lsls	r3, r1, #3
 8004b34:	4651      	mov	r1, sl
 8004b36:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b3a:	4651      	mov	r1, sl
 8004b3c:	00ca      	lsls	r2, r1, #3
 8004b3e:	4610      	mov	r0, r2
 8004b40:	4619      	mov	r1, r3
 8004b42:	4603      	mov	r3, r0
 8004b44:	4642      	mov	r2, r8
 8004b46:	189b      	adds	r3, r3, r2
 8004b48:	66bb      	str	r3, [r7, #104]	; 0x68
 8004b4a:	464b      	mov	r3, r9
 8004b4c:	460a      	mov	r2, r1
 8004b4e:	eb42 0303 	adc.w	r3, r2, r3
 8004b52:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004b54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	663b      	str	r3, [r7, #96]	; 0x60
 8004b5e:	667a      	str	r2, [r7, #100]	; 0x64
 8004b60:	f04f 0200 	mov.w	r2, #0
 8004b64:	f04f 0300 	mov.w	r3, #0
 8004b68:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004b6c:	4649      	mov	r1, r9
 8004b6e:	008b      	lsls	r3, r1, #2
 8004b70:	4641      	mov	r1, r8
 8004b72:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b76:	4641      	mov	r1, r8
 8004b78:	008a      	lsls	r2, r1, #2
 8004b7a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004b7e:	f7fb ff6d 	bl	8000a5c <__aeabi_uldivmod>
 8004b82:	4602      	mov	r2, r0
 8004b84:	460b      	mov	r3, r1
 8004b86:	4b0d      	ldr	r3, [pc, #52]	; (8004bbc <UART_SetConfig+0x4e4>)
 8004b88:	fba3 1302 	umull	r1, r3, r3, r2
 8004b8c:	095b      	lsrs	r3, r3, #5
 8004b8e:	2164      	movs	r1, #100	; 0x64
 8004b90:	fb01 f303 	mul.w	r3, r1, r3
 8004b94:	1ad3      	subs	r3, r2, r3
 8004b96:	011b      	lsls	r3, r3, #4
 8004b98:	3332      	adds	r3, #50	; 0x32
 8004b9a:	4a08      	ldr	r2, [pc, #32]	; (8004bbc <UART_SetConfig+0x4e4>)
 8004b9c:	fba2 2303 	umull	r2, r3, r2, r3
 8004ba0:	095b      	lsrs	r3, r3, #5
 8004ba2:	f003 020f 	and.w	r2, r3, #15
 8004ba6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4422      	add	r2, r4
 8004bae:	609a      	str	r2, [r3, #8]
}
 8004bb0:	bf00      	nop
 8004bb2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004bbc:	51eb851f 	.word	0x51eb851f

08004bc0 <__NVIC_SetPriority>:
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	b083      	sub	sp, #12
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	6039      	str	r1, [r7, #0]
 8004bca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004bcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	db0a      	blt.n	8004bea <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	b2da      	uxtb	r2, r3
 8004bd8:	490c      	ldr	r1, [pc, #48]	; (8004c0c <__NVIC_SetPriority+0x4c>)
 8004bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bde:	0112      	lsls	r2, r2, #4
 8004be0:	b2d2      	uxtb	r2, r2
 8004be2:	440b      	add	r3, r1
 8004be4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004be8:	e00a      	b.n	8004c00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	b2da      	uxtb	r2, r3
 8004bee:	4908      	ldr	r1, [pc, #32]	; (8004c10 <__NVIC_SetPriority+0x50>)
 8004bf0:	79fb      	ldrb	r3, [r7, #7]
 8004bf2:	f003 030f 	and.w	r3, r3, #15
 8004bf6:	3b04      	subs	r3, #4
 8004bf8:	0112      	lsls	r2, r2, #4
 8004bfa:	b2d2      	uxtb	r2, r2
 8004bfc:	440b      	add	r3, r1
 8004bfe:	761a      	strb	r2, [r3, #24]
}
 8004c00:	bf00      	nop
 8004c02:	370c      	adds	r7, #12
 8004c04:	46bd      	mov	sp, r7
 8004c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0a:	4770      	bx	lr
 8004c0c:	e000e100 	.word	0xe000e100
 8004c10:	e000ed00 	.word	0xe000ed00

08004c14 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004c14:	b580      	push	{r7, lr}
 8004c16:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004c18:	2100      	movs	r1, #0
 8004c1a:	f06f 0004 	mvn.w	r0, #4
 8004c1e:	f7ff ffcf 	bl	8004bc0 <__NVIC_SetPriority>
#endif
}
 8004c22:	bf00      	nop
 8004c24:	bd80      	pop	{r7, pc}
	...

08004c28 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004c28:	b480      	push	{r7}
 8004c2a:	b083      	sub	sp, #12
 8004c2c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004c2e:	f3ef 8305 	mrs	r3, IPSR
 8004c32:	603b      	str	r3, [r7, #0]
  return(result);
 8004c34:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d003      	beq.n	8004c42 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004c3a:	f06f 0305 	mvn.w	r3, #5
 8004c3e:	607b      	str	r3, [r7, #4]
 8004c40:	e00c      	b.n	8004c5c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004c42:	4b0a      	ldr	r3, [pc, #40]	; (8004c6c <osKernelInitialize+0x44>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d105      	bne.n	8004c56 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004c4a:	4b08      	ldr	r3, [pc, #32]	; (8004c6c <osKernelInitialize+0x44>)
 8004c4c:	2201      	movs	r2, #1
 8004c4e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004c50:	2300      	movs	r3, #0
 8004c52:	607b      	str	r3, [r7, #4]
 8004c54:	e002      	b.n	8004c5c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004c56:	f04f 33ff 	mov.w	r3, #4294967295
 8004c5a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004c5c:	687b      	ldr	r3, [r7, #4]
}
 8004c5e:	4618      	mov	r0, r3
 8004c60:	370c      	adds	r7, #12
 8004c62:	46bd      	mov	sp, r7
 8004c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c68:	4770      	bx	lr
 8004c6a:	bf00      	nop
 8004c6c:	2000018c 	.word	0x2000018c

08004c70 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b082      	sub	sp, #8
 8004c74:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004c76:	f3ef 8305 	mrs	r3, IPSR
 8004c7a:	603b      	str	r3, [r7, #0]
  return(result);
 8004c7c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d003      	beq.n	8004c8a <osKernelStart+0x1a>
    stat = osErrorISR;
 8004c82:	f06f 0305 	mvn.w	r3, #5
 8004c86:	607b      	str	r3, [r7, #4]
 8004c88:	e010      	b.n	8004cac <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004c8a:	4b0b      	ldr	r3, [pc, #44]	; (8004cb8 <osKernelStart+0x48>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	2b01      	cmp	r3, #1
 8004c90:	d109      	bne.n	8004ca6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004c92:	f7ff ffbf 	bl	8004c14 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004c96:	4b08      	ldr	r3, [pc, #32]	; (8004cb8 <osKernelStart+0x48>)
 8004c98:	2202      	movs	r2, #2
 8004c9a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004c9c:	f001 fa50 	bl	8006140 <vTaskStartScheduler>
      stat = osOK;
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	607b      	str	r3, [r7, #4]
 8004ca4:	e002      	b.n	8004cac <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004ca6:	f04f 33ff 	mov.w	r3, #4294967295
 8004caa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004cac:	687b      	ldr	r3, [r7, #4]
}
 8004cae:	4618      	mov	r0, r3
 8004cb0:	3708      	adds	r7, #8
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bd80      	pop	{r7, pc}
 8004cb6:	bf00      	nop
 8004cb8:	2000018c 	.word	0x2000018c

08004cbc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b08e      	sub	sp, #56	; 0x38
 8004cc0:	af04      	add	r7, sp, #16
 8004cc2:	60f8      	str	r0, [r7, #12]
 8004cc4:	60b9      	str	r1, [r7, #8]
 8004cc6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004cc8:	2300      	movs	r3, #0
 8004cca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004ccc:	f3ef 8305 	mrs	r3, IPSR
 8004cd0:	617b      	str	r3, [r7, #20]
  return(result);
 8004cd2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d17e      	bne.n	8004dd6 <osThreadNew+0x11a>
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d07b      	beq.n	8004dd6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004cde:	2380      	movs	r3, #128	; 0x80
 8004ce0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004ce2:	2318      	movs	r3, #24
 8004ce4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8004cea:	f04f 33ff 	mov.w	r3, #4294967295
 8004cee:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d045      	beq.n	8004d82 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d002      	beq.n	8004d04 <osThreadNew+0x48>
        name = attr->name;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	699b      	ldr	r3, [r3, #24]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d002      	beq.n	8004d12 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	699b      	ldr	r3, [r3, #24]
 8004d10:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004d12:	69fb      	ldr	r3, [r7, #28]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d008      	beq.n	8004d2a <osThreadNew+0x6e>
 8004d18:	69fb      	ldr	r3, [r7, #28]
 8004d1a:	2b38      	cmp	r3, #56	; 0x38
 8004d1c:	d805      	bhi.n	8004d2a <osThreadNew+0x6e>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	f003 0301 	and.w	r3, r3, #1
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d001      	beq.n	8004d2e <osThreadNew+0x72>
        return (NULL);
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	e054      	b.n	8004dd8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	695b      	ldr	r3, [r3, #20]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d003      	beq.n	8004d3e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	695b      	ldr	r3, [r3, #20]
 8004d3a:	089b      	lsrs	r3, r3, #2
 8004d3c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	689b      	ldr	r3, [r3, #8]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d00e      	beq.n	8004d64 <osThreadNew+0xa8>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	68db      	ldr	r3, [r3, #12]
 8004d4a:	2b5b      	cmp	r3, #91	; 0x5b
 8004d4c:	d90a      	bls.n	8004d64 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d006      	beq.n	8004d64 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	695b      	ldr	r3, [r3, #20]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d002      	beq.n	8004d64 <osThreadNew+0xa8>
        mem = 1;
 8004d5e:	2301      	movs	r3, #1
 8004d60:	61bb      	str	r3, [r7, #24]
 8004d62:	e010      	b.n	8004d86 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	689b      	ldr	r3, [r3, #8]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d10c      	bne.n	8004d86 <osThreadNew+0xca>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	68db      	ldr	r3, [r3, #12]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d108      	bne.n	8004d86 <osThreadNew+0xca>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	691b      	ldr	r3, [r3, #16]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d104      	bne.n	8004d86 <osThreadNew+0xca>
          mem = 0;
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	61bb      	str	r3, [r7, #24]
 8004d80:	e001      	b.n	8004d86 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004d82:	2300      	movs	r3, #0
 8004d84:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004d86:	69bb      	ldr	r3, [r7, #24]
 8004d88:	2b01      	cmp	r3, #1
 8004d8a:	d110      	bne.n	8004dae <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004d90:	687a      	ldr	r2, [r7, #4]
 8004d92:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004d94:	9202      	str	r2, [sp, #8]
 8004d96:	9301      	str	r3, [sp, #4]
 8004d98:	69fb      	ldr	r3, [r7, #28]
 8004d9a:	9300      	str	r3, [sp, #0]
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	6a3a      	ldr	r2, [r7, #32]
 8004da0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004da2:	68f8      	ldr	r0, [r7, #12]
 8004da4:	f000 fff6 	bl	8005d94 <xTaskCreateStatic>
 8004da8:	4603      	mov	r3, r0
 8004daa:	613b      	str	r3, [r7, #16]
 8004dac:	e013      	b.n	8004dd6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004dae:	69bb      	ldr	r3, [r7, #24]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d110      	bne.n	8004dd6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004db4:	6a3b      	ldr	r3, [r7, #32]
 8004db6:	b29a      	uxth	r2, r3
 8004db8:	f107 0310 	add.w	r3, r7, #16
 8004dbc:	9301      	str	r3, [sp, #4]
 8004dbe:	69fb      	ldr	r3, [r7, #28]
 8004dc0:	9300      	str	r3, [sp, #0]
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004dc6:	68f8      	ldr	r0, [r7, #12]
 8004dc8:	f001 f841 	bl	8005e4e <xTaskCreate>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	2b01      	cmp	r3, #1
 8004dd0:	d001      	beq.n	8004dd6 <osThreadNew+0x11a>
            hTask = NULL;
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004dd6:	693b      	ldr	r3, [r7, #16]
}
 8004dd8:	4618      	mov	r0, r3
 8004dda:	3728      	adds	r7, #40	; 0x28
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	bd80      	pop	{r7, pc}

08004de0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b084      	sub	sp, #16
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004de8:	f3ef 8305 	mrs	r3, IPSR
 8004dec:	60bb      	str	r3, [r7, #8]
  return(result);
 8004dee:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d003      	beq.n	8004dfc <osDelay+0x1c>
    stat = osErrorISR;
 8004df4:	f06f 0305 	mvn.w	r3, #5
 8004df8:	60fb      	str	r3, [r7, #12]
 8004dfa:	e007      	b.n	8004e0c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d002      	beq.n	8004e0c <osDelay+0x2c>
      vTaskDelay(ticks);
 8004e06:	6878      	ldr	r0, [r7, #4]
 8004e08:	f001 f966 	bl	80060d8 <vTaskDelay>
    }
  }

  return (stat);
 8004e0c:	68fb      	ldr	r3, [r7, #12]
}
 8004e0e:	4618      	mov	r0, r3
 8004e10:	3710      	adds	r7, #16
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd80      	pop	{r7, pc}

08004e16 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8004e16:	b580      	push	{r7, lr}
 8004e18:	b08a      	sub	sp, #40	; 0x28
 8004e1a:	af02      	add	r7, sp, #8
 8004e1c:	60f8      	str	r0, [r7, #12]
 8004e1e:	60b9      	str	r1, [r7, #8]
 8004e20:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8004e22:	2300      	movs	r3, #0
 8004e24:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004e26:	f3ef 8305 	mrs	r3, IPSR
 8004e2a:	613b      	str	r3, [r7, #16]
  return(result);
 8004e2c:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d15f      	bne.n	8004ef2 <osMessageQueueNew+0xdc>
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d05c      	beq.n	8004ef2 <osMessageQueueNew+0xdc>
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d059      	beq.n	8004ef2 <osMessageQueueNew+0xdc>
    mem = -1;
 8004e3e:	f04f 33ff 	mov.w	r3, #4294967295
 8004e42:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d029      	beq.n	8004e9e <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	689b      	ldr	r3, [r3, #8]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d012      	beq.n	8004e78 <osMessageQueueNew+0x62>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	68db      	ldr	r3, [r3, #12]
 8004e56:	2b4f      	cmp	r3, #79	; 0x4f
 8004e58:	d90e      	bls.n	8004e78 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d00a      	beq.n	8004e78 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	695a      	ldr	r2, [r3, #20]
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	68b9      	ldr	r1, [r7, #8]
 8004e6a:	fb01 f303 	mul.w	r3, r1, r3
 8004e6e:	429a      	cmp	r2, r3
 8004e70:	d302      	bcc.n	8004e78 <osMessageQueueNew+0x62>
        mem = 1;
 8004e72:	2301      	movs	r3, #1
 8004e74:	61bb      	str	r3, [r7, #24]
 8004e76:	e014      	b.n	8004ea2 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	689b      	ldr	r3, [r3, #8]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d110      	bne.n	8004ea2 <osMessageQueueNew+0x8c>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	68db      	ldr	r3, [r3, #12]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d10c      	bne.n	8004ea2 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d108      	bne.n	8004ea2 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	695b      	ldr	r3, [r3, #20]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d104      	bne.n	8004ea2 <osMessageQueueNew+0x8c>
          mem = 0;
 8004e98:	2300      	movs	r3, #0
 8004e9a:	61bb      	str	r3, [r7, #24]
 8004e9c:	e001      	b.n	8004ea2 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004ea2:	69bb      	ldr	r3, [r7, #24]
 8004ea4:	2b01      	cmp	r3, #1
 8004ea6:	d10b      	bne.n	8004ec0 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	691a      	ldr	r2, [r3, #16]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	689b      	ldr	r3, [r3, #8]
 8004eb0:	2100      	movs	r1, #0
 8004eb2:	9100      	str	r1, [sp, #0]
 8004eb4:	68b9      	ldr	r1, [r7, #8]
 8004eb6:	68f8      	ldr	r0, [r7, #12]
 8004eb8:	f000 fa2e 	bl	8005318 <xQueueGenericCreateStatic>
 8004ebc:	61f8      	str	r0, [r7, #28]
 8004ebe:	e008      	b.n	8004ed2 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8004ec0:	69bb      	ldr	r3, [r7, #24]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d105      	bne.n	8004ed2 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	68b9      	ldr	r1, [r7, #8]
 8004eca:	68f8      	ldr	r0, [r7, #12]
 8004ecc:	f000 fa9c 	bl	8005408 <xQueueGenericCreate>
 8004ed0:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8004ed2:	69fb      	ldr	r3, [r7, #28]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d00c      	beq.n	8004ef2 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d003      	beq.n	8004ee6 <osMessageQueueNew+0xd0>
        name = attr->name;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	617b      	str	r3, [r7, #20]
 8004ee4:	e001      	b.n	8004eea <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8004eea:	6979      	ldr	r1, [r7, #20]
 8004eec:	69f8      	ldr	r0, [r7, #28]
 8004eee:	f000 fef3 	bl	8005cd8 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8004ef2:	69fb      	ldr	r3, [r7, #28]
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	3720      	adds	r7, #32
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bd80      	pop	{r7, pc}

08004efc <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b088      	sub	sp, #32
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	60f8      	str	r0, [r7, #12]
 8004f04:	60b9      	str	r1, [r7, #8]
 8004f06:	603b      	str	r3, [r7, #0]
 8004f08:	4613      	mov	r3, r2
 8004f0a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8004f10:	2300      	movs	r3, #0
 8004f12:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004f14:	f3ef 8305 	mrs	r3, IPSR
 8004f18:	617b      	str	r3, [r7, #20]
  return(result);
 8004f1a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d028      	beq.n	8004f72 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004f20:	69bb      	ldr	r3, [r7, #24]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d005      	beq.n	8004f32 <osMessageQueuePut+0x36>
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d002      	beq.n	8004f32 <osMessageQueuePut+0x36>
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d003      	beq.n	8004f3a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8004f32:	f06f 0303 	mvn.w	r3, #3
 8004f36:	61fb      	str	r3, [r7, #28]
 8004f38:	e038      	b.n	8004fac <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8004f3e:	f107 0210 	add.w	r2, r7, #16
 8004f42:	2300      	movs	r3, #0
 8004f44:	68b9      	ldr	r1, [r7, #8]
 8004f46:	69b8      	ldr	r0, [r7, #24]
 8004f48:	f000 fbba 	bl	80056c0 <xQueueGenericSendFromISR>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	2b01      	cmp	r3, #1
 8004f50:	d003      	beq.n	8004f5a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8004f52:	f06f 0302 	mvn.w	r3, #2
 8004f56:	61fb      	str	r3, [r7, #28]
 8004f58:	e028      	b.n	8004fac <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8004f5a:	693b      	ldr	r3, [r7, #16]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d025      	beq.n	8004fac <osMessageQueuePut+0xb0>
 8004f60:	4b15      	ldr	r3, [pc, #84]	; (8004fb8 <osMessageQueuePut+0xbc>)
 8004f62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f66:	601a      	str	r2, [r3, #0]
 8004f68:	f3bf 8f4f 	dsb	sy
 8004f6c:	f3bf 8f6f 	isb	sy
 8004f70:	e01c      	b.n	8004fac <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8004f72:	69bb      	ldr	r3, [r7, #24]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d002      	beq.n	8004f7e <osMessageQueuePut+0x82>
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d103      	bne.n	8004f86 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8004f7e:	f06f 0303 	mvn.w	r3, #3
 8004f82:	61fb      	str	r3, [r7, #28]
 8004f84:	e012      	b.n	8004fac <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8004f86:	2300      	movs	r3, #0
 8004f88:	683a      	ldr	r2, [r7, #0]
 8004f8a:	68b9      	ldr	r1, [r7, #8]
 8004f8c:	69b8      	ldr	r0, [r7, #24]
 8004f8e:	f000 fa99 	bl	80054c4 <xQueueGenericSend>
 8004f92:	4603      	mov	r3, r0
 8004f94:	2b01      	cmp	r3, #1
 8004f96:	d009      	beq.n	8004fac <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d003      	beq.n	8004fa6 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8004f9e:	f06f 0301 	mvn.w	r3, #1
 8004fa2:	61fb      	str	r3, [r7, #28]
 8004fa4:	e002      	b.n	8004fac <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8004fa6:	f06f 0302 	mvn.w	r3, #2
 8004faa:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8004fac:	69fb      	ldr	r3, [r7, #28]
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	3720      	adds	r7, #32
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}
 8004fb6:	bf00      	nop
 8004fb8:	e000ed04 	.word	0xe000ed04

08004fbc <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b088      	sub	sp, #32
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	60f8      	str	r0, [r7, #12]
 8004fc4:	60b9      	str	r1, [r7, #8]
 8004fc6:	607a      	str	r2, [r7, #4]
 8004fc8:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8004fce:	2300      	movs	r3, #0
 8004fd0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004fd2:	f3ef 8305 	mrs	r3, IPSR
 8004fd6:	617b      	str	r3, [r7, #20]
  return(result);
 8004fd8:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d028      	beq.n	8005030 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004fde:	69bb      	ldr	r3, [r7, #24]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d005      	beq.n	8004ff0 <osMessageQueueGet+0x34>
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d002      	beq.n	8004ff0 <osMessageQueueGet+0x34>
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d003      	beq.n	8004ff8 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8004ff0:	f06f 0303 	mvn.w	r3, #3
 8004ff4:	61fb      	str	r3, [r7, #28]
 8004ff6:	e037      	b.n	8005068 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8004ffc:	f107 0310 	add.w	r3, r7, #16
 8005000:	461a      	mov	r2, r3
 8005002:	68b9      	ldr	r1, [r7, #8]
 8005004:	69b8      	ldr	r0, [r7, #24]
 8005006:	f000 fcd7 	bl	80059b8 <xQueueReceiveFromISR>
 800500a:	4603      	mov	r3, r0
 800500c:	2b01      	cmp	r3, #1
 800500e:	d003      	beq.n	8005018 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8005010:	f06f 0302 	mvn.w	r3, #2
 8005014:	61fb      	str	r3, [r7, #28]
 8005016:	e027      	b.n	8005068 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d024      	beq.n	8005068 <osMessageQueueGet+0xac>
 800501e:	4b15      	ldr	r3, [pc, #84]	; (8005074 <osMessageQueueGet+0xb8>)
 8005020:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005024:	601a      	str	r2, [r3, #0]
 8005026:	f3bf 8f4f 	dsb	sy
 800502a:	f3bf 8f6f 	isb	sy
 800502e:	e01b      	b.n	8005068 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005030:	69bb      	ldr	r3, [r7, #24]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d002      	beq.n	800503c <osMessageQueueGet+0x80>
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d103      	bne.n	8005044 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800503c:	f06f 0303 	mvn.w	r3, #3
 8005040:	61fb      	str	r3, [r7, #28]
 8005042:	e011      	b.n	8005068 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005044:	683a      	ldr	r2, [r7, #0]
 8005046:	68b9      	ldr	r1, [r7, #8]
 8005048:	69b8      	ldr	r0, [r7, #24]
 800504a:	f000 fbd5 	bl	80057f8 <xQueueReceive>
 800504e:	4603      	mov	r3, r0
 8005050:	2b01      	cmp	r3, #1
 8005052:	d009      	beq.n	8005068 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d003      	beq.n	8005062 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800505a:	f06f 0301 	mvn.w	r3, #1
 800505e:	61fb      	str	r3, [r7, #28]
 8005060:	e002      	b.n	8005068 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8005062:	f06f 0302 	mvn.w	r3, #2
 8005066:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8005068:	69fb      	ldr	r3, [r7, #28]
}
 800506a:	4618      	mov	r0, r3
 800506c:	3720      	adds	r7, #32
 800506e:	46bd      	mov	sp, r7
 8005070:	bd80      	pop	{r7, pc}
 8005072:	bf00      	nop
 8005074:	e000ed04 	.word	0xe000ed04

08005078 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005078:	b480      	push	{r7}
 800507a:	b085      	sub	sp, #20
 800507c:	af00      	add	r7, sp, #0
 800507e:	60f8      	str	r0, [r7, #12]
 8005080:	60b9      	str	r1, [r7, #8]
 8005082:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	4a07      	ldr	r2, [pc, #28]	; (80050a4 <vApplicationGetIdleTaskMemory+0x2c>)
 8005088:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800508a:	68bb      	ldr	r3, [r7, #8]
 800508c:	4a06      	ldr	r2, [pc, #24]	; (80050a8 <vApplicationGetIdleTaskMemory+0x30>)
 800508e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2280      	movs	r2, #128	; 0x80
 8005094:	601a      	str	r2, [r3, #0]
}
 8005096:	bf00      	nop
 8005098:	3714      	adds	r7, #20
 800509a:	46bd      	mov	sp, r7
 800509c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a0:	4770      	bx	lr
 80050a2:	bf00      	nop
 80050a4:	20000190 	.word	0x20000190
 80050a8:	200001ec 	.word	0x200001ec

080050ac <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80050ac:	b480      	push	{r7}
 80050ae:	b085      	sub	sp, #20
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	60f8      	str	r0, [r7, #12]
 80050b4:	60b9      	str	r1, [r7, #8]
 80050b6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	4a07      	ldr	r2, [pc, #28]	; (80050d8 <vApplicationGetTimerTaskMemory+0x2c>)
 80050bc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	4a06      	ldr	r2, [pc, #24]	; (80050dc <vApplicationGetTimerTaskMemory+0x30>)
 80050c2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80050ca:	601a      	str	r2, [r3, #0]
}
 80050cc:	bf00      	nop
 80050ce:	3714      	adds	r7, #20
 80050d0:	46bd      	mov	sp, r7
 80050d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d6:	4770      	bx	lr
 80050d8:	200003ec 	.word	0x200003ec
 80050dc:	20000448 	.word	0x20000448

080050e0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80050e0:	b480      	push	{r7}
 80050e2:	b083      	sub	sp, #12
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	f103 0208 	add.w	r2, r3, #8
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	f04f 32ff 	mov.w	r2, #4294967295
 80050f8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	f103 0208 	add.w	r2, r3, #8
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	f103 0208 	add.w	r2, r3, #8
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2200      	movs	r2, #0
 8005112:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005114:	bf00      	nop
 8005116:	370c      	adds	r7, #12
 8005118:	46bd      	mov	sp, r7
 800511a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511e:	4770      	bx	lr

08005120 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005120:	b480      	push	{r7}
 8005122:	b083      	sub	sp, #12
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2200      	movs	r2, #0
 800512c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800512e:	bf00      	nop
 8005130:	370c      	adds	r7, #12
 8005132:	46bd      	mov	sp, r7
 8005134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005138:	4770      	bx	lr

0800513a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800513a:	b480      	push	{r7}
 800513c:	b085      	sub	sp, #20
 800513e:	af00      	add	r7, sp, #0
 8005140:	6078      	str	r0, [r7, #4]
 8005142:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	68fa      	ldr	r2, [r7, #12]
 800514e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	689a      	ldr	r2, [r3, #8]
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	689b      	ldr	r3, [r3, #8]
 800515c:	683a      	ldr	r2, [r7, #0]
 800515e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	683a      	ldr	r2, [r7, #0]
 8005164:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	687a      	ldr	r2, [r7, #4]
 800516a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	1c5a      	adds	r2, r3, #1
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	601a      	str	r2, [r3, #0]
}
 8005176:	bf00      	nop
 8005178:	3714      	adds	r7, #20
 800517a:	46bd      	mov	sp, r7
 800517c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005180:	4770      	bx	lr

08005182 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005182:	b480      	push	{r7}
 8005184:	b085      	sub	sp, #20
 8005186:	af00      	add	r7, sp, #0
 8005188:	6078      	str	r0, [r7, #4]
 800518a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005198:	d103      	bne.n	80051a2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	691b      	ldr	r3, [r3, #16]
 800519e:	60fb      	str	r3, [r7, #12]
 80051a0:	e00c      	b.n	80051bc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	3308      	adds	r3, #8
 80051a6:	60fb      	str	r3, [r7, #12]
 80051a8:	e002      	b.n	80051b0 <vListInsert+0x2e>
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	60fb      	str	r3, [r7, #12]
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	68ba      	ldr	r2, [r7, #8]
 80051b8:	429a      	cmp	r2, r3
 80051ba:	d2f6      	bcs.n	80051aa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	685a      	ldr	r2, [r3, #4]
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	683a      	ldr	r2, [r7, #0]
 80051ca:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	68fa      	ldr	r2, [r7, #12]
 80051d0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	683a      	ldr	r2, [r7, #0]
 80051d6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	687a      	ldr	r2, [r7, #4]
 80051dc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	1c5a      	adds	r2, r3, #1
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	601a      	str	r2, [r3, #0]
}
 80051e8:	bf00      	nop
 80051ea:	3714      	adds	r7, #20
 80051ec:	46bd      	mov	sp, r7
 80051ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f2:	4770      	bx	lr

080051f4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80051f4:	b480      	push	{r7}
 80051f6:	b085      	sub	sp, #20
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	691b      	ldr	r3, [r3, #16]
 8005200:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	687a      	ldr	r2, [r7, #4]
 8005208:	6892      	ldr	r2, [r2, #8]
 800520a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	689b      	ldr	r3, [r3, #8]
 8005210:	687a      	ldr	r2, [r7, #4]
 8005212:	6852      	ldr	r2, [r2, #4]
 8005214:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	687a      	ldr	r2, [r7, #4]
 800521c:	429a      	cmp	r2, r3
 800521e:	d103      	bne.n	8005228 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	689a      	ldr	r2, [r3, #8]
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2200      	movs	r2, #0
 800522c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	1e5a      	subs	r2, r3, #1
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
}
 800523c:	4618      	mov	r0, r3
 800523e:	3714      	adds	r7, #20
 8005240:	46bd      	mov	sp, r7
 8005242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005246:	4770      	bx	lr

08005248 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b084      	sub	sp, #16
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
 8005250:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d10a      	bne.n	8005272 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800525c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005260:	f383 8811 	msr	BASEPRI, r3
 8005264:	f3bf 8f6f 	isb	sy
 8005268:	f3bf 8f4f 	dsb	sy
 800526c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800526e:	bf00      	nop
 8005270:	e7fe      	b.n	8005270 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005272:	f002 f907 	bl	8007484 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681a      	ldr	r2, [r3, #0]
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800527e:	68f9      	ldr	r1, [r7, #12]
 8005280:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005282:	fb01 f303 	mul.w	r3, r1, r3
 8005286:	441a      	add	r2, r3
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	2200      	movs	r2, #0
 8005290:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681a      	ldr	r2, [r3, #0]
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681a      	ldr	r2, [r3, #0]
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052a2:	3b01      	subs	r3, #1
 80052a4:	68f9      	ldr	r1, [r7, #12]
 80052a6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80052a8:	fb01 f303 	mul.w	r3, r1, r3
 80052ac:	441a      	add	r2, r3
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	22ff      	movs	r2, #255	; 0xff
 80052b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	22ff      	movs	r2, #255	; 0xff
 80052be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d114      	bne.n	80052f2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	691b      	ldr	r3, [r3, #16]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d01a      	beq.n	8005306 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	3310      	adds	r3, #16
 80052d4:	4618      	mov	r0, r3
 80052d6:	f001 f9bd 	bl	8006654 <xTaskRemoveFromEventList>
 80052da:	4603      	mov	r3, r0
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d012      	beq.n	8005306 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80052e0:	4b0c      	ldr	r3, [pc, #48]	; (8005314 <xQueueGenericReset+0xcc>)
 80052e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052e6:	601a      	str	r2, [r3, #0]
 80052e8:	f3bf 8f4f 	dsb	sy
 80052ec:	f3bf 8f6f 	isb	sy
 80052f0:	e009      	b.n	8005306 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	3310      	adds	r3, #16
 80052f6:	4618      	mov	r0, r3
 80052f8:	f7ff fef2 	bl	80050e0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	3324      	adds	r3, #36	; 0x24
 8005300:	4618      	mov	r0, r3
 8005302:	f7ff feed 	bl	80050e0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005306:	f002 f8ed 	bl	80074e4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800530a:	2301      	movs	r3, #1
}
 800530c:	4618      	mov	r0, r3
 800530e:	3710      	adds	r7, #16
 8005310:	46bd      	mov	sp, r7
 8005312:	bd80      	pop	{r7, pc}
 8005314:	e000ed04 	.word	0xe000ed04

08005318 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005318:	b580      	push	{r7, lr}
 800531a:	b08e      	sub	sp, #56	; 0x38
 800531c:	af02      	add	r7, sp, #8
 800531e:	60f8      	str	r0, [r7, #12]
 8005320:	60b9      	str	r1, [r7, #8]
 8005322:	607a      	str	r2, [r7, #4]
 8005324:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d10a      	bne.n	8005342 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800532c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005330:	f383 8811 	msr	BASEPRI, r3
 8005334:	f3bf 8f6f 	isb	sy
 8005338:	f3bf 8f4f 	dsb	sy
 800533c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800533e:	bf00      	nop
 8005340:	e7fe      	b.n	8005340 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d10a      	bne.n	800535e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005348:	f04f 0350 	mov.w	r3, #80	; 0x50
 800534c:	f383 8811 	msr	BASEPRI, r3
 8005350:	f3bf 8f6f 	isb	sy
 8005354:	f3bf 8f4f 	dsb	sy
 8005358:	627b      	str	r3, [r7, #36]	; 0x24
}
 800535a:	bf00      	nop
 800535c:	e7fe      	b.n	800535c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d002      	beq.n	800536a <xQueueGenericCreateStatic+0x52>
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d001      	beq.n	800536e <xQueueGenericCreateStatic+0x56>
 800536a:	2301      	movs	r3, #1
 800536c:	e000      	b.n	8005370 <xQueueGenericCreateStatic+0x58>
 800536e:	2300      	movs	r3, #0
 8005370:	2b00      	cmp	r3, #0
 8005372:	d10a      	bne.n	800538a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005374:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005378:	f383 8811 	msr	BASEPRI, r3
 800537c:	f3bf 8f6f 	isb	sy
 8005380:	f3bf 8f4f 	dsb	sy
 8005384:	623b      	str	r3, [r7, #32]
}
 8005386:	bf00      	nop
 8005388:	e7fe      	b.n	8005388 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d102      	bne.n	8005396 <xQueueGenericCreateStatic+0x7e>
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d101      	bne.n	800539a <xQueueGenericCreateStatic+0x82>
 8005396:	2301      	movs	r3, #1
 8005398:	e000      	b.n	800539c <xQueueGenericCreateStatic+0x84>
 800539a:	2300      	movs	r3, #0
 800539c:	2b00      	cmp	r3, #0
 800539e:	d10a      	bne.n	80053b6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80053a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053a4:	f383 8811 	msr	BASEPRI, r3
 80053a8:	f3bf 8f6f 	isb	sy
 80053ac:	f3bf 8f4f 	dsb	sy
 80053b0:	61fb      	str	r3, [r7, #28]
}
 80053b2:	bf00      	nop
 80053b4:	e7fe      	b.n	80053b4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80053b6:	2350      	movs	r3, #80	; 0x50
 80053b8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80053ba:	697b      	ldr	r3, [r7, #20]
 80053bc:	2b50      	cmp	r3, #80	; 0x50
 80053be:	d00a      	beq.n	80053d6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80053c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053c4:	f383 8811 	msr	BASEPRI, r3
 80053c8:	f3bf 8f6f 	isb	sy
 80053cc:	f3bf 8f4f 	dsb	sy
 80053d0:	61bb      	str	r3, [r7, #24]
}
 80053d2:	bf00      	nop
 80053d4:	e7fe      	b.n	80053d4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80053d6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80053dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d00d      	beq.n	80053fe <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80053e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053e4:	2201      	movs	r2, #1
 80053e6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80053ea:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80053ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053f0:	9300      	str	r3, [sp, #0]
 80053f2:	4613      	mov	r3, r2
 80053f4:	687a      	ldr	r2, [r7, #4]
 80053f6:	68b9      	ldr	r1, [r7, #8]
 80053f8:	68f8      	ldr	r0, [r7, #12]
 80053fa:	f000 f83f 	bl	800547c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80053fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005400:	4618      	mov	r0, r3
 8005402:	3730      	adds	r7, #48	; 0x30
 8005404:	46bd      	mov	sp, r7
 8005406:	bd80      	pop	{r7, pc}

08005408 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005408:	b580      	push	{r7, lr}
 800540a:	b08a      	sub	sp, #40	; 0x28
 800540c:	af02      	add	r7, sp, #8
 800540e:	60f8      	str	r0, [r7, #12]
 8005410:	60b9      	str	r1, [r7, #8]
 8005412:	4613      	mov	r3, r2
 8005414:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d10a      	bne.n	8005432 <xQueueGenericCreate+0x2a>
	__asm volatile
 800541c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005420:	f383 8811 	msr	BASEPRI, r3
 8005424:	f3bf 8f6f 	isb	sy
 8005428:	f3bf 8f4f 	dsb	sy
 800542c:	613b      	str	r3, [r7, #16]
}
 800542e:	bf00      	nop
 8005430:	e7fe      	b.n	8005430 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	68ba      	ldr	r2, [r7, #8]
 8005436:	fb02 f303 	mul.w	r3, r2, r3
 800543a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800543c:	69fb      	ldr	r3, [r7, #28]
 800543e:	3350      	adds	r3, #80	; 0x50
 8005440:	4618      	mov	r0, r3
 8005442:	f002 f941 	bl	80076c8 <pvPortMalloc>
 8005446:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005448:	69bb      	ldr	r3, [r7, #24]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d011      	beq.n	8005472 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800544e:	69bb      	ldr	r3, [r7, #24]
 8005450:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005452:	697b      	ldr	r3, [r7, #20]
 8005454:	3350      	adds	r3, #80	; 0x50
 8005456:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005458:	69bb      	ldr	r3, [r7, #24]
 800545a:	2200      	movs	r2, #0
 800545c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005460:	79fa      	ldrb	r2, [r7, #7]
 8005462:	69bb      	ldr	r3, [r7, #24]
 8005464:	9300      	str	r3, [sp, #0]
 8005466:	4613      	mov	r3, r2
 8005468:	697a      	ldr	r2, [r7, #20]
 800546a:	68b9      	ldr	r1, [r7, #8]
 800546c:	68f8      	ldr	r0, [r7, #12]
 800546e:	f000 f805 	bl	800547c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005472:	69bb      	ldr	r3, [r7, #24]
	}
 8005474:	4618      	mov	r0, r3
 8005476:	3720      	adds	r7, #32
 8005478:	46bd      	mov	sp, r7
 800547a:	bd80      	pop	{r7, pc}

0800547c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b084      	sub	sp, #16
 8005480:	af00      	add	r7, sp, #0
 8005482:	60f8      	str	r0, [r7, #12]
 8005484:	60b9      	str	r1, [r7, #8]
 8005486:	607a      	str	r2, [r7, #4]
 8005488:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d103      	bne.n	8005498 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005490:	69bb      	ldr	r3, [r7, #24]
 8005492:	69ba      	ldr	r2, [r7, #24]
 8005494:	601a      	str	r2, [r3, #0]
 8005496:	e002      	b.n	800549e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005498:	69bb      	ldr	r3, [r7, #24]
 800549a:	687a      	ldr	r2, [r7, #4]
 800549c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800549e:	69bb      	ldr	r3, [r7, #24]
 80054a0:	68fa      	ldr	r2, [r7, #12]
 80054a2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80054a4:	69bb      	ldr	r3, [r7, #24]
 80054a6:	68ba      	ldr	r2, [r7, #8]
 80054a8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80054aa:	2101      	movs	r1, #1
 80054ac:	69b8      	ldr	r0, [r7, #24]
 80054ae:	f7ff fecb 	bl	8005248 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80054b2:	69bb      	ldr	r3, [r7, #24]
 80054b4:	78fa      	ldrb	r2, [r7, #3]
 80054b6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80054ba:	bf00      	nop
 80054bc:	3710      	adds	r7, #16
 80054be:	46bd      	mov	sp, r7
 80054c0:	bd80      	pop	{r7, pc}
	...

080054c4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b08e      	sub	sp, #56	; 0x38
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	60f8      	str	r0, [r7, #12]
 80054cc:	60b9      	str	r1, [r7, #8]
 80054ce:	607a      	str	r2, [r7, #4]
 80054d0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80054d2:	2300      	movs	r3, #0
 80054d4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80054da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d10a      	bne.n	80054f6 <xQueueGenericSend+0x32>
	__asm volatile
 80054e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054e4:	f383 8811 	msr	BASEPRI, r3
 80054e8:	f3bf 8f6f 	isb	sy
 80054ec:	f3bf 8f4f 	dsb	sy
 80054f0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80054f2:	bf00      	nop
 80054f4:	e7fe      	b.n	80054f4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d103      	bne.n	8005504 <xQueueGenericSend+0x40>
 80054fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005500:	2b00      	cmp	r3, #0
 8005502:	d101      	bne.n	8005508 <xQueueGenericSend+0x44>
 8005504:	2301      	movs	r3, #1
 8005506:	e000      	b.n	800550a <xQueueGenericSend+0x46>
 8005508:	2300      	movs	r3, #0
 800550a:	2b00      	cmp	r3, #0
 800550c:	d10a      	bne.n	8005524 <xQueueGenericSend+0x60>
	__asm volatile
 800550e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005512:	f383 8811 	msr	BASEPRI, r3
 8005516:	f3bf 8f6f 	isb	sy
 800551a:	f3bf 8f4f 	dsb	sy
 800551e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005520:	bf00      	nop
 8005522:	e7fe      	b.n	8005522 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	2b02      	cmp	r3, #2
 8005528:	d103      	bne.n	8005532 <xQueueGenericSend+0x6e>
 800552a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800552c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800552e:	2b01      	cmp	r3, #1
 8005530:	d101      	bne.n	8005536 <xQueueGenericSend+0x72>
 8005532:	2301      	movs	r3, #1
 8005534:	e000      	b.n	8005538 <xQueueGenericSend+0x74>
 8005536:	2300      	movs	r3, #0
 8005538:	2b00      	cmp	r3, #0
 800553a:	d10a      	bne.n	8005552 <xQueueGenericSend+0x8e>
	__asm volatile
 800553c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005540:	f383 8811 	msr	BASEPRI, r3
 8005544:	f3bf 8f6f 	isb	sy
 8005548:	f3bf 8f4f 	dsb	sy
 800554c:	623b      	str	r3, [r7, #32]
}
 800554e:	bf00      	nop
 8005550:	e7fe      	b.n	8005550 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005552:	f001 fa3d 	bl	80069d0 <xTaskGetSchedulerState>
 8005556:	4603      	mov	r3, r0
 8005558:	2b00      	cmp	r3, #0
 800555a:	d102      	bne.n	8005562 <xQueueGenericSend+0x9e>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d101      	bne.n	8005566 <xQueueGenericSend+0xa2>
 8005562:	2301      	movs	r3, #1
 8005564:	e000      	b.n	8005568 <xQueueGenericSend+0xa4>
 8005566:	2300      	movs	r3, #0
 8005568:	2b00      	cmp	r3, #0
 800556a:	d10a      	bne.n	8005582 <xQueueGenericSend+0xbe>
	__asm volatile
 800556c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005570:	f383 8811 	msr	BASEPRI, r3
 8005574:	f3bf 8f6f 	isb	sy
 8005578:	f3bf 8f4f 	dsb	sy
 800557c:	61fb      	str	r3, [r7, #28]
}
 800557e:	bf00      	nop
 8005580:	e7fe      	b.n	8005580 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005582:	f001 ff7f 	bl	8007484 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005588:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800558a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800558c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800558e:	429a      	cmp	r2, r3
 8005590:	d302      	bcc.n	8005598 <xQueueGenericSend+0xd4>
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	2b02      	cmp	r3, #2
 8005596:	d129      	bne.n	80055ec <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005598:	683a      	ldr	r2, [r7, #0]
 800559a:	68b9      	ldr	r1, [r7, #8]
 800559c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800559e:	f000 fa8b 	bl	8005ab8 <prvCopyDataToQueue>
 80055a2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80055a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d010      	beq.n	80055ce <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80055ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ae:	3324      	adds	r3, #36	; 0x24
 80055b0:	4618      	mov	r0, r3
 80055b2:	f001 f84f 	bl	8006654 <xTaskRemoveFromEventList>
 80055b6:	4603      	mov	r3, r0
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d013      	beq.n	80055e4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80055bc:	4b3f      	ldr	r3, [pc, #252]	; (80056bc <xQueueGenericSend+0x1f8>)
 80055be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055c2:	601a      	str	r2, [r3, #0]
 80055c4:	f3bf 8f4f 	dsb	sy
 80055c8:	f3bf 8f6f 	isb	sy
 80055cc:	e00a      	b.n	80055e4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80055ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d007      	beq.n	80055e4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80055d4:	4b39      	ldr	r3, [pc, #228]	; (80056bc <xQueueGenericSend+0x1f8>)
 80055d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055da:	601a      	str	r2, [r3, #0]
 80055dc:	f3bf 8f4f 	dsb	sy
 80055e0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80055e4:	f001 ff7e 	bl	80074e4 <vPortExitCritical>
				return pdPASS;
 80055e8:	2301      	movs	r3, #1
 80055ea:	e063      	b.n	80056b4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d103      	bne.n	80055fa <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80055f2:	f001 ff77 	bl	80074e4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80055f6:	2300      	movs	r3, #0
 80055f8:	e05c      	b.n	80056b4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80055fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d106      	bne.n	800560e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005600:	f107 0314 	add.w	r3, r7, #20
 8005604:	4618      	mov	r0, r3
 8005606:	f001 f889 	bl	800671c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800560a:	2301      	movs	r3, #1
 800560c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800560e:	f001 ff69 	bl	80074e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005612:	f000 fdfb 	bl	800620c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005616:	f001 ff35 	bl	8007484 <vPortEnterCritical>
 800561a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800561c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005620:	b25b      	sxtb	r3, r3
 8005622:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005626:	d103      	bne.n	8005630 <xQueueGenericSend+0x16c>
 8005628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800562a:	2200      	movs	r2, #0
 800562c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005632:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005636:	b25b      	sxtb	r3, r3
 8005638:	f1b3 3fff 	cmp.w	r3, #4294967295
 800563c:	d103      	bne.n	8005646 <xQueueGenericSend+0x182>
 800563e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005640:	2200      	movs	r2, #0
 8005642:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005646:	f001 ff4d 	bl	80074e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800564a:	1d3a      	adds	r2, r7, #4
 800564c:	f107 0314 	add.w	r3, r7, #20
 8005650:	4611      	mov	r1, r2
 8005652:	4618      	mov	r0, r3
 8005654:	f001 f878 	bl	8006748 <xTaskCheckForTimeOut>
 8005658:	4603      	mov	r3, r0
 800565a:	2b00      	cmp	r3, #0
 800565c:	d124      	bne.n	80056a8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800565e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005660:	f000 fb22 	bl	8005ca8 <prvIsQueueFull>
 8005664:	4603      	mov	r3, r0
 8005666:	2b00      	cmp	r3, #0
 8005668:	d018      	beq.n	800569c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800566a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800566c:	3310      	adds	r3, #16
 800566e:	687a      	ldr	r2, [r7, #4]
 8005670:	4611      	mov	r1, r2
 8005672:	4618      	mov	r0, r3
 8005674:	f000 ff9e 	bl	80065b4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005678:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800567a:	f000 faad 	bl	8005bd8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800567e:	f000 fdd3 	bl	8006228 <xTaskResumeAll>
 8005682:	4603      	mov	r3, r0
 8005684:	2b00      	cmp	r3, #0
 8005686:	f47f af7c 	bne.w	8005582 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800568a:	4b0c      	ldr	r3, [pc, #48]	; (80056bc <xQueueGenericSend+0x1f8>)
 800568c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005690:	601a      	str	r2, [r3, #0]
 8005692:	f3bf 8f4f 	dsb	sy
 8005696:	f3bf 8f6f 	isb	sy
 800569a:	e772      	b.n	8005582 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800569c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800569e:	f000 fa9b 	bl	8005bd8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80056a2:	f000 fdc1 	bl	8006228 <xTaskResumeAll>
 80056a6:	e76c      	b.n	8005582 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80056a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80056aa:	f000 fa95 	bl	8005bd8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80056ae:	f000 fdbb 	bl	8006228 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80056b2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80056b4:	4618      	mov	r0, r3
 80056b6:	3738      	adds	r7, #56	; 0x38
 80056b8:	46bd      	mov	sp, r7
 80056ba:	bd80      	pop	{r7, pc}
 80056bc:	e000ed04 	.word	0xe000ed04

080056c0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b090      	sub	sp, #64	; 0x40
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	60f8      	str	r0, [r7, #12]
 80056c8:	60b9      	str	r1, [r7, #8]
 80056ca:	607a      	str	r2, [r7, #4]
 80056cc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80056d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d10a      	bne.n	80056ee <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80056d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056dc:	f383 8811 	msr	BASEPRI, r3
 80056e0:	f3bf 8f6f 	isb	sy
 80056e4:	f3bf 8f4f 	dsb	sy
 80056e8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80056ea:	bf00      	nop
 80056ec:	e7fe      	b.n	80056ec <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d103      	bne.n	80056fc <xQueueGenericSendFromISR+0x3c>
 80056f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d101      	bne.n	8005700 <xQueueGenericSendFromISR+0x40>
 80056fc:	2301      	movs	r3, #1
 80056fe:	e000      	b.n	8005702 <xQueueGenericSendFromISR+0x42>
 8005700:	2300      	movs	r3, #0
 8005702:	2b00      	cmp	r3, #0
 8005704:	d10a      	bne.n	800571c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800570a:	f383 8811 	msr	BASEPRI, r3
 800570e:	f3bf 8f6f 	isb	sy
 8005712:	f3bf 8f4f 	dsb	sy
 8005716:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005718:	bf00      	nop
 800571a:	e7fe      	b.n	800571a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	2b02      	cmp	r3, #2
 8005720:	d103      	bne.n	800572a <xQueueGenericSendFromISR+0x6a>
 8005722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005724:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005726:	2b01      	cmp	r3, #1
 8005728:	d101      	bne.n	800572e <xQueueGenericSendFromISR+0x6e>
 800572a:	2301      	movs	r3, #1
 800572c:	e000      	b.n	8005730 <xQueueGenericSendFromISR+0x70>
 800572e:	2300      	movs	r3, #0
 8005730:	2b00      	cmp	r3, #0
 8005732:	d10a      	bne.n	800574a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005734:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005738:	f383 8811 	msr	BASEPRI, r3
 800573c:	f3bf 8f6f 	isb	sy
 8005740:	f3bf 8f4f 	dsb	sy
 8005744:	623b      	str	r3, [r7, #32]
}
 8005746:	bf00      	nop
 8005748:	e7fe      	b.n	8005748 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800574a:	f001 ff7d 	bl	8007648 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800574e:	f3ef 8211 	mrs	r2, BASEPRI
 8005752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005756:	f383 8811 	msr	BASEPRI, r3
 800575a:	f3bf 8f6f 	isb	sy
 800575e:	f3bf 8f4f 	dsb	sy
 8005762:	61fa      	str	r2, [r7, #28]
 8005764:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005766:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005768:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800576a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800576c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800576e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005770:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005772:	429a      	cmp	r2, r3
 8005774:	d302      	bcc.n	800577c <xQueueGenericSendFromISR+0xbc>
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	2b02      	cmp	r3, #2
 800577a:	d12f      	bne.n	80057dc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800577c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800577e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005782:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800578a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800578c:	683a      	ldr	r2, [r7, #0]
 800578e:	68b9      	ldr	r1, [r7, #8]
 8005790:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005792:	f000 f991 	bl	8005ab8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005796:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800579a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800579e:	d112      	bne.n	80057c6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80057a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d016      	beq.n	80057d6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80057a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057aa:	3324      	adds	r3, #36	; 0x24
 80057ac:	4618      	mov	r0, r3
 80057ae:	f000 ff51 	bl	8006654 <xTaskRemoveFromEventList>
 80057b2:	4603      	mov	r3, r0
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d00e      	beq.n	80057d6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d00b      	beq.n	80057d6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2201      	movs	r2, #1
 80057c2:	601a      	str	r2, [r3, #0]
 80057c4:	e007      	b.n	80057d6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80057c6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80057ca:	3301      	adds	r3, #1
 80057cc:	b2db      	uxtb	r3, r3
 80057ce:	b25a      	sxtb	r2, r3
 80057d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80057d6:	2301      	movs	r3, #1
 80057d8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80057da:	e001      	b.n	80057e0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80057dc:	2300      	movs	r3, #0
 80057de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057e2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80057e4:	697b      	ldr	r3, [r7, #20]
 80057e6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80057ea:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80057ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	3740      	adds	r7, #64	; 0x40
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}
	...

080057f8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b08c      	sub	sp, #48	; 0x30
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	60f8      	str	r0, [r7, #12]
 8005800:	60b9      	str	r1, [r7, #8]
 8005802:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005804:	2300      	movs	r3, #0
 8005806:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800580c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800580e:	2b00      	cmp	r3, #0
 8005810:	d10a      	bne.n	8005828 <xQueueReceive+0x30>
	__asm volatile
 8005812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005816:	f383 8811 	msr	BASEPRI, r3
 800581a:	f3bf 8f6f 	isb	sy
 800581e:	f3bf 8f4f 	dsb	sy
 8005822:	623b      	str	r3, [r7, #32]
}
 8005824:	bf00      	nop
 8005826:	e7fe      	b.n	8005826 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d103      	bne.n	8005836 <xQueueReceive+0x3e>
 800582e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005832:	2b00      	cmp	r3, #0
 8005834:	d101      	bne.n	800583a <xQueueReceive+0x42>
 8005836:	2301      	movs	r3, #1
 8005838:	e000      	b.n	800583c <xQueueReceive+0x44>
 800583a:	2300      	movs	r3, #0
 800583c:	2b00      	cmp	r3, #0
 800583e:	d10a      	bne.n	8005856 <xQueueReceive+0x5e>
	__asm volatile
 8005840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005844:	f383 8811 	msr	BASEPRI, r3
 8005848:	f3bf 8f6f 	isb	sy
 800584c:	f3bf 8f4f 	dsb	sy
 8005850:	61fb      	str	r3, [r7, #28]
}
 8005852:	bf00      	nop
 8005854:	e7fe      	b.n	8005854 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005856:	f001 f8bb 	bl	80069d0 <xTaskGetSchedulerState>
 800585a:	4603      	mov	r3, r0
 800585c:	2b00      	cmp	r3, #0
 800585e:	d102      	bne.n	8005866 <xQueueReceive+0x6e>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d101      	bne.n	800586a <xQueueReceive+0x72>
 8005866:	2301      	movs	r3, #1
 8005868:	e000      	b.n	800586c <xQueueReceive+0x74>
 800586a:	2300      	movs	r3, #0
 800586c:	2b00      	cmp	r3, #0
 800586e:	d10a      	bne.n	8005886 <xQueueReceive+0x8e>
	__asm volatile
 8005870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005874:	f383 8811 	msr	BASEPRI, r3
 8005878:	f3bf 8f6f 	isb	sy
 800587c:	f3bf 8f4f 	dsb	sy
 8005880:	61bb      	str	r3, [r7, #24]
}
 8005882:	bf00      	nop
 8005884:	e7fe      	b.n	8005884 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005886:	f001 fdfd 	bl	8007484 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800588a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800588c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800588e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005892:	2b00      	cmp	r3, #0
 8005894:	d01f      	beq.n	80058d6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005896:	68b9      	ldr	r1, [r7, #8]
 8005898:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800589a:	f000 f977 	bl	8005b8c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800589e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a0:	1e5a      	subs	r2, r3, #1
 80058a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058a4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80058a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058a8:	691b      	ldr	r3, [r3, #16]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d00f      	beq.n	80058ce <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80058ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058b0:	3310      	adds	r3, #16
 80058b2:	4618      	mov	r0, r3
 80058b4:	f000 fece 	bl	8006654 <xTaskRemoveFromEventList>
 80058b8:	4603      	mov	r3, r0
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d007      	beq.n	80058ce <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80058be:	4b3d      	ldr	r3, [pc, #244]	; (80059b4 <xQueueReceive+0x1bc>)
 80058c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058c4:	601a      	str	r2, [r3, #0]
 80058c6:	f3bf 8f4f 	dsb	sy
 80058ca:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80058ce:	f001 fe09 	bl	80074e4 <vPortExitCritical>
				return pdPASS;
 80058d2:	2301      	movs	r3, #1
 80058d4:	e069      	b.n	80059aa <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d103      	bne.n	80058e4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80058dc:	f001 fe02 	bl	80074e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80058e0:	2300      	movs	r3, #0
 80058e2:	e062      	b.n	80059aa <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80058e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d106      	bne.n	80058f8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80058ea:	f107 0310 	add.w	r3, r7, #16
 80058ee:	4618      	mov	r0, r3
 80058f0:	f000 ff14 	bl	800671c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80058f4:	2301      	movs	r3, #1
 80058f6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80058f8:	f001 fdf4 	bl	80074e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80058fc:	f000 fc86 	bl	800620c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005900:	f001 fdc0 	bl	8007484 <vPortEnterCritical>
 8005904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005906:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800590a:	b25b      	sxtb	r3, r3
 800590c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005910:	d103      	bne.n	800591a <xQueueReceive+0x122>
 8005912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005914:	2200      	movs	r2, #0
 8005916:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800591a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800591c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005920:	b25b      	sxtb	r3, r3
 8005922:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005926:	d103      	bne.n	8005930 <xQueueReceive+0x138>
 8005928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800592a:	2200      	movs	r2, #0
 800592c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005930:	f001 fdd8 	bl	80074e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005934:	1d3a      	adds	r2, r7, #4
 8005936:	f107 0310 	add.w	r3, r7, #16
 800593a:	4611      	mov	r1, r2
 800593c:	4618      	mov	r0, r3
 800593e:	f000 ff03 	bl	8006748 <xTaskCheckForTimeOut>
 8005942:	4603      	mov	r3, r0
 8005944:	2b00      	cmp	r3, #0
 8005946:	d123      	bne.n	8005990 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005948:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800594a:	f000 f997 	bl	8005c7c <prvIsQueueEmpty>
 800594e:	4603      	mov	r3, r0
 8005950:	2b00      	cmp	r3, #0
 8005952:	d017      	beq.n	8005984 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005956:	3324      	adds	r3, #36	; 0x24
 8005958:	687a      	ldr	r2, [r7, #4]
 800595a:	4611      	mov	r1, r2
 800595c:	4618      	mov	r0, r3
 800595e:	f000 fe29 	bl	80065b4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005962:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005964:	f000 f938 	bl	8005bd8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005968:	f000 fc5e 	bl	8006228 <xTaskResumeAll>
 800596c:	4603      	mov	r3, r0
 800596e:	2b00      	cmp	r3, #0
 8005970:	d189      	bne.n	8005886 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005972:	4b10      	ldr	r3, [pc, #64]	; (80059b4 <xQueueReceive+0x1bc>)
 8005974:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005978:	601a      	str	r2, [r3, #0]
 800597a:	f3bf 8f4f 	dsb	sy
 800597e:	f3bf 8f6f 	isb	sy
 8005982:	e780      	b.n	8005886 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005984:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005986:	f000 f927 	bl	8005bd8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800598a:	f000 fc4d 	bl	8006228 <xTaskResumeAll>
 800598e:	e77a      	b.n	8005886 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005990:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005992:	f000 f921 	bl	8005bd8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005996:	f000 fc47 	bl	8006228 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800599a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800599c:	f000 f96e 	bl	8005c7c <prvIsQueueEmpty>
 80059a0:	4603      	mov	r3, r0
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	f43f af6f 	beq.w	8005886 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80059a8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80059aa:	4618      	mov	r0, r3
 80059ac:	3730      	adds	r7, #48	; 0x30
 80059ae:	46bd      	mov	sp, r7
 80059b0:	bd80      	pop	{r7, pc}
 80059b2:	bf00      	nop
 80059b4:	e000ed04 	.word	0xe000ed04

080059b8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b08e      	sub	sp, #56	; 0x38
 80059bc:	af00      	add	r7, sp, #0
 80059be:	60f8      	str	r0, [r7, #12]
 80059c0:	60b9      	str	r1, [r7, #8]
 80059c2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80059c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d10a      	bne.n	80059e4 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80059ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059d2:	f383 8811 	msr	BASEPRI, r3
 80059d6:	f3bf 8f6f 	isb	sy
 80059da:	f3bf 8f4f 	dsb	sy
 80059de:	623b      	str	r3, [r7, #32]
}
 80059e0:	bf00      	nop
 80059e2:	e7fe      	b.n	80059e2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d103      	bne.n	80059f2 <xQueueReceiveFromISR+0x3a>
 80059ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d101      	bne.n	80059f6 <xQueueReceiveFromISR+0x3e>
 80059f2:	2301      	movs	r3, #1
 80059f4:	e000      	b.n	80059f8 <xQueueReceiveFromISR+0x40>
 80059f6:	2300      	movs	r3, #0
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d10a      	bne.n	8005a12 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80059fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a00:	f383 8811 	msr	BASEPRI, r3
 8005a04:	f3bf 8f6f 	isb	sy
 8005a08:	f3bf 8f4f 	dsb	sy
 8005a0c:	61fb      	str	r3, [r7, #28]
}
 8005a0e:	bf00      	nop
 8005a10:	e7fe      	b.n	8005a10 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005a12:	f001 fe19 	bl	8007648 <vPortValidateInterruptPriority>
	__asm volatile
 8005a16:	f3ef 8211 	mrs	r2, BASEPRI
 8005a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a1e:	f383 8811 	msr	BASEPRI, r3
 8005a22:	f3bf 8f6f 	isb	sy
 8005a26:	f3bf 8f4f 	dsb	sy
 8005a2a:	61ba      	str	r2, [r7, #24]
 8005a2c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005a2e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005a30:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a36:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d02f      	beq.n	8005a9e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a40:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005a44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005a48:	68b9      	ldr	r1, [r7, #8]
 8005a4a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005a4c:	f000 f89e 	bl	8005b8c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a52:	1e5a      	subs	r2, r3, #1
 8005a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a56:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005a58:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005a5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a60:	d112      	bne.n	8005a88 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a64:	691b      	ldr	r3, [r3, #16]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d016      	beq.n	8005a98 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a6c:	3310      	adds	r3, #16
 8005a6e:	4618      	mov	r0, r3
 8005a70:	f000 fdf0 	bl	8006654 <xTaskRemoveFromEventList>
 8005a74:	4603      	mov	r3, r0
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d00e      	beq.n	8005a98 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d00b      	beq.n	8005a98 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2201      	movs	r2, #1
 8005a84:	601a      	str	r2, [r3, #0]
 8005a86:	e007      	b.n	8005a98 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005a88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005a8c:	3301      	adds	r3, #1
 8005a8e:	b2db      	uxtb	r3, r3
 8005a90:	b25a      	sxtb	r2, r3
 8005a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8005a98:	2301      	movs	r3, #1
 8005a9a:	637b      	str	r3, [r7, #52]	; 0x34
 8005a9c:	e001      	b.n	8005aa2 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	637b      	str	r3, [r7, #52]	; 0x34
 8005aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aa4:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005aa6:	693b      	ldr	r3, [r7, #16]
 8005aa8:	f383 8811 	msr	BASEPRI, r3
}
 8005aac:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005aae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	3738      	adds	r7, #56	; 0x38
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bd80      	pop	{r7, pc}

08005ab8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b086      	sub	sp, #24
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	60f8      	str	r0, [r7, #12]
 8005ac0:	60b9      	str	r1, [r7, #8]
 8005ac2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005acc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d10d      	bne.n	8005af2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d14d      	bne.n	8005b7a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	689b      	ldr	r3, [r3, #8]
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	f000 ff92 	bl	8006a0c <xTaskPriorityDisinherit>
 8005ae8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	2200      	movs	r2, #0
 8005aee:	609a      	str	r2, [r3, #8]
 8005af0:	e043      	b.n	8005b7a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d119      	bne.n	8005b2c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	6858      	ldr	r0, [r3, #4]
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b00:	461a      	mov	r2, r3
 8005b02:	68b9      	ldr	r1, [r7, #8]
 8005b04:	f002 f81e 	bl	8007b44 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	685a      	ldr	r2, [r3, #4]
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b10:	441a      	add	r2, r3
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	685a      	ldr	r2, [r3, #4]
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	689b      	ldr	r3, [r3, #8]
 8005b1e:	429a      	cmp	r2, r3
 8005b20:	d32b      	bcc.n	8005b7a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681a      	ldr	r2, [r3, #0]
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	605a      	str	r2, [r3, #4]
 8005b2a:	e026      	b.n	8005b7a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	68d8      	ldr	r0, [r3, #12]
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b34:	461a      	mov	r2, r3
 8005b36:	68b9      	ldr	r1, [r7, #8]
 8005b38:	f002 f804 	bl	8007b44 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	68da      	ldr	r2, [r3, #12]
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b44:	425b      	negs	r3, r3
 8005b46:	441a      	add	r2, r3
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	68da      	ldr	r2, [r3, #12]
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	429a      	cmp	r2, r3
 8005b56:	d207      	bcs.n	8005b68 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	689a      	ldr	r2, [r3, #8]
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b60:	425b      	negs	r3, r3
 8005b62:	441a      	add	r2, r3
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2b02      	cmp	r3, #2
 8005b6c:	d105      	bne.n	8005b7a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005b6e:	693b      	ldr	r3, [r7, #16]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d002      	beq.n	8005b7a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005b74:	693b      	ldr	r3, [r7, #16]
 8005b76:	3b01      	subs	r3, #1
 8005b78:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005b7a:	693b      	ldr	r3, [r7, #16]
 8005b7c:	1c5a      	adds	r2, r3, #1
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005b82:	697b      	ldr	r3, [r7, #20]
}
 8005b84:	4618      	mov	r0, r3
 8005b86:	3718      	adds	r7, #24
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	bd80      	pop	{r7, pc}

08005b8c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b082      	sub	sp, #8
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
 8005b94:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d018      	beq.n	8005bd0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	68da      	ldr	r2, [r3, #12]
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ba6:	441a      	add	r2, r3
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	68da      	ldr	r2, [r3, #12]
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	689b      	ldr	r3, [r3, #8]
 8005bb4:	429a      	cmp	r2, r3
 8005bb6:	d303      	bcc.n	8005bc0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681a      	ldr	r2, [r3, #0]
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	68d9      	ldr	r1, [r3, #12]
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bc8:	461a      	mov	r2, r3
 8005bca:	6838      	ldr	r0, [r7, #0]
 8005bcc:	f001 ffba 	bl	8007b44 <memcpy>
	}
}
 8005bd0:	bf00      	nop
 8005bd2:	3708      	adds	r7, #8
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	bd80      	pop	{r7, pc}

08005bd8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b084      	sub	sp, #16
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005be0:	f001 fc50 	bl	8007484 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005bea:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005bec:	e011      	b.n	8005c12 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d012      	beq.n	8005c1c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	3324      	adds	r3, #36	; 0x24
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	f000 fd2a 	bl	8006654 <xTaskRemoveFromEventList>
 8005c00:	4603      	mov	r3, r0
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d001      	beq.n	8005c0a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005c06:	f000 fe01 	bl	800680c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005c0a:	7bfb      	ldrb	r3, [r7, #15]
 8005c0c:	3b01      	subs	r3, #1
 8005c0e:	b2db      	uxtb	r3, r3
 8005c10:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005c12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	dce9      	bgt.n	8005bee <prvUnlockQueue+0x16>
 8005c1a:	e000      	b.n	8005c1e <prvUnlockQueue+0x46>
					break;
 8005c1c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	22ff      	movs	r2, #255	; 0xff
 8005c22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005c26:	f001 fc5d 	bl	80074e4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005c2a:	f001 fc2b 	bl	8007484 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005c34:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005c36:	e011      	b.n	8005c5c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	691b      	ldr	r3, [r3, #16]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d012      	beq.n	8005c66 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	3310      	adds	r3, #16
 8005c44:	4618      	mov	r0, r3
 8005c46:	f000 fd05 	bl	8006654 <xTaskRemoveFromEventList>
 8005c4a:	4603      	mov	r3, r0
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d001      	beq.n	8005c54 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005c50:	f000 fddc 	bl	800680c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005c54:	7bbb      	ldrb	r3, [r7, #14]
 8005c56:	3b01      	subs	r3, #1
 8005c58:	b2db      	uxtb	r3, r3
 8005c5a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005c5c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	dce9      	bgt.n	8005c38 <prvUnlockQueue+0x60>
 8005c64:	e000      	b.n	8005c68 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005c66:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	22ff      	movs	r2, #255	; 0xff
 8005c6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005c70:	f001 fc38 	bl	80074e4 <vPortExitCritical>
}
 8005c74:	bf00      	nop
 8005c76:	3710      	adds	r7, #16
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	bd80      	pop	{r7, pc}

08005c7c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b084      	sub	sp, #16
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005c84:	f001 fbfe 	bl	8007484 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d102      	bne.n	8005c96 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005c90:	2301      	movs	r3, #1
 8005c92:	60fb      	str	r3, [r7, #12]
 8005c94:	e001      	b.n	8005c9a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005c96:	2300      	movs	r3, #0
 8005c98:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005c9a:	f001 fc23 	bl	80074e4 <vPortExitCritical>

	return xReturn;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
}
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	3710      	adds	r7, #16
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	bd80      	pop	{r7, pc}

08005ca8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b084      	sub	sp, #16
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005cb0:	f001 fbe8 	bl	8007484 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cbc:	429a      	cmp	r2, r3
 8005cbe:	d102      	bne.n	8005cc6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	60fb      	str	r3, [r7, #12]
 8005cc4:	e001      	b.n	8005cca <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005cca:	f001 fc0b 	bl	80074e4 <vPortExitCritical>

	return xReturn;
 8005cce:	68fb      	ldr	r3, [r7, #12]
}
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	3710      	adds	r7, #16
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	bd80      	pop	{r7, pc}

08005cd8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005cd8:	b480      	push	{r7}
 8005cda:	b085      	sub	sp, #20
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
 8005ce0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	60fb      	str	r3, [r7, #12]
 8005ce6:	e014      	b.n	8005d12 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005ce8:	4a0f      	ldr	r2, [pc, #60]	; (8005d28 <vQueueAddToRegistry+0x50>)
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d10b      	bne.n	8005d0c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005cf4:	490c      	ldr	r1, [pc, #48]	; (8005d28 <vQueueAddToRegistry+0x50>)
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	683a      	ldr	r2, [r7, #0]
 8005cfa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005cfe:	4a0a      	ldr	r2, [pc, #40]	; (8005d28 <vQueueAddToRegistry+0x50>)
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	00db      	lsls	r3, r3, #3
 8005d04:	4413      	add	r3, r2
 8005d06:	687a      	ldr	r2, [r7, #4]
 8005d08:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005d0a:	e006      	b.n	8005d1a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	3301      	adds	r3, #1
 8005d10:	60fb      	str	r3, [r7, #12]
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	2b07      	cmp	r3, #7
 8005d16:	d9e7      	bls.n	8005ce8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005d18:	bf00      	nop
 8005d1a:	bf00      	nop
 8005d1c:	3714      	adds	r7, #20
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d24:	4770      	bx	lr
 8005d26:	bf00      	nop
 8005d28:	20000848 	.word	0x20000848

08005d2c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b086      	sub	sp, #24
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	60f8      	str	r0, [r7, #12]
 8005d34:	60b9      	str	r1, [r7, #8]
 8005d36:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005d3c:	f001 fba2 	bl	8007484 <vPortEnterCritical>
 8005d40:	697b      	ldr	r3, [r7, #20]
 8005d42:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005d46:	b25b      	sxtb	r3, r3
 8005d48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d4c:	d103      	bne.n	8005d56 <vQueueWaitForMessageRestricted+0x2a>
 8005d4e:	697b      	ldr	r3, [r7, #20]
 8005d50:	2200      	movs	r2, #0
 8005d52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d56:	697b      	ldr	r3, [r7, #20]
 8005d58:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005d5c:	b25b      	sxtb	r3, r3
 8005d5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d62:	d103      	bne.n	8005d6c <vQueueWaitForMessageRestricted+0x40>
 8005d64:	697b      	ldr	r3, [r7, #20]
 8005d66:	2200      	movs	r2, #0
 8005d68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005d6c:	f001 fbba 	bl	80074e4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005d70:	697b      	ldr	r3, [r7, #20]
 8005d72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d106      	bne.n	8005d86 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005d78:	697b      	ldr	r3, [r7, #20]
 8005d7a:	3324      	adds	r3, #36	; 0x24
 8005d7c:	687a      	ldr	r2, [r7, #4]
 8005d7e:	68b9      	ldr	r1, [r7, #8]
 8005d80:	4618      	mov	r0, r3
 8005d82:	f000 fc3b 	bl	80065fc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005d86:	6978      	ldr	r0, [r7, #20]
 8005d88:	f7ff ff26 	bl	8005bd8 <prvUnlockQueue>
	}
 8005d8c:	bf00      	nop
 8005d8e:	3718      	adds	r7, #24
 8005d90:	46bd      	mov	sp, r7
 8005d92:	bd80      	pop	{r7, pc}

08005d94 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b08e      	sub	sp, #56	; 0x38
 8005d98:	af04      	add	r7, sp, #16
 8005d9a:	60f8      	str	r0, [r7, #12]
 8005d9c:	60b9      	str	r1, [r7, #8]
 8005d9e:	607a      	str	r2, [r7, #4]
 8005da0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005da2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d10a      	bne.n	8005dbe <xTaskCreateStatic+0x2a>
	__asm volatile
 8005da8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dac:	f383 8811 	msr	BASEPRI, r3
 8005db0:	f3bf 8f6f 	isb	sy
 8005db4:	f3bf 8f4f 	dsb	sy
 8005db8:	623b      	str	r3, [r7, #32]
}
 8005dba:	bf00      	nop
 8005dbc:	e7fe      	b.n	8005dbc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005dbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d10a      	bne.n	8005dda <xTaskCreateStatic+0x46>
	__asm volatile
 8005dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dc8:	f383 8811 	msr	BASEPRI, r3
 8005dcc:	f3bf 8f6f 	isb	sy
 8005dd0:	f3bf 8f4f 	dsb	sy
 8005dd4:	61fb      	str	r3, [r7, #28]
}
 8005dd6:	bf00      	nop
 8005dd8:	e7fe      	b.n	8005dd8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005dda:	235c      	movs	r3, #92	; 0x5c
 8005ddc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005dde:	693b      	ldr	r3, [r7, #16]
 8005de0:	2b5c      	cmp	r3, #92	; 0x5c
 8005de2:	d00a      	beq.n	8005dfa <xTaskCreateStatic+0x66>
	__asm volatile
 8005de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005de8:	f383 8811 	msr	BASEPRI, r3
 8005dec:	f3bf 8f6f 	isb	sy
 8005df0:	f3bf 8f4f 	dsb	sy
 8005df4:	61bb      	str	r3, [r7, #24]
}
 8005df6:	bf00      	nop
 8005df8:	e7fe      	b.n	8005df8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005dfa:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005dfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d01e      	beq.n	8005e40 <xTaskCreateStatic+0xac>
 8005e02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d01b      	beq.n	8005e40 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005e08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e0a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e0e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005e10:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e14:	2202      	movs	r2, #2
 8005e16:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	9303      	str	r3, [sp, #12]
 8005e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e20:	9302      	str	r3, [sp, #8]
 8005e22:	f107 0314 	add.w	r3, r7, #20
 8005e26:	9301      	str	r3, [sp, #4]
 8005e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e2a:	9300      	str	r3, [sp, #0]
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	687a      	ldr	r2, [r7, #4]
 8005e30:	68b9      	ldr	r1, [r7, #8]
 8005e32:	68f8      	ldr	r0, [r7, #12]
 8005e34:	f000 f850 	bl	8005ed8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005e38:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005e3a:	f000 f8dd 	bl	8005ff8 <prvAddNewTaskToReadyList>
 8005e3e:	e001      	b.n	8005e44 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005e40:	2300      	movs	r3, #0
 8005e42:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005e44:	697b      	ldr	r3, [r7, #20]
	}
 8005e46:	4618      	mov	r0, r3
 8005e48:	3728      	adds	r7, #40	; 0x28
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	bd80      	pop	{r7, pc}

08005e4e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005e4e:	b580      	push	{r7, lr}
 8005e50:	b08c      	sub	sp, #48	; 0x30
 8005e52:	af04      	add	r7, sp, #16
 8005e54:	60f8      	str	r0, [r7, #12]
 8005e56:	60b9      	str	r1, [r7, #8]
 8005e58:	603b      	str	r3, [r7, #0]
 8005e5a:	4613      	mov	r3, r2
 8005e5c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005e5e:	88fb      	ldrh	r3, [r7, #6]
 8005e60:	009b      	lsls	r3, r3, #2
 8005e62:	4618      	mov	r0, r3
 8005e64:	f001 fc30 	bl	80076c8 <pvPortMalloc>
 8005e68:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005e6a:	697b      	ldr	r3, [r7, #20]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d00e      	beq.n	8005e8e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005e70:	205c      	movs	r0, #92	; 0x5c
 8005e72:	f001 fc29 	bl	80076c8 <pvPortMalloc>
 8005e76:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005e78:	69fb      	ldr	r3, [r7, #28]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d003      	beq.n	8005e86 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005e7e:	69fb      	ldr	r3, [r7, #28]
 8005e80:	697a      	ldr	r2, [r7, #20]
 8005e82:	631a      	str	r2, [r3, #48]	; 0x30
 8005e84:	e005      	b.n	8005e92 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005e86:	6978      	ldr	r0, [r7, #20]
 8005e88:	f001 fcea 	bl	8007860 <vPortFree>
 8005e8c:	e001      	b.n	8005e92 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005e8e:	2300      	movs	r3, #0
 8005e90:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005e92:	69fb      	ldr	r3, [r7, #28]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d017      	beq.n	8005ec8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005e98:	69fb      	ldr	r3, [r7, #28]
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005ea0:	88fa      	ldrh	r2, [r7, #6]
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	9303      	str	r3, [sp, #12]
 8005ea6:	69fb      	ldr	r3, [r7, #28]
 8005ea8:	9302      	str	r3, [sp, #8]
 8005eaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eac:	9301      	str	r3, [sp, #4]
 8005eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eb0:	9300      	str	r3, [sp, #0]
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	68b9      	ldr	r1, [r7, #8]
 8005eb6:	68f8      	ldr	r0, [r7, #12]
 8005eb8:	f000 f80e 	bl	8005ed8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005ebc:	69f8      	ldr	r0, [r7, #28]
 8005ebe:	f000 f89b 	bl	8005ff8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	61bb      	str	r3, [r7, #24]
 8005ec6:	e002      	b.n	8005ece <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005ec8:	f04f 33ff 	mov.w	r3, #4294967295
 8005ecc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005ece:	69bb      	ldr	r3, [r7, #24]
	}
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	3720      	adds	r7, #32
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	bd80      	pop	{r7, pc}

08005ed8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b088      	sub	sp, #32
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	60f8      	str	r0, [r7, #12]
 8005ee0:	60b9      	str	r1, [r7, #8]
 8005ee2:	607a      	str	r2, [r7, #4]
 8005ee4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ee8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	009b      	lsls	r3, r3, #2
 8005eee:	461a      	mov	r2, r3
 8005ef0:	21a5      	movs	r1, #165	; 0xa5
 8005ef2:	f001 fdf3 	bl	8007adc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ef8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005f00:	3b01      	subs	r3, #1
 8005f02:	009b      	lsls	r3, r3, #2
 8005f04:	4413      	add	r3, r2
 8005f06:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005f08:	69bb      	ldr	r3, [r7, #24]
 8005f0a:	f023 0307 	bic.w	r3, r3, #7
 8005f0e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005f10:	69bb      	ldr	r3, [r7, #24]
 8005f12:	f003 0307 	and.w	r3, r3, #7
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d00a      	beq.n	8005f30 <prvInitialiseNewTask+0x58>
	__asm volatile
 8005f1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f1e:	f383 8811 	msr	BASEPRI, r3
 8005f22:	f3bf 8f6f 	isb	sy
 8005f26:	f3bf 8f4f 	dsb	sy
 8005f2a:	617b      	str	r3, [r7, #20]
}
 8005f2c:	bf00      	nop
 8005f2e:	e7fe      	b.n	8005f2e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d01f      	beq.n	8005f76 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005f36:	2300      	movs	r3, #0
 8005f38:	61fb      	str	r3, [r7, #28]
 8005f3a:	e012      	b.n	8005f62 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005f3c:	68ba      	ldr	r2, [r7, #8]
 8005f3e:	69fb      	ldr	r3, [r7, #28]
 8005f40:	4413      	add	r3, r2
 8005f42:	7819      	ldrb	r1, [r3, #0]
 8005f44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f46:	69fb      	ldr	r3, [r7, #28]
 8005f48:	4413      	add	r3, r2
 8005f4a:	3334      	adds	r3, #52	; 0x34
 8005f4c:	460a      	mov	r2, r1
 8005f4e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005f50:	68ba      	ldr	r2, [r7, #8]
 8005f52:	69fb      	ldr	r3, [r7, #28]
 8005f54:	4413      	add	r3, r2
 8005f56:	781b      	ldrb	r3, [r3, #0]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d006      	beq.n	8005f6a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005f5c:	69fb      	ldr	r3, [r7, #28]
 8005f5e:	3301      	adds	r3, #1
 8005f60:	61fb      	str	r3, [r7, #28]
 8005f62:	69fb      	ldr	r3, [r7, #28]
 8005f64:	2b0f      	cmp	r3, #15
 8005f66:	d9e9      	bls.n	8005f3c <prvInitialiseNewTask+0x64>
 8005f68:	e000      	b.n	8005f6c <prvInitialiseNewTask+0x94>
			{
				break;
 8005f6a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f6e:	2200      	movs	r2, #0
 8005f70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005f74:	e003      	b.n	8005f7e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f78:	2200      	movs	r2, #0
 8005f7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f80:	2b37      	cmp	r3, #55	; 0x37
 8005f82:	d901      	bls.n	8005f88 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005f84:	2337      	movs	r3, #55	; 0x37
 8005f86:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f8c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f92:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f96:	2200      	movs	r2, #0
 8005f98:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f9c:	3304      	adds	r3, #4
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	f7ff f8be 	bl	8005120 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fa6:	3318      	adds	r3, #24
 8005fa8:	4618      	mov	r0, r3
 8005faa:	f7ff f8b9 	bl	8005120 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fb2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fb6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fbc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fc2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fcc:	2200      	movs	r2, #0
 8005fce:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005fd2:	683a      	ldr	r2, [r7, #0]
 8005fd4:	68f9      	ldr	r1, [r7, #12]
 8005fd6:	69b8      	ldr	r0, [r7, #24]
 8005fd8:	f001 f928 	bl	800722c <pxPortInitialiseStack>
 8005fdc:	4602      	mov	r2, r0
 8005fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fe0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d002      	beq.n	8005fee <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005fe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005fee:	bf00      	nop
 8005ff0:	3720      	adds	r7, #32
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bd80      	pop	{r7, pc}
	...

08005ff8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b082      	sub	sp, #8
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006000:	f001 fa40 	bl	8007484 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006004:	4b2d      	ldr	r3, [pc, #180]	; (80060bc <prvAddNewTaskToReadyList+0xc4>)
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	3301      	adds	r3, #1
 800600a:	4a2c      	ldr	r2, [pc, #176]	; (80060bc <prvAddNewTaskToReadyList+0xc4>)
 800600c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800600e:	4b2c      	ldr	r3, [pc, #176]	; (80060c0 <prvAddNewTaskToReadyList+0xc8>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d109      	bne.n	800602a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006016:	4a2a      	ldr	r2, [pc, #168]	; (80060c0 <prvAddNewTaskToReadyList+0xc8>)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800601c:	4b27      	ldr	r3, [pc, #156]	; (80060bc <prvAddNewTaskToReadyList+0xc4>)
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	2b01      	cmp	r3, #1
 8006022:	d110      	bne.n	8006046 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006024:	f000 fc16 	bl	8006854 <prvInitialiseTaskLists>
 8006028:	e00d      	b.n	8006046 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800602a:	4b26      	ldr	r3, [pc, #152]	; (80060c4 <prvAddNewTaskToReadyList+0xcc>)
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d109      	bne.n	8006046 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006032:	4b23      	ldr	r3, [pc, #140]	; (80060c0 <prvAddNewTaskToReadyList+0xc8>)
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800603c:	429a      	cmp	r2, r3
 800603e:	d802      	bhi.n	8006046 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006040:	4a1f      	ldr	r2, [pc, #124]	; (80060c0 <prvAddNewTaskToReadyList+0xc8>)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006046:	4b20      	ldr	r3, [pc, #128]	; (80060c8 <prvAddNewTaskToReadyList+0xd0>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	3301      	adds	r3, #1
 800604c:	4a1e      	ldr	r2, [pc, #120]	; (80060c8 <prvAddNewTaskToReadyList+0xd0>)
 800604e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006050:	4b1d      	ldr	r3, [pc, #116]	; (80060c8 <prvAddNewTaskToReadyList+0xd0>)
 8006052:	681a      	ldr	r2, [r3, #0]
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800605c:	4b1b      	ldr	r3, [pc, #108]	; (80060cc <prvAddNewTaskToReadyList+0xd4>)
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	429a      	cmp	r2, r3
 8006062:	d903      	bls.n	800606c <prvAddNewTaskToReadyList+0x74>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006068:	4a18      	ldr	r2, [pc, #96]	; (80060cc <prvAddNewTaskToReadyList+0xd4>)
 800606a:	6013      	str	r3, [r2, #0]
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006070:	4613      	mov	r3, r2
 8006072:	009b      	lsls	r3, r3, #2
 8006074:	4413      	add	r3, r2
 8006076:	009b      	lsls	r3, r3, #2
 8006078:	4a15      	ldr	r2, [pc, #84]	; (80060d0 <prvAddNewTaskToReadyList+0xd8>)
 800607a:	441a      	add	r2, r3
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	3304      	adds	r3, #4
 8006080:	4619      	mov	r1, r3
 8006082:	4610      	mov	r0, r2
 8006084:	f7ff f859 	bl	800513a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006088:	f001 fa2c 	bl	80074e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800608c:	4b0d      	ldr	r3, [pc, #52]	; (80060c4 <prvAddNewTaskToReadyList+0xcc>)
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d00e      	beq.n	80060b2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006094:	4b0a      	ldr	r3, [pc, #40]	; (80060c0 <prvAddNewTaskToReadyList+0xc8>)
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800609e:	429a      	cmp	r2, r3
 80060a0:	d207      	bcs.n	80060b2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80060a2:	4b0c      	ldr	r3, [pc, #48]	; (80060d4 <prvAddNewTaskToReadyList+0xdc>)
 80060a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060a8:	601a      	str	r2, [r3, #0]
 80060aa:	f3bf 8f4f 	dsb	sy
 80060ae:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80060b2:	bf00      	nop
 80060b4:	3708      	adds	r7, #8
 80060b6:	46bd      	mov	sp, r7
 80060b8:	bd80      	pop	{r7, pc}
 80060ba:	bf00      	nop
 80060bc:	20000d5c 	.word	0x20000d5c
 80060c0:	20000888 	.word	0x20000888
 80060c4:	20000d68 	.word	0x20000d68
 80060c8:	20000d78 	.word	0x20000d78
 80060cc:	20000d64 	.word	0x20000d64
 80060d0:	2000088c 	.word	0x2000088c
 80060d4:	e000ed04 	.word	0xe000ed04

080060d8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b084      	sub	sp, #16
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80060e0:	2300      	movs	r3, #0
 80060e2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d017      	beq.n	800611a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80060ea:	4b13      	ldr	r3, [pc, #76]	; (8006138 <vTaskDelay+0x60>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d00a      	beq.n	8006108 <vTaskDelay+0x30>
	__asm volatile
 80060f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060f6:	f383 8811 	msr	BASEPRI, r3
 80060fa:	f3bf 8f6f 	isb	sy
 80060fe:	f3bf 8f4f 	dsb	sy
 8006102:	60bb      	str	r3, [r7, #8]
}
 8006104:	bf00      	nop
 8006106:	e7fe      	b.n	8006106 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006108:	f000 f880 	bl	800620c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800610c:	2100      	movs	r1, #0
 800610e:	6878      	ldr	r0, [r7, #4]
 8006110:	f000 fcea 	bl	8006ae8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006114:	f000 f888 	bl	8006228 <xTaskResumeAll>
 8006118:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d107      	bne.n	8006130 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006120:	4b06      	ldr	r3, [pc, #24]	; (800613c <vTaskDelay+0x64>)
 8006122:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006126:	601a      	str	r2, [r3, #0]
 8006128:	f3bf 8f4f 	dsb	sy
 800612c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006130:	bf00      	nop
 8006132:	3710      	adds	r7, #16
 8006134:	46bd      	mov	sp, r7
 8006136:	bd80      	pop	{r7, pc}
 8006138:	20000d84 	.word	0x20000d84
 800613c:	e000ed04 	.word	0xe000ed04

08006140 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b08a      	sub	sp, #40	; 0x28
 8006144:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006146:	2300      	movs	r3, #0
 8006148:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800614a:	2300      	movs	r3, #0
 800614c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800614e:	463a      	mov	r2, r7
 8006150:	1d39      	adds	r1, r7, #4
 8006152:	f107 0308 	add.w	r3, r7, #8
 8006156:	4618      	mov	r0, r3
 8006158:	f7fe ff8e 	bl	8005078 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800615c:	6839      	ldr	r1, [r7, #0]
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	68ba      	ldr	r2, [r7, #8]
 8006162:	9202      	str	r2, [sp, #8]
 8006164:	9301      	str	r3, [sp, #4]
 8006166:	2300      	movs	r3, #0
 8006168:	9300      	str	r3, [sp, #0]
 800616a:	2300      	movs	r3, #0
 800616c:	460a      	mov	r2, r1
 800616e:	4921      	ldr	r1, [pc, #132]	; (80061f4 <vTaskStartScheduler+0xb4>)
 8006170:	4821      	ldr	r0, [pc, #132]	; (80061f8 <vTaskStartScheduler+0xb8>)
 8006172:	f7ff fe0f 	bl	8005d94 <xTaskCreateStatic>
 8006176:	4603      	mov	r3, r0
 8006178:	4a20      	ldr	r2, [pc, #128]	; (80061fc <vTaskStartScheduler+0xbc>)
 800617a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800617c:	4b1f      	ldr	r3, [pc, #124]	; (80061fc <vTaskStartScheduler+0xbc>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d002      	beq.n	800618a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006184:	2301      	movs	r3, #1
 8006186:	617b      	str	r3, [r7, #20]
 8006188:	e001      	b.n	800618e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800618a:	2300      	movs	r3, #0
 800618c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800618e:	697b      	ldr	r3, [r7, #20]
 8006190:	2b01      	cmp	r3, #1
 8006192:	d102      	bne.n	800619a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006194:	f000 fcfc 	bl	8006b90 <xTimerCreateTimerTask>
 8006198:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800619a:	697b      	ldr	r3, [r7, #20]
 800619c:	2b01      	cmp	r3, #1
 800619e:	d116      	bne.n	80061ce <vTaskStartScheduler+0x8e>
	__asm volatile
 80061a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061a4:	f383 8811 	msr	BASEPRI, r3
 80061a8:	f3bf 8f6f 	isb	sy
 80061ac:	f3bf 8f4f 	dsb	sy
 80061b0:	613b      	str	r3, [r7, #16]
}
 80061b2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80061b4:	4b12      	ldr	r3, [pc, #72]	; (8006200 <vTaskStartScheduler+0xc0>)
 80061b6:	f04f 32ff 	mov.w	r2, #4294967295
 80061ba:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80061bc:	4b11      	ldr	r3, [pc, #68]	; (8006204 <vTaskStartScheduler+0xc4>)
 80061be:	2201      	movs	r2, #1
 80061c0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80061c2:	4b11      	ldr	r3, [pc, #68]	; (8006208 <vTaskStartScheduler+0xc8>)
 80061c4:	2200      	movs	r2, #0
 80061c6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80061c8:	f001 f8ba 	bl	8007340 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80061cc:	e00e      	b.n	80061ec <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80061ce:	697b      	ldr	r3, [r7, #20]
 80061d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061d4:	d10a      	bne.n	80061ec <vTaskStartScheduler+0xac>
	__asm volatile
 80061d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061da:	f383 8811 	msr	BASEPRI, r3
 80061de:	f3bf 8f6f 	isb	sy
 80061e2:	f3bf 8f4f 	dsb	sy
 80061e6:	60fb      	str	r3, [r7, #12]
}
 80061e8:	bf00      	nop
 80061ea:	e7fe      	b.n	80061ea <vTaskStartScheduler+0xaa>
}
 80061ec:	bf00      	nop
 80061ee:	3718      	adds	r7, #24
 80061f0:	46bd      	mov	sp, r7
 80061f2:	bd80      	pop	{r7, pc}
 80061f4:	0800845c 	.word	0x0800845c
 80061f8:	08006825 	.word	0x08006825
 80061fc:	20000d80 	.word	0x20000d80
 8006200:	20000d7c 	.word	0x20000d7c
 8006204:	20000d68 	.word	0x20000d68
 8006208:	20000d60 	.word	0x20000d60

0800620c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800620c:	b480      	push	{r7}
 800620e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006210:	4b04      	ldr	r3, [pc, #16]	; (8006224 <vTaskSuspendAll+0x18>)
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	3301      	adds	r3, #1
 8006216:	4a03      	ldr	r2, [pc, #12]	; (8006224 <vTaskSuspendAll+0x18>)
 8006218:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800621a:	bf00      	nop
 800621c:	46bd      	mov	sp, r7
 800621e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006222:	4770      	bx	lr
 8006224:	20000d84 	.word	0x20000d84

08006228 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b084      	sub	sp, #16
 800622c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800622e:	2300      	movs	r3, #0
 8006230:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006232:	2300      	movs	r3, #0
 8006234:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006236:	4b42      	ldr	r3, [pc, #264]	; (8006340 <xTaskResumeAll+0x118>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d10a      	bne.n	8006254 <xTaskResumeAll+0x2c>
	__asm volatile
 800623e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006242:	f383 8811 	msr	BASEPRI, r3
 8006246:	f3bf 8f6f 	isb	sy
 800624a:	f3bf 8f4f 	dsb	sy
 800624e:	603b      	str	r3, [r7, #0]
}
 8006250:	bf00      	nop
 8006252:	e7fe      	b.n	8006252 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006254:	f001 f916 	bl	8007484 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006258:	4b39      	ldr	r3, [pc, #228]	; (8006340 <xTaskResumeAll+0x118>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	3b01      	subs	r3, #1
 800625e:	4a38      	ldr	r2, [pc, #224]	; (8006340 <xTaskResumeAll+0x118>)
 8006260:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006262:	4b37      	ldr	r3, [pc, #220]	; (8006340 <xTaskResumeAll+0x118>)
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d162      	bne.n	8006330 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800626a:	4b36      	ldr	r3, [pc, #216]	; (8006344 <xTaskResumeAll+0x11c>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d05e      	beq.n	8006330 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006272:	e02f      	b.n	80062d4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006274:	4b34      	ldr	r3, [pc, #208]	; (8006348 <xTaskResumeAll+0x120>)
 8006276:	68db      	ldr	r3, [r3, #12]
 8006278:	68db      	ldr	r3, [r3, #12]
 800627a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	3318      	adds	r3, #24
 8006280:	4618      	mov	r0, r3
 8006282:	f7fe ffb7 	bl	80051f4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	3304      	adds	r3, #4
 800628a:	4618      	mov	r0, r3
 800628c:	f7fe ffb2 	bl	80051f4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006294:	4b2d      	ldr	r3, [pc, #180]	; (800634c <xTaskResumeAll+0x124>)
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	429a      	cmp	r2, r3
 800629a:	d903      	bls.n	80062a4 <xTaskResumeAll+0x7c>
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062a0:	4a2a      	ldr	r2, [pc, #168]	; (800634c <xTaskResumeAll+0x124>)
 80062a2:	6013      	str	r3, [r2, #0]
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062a8:	4613      	mov	r3, r2
 80062aa:	009b      	lsls	r3, r3, #2
 80062ac:	4413      	add	r3, r2
 80062ae:	009b      	lsls	r3, r3, #2
 80062b0:	4a27      	ldr	r2, [pc, #156]	; (8006350 <xTaskResumeAll+0x128>)
 80062b2:	441a      	add	r2, r3
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	3304      	adds	r3, #4
 80062b8:	4619      	mov	r1, r3
 80062ba:	4610      	mov	r0, r2
 80062bc:	f7fe ff3d 	bl	800513a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062c4:	4b23      	ldr	r3, [pc, #140]	; (8006354 <xTaskResumeAll+0x12c>)
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062ca:	429a      	cmp	r2, r3
 80062cc:	d302      	bcc.n	80062d4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80062ce:	4b22      	ldr	r3, [pc, #136]	; (8006358 <xTaskResumeAll+0x130>)
 80062d0:	2201      	movs	r2, #1
 80062d2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80062d4:	4b1c      	ldr	r3, [pc, #112]	; (8006348 <xTaskResumeAll+0x120>)
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d1cb      	bne.n	8006274 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d001      	beq.n	80062e6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80062e2:	f000 fb55 	bl	8006990 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80062e6:	4b1d      	ldr	r3, [pc, #116]	; (800635c <xTaskResumeAll+0x134>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d010      	beq.n	8006314 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80062f2:	f000 f847 	bl	8006384 <xTaskIncrementTick>
 80062f6:	4603      	mov	r3, r0
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d002      	beq.n	8006302 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80062fc:	4b16      	ldr	r3, [pc, #88]	; (8006358 <xTaskResumeAll+0x130>)
 80062fe:	2201      	movs	r2, #1
 8006300:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	3b01      	subs	r3, #1
 8006306:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d1f1      	bne.n	80062f2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800630e:	4b13      	ldr	r3, [pc, #76]	; (800635c <xTaskResumeAll+0x134>)
 8006310:	2200      	movs	r2, #0
 8006312:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006314:	4b10      	ldr	r3, [pc, #64]	; (8006358 <xTaskResumeAll+0x130>)
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d009      	beq.n	8006330 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800631c:	2301      	movs	r3, #1
 800631e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006320:	4b0f      	ldr	r3, [pc, #60]	; (8006360 <xTaskResumeAll+0x138>)
 8006322:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006326:	601a      	str	r2, [r3, #0]
 8006328:	f3bf 8f4f 	dsb	sy
 800632c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006330:	f001 f8d8 	bl	80074e4 <vPortExitCritical>

	return xAlreadyYielded;
 8006334:	68bb      	ldr	r3, [r7, #8]
}
 8006336:	4618      	mov	r0, r3
 8006338:	3710      	adds	r7, #16
 800633a:	46bd      	mov	sp, r7
 800633c:	bd80      	pop	{r7, pc}
 800633e:	bf00      	nop
 8006340:	20000d84 	.word	0x20000d84
 8006344:	20000d5c 	.word	0x20000d5c
 8006348:	20000d1c 	.word	0x20000d1c
 800634c:	20000d64 	.word	0x20000d64
 8006350:	2000088c 	.word	0x2000088c
 8006354:	20000888 	.word	0x20000888
 8006358:	20000d70 	.word	0x20000d70
 800635c:	20000d6c 	.word	0x20000d6c
 8006360:	e000ed04 	.word	0xe000ed04

08006364 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006364:	b480      	push	{r7}
 8006366:	b083      	sub	sp, #12
 8006368:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800636a:	4b05      	ldr	r3, [pc, #20]	; (8006380 <xTaskGetTickCount+0x1c>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006370:	687b      	ldr	r3, [r7, #4]
}
 8006372:	4618      	mov	r0, r3
 8006374:	370c      	adds	r7, #12
 8006376:	46bd      	mov	sp, r7
 8006378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637c:	4770      	bx	lr
 800637e:	bf00      	nop
 8006380:	20000d60 	.word	0x20000d60

08006384 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b086      	sub	sp, #24
 8006388:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800638a:	2300      	movs	r3, #0
 800638c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800638e:	4b4f      	ldr	r3, [pc, #316]	; (80064cc <xTaskIncrementTick+0x148>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	2b00      	cmp	r3, #0
 8006394:	f040 808f 	bne.w	80064b6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006398:	4b4d      	ldr	r3, [pc, #308]	; (80064d0 <xTaskIncrementTick+0x14c>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	3301      	adds	r3, #1
 800639e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80063a0:	4a4b      	ldr	r2, [pc, #300]	; (80064d0 <xTaskIncrementTick+0x14c>)
 80063a2:	693b      	ldr	r3, [r7, #16]
 80063a4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80063a6:	693b      	ldr	r3, [r7, #16]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d120      	bne.n	80063ee <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80063ac:	4b49      	ldr	r3, [pc, #292]	; (80064d4 <xTaskIncrementTick+0x150>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d00a      	beq.n	80063cc <xTaskIncrementTick+0x48>
	__asm volatile
 80063b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063ba:	f383 8811 	msr	BASEPRI, r3
 80063be:	f3bf 8f6f 	isb	sy
 80063c2:	f3bf 8f4f 	dsb	sy
 80063c6:	603b      	str	r3, [r7, #0]
}
 80063c8:	bf00      	nop
 80063ca:	e7fe      	b.n	80063ca <xTaskIncrementTick+0x46>
 80063cc:	4b41      	ldr	r3, [pc, #260]	; (80064d4 <xTaskIncrementTick+0x150>)
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	60fb      	str	r3, [r7, #12]
 80063d2:	4b41      	ldr	r3, [pc, #260]	; (80064d8 <xTaskIncrementTick+0x154>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4a3f      	ldr	r2, [pc, #252]	; (80064d4 <xTaskIncrementTick+0x150>)
 80063d8:	6013      	str	r3, [r2, #0]
 80063da:	4a3f      	ldr	r2, [pc, #252]	; (80064d8 <xTaskIncrementTick+0x154>)
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	6013      	str	r3, [r2, #0]
 80063e0:	4b3e      	ldr	r3, [pc, #248]	; (80064dc <xTaskIncrementTick+0x158>)
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	3301      	adds	r3, #1
 80063e6:	4a3d      	ldr	r2, [pc, #244]	; (80064dc <xTaskIncrementTick+0x158>)
 80063e8:	6013      	str	r3, [r2, #0]
 80063ea:	f000 fad1 	bl	8006990 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80063ee:	4b3c      	ldr	r3, [pc, #240]	; (80064e0 <xTaskIncrementTick+0x15c>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	693a      	ldr	r2, [r7, #16]
 80063f4:	429a      	cmp	r2, r3
 80063f6:	d349      	bcc.n	800648c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80063f8:	4b36      	ldr	r3, [pc, #216]	; (80064d4 <xTaskIncrementTick+0x150>)
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d104      	bne.n	800640c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006402:	4b37      	ldr	r3, [pc, #220]	; (80064e0 <xTaskIncrementTick+0x15c>)
 8006404:	f04f 32ff 	mov.w	r2, #4294967295
 8006408:	601a      	str	r2, [r3, #0]
					break;
 800640a:	e03f      	b.n	800648c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800640c:	4b31      	ldr	r3, [pc, #196]	; (80064d4 <xTaskIncrementTick+0x150>)
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	68db      	ldr	r3, [r3, #12]
 8006412:	68db      	ldr	r3, [r3, #12]
 8006414:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006416:	68bb      	ldr	r3, [r7, #8]
 8006418:	685b      	ldr	r3, [r3, #4]
 800641a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800641c:	693a      	ldr	r2, [r7, #16]
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	429a      	cmp	r2, r3
 8006422:	d203      	bcs.n	800642c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006424:	4a2e      	ldr	r2, [pc, #184]	; (80064e0 <xTaskIncrementTick+0x15c>)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800642a:	e02f      	b.n	800648c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	3304      	adds	r3, #4
 8006430:	4618      	mov	r0, r3
 8006432:	f7fe fedf 	bl	80051f4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006436:	68bb      	ldr	r3, [r7, #8]
 8006438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800643a:	2b00      	cmp	r3, #0
 800643c:	d004      	beq.n	8006448 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800643e:	68bb      	ldr	r3, [r7, #8]
 8006440:	3318      	adds	r3, #24
 8006442:	4618      	mov	r0, r3
 8006444:	f7fe fed6 	bl	80051f4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800644c:	4b25      	ldr	r3, [pc, #148]	; (80064e4 <xTaskIncrementTick+0x160>)
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	429a      	cmp	r2, r3
 8006452:	d903      	bls.n	800645c <xTaskIncrementTick+0xd8>
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006458:	4a22      	ldr	r2, [pc, #136]	; (80064e4 <xTaskIncrementTick+0x160>)
 800645a:	6013      	str	r3, [r2, #0]
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006460:	4613      	mov	r3, r2
 8006462:	009b      	lsls	r3, r3, #2
 8006464:	4413      	add	r3, r2
 8006466:	009b      	lsls	r3, r3, #2
 8006468:	4a1f      	ldr	r2, [pc, #124]	; (80064e8 <xTaskIncrementTick+0x164>)
 800646a:	441a      	add	r2, r3
 800646c:	68bb      	ldr	r3, [r7, #8]
 800646e:	3304      	adds	r3, #4
 8006470:	4619      	mov	r1, r3
 8006472:	4610      	mov	r0, r2
 8006474:	f7fe fe61 	bl	800513a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800647c:	4b1b      	ldr	r3, [pc, #108]	; (80064ec <xTaskIncrementTick+0x168>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006482:	429a      	cmp	r2, r3
 8006484:	d3b8      	bcc.n	80063f8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006486:	2301      	movs	r3, #1
 8006488:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800648a:	e7b5      	b.n	80063f8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800648c:	4b17      	ldr	r3, [pc, #92]	; (80064ec <xTaskIncrementTick+0x168>)
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006492:	4915      	ldr	r1, [pc, #84]	; (80064e8 <xTaskIncrementTick+0x164>)
 8006494:	4613      	mov	r3, r2
 8006496:	009b      	lsls	r3, r3, #2
 8006498:	4413      	add	r3, r2
 800649a:	009b      	lsls	r3, r3, #2
 800649c:	440b      	add	r3, r1
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	2b01      	cmp	r3, #1
 80064a2:	d901      	bls.n	80064a8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80064a4:	2301      	movs	r3, #1
 80064a6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80064a8:	4b11      	ldr	r3, [pc, #68]	; (80064f0 <xTaskIncrementTick+0x16c>)
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d007      	beq.n	80064c0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80064b0:	2301      	movs	r3, #1
 80064b2:	617b      	str	r3, [r7, #20]
 80064b4:	e004      	b.n	80064c0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80064b6:	4b0f      	ldr	r3, [pc, #60]	; (80064f4 <xTaskIncrementTick+0x170>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	3301      	adds	r3, #1
 80064bc:	4a0d      	ldr	r2, [pc, #52]	; (80064f4 <xTaskIncrementTick+0x170>)
 80064be:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80064c0:	697b      	ldr	r3, [r7, #20]
}
 80064c2:	4618      	mov	r0, r3
 80064c4:	3718      	adds	r7, #24
 80064c6:	46bd      	mov	sp, r7
 80064c8:	bd80      	pop	{r7, pc}
 80064ca:	bf00      	nop
 80064cc:	20000d84 	.word	0x20000d84
 80064d0:	20000d60 	.word	0x20000d60
 80064d4:	20000d14 	.word	0x20000d14
 80064d8:	20000d18 	.word	0x20000d18
 80064dc:	20000d74 	.word	0x20000d74
 80064e0:	20000d7c 	.word	0x20000d7c
 80064e4:	20000d64 	.word	0x20000d64
 80064e8:	2000088c 	.word	0x2000088c
 80064ec:	20000888 	.word	0x20000888
 80064f0:	20000d70 	.word	0x20000d70
 80064f4:	20000d6c 	.word	0x20000d6c

080064f8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80064f8:	b480      	push	{r7}
 80064fa:	b085      	sub	sp, #20
 80064fc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80064fe:	4b28      	ldr	r3, [pc, #160]	; (80065a0 <vTaskSwitchContext+0xa8>)
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d003      	beq.n	800650e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006506:	4b27      	ldr	r3, [pc, #156]	; (80065a4 <vTaskSwitchContext+0xac>)
 8006508:	2201      	movs	r2, #1
 800650a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800650c:	e041      	b.n	8006592 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800650e:	4b25      	ldr	r3, [pc, #148]	; (80065a4 <vTaskSwitchContext+0xac>)
 8006510:	2200      	movs	r2, #0
 8006512:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006514:	4b24      	ldr	r3, [pc, #144]	; (80065a8 <vTaskSwitchContext+0xb0>)
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	60fb      	str	r3, [r7, #12]
 800651a:	e010      	b.n	800653e <vTaskSwitchContext+0x46>
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d10a      	bne.n	8006538 <vTaskSwitchContext+0x40>
	__asm volatile
 8006522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006526:	f383 8811 	msr	BASEPRI, r3
 800652a:	f3bf 8f6f 	isb	sy
 800652e:	f3bf 8f4f 	dsb	sy
 8006532:	607b      	str	r3, [r7, #4]
}
 8006534:	bf00      	nop
 8006536:	e7fe      	b.n	8006536 <vTaskSwitchContext+0x3e>
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	3b01      	subs	r3, #1
 800653c:	60fb      	str	r3, [r7, #12]
 800653e:	491b      	ldr	r1, [pc, #108]	; (80065ac <vTaskSwitchContext+0xb4>)
 8006540:	68fa      	ldr	r2, [r7, #12]
 8006542:	4613      	mov	r3, r2
 8006544:	009b      	lsls	r3, r3, #2
 8006546:	4413      	add	r3, r2
 8006548:	009b      	lsls	r3, r3, #2
 800654a:	440b      	add	r3, r1
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d0e4      	beq.n	800651c <vTaskSwitchContext+0x24>
 8006552:	68fa      	ldr	r2, [r7, #12]
 8006554:	4613      	mov	r3, r2
 8006556:	009b      	lsls	r3, r3, #2
 8006558:	4413      	add	r3, r2
 800655a:	009b      	lsls	r3, r3, #2
 800655c:	4a13      	ldr	r2, [pc, #76]	; (80065ac <vTaskSwitchContext+0xb4>)
 800655e:	4413      	add	r3, r2
 8006560:	60bb      	str	r3, [r7, #8]
 8006562:	68bb      	ldr	r3, [r7, #8]
 8006564:	685b      	ldr	r3, [r3, #4]
 8006566:	685a      	ldr	r2, [r3, #4]
 8006568:	68bb      	ldr	r3, [r7, #8]
 800656a:	605a      	str	r2, [r3, #4]
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	685a      	ldr	r2, [r3, #4]
 8006570:	68bb      	ldr	r3, [r7, #8]
 8006572:	3308      	adds	r3, #8
 8006574:	429a      	cmp	r2, r3
 8006576:	d104      	bne.n	8006582 <vTaskSwitchContext+0x8a>
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	685b      	ldr	r3, [r3, #4]
 800657c:	685a      	ldr	r2, [r3, #4]
 800657e:	68bb      	ldr	r3, [r7, #8]
 8006580:	605a      	str	r2, [r3, #4]
 8006582:	68bb      	ldr	r3, [r7, #8]
 8006584:	685b      	ldr	r3, [r3, #4]
 8006586:	68db      	ldr	r3, [r3, #12]
 8006588:	4a09      	ldr	r2, [pc, #36]	; (80065b0 <vTaskSwitchContext+0xb8>)
 800658a:	6013      	str	r3, [r2, #0]
 800658c:	4a06      	ldr	r2, [pc, #24]	; (80065a8 <vTaskSwitchContext+0xb0>)
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	6013      	str	r3, [r2, #0]
}
 8006592:	bf00      	nop
 8006594:	3714      	adds	r7, #20
 8006596:	46bd      	mov	sp, r7
 8006598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659c:	4770      	bx	lr
 800659e:	bf00      	nop
 80065a0:	20000d84 	.word	0x20000d84
 80065a4:	20000d70 	.word	0x20000d70
 80065a8:	20000d64 	.word	0x20000d64
 80065ac:	2000088c 	.word	0x2000088c
 80065b0:	20000888 	.word	0x20000888

080065b4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b084      	sub	sp, #16
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
 80065bc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d10a      	bne.n	80065da <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80065c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065c8:	f383 8811 	msr	BASEPRI, r3
 80065cc:	f3bf 8f6f 	isb	sy
 80065d0:	f3bf 8f4f 	dsb	sy
 80065d4:	60fb      	str	r3, [r7, #12]
}
 80065d6:	bf00      	nop
 80065d8:	e7fe      	b.n	80065d8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80065da:	4b07      	ldr	r3, [pc, #28]	; (80065f8 <vTaskPlaceOnEventList+0x44>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	3318      	adds	r3, #24
 80065e0:	4619      	mov	r1, r3
 80065e2:	6878      	ldr	r0, [r7, #4]
 80065e4:	f7fe fdcd 	bl	8005182 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80065e8:	2101      	movs	r1, #1
 80065ea:	6838      	ldr	r0, [r7, #0]
 80065ec:	f000 fa7c 	bl	8006ae8 <prvAddCurrentTaskToDelayedList>
}
 80065f0:	bf00      	nop
 80065f2:	3710      	adds	r7, #16
 80065f4:	46bd      	mov	sp, r7
 80065f6:	bd80      	pop	{r7, pc}
 80065f8:	20000888 	.word	0x20000888

080065fc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b086      	sub	sp, #24
 8006600:	af00      	add	r7, sp, #0
 8006602:	60f8      	str	r0, [r7, #12]
 8006604:	60b9      	str	r1, [r7, #8]
 8006606:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d10a      	bne.n	8006624 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800660e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006612:	f383 8811 	msr	BASEPRI, r3
 8006616:	f3bf 8f6f 	isb	sy
 800661a:	f3bf 8f4f 	dsb	sy
 800661e:	617b      	str	r3, [r7, #20]
}
 8006620:	bf00      	nop
 8006622:	e7fe      	b.n	8006622 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006624:	4b0a      	ldr	r3, [pc, #40]	; (8006650 <vTaskPlaceOnEventListRestricted+0x54>)
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	3318      	adds	r3, #24
 800662a:	4619      	mov	r1, r3
 800662c:	68f8      	ldr	r0, [r7, #12]
 800662e:	f7fe fd84 	bl	800513a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d002      	beq.n	800663e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006638:	f04f 33ff 	mov.w	r3, #4294967295
 800663c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800663e:	6879      	ldr	r1, [r7, #4]
 8006640:	68b8      	ldr	r0, [r7, #8]
 8006642:	f000 fa51 	bl	8006ae8 <prvAddCurrentTaskToDelayedList>
	}
 8006646:	bf00      	nop
 8006648:	3718      	adds	r7, #24
 800664a:	46bd      	mov	sp, r7
 800664c:	bd80      	pop	{r7, pc}
 800664e:	bf00      	nop
 8006650:	20000888 	.word	0x20000888

08006654 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b086      	sub	sp, #24
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	68db      	ldr	r3, [r3, #12]
 8006660:	68db      	ldr	r3, [r3, #12]
 8006662:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006664:	693b      	ldr	r3, [r7, #16]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d10a      	bne.n	8006680 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800666a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800666e:	f383 8811 	msr	BASEPRI, r3
 8006672:	f3bf 8f6f 	isb	sy
 8006676:	f3bf 8f4f 	dsb	sy
 800667a:	60fb      	str	r3, [r7, #12]
}
 800667c:	bf00      	nop
 800667e:	e7fe      	b.n	800667e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006680:	693b      	ldr	r3, [r7, #16]
 8006682:	3318      	adds	r3, #24
 8006684:	4618      	mov	r0, r3
 8006686:	f7fe fdb5 	bl	80051f4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800668a:	4b1e      	ldr	r3, [pc, #120]	; (8006704 <xTaskRemoveFromEventList+0xb0>)
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d11d      	bne.n	80066ce <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006692:	693b      	ldr	r3, [r7, #16]
 8006694:	3304      	adds	r3, #4
 8006696:	4618      	mov	r0, r3
 8006698:	f7fe fdac 	bl	80051f4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800669c:	693b      	ldr	r3, [r7, #16]
 800669e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066a0:	4b19      	ldr	r3, [pc, #100]	; (8006708 <xTaskRemoveFromEventList+0xb4>)
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	429a      	cmp	r2, r3
 80066a6:	d903      	bls.n	80066b0 <xTaskRemoveFromEventList+0x5c>
 80066a8:	693b      	ldr	r3, [r7, #16]
 80066aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066ac:	4a16      	ldr	r2, [pc, #88]	; (8006708 <xTaskRemoveFromEventList+0xb4>)
 80066ae:	6013      	str	r3, [r2, #0]
 80066b0:	693b      	ldr	r3, [r7, #16]
 80066b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066b4:	4613      	mov	r3, r2
 80066b6:	009b      	lsls	r3, r3, #2
 80066b8:	4413      	add	r3, r2
 80066ba:	009b      	lsls	r3, r3, #2
 80066bc:	4a13      	ldr	r2, [pc, #76]	; (800670c <xTaskRemoveFromEventList+0xb8>)
 80066be:	441a      	add	r2, r3
 80066c0:	693b      	ldr	r3, [r7, #16]
 80066c2:	3304      	adds	r3, #4
 80066c4:	4619      	mov	r1, r3
 80066c6:	4610      	mov	r0, r2
 80066c8:	f7fe fd37 	bl	800513a <vListInsertEnd>
 80066cc:	e005      	b.n	80066da <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80066ce:	693b      	ldr	r3, [r7, #16]
 80066d0:	3318      	adds	r3, #24
 80066d2:	4619      	mov	r1, r3
 80066d4:	480e      	ldr	r0, [pc, #56]	; (8006710 <xTaskRemoveFromEventList+0xbc>)
 80066d6:	f7fe fd30 	bl	800513a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80066da:	693b      	ldr	r3, [r7, #16]
 80066dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066de:	4b0d      	ldr	r3, [pc, #52]	; (8006714 <xTaskRemoveFromEventList+0xc0>)
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066e4:	429a      	cmp	r2, r3
 80066e6:	d905      	bls.n	80066f4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80066e8:	2301      	movs	r3, #1
 80066ea:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80066ec:	4b0a      	ldr	r3, [pc, #40]	; (8006718 <xTaskRemoveFromEventList+0xc4>)
 80066ee:	2201      	movs	r2, #1
 80066f0:	601a      	str	r2, [r3, #0]
 80066f2:	e001      	b.n	80066f8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80066f4:	2300      	movs	r3, #0
 80066f6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80066f8:	697b      	ldr	r3, [r7, #20]
}
 80066fa:	4618      	mov	r0, r3
 80066fc:	3718      	adds	r7, #24
 80066fe:	46bd      	mov	sp, r7
 8006700:	bd80      	pop	{r7, pc}
 8006702:	bf00      	nop
 8006704:	20000d84 	.word	0x20000d84
 8006708:	20000d64 	.word	0x20000d64
 800670c:	2000088c 	.word	0x2000088c
 8006710:	20000d1c 	.word	0x20000d1c
 8006714:	20000888 	.word	0x20000888
 8006718:	20000d70 	.word	0x20000d70

0800671c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800671c:	b480      	push	{r7}
 800671e:	b083      	sub	sp, #12
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006724:	4b06      	ldr	r3, [pc, #24]	; (8006740 <vTaskInternalSetTimeOutState+0x24>)
 8006726:	681a      	ldr	r2, [r3, #0]
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800672c:	4b05      	ldr	r3, [pc, #20]	; (8006744 <vTaskInternalSetTimeOutState+0x28>)
 800672e:	681a      	ldr	r2, [r3, #0]
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	605a      	str	r2, [r3, #4]
}
 8006734:	bf00      	nop
 8006736:	370c      	adds	r7, #12
 8006738:	46bd      	mov	sp, r7
 800673a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673e:	4770      	bx	lr
 8006740:	20000d74 	.word	0x20000d74
 8006744:	20000d60 	.word	0x20000d60

08006748 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b088      	sub	sp, #32
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
 8006750:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d10a      	bne.n	800676e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800675c:	f383 8811 	msr	BASEPRI, r3
 8006760:	f3bf 8f6f 	isb	sy
 8006764:	f3bf 8f4f 	dsb	sy
 8006768:	613b      	str	r3, [r7, #16]
}
 800676a:	bf00      	nop
 800676c:	e7fe      	b.n	800676c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d10a      	bne.n	800678a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006774:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006778:	f383 8811 	msr	BASEPRI, r3
 800677c:	f3bf 8f6f 	isb	sy
 8006780:	f3bf 8f4f 	dsb	sy
 8006784:	60fb      	str	r3, [r7, #12]
}
 8006786:	bf00      	nop
 8006788:	e7fe      	b.n	8006788 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800678a:	f000 fe7b 	bl	8007484 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800678e:	4b1d      	ldr	r3, [pc, #116]	; (8006804 <xTaskCheckForTimeOut+0xbc>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	685b      	ldr	r3, [r3, #4]
 8006798:	69ba      	ldr	r2, [r7, #24]
 800679a:	1ad3      	subs	r3, r2, r3
 800679c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067a6:	d102      	bne.n	80067ae <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80067a8:	2300      	movs	r3, #0
 80067aa:	61fb      	str	r3, [r7, #28]
 80067ac:	e023      	b.n	80067f6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681a      	ldr	r2, [r3, #0]
 80067b2:	4b15      	ldr	r3, [pc, #84]	; (8006808 <xTaskCheckForTimeOut+0xc0>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	429a      	cmp	r2, r3
 80067b8:	d007      	beq.n	80067ca <xTaskCheckForTimeOut+0x82>
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	685b      	ldr	r3, [r3, #4]
 80067be:	69ba      	ldr	r2, [r7, #24]
 80067c0:	429a      	cmp	r2, r3
 80067c2:	d302      	bcc.n	80067ca <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80067c4:	2301      	movs	r3, #1
 80067c6:	61fb      	str	r3, [r7, #28]
 80067c8:	e015      	b.n	80067f6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	697a      	ldr	r2, [r7, #20]
 80067d0:	429a      	cmp	r2, r3
 80067d2:	d20b      	bcs.n	80067ec <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	681a      	ldr	r2, [r3, #0]
 80067d8:	697b      	ldr	r3, [r7, #20]
 80067da:	1ad2      	subs	r2, r2, r3
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80067e0:	6878      	ldr	r0, [r7, #4]
 80067e2:	f7ff ff9b 	bl	800671c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80067e6:	2300      	movs	r3, #0
 80067e8:	61fb      	str	r3, [r7, #28]
 80067ea:	e004      	b.n	80067f6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	2200      	movs	r2, #0
 80067f0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80067f2:	2301      	movs	r3, #1
 80067f4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80067f6:	f000 fe75 	bl	80074e4 <vPortExitCritical>

	return xReturn;
 80067fa:	69fb      	ldr	r3, [r7, #28]
}
 80067fc:	4618      	mov	r0, r3
 80067fe:	3720      	adds	r7, #32
 8006800:	46bd      	mov	sp, r7
 8006802:	bd80      	pop	{r7, pc}
 8006804:	20000d60 	.word	0x20000d60
 8006808:	20000d74 	.word	0x20000d74

0800680c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800680c:	b480      	push	{r7}
 800680e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006810:	4b03      	ldr	r3, [pc, #12]	; (8006820 <vTaskMissedYield+0x14>)
 8006812:	2201      	movs	r2, #1
 8006814:	601a      	str	r2, [r3, #0]
}
 8006816:	bf00      	nop
 8006818:	46bd      	mov	sp, r7
 800681a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681e:	4770      	bx	lr
 8006820:	20000d70 	.word	0x20000d70

08006824 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b082      	sub	sp, #8
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800682c:	f000 f852 	bl	80068d4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006830:	4b06      	ldr	r3, [pc, #24]	; (800684c <prvIdleTask+0x28>)
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	2b01      	cmp	r3, #1
 8006836:	d9f9      	bls.n	800682c <prvIdleTask+0x8>
			{
				taskYIELD();
 8006838:	4b05      	ldr	r3, [pc, #20]	; (8006850 <prvIdleTask+0x2c>)
 800683a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800683e:	601a      	str	r2, [r3, #0]
 8006840:	f3bf 8f4f 	dsb	sy
 8006844:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006848:	e7f0      	b.n	800682c <prvIdleTask+0x8>
 800684a:	bf00      	nop
 800684c:	2000088c 	.word	0x2000088c
 8006850:	e000ed04 	.word	0xe000ed04

08006854 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b082      	sub	sp, #8
 8006858:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800685a:	2300      	movs	r3, #0
 800685c:	607b      	str	r3, [r7, #4]
 800685e:	e00c      	b.n	800687a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006860:	687a      	ldr	r2, [r7, #4]
 8006862:	4613      	mov	r3, r2
 8006864:	009b      	lsls	r3, r3, #2
 8006866:	4413      	add	r3, r2
 8006868:	009b      	lsls	r3, r3, #2
 800686a:	4a12      	ldr	r2, [pc, #72]	; (80068b4 <prvInitialiseTaskLists+0x60>)
 800686c:	4413      	add	r3, r2
 800686e:	4618      	mov	r0, r3
 8006870:	f7fe fc36 	bl	80050e0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	3301      	adds	r3, #1
 8006878:	607b      	str	r3, [r7, #4]
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2b37      	cmp	r3, #55	; 0x37
 800687e:	d9ef      	bls.n	8006860 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006880:	480d      	ldr	r0, [pc, #52]	; (80068b8 <prvInitialiseTaskLists+0x64>)
 8006882:	f7fe fc2d 	bl	80050e0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006886:	480d      	ldr	r0, [pc, #52]	; (80068bc <prvInitialiseTaskLists+0x68>)
 8006888:	f7fe fc2a 	bl	80050e0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800688c:	480c      	ldr	r0, [pc, #48]	; (80068c0 <prvInitialiseTaskLists+0x6c>)
 800688e:	f7fe fc27 	bl	80050e0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006892:	480c      	ldr	r0, [pc, #48]	; (80068c4 <prvInitialiseTaskLists+0x70>)
 8006894:	f7fe fc24 	bl	80050e0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006898:	480b      	ldr	r0, [pc, #44]	; (80068c8 <prvInitialiseTaskLists+0x74>)
 800689a:	f7fe fc21 	bl	80050e0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800689e:	4b0b      	ldr	r3, [pc, #44]	; (80068cc <prvInitialiseTaskLists+0x78>)
 80068a0:	4a05      	ldr	r2, [pc, #20]	; (80068b8 <prvInitialiseTaskLists+0x64>)
 80068a2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80068a4:	4b0a      	ldr	r3, [pc, #40]	; (80068d0 <prvInitialiseTaskLists+0x7c>)
 80068a6:	4a05      	ldr	r2, [pc, #20]	; (80068bc <prvInitialiseTaskLists+0x68>)
 80068a8:	601a      	str	r2, [r3, #0]
}
 80068aa:	bf00      	nop
 80068ac:	3708      	adds	r7, #8
 80068ae:	46bd      	mov	sp, r7
 80068b0:	bd80      	pop	{r7, pc}
 80068b2:	bf00      	nop
 80068b4:	2000088c 	.word	0x2000088c
 80068b8:	20000cec 	.word	0x20000cec
 80068bc:	20000d00 	.word	0x20000d00
 80068c0:	20000d1c 	.word	0x20000d1c
 80068c4:	20000d30 	.word	0x20000d30
 80068c8:	20000d48 	.word	0x20000d48
 80068cc:	20000d14 	.word	0x20000d14
 80068d0:	20000d18 	.word	0x20000d18

080068d4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b082      	sub	sp, #8
 80068d8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80068da:	e019      	b.n	8006910 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80068dc:	f000 fdd2 	bl	8007484 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80068e0:	4b10      	ldr	r3, [pc, #64]	; (8006924 <prvCheckTasksWaitingTermination+0x50>)
 80068e2:	68db      	ldr	r3, [r3, #12]
 80068e4:	68db      	ldr	r3, [r3, #12]
 80068e6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	3304      	adds	r3, #4
 80068ec:	4618      	mov	r0, r3
 80068ee:	f7fe fc81 	bl	80051f4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80068f2:	4b0d      	ldr	r3, [pc, #52]	; (8006928 <prvCheckTasksWaitingTermination+0x54>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	3b01      	subs	r3, #1
 80068f8:	4a0b      	ldr	r2, [pc, #44]	; (8006928 <prvCheckTasksWaitingTermination+0x54>)
 80068fa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80068fc:	4b0b      	ldr	r3, [pc, #44]	; (800692c <prvCheckTasksWaitingTermination+0x58>)
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	3b01      	subs	r3, #1
 8006902:	4a0a      	ldr	r2, [pc, #40]	; (800692c <prvCheckTasksWaitingTermination+0x58>)
 8006904:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006906:	f000 fded 	bl	80074e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800690a:	6878      	ldr	r0, [r7, #4]
 800690c:	f000 f810 	bl	8006930 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006910:	4b06      	ldr	r3, [pc, #24]	; (800692c <prvCheckTasksWaitingTermination+0x58>)
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d1e1      	bne.n	80068dc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006918:	bf00      	nop
 800691a:	bf00      	nop
 800691c:	3708      	adds	r7, #8
 800691e:	46bd      	mov	sp, r7
 8006920:	bd80      	pop	{r7, pc}
 8006922:	bf00      	nop
 8006924:	20000d30 	.word	0x20000d30
 8006928:	20000d5c 	.word	0x20000d5c
 800692c:	20000d44 	.word	0x20000d44

08006930 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006930:	b580      	push	{r7, lr}
 8006932:	b084      	sub	sp, #16
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800693e:	2b00      	cmp	r3, #0
 8006940:	d108      	bne.n	8006954 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006946:	4618      	mov	r0, r3
 8006948:	f000 ff8a 	bl	8007860 <vPortFree>
				vPortFree( pxTCB );
 800694c:	6878      	ldr	r0, [r7, #4]
 800694e:	f000 ff87 	bl	8007860 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006952:	e018      	b.n	8006986 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800695a:	2b01      	cmp	r3, #1
 800695c:	d103      	bne.n	8006966 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	f000 ff7e 	bl	8007860 <vPortFree>
	}
 8006964:	e00f      	b.n	8006986 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800696c:	2b02      	cmp	r3, #2
 800696e:	d00a      	beq.n	8006986 <prvDeleteTCB+0x56>
	__asm volatile
 8006970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006974:	f383 8811 	msr	BASEPRI, r3
 8006978:	f3bf 8f6f 	isb	sy
 800697c:	f3bf 8f4f 	dsb	sy
 8006980:	60fb      	str	r3, [r7, #12]
}
 8006982:	bf00      	nop
 8006984:	e7fe      	b.n	8006984 <prvDeleteTCB+0x54>
	}
 8006986:	bf00      	nop
 8006988:	3710      	adds	r7, #16
 800698a:	46bd      	mov	sp, r7
 800698c:	bd80      	pop	{r7, pc}
	...

08006990 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006990:	b480      	push	{r7}
 8006992:	b083      	sub	sp, #12
 8006994:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006996:	4b0c      	ldr	r3, [pc, #48]	; (80069c8 <prvResetNextTaskUnblockTime+0x38>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d104      	bne.n	80069aa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80069a0:	4b0a      	ldr	r3, [pc, #40]	; (80069cc <prvResetNextTaskUnblockTime+0x3c>)
 80069a2:	f04f 32ff 	mov.w	r2, #4294967295
 80069a6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80069a8:	e008      	b.n	80069bc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80069aa:	4b07      	ldr	r3, [pc, #28]	; (80069c8 <prvResetNextTaskUnblockTime+0x38>)
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	68db      	ldr	r3, [r3, #12]
 80069b0:	68db      	ldr	r3, [r3, #12]
 80069b2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	685b      	ldr	r3, [r3, #4]
 80069b8:	4a04      	ldr	r2, [pc, #16]	; (80069cc <prvResetNextTaskUnblockTime+0x3c>)
 80069ba:	6013      	str	r3, [r2, #0]
}
 80069bc:	bf00      	nop
 80069be:	370c      	adds	r7, #12
 80069c0:	46bd      	mov	sp, r7
 80069c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c6:	4770      	bx	lr
 80069c8:	20000d14 	.word	0x20000d14
 80069cc:	20000d7c 	.word	0x20000d7c

080069d0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80069d0:	b480      	push	{r7}
 80069d2:	b083      	sub	sp, #12
 80069d4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80069d6:	4b0b      	ldr	r3, [pc, #44]	; (8006a04 <xTaskGetSchedulerState+0x34>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d102      	bne.n	80069e4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80069de:	2301      	movs	r3, #1
 80069e0:	607b      	str	r3, [r7, #4]
 80069e2:	e008      	b.n	80069f6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80069e4:	4b08      	ldr	r3, [pc, #32]	; (8006a08 <xTaskGetSchedulerState+0x38>)
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d102      	bne.n	80069f2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80069ec:	2302      	movs	r3, #2
 80069ee:	607b      	str	r3, [r7, #4]
 80069f0:	e001      	b.n	80069f6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80069f2:	2300      	movs	r3, #0
 80069f4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80069f6:	687b      	ldr	r3, [r7, #4]
	}
 80069f8:	4618      	mov	r0, r3
 80069fa:	370c      	adds	r7, #12
 80069fc:	46bd      	mov	sp, r7
 80069fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a02:	4770      	bx	lr
 8006a04:	20000d68 	.word	0x20000d68
 8006a08:	20000d84 	.word	0x20000d84

08006a0c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b086      	sub	sp, #24
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006a18:	2300      	movs	r3, #0
 8006a1a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d056      	beq.n	8006ad0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006a22:	4b2e      	ldr	r3, [pc, #184]	; (8006adc <xTaskPriorityDisinherit+0xd0>)
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	693a      	ldr	r2, [r7, #16]
 8006a28:	429a      	cmp	r2, r3
 8006a2a:	d00a      	beq.n	8006a42 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a30:	f383 8811 	msr	BASEPRI, r3
 8006a34:	f3bf 8f6f 	isb	sy
 8006a38:	f3bf 8f4f 	dsb	sy
 8006a3c:	60fb      	str	r3, [r7, #12]
}
 8006a3e:	bf00      	nop
 8006a40:	e7fe      	b.n	8006a40 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006a42:	693b      	ldr	r3, [r7, #16]
 8006a44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d10a      	bne.n	8006a60 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006a4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a4e:	f383 8811 	msr	BASEPRI, r3
 8006a52:	f3bf 8f6f 	isb	sy
 8006a56:	f3bf 8f4f 	dsb	sy
 8006a5a:	60bb      	str	r3, [r7, #8]
}
 8006a5c:	bf00      	nop
 8006a5e:	e7fe      	b.n	8006a5e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006a60:	693b      	ldr	r3, [r7, #16]
 8006a62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a64:	1e5a      	subs	r2, r3, #1
 8006a66:	693b      	ldr	r3, [r7, #16]
 8006a68:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006a6a:	693b      	ldr	r3, [r7, #16]
 8006a6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a6e:	693b      	ldr	r3, [r7, #16]
 8006a70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a72:	429a      	cmp	r2, r3
 8006a74:	d02c      	beq.n	8006ad0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006a76:	693b      	ldr	r3, [r7, #16]
 8006a78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d128      	bne.n	8006ad0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006a7e:	693b      	ldr	r3, [r7, #16]
 8006a80:	3304      	adds	r3, #4
 8006a82:	4618      	mov	r0, r3
 8006a84:	f7fe fbb6 	bl	80051f4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006a88:	693b      	ldr	r3, [r7, #16]
 8006a8a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006a8c:	693b      	ldr	r3, [r7, #16]
 8006a8e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a90:	693b      	ldr	r3, [r7, #16]
 8006a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a94:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006a98:	693b      	ldr	r3, [r7, #16]
 8006a9a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006a9c:	693b      	ldr	r3, [r7, #16]
 8006a9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006aa0:	4b0f      	ldr	r3, [pc, #60]	; (8006ae0 <xTaskPriorityDisinherit+0xd4>)
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	429a      	cmp	r2, r3
 8006aa6:	d903      	bls.n	8006ab0 <xTaskPriorityDisinherit+0xa4>
 8006aa8:	693b      	ldr	r3, [r7, #16]
 8006aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aac:	4a0c      	ldr	r2, [pc, #48]	; (8006ae0 <xTaskPriorityDisinherit+0xd4>)
 8006aae:	6013      	str	r3, [r2, #0]
 8006ab0:	693b      	ldr	r3, [r7, #16]
 8006ab2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ab4:	4613      	mov	r3, r2
 8006ab6:	009b      	lsls	r3, r3, #2
 8006ab8:	4413      	add	r3, r2
 8006aba:	009b      	lsls	r3, r3, #2
 8006abc:	4a09      	ldr	r2, [pc, #36]	; (8006ae4 <xTaskPriorityDisinherit+0xd8>)
 8006abe:	441a      	add	r2, r3
 8006ac0:	693b      	ldr	r3, [r7, #16]
 8006ac2:	3304      	adds	r3, #4
 8006ac4:	4619      	mov	r1, r3
 8006ac6:	4610      	mov	r0, r2
 8006ac8:	f7fe fb37 	bl	800513a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006acc:	2301      	movs	r3, #1
 8006ace:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006ad0:	697b      	ldr	r3, [r7, #20]
	}
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	3718      	adds	r7, #24
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	bd80      	pop	{r7, pc}
 8006ada:	bf00      	nop
 8006adc:	20000888 	.word	0x20000888
 8006ae0:	20000d64 	.word	0x20000d64
 8006ae4:	2000088c 	.word	0x2000088c

08006ae8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b084      	sub	sp, #16
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
 8006af0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006af2:	4b21      	ldr	r3, [pc, #132]	; (8006b78 <prvAddCurrentTaskToDelayedList+0x90>)
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006af8:	4b20      	ldr	r3, [pc, #128]	; (8006b7c <prvAddCurrentTaskToDelayedList+0x94>)
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	3304      	adds	r3, #4
 8006afe:	4618      	mov	r0, r3
 8006b00:	f7fe fb78 	bl	80051f4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b0a:	d10a      	bne.n	8006b22 <prvAddCurrentTaskToDelayedList+0x3a>
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d007      	beq.n	8006b22 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006b12:	4b1a      	ldr	r3, [pc, #104]	; (8006b7c <prvAddCurrentTaskToDelayedList+0x94>)
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	3304      	adds	r3, #4
 8006b18:	4619      	mov	r1, r3
 8006b1a:	4819      	ldr	r0, [pc, #100]	; (8006b80 <prvAddCurrentTaskToDelayedList+0x98>)
 8006b1c:	f7fe fb0d 	bl	800513a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006b20:	e026      	b.n	8006b70 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006b22:	68fa      	ldr	r2, [r7, #12]
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	4413      	add	r3, r2
 8006b28:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006b2a:	4b14      	ldr	r3, [pc, #80]	; (8006b7c <prvAddCurrentTaskToDelayedList+0x94>)
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	68ba      	ldr	r2, [r7, #8]
 8006b30:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006b32:	68ba      	ldr	r2, [r7, #8]
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	429a      	cmp	r2, r3
 8006b38:	d209      	bcs.n	8006b4e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006b3a:	4b12      	ldr	r3, [pc, #72]	; (8006b84 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006b3c:	681a      	ldr	r2, [r3, #0]
 8006b3e:	4b0f      	ldr	r3, [pc, #60]	; (8006b7c <prvAddCurrentTaskToDelayedList+0x94>)
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	3304      	adds	r3, #4
 8006b44:	4619      	mov	r1, r3
 8006b46:	4610      	mov	r0, r2
 8006b48:	f7fe fb1b 	bl	8005182 <vListInsert>
}
 8006b4c:	e010      	b.n	8006b70 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006b4e:	4b0e      	ldr	r3, [pc, #56]	; (8006b88 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006b50:	681a      	ldr	r2, [r3, #0]
 8006b52:	4b0a      	ldr	r3, [pc, #40]	; (8006b7c <prvAddCurrentTaskToDelayedList+0x94>)
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	3304      	adds	r3, #4
 8006b58:	4619      	mov	r1, r3
 8006b5a:	4610      	mov	r0, r2
 8006b5c:	f7fe fb11 	bl	8005182 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006b60:	4b0a      	ldr	r3, [pc, #40]	; (8006b8c <prvAddCurrentTaskToDelayedList+0xa4>)
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	68ba      	ldr	r2, [r7, #8]
 8006b66:	429a      	cmp	r2, r3
 8006b68:	d202      	bcs.n	8006b70 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006b6a:	4a08      	ldr	r2, [pc, #32]	; (8006b8c <prvAddCurrentTaskToDelayedList+0xa4>)
 8006b6c:	68bb      	ldr	r3, [r7, #8]
 8006b6e:	6013      	str	r3, [r2, #0]
}
 8006b70:	bf00      	nop
 8006b72:	3710      	adds	r7, #16
 8006b74:	46bd      	mov	sp, r7
 8006b76:	bd80      	pop	{r7, pc}
 8006b78:	20000d60 	.word	0x20000d60
 8006b7c:	20000888 	.word	0x20000888
 8006b80:	20000d48 	.word	0x20000d48
 8006b84:	20000d18 	.word	0x20000d18
 8006b88:	20000d14 	.word	0x20000d14
 8006b8c:	20000d7c 	.word	0x20000d7c

08006b90 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b08a      	sub	sp, #40	; 0x28
 8006b94:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006b96:	2300      	movs	r3, #0
 8006b98:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006b9a:	f000 fb07 	bl	80071ac <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006b9e:	4b1c      	ldr	r3, [pc, #112]	; (8006c10 <xTimerCreateTimerTask+0x80>)
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d021      	beq.n	8006bea <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006baa:	2300      	movs	r3, #0
 8006bac:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006bae:	1d3a      	adds	r2, r7, #4
 8006bb0:	f107 0108 	add.w	r1, r7, #8
 8006bb4:	f107 030c 	add.w	r3, r7, #12
 8006bb8:	4618      	mov	r0, r3
 8006bba:	f7fe fa77 	bl	80050ac <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006bbe:	6879      	ldr	r1, [r7, #4]
 8006bc0:	68bb      	ldr	r3, [r7, #8]
 8006bc2:	68fa      	ldr	r2, [r7, #12]
 8006bc4:	9202      	str	r2, [sp, #8]
 8006bc6:	9301      	str	r3, [sp, #4]
 8006bc8:	2302      	movs	r3, #2
 8006bca:	9300      	str	r3, [sp, #0]
 8006bcc:	2300      	movs	r3, #0
 8006bce:	460a      	mov	r2, r1
 8006bd0:	4910      	ldr	r1, [pc, #64]	; (8006c14 <xTimerCreateTimerTask+0x84>)
 8006bd2:	4811      	ldr	r0, [pc, #68]	; (8006c18 <xTimerCreateTimerTask+0x88>)
 8006bd4:	f7ff f8de 	bl	8005d94 <xTaskCreateStatic>
 8006bd8:	4603      	mov	r3, r0
 8006bda:	4a10      	ldr	r2, [pc, #64]	; (8006c1c <xTimerCreateTimerTask+0x8c>)
 8006bdc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006bde:	4b0f      	ldr	r3, [pc, #60]	; (8006c1c <xTimerCreateTimerTask+0x8c>)
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d001      	beq.n	8006bea <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006be6:	2301      	movs	r3, #1
 8006be8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006bea:	697b      	ldr	r3, [r7, #20]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d10a      	bne.n	8006c06 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bf4:	f383 8811 	msr	BASEPRI, r3
 8006bf8:	f3bf 8f6f 	isb	sy
 8006bfc:	f3bf 8f4f 	dsb	sy
 8006c00:	613b      	str	r3, [r7, #16]
}
 8006c02:	bf00      	nop
 8006c04:	e7fe      	b.n	8006c04 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006c06:	697b      	ldr	r3, [r7, #20]
}
 8006c08:	4618      	mov	r0, r3
 8006c0a:	3718      	adds	r7, #24
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	bd80      	pop	{r7, pc}
 8006c10:	20000db8 	.word	0x20000db8
 8006c14:	08008464 	.word	0x08008464
 8006c18:	08006d55 	.word	0x08006d55
 8006c1c:	20000dbc 	.word	0x20000dbc

08006c20 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b08a      	sub	sp, #40	; 0x28
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	60f8      	str	r0, [r7, #12]
 8006c28:	60b9      	str	r1, [r7, #8]
 8006c2a:	607a      	str	r2, [r7, #4]
 8006c2c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006c2e:	2300      	movs	r3, #0
 8006c30:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d10a      	bne.n	8006c4e <xTimerGenericCommand+0x2e>
	__asm volatile
 8006c38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c3c:	f383 8811 	msr	BASEPRI, r3
 8006c40:	f3bf 8f6f 	isb	sy
 8006c44:	f3bf 8f4f 	dsb	sy
 8006c48:	623b      	str	r3, [r7, #32]
}
 8006c4a:	bf00      	nop
 8006c4c:	e7fe      	b.n	8006c4c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006c4e:	4b1a      	ldr	r3, [pc, #104]	; (8006cb8 <xTimerGenericCommand+0x98>)
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d02a      	beq.n	8006cac <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006c56:	68bb      	ldr	r3, [r7, #8]
 8006c58:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006c62:	68bb      	ldr	r3, [r7, #8]
 8006c64:	2b05      	cmp	r3, #5
 8006c66:	dc18      	bgt.n	8006c9a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006c68:	f7ff feb2 	bl	80069d0 <xTaskGetSchedulerState>
 8006c6c:	4603      	mov	r3, r0
 8006c6e:	2b02      	cmp	r3, #2
 8006c70:	d109      	bne.n	8006c86 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006c72:	4b11      	ldr	r3, [pc, #68]	; (8006cb8 <xTimerGenericCommand+0x98>)
 8006c74:	6818      	ldr	r0, [r3, #0]
 8006c76:	f107 0110 	add.w	r1, r7, #16
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c7e:	f7fe fc21 	bl	80054c4 <xQueueGenericSend>
 8006c82:	6278      	str	r0, [r7, #36]	; 0x24
 8006c84:	e012      	b.n	8006cac <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006c86:	4b0c      	ldr	r3, [pc, #48]	; (8006cb8 <xTimerGenericCommand+0x98>)
 8006c88:	6818      	ldr	r0, [r3, #0]
 8006c8a:	f107 0110 	add.w	r1, r7, #16
 8006c8e:	2300      	movs	r3, #0
 8006c90:	2200      	movs	r2, #0
 8006c92:	f7fe fc17 	bl	80054c4 <xQueueGenericSend>
 8006c96:	6278      	str	r0, [r7, #36]	; 0x24
 8006c98:	e008      	b.n	8006cac <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006c9a:	4b07      	ldr	r3, [pc, #28]	; (8006cb8 <xTimerGenericCommand+0x98>)
 8006c9c:	6818      	ldr	r0, [r3, #0]
 8006c9e:	f107 0110 	add.w	r1, r7, #16
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	683a      	ldr	r2, [r7, #0]
 8006ca6:	f7fe fd0b 	bl	80056c0 <xQueueGenericSendFromISR>
 8006caa:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006cae:	4618      	mov	r0, r3
 8006cb0:	3728      	adds	r7, #40	; 0x28
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	bd80      	pop	{r7, pc}
 8006cb6:	bf00      	nop
 8006cb8:	20000db8 	.word	0x20000db8

08006cbc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b088      	sub	sp, #32
 8006cc0:	af02      	add	r7, sp, #8
 8006cc2:	6078      	str	r0, [r7, #4]
 8006cc4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006cc6:	4b22      	ldr	r3, [pc, #136]	; (8006d50 <prvProcessExpiredTimer+0x94>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	68db      	ldr	r3, [r3, #12]
 8006ccc:	68db      	ldr	r3, [r3, #12]
 8006cce:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006cd0:	697b      	ldr	r3, [r7, #20]
 8006cd2:	3304      	adds	r3, #4
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	f7fe fa8d 	bl	80051f4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006cda:	697b      	ldr	r3, [r7, #20]
 8006cdc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006ce0:	f003 0304 	and.w	r3, r3, #4
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d022      	beq.n	8006d2e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006ce8:	697b      	ldr	r3, [r7, #20]
 8006cea:	699a      	ldr	r2, [r3, #24]
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	18d1      	adds	r1, r2, r3
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	683a      	ldr	r2, [r7, #0]
 8006cf4:	6978      	ldr	r0, [r7, #20]
 8006cf6:	f000 f8d1 	bl	8006e9c <prvInsertTimerInActiveList>
 8006cfa:	4603      	mov	r3, r0
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d01f      	beq.n	8006d40 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006d00:	2300      	movs	r3, #0
 8006d02:	9300      	str	r3, [sp, #0]
 8006d04:	2300      	movs	r3, #0
 8006d06:	687a      	ldr	r2, [r7, #4]
 8006d08:	2100      	movs	r1, #0
 8006d0a:	6978      	ldr	r0, [r7, #20]
 8006d0c:	f7ff ff88 	bl	8006c20 <xTimerGenericCommand>
 8006d10:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006d12:	693b      	ldr	r3, [r7, #16]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d113      	bne.n	8006d40 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8006d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d1c:	f383 8811 	msr	BASEPRI, r3
 8006d20:	f3bf 8f6f 	isb	sy
 8006d24:	f3bf 8f4f 	dsb	sy
 8006d28:	60fb      	str	r3, [r7, #12]
}
 8006d2a:	bf00      	nop
 8006d2c:	e7fe      	b.n	8006d2c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006d2e:	697b      	ldr	r3, [r7, #20]
 8006d30:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006d34:	f023 0301 	bic.w	r3, r3, #1
 8006d38:	b2da      	uxtb	r2, r3
 8006d3a:	697b      	ldr	r3, [r7, #20]
 8006d3c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006d40:	697b      	ldr	r3, [r7, #20]
 8006d42:	6a1b      	ldr	r3, [r3, #32]
 8006d44:	6978      	ldr	r0, [r7, #20]
 8006d46:	4798      	blx	r3
}
 8006d48:	bf00      	nop
 8006d4a:	3718      	adds	r7, #24
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	bd80      	pop	{r7, pc}
 8006d50:	20000db0 	.word	0x20000db0

08006d54 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b084      	sub	sp, #16
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006d5c:	f107 0308 	add.w	r3, r7, #8
 8006d60:	4618      	mov	r0, r3
 8006d62:	f000 f857 	bl	8006e14 <prvGetNextExpireTime>
 8006d66:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006d68:	68bb      	ldr	r3, [r7, #8]
 8006d6a:	4619      	mov	r1, r3
 8006d6c:	68f8      	ldr	r0, [r7, #12]
 8006d6e:	f000 f803 	bl	8006d78 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006d72:	f000 f8d5 	bl	8006f20 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006d76:	e7f1      	b.n	8006d5c <prvTimerTask+0x8>

08006d78 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b084      	sub	sp, #16
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
 8006d80:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006d82:	f7ff fa43 	bl	800620c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006d86:	f107 0308 	add.w	r3, r7, #8
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	f000 f866 	bl	8006e5c <prvSampleTimeNow>
 8006d90:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006d92:	68bb      	ldr	r3, [r7, #8]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d130      	bne.n	8006dfa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d10a      	bne.n	8006db4 <prvProcessTimerOrBlockTask+0x3c>
 8006d9e:	687a      	ldr	r2, [r7, #4]
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	429a      	cmp	r2, r3
 8006da4:	d806      	bhi.n	8006db4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006da6:	f7ff fa3f 	bl	8006228 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006daa:	68f9      	ldr	r1, [r7, #12]
 8006dac:	6878      	ldr	r0, [r7, #4]
 8006dae:	f7ff ff85 	bl	8006cbc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006db2:	e024      	b.n	8006dfe <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d008      	beq.n	8006dcc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006dba:	4b13      	ldr	r3, [pc, #76]	; (8006e08 <prvProcessTimerOrBlockTask+0x90>)
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d101      	bne.n	8006dc8 <prvProcessTimerOrBlockTask+0x50>
 8006dc4:	2301      	movs	r3, #1
 8006dc6:	e000      	b.n	8006dca <prvProcessTimerOrBlockTask+0x52>
 8006dc8:	2300      	movs	r3, #0
 8006dca:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006dcc:	4b0f      	ldr	r3, [pc, #60]	; (8006e0c <prvProcessTimerOrBlockTask+0x94>)
 8006dce:	6818      	ldr	r0, [r3, #0]
 8006dd0:	687a      	ldr	r2, [r7, #4]
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	1ad3      	subs	r3, r2, r3
 8006dd6:	683a      	ldr	r2, [r7, #0]
 8006dd8:	4619      	mov	r1, r3
 8006dda:	f7fe ffa7 	bl	8005d2c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006dde:	f7ff fa23 	bl	8006228 <xTaskResumeAll>
 8006de2:	4603      	mov	r3, r0
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d10a      	bne.n	8006dfe <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006de8:	4b09      	ldr	r3, [pc, #36]	; (8006e10 <prvProcessTimerOrBlockTask+0x98>)
 8006dea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006dee:	601a      	str	r2, [r3, #0]
 8006df0:	f3bf 8f4f 	dsb	sy
 8006df4:	f3bf 8f6f 	isb	sy
}
 8006df8:	e001      	b.n	8006dfe <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006dfa:	f7ff fa15 	bl	8006228 <xTaskResumeAll>
}
 8006dfe:	bf00      	nop
 8006e00:	3710      	adds	r7, #16
 8006e02:	46bd      	mov	sp, r7
 8006e04:	bd80      	pop	{r7, pc}
 8006e06:	bf00      	nop
 8006e08:	20000db4 	.word	0x20000db4
 8006e0c:	20000db8 	.word	0x20000db8
 8006e10:	e000ed04 	.word	0xe000ed04

08006e14 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006e14:	b480      	push	{r7}
 8006e16:	b085      	sub	sp, #20
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006e1c:	4b0e      	ldr	r3, [pc, #56]	; (8006e58 <prvGetNextExpireTime+0x44>)
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d101      	bne.n	8006e2a <prvGetNextExpireTime+0x16>
 8006e26:	2201      	movs	r2, #1
 8006e28:	e000      	b.n	8006e2c <prvGetNextExpireTime+0x18>
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d105      	bne.n	8006e44 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006e38:	4b07      	ldr	r3, [pc, #28]	; (8006e58 <prvGetNextExpireTime+0x44>)
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	68db      	ldr	r3, [r3, #12]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	60fb      	str	r3, [r7, #12]
 8006e42:	e001      	b.n	8006e48 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006e44:	2300      	movs	r3, #0
 8006e46:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006e48:	68fb      	ldr	r3, [r7, #12]
}
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	3714      	adds	r7, #20
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e54:	4770      	bx	lr
 8006e56:	bf00      	nop
 8006e58:	20000db0 	.word	0x20000db0

08006e5c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b084      	sub	sp, #16
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006e64:	f7ff fa7e 	bl	8006364 <xTaskGetTickCount>
 8006e68:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006e6a:	4b0b      	ldr	r3, [pc, #44]	; (8006e98 <prvSampleTimeNow+0x3c>)
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	68fa      	ldr	r2, [r7, #12]
 8006e70:	429a      	cmp	r2, r3
 8006e72:	d205      	bcs.n	8006e80 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006e74:	f000 f936 	bl	80070e4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2201      	movs	r2, #1
 8006e7c:	601a      	str	r2, [r3, #0]
 8006e7e:	e002      	b.n	8006e86 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2200      	movs	r2, #0
 8006e84:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006e86:	4a04      	ldr	r2, [pc, #16]	; (8006e98 <prvSampleTimeNow+0x3c>)
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
}
 8006e8e:	4618      	mov	r0, r3
 8006e90:	3710      	adds	r7, #16
 8006e92:	46bd      	mov	sp, r7
 8006e94:	bd80      	pop	{r7, pc}
 8006e96:	bf00      	nop
 8006e98:	20000dc0 	.word	0x20000dc0

08006e9c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b086      	sub	sp, #24
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	60f8      	str	r0, [r7, #12]
 8006ea4:	60b9      	str	r1, [r7, #8]
 8006ea6:	607a      	str	r2, [r7, #4]
 8006ea8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006eaa:	2300      	movs	r3, #0
 8006eac:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	68ba      	ldr	r2, [r7, #8]
 8006eb2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	68fa      	ldr	r2, [r7, #12]
 8006eb8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006eba:	68ba      	ldr	r2, [r7, #8]
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	429a      	cmp	r2, r3
 8006ec0:	d812      	bhi.n	8006ee8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ec2:	687a      	ldr	r2, [r7, #4]
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	1ad2      	subs	r2, r2, r3
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	699b      	ldr	r3, [r3, #24]
 8006ecc:	429a      	cmp	r2, r3
 8006ece:	d302      	bcc.n	8006ed6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006ed0:	2301      	movs	r3, #1
 8006ed2:	617b      	str	r3, [r7, #20]
 8006ed4:	e01b      	b.n	8006f0e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006ed6:	4b10      	ldr	r3, [pc, #64]	; (8006f18 <prvInsertTimerInActiveList+0x7c>)
 8006ed8:	681a      	ldr	r2, [r3, #0]
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	3304      	adds	r3, #4
 8006ede:	4619      	mov	r1, r3
 8006ee0:	4610      	mov	r0, r2
 8006ee2:	f7fe f94e 	bl	8005182 <vListInsert>
 8006ee6:	e012      	b.n	8006f0e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006ee8:	687a      	ldr	r2, [r7, #4]
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	429a      	cmp	r2, r3
 8006eee:	d206      	bcs.n	8006efe <prvInsertTimerInActiveList+0x62>
 8006ef0:	68ba      	ldr	r2, [r7, #8]
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	429a      	cmp	r2, r3
 8006ef6:	d302      	bcc.n	8006efe <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006ef8:	2301      	movs	r3, #1
 8006efa:	617b      	str	r3, [r7, #20]
 8006efc:	e007      	b.n	8006f0e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006efe:	4b07      	ldr	r3, [pc, #28]	; (8006f1c <prvInsertTimerInActiveList+0x80>)
 8006f00:	681a      	ldr	r2, [r3, #0]
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	3304      	adds	r3, #4
 8006f06:	4619      	mov	r1, r3
 8006f08:	4610      	mov	r0, r2
 8006f0a:	f7fe f93a 	bl	8005182 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006f0e:	697b      	ldr	r3, [r7, #20]
}
 8006f10:	4618      	mov	r0, r3
 8006f12:	3718      	adds	r7, #24
 8006f14:	46bd      	mov	sp, r7
 8006f16:	bd80      	pop	{r7, pc}
 8006f18:	20000db4 	.word	0x20000db4
 8006f1c:	20000db0 	.word	0x20000db0

08006f20 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b08e      	sub	sp, #56	; 0x38
 8006f24:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006f26:	e0ca      	b.n	80070be <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	da18      	bge.n	8006f60 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006f2e:	1d3b      	adds	r3, r7, #4
 8006f30:	3304      	adds	r3, #4
 8006f32:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006f34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d10a      	bne.n	8006f50 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006f3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f3e:	f383 8811 	msr	BASEPRI, r3
 8006f42:	f3bf 8f6f 	isb	sy
 8006f46:	f3bf 8f4f 	dsb	sy
 8006f4a:	61fb      	str	r3, [r7, #28]
}
 8006f4c:	bf00      	nop
 8006f4e:	e7fe      	b.n	8006f4e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006f50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f56:	6850      	ldr	r0, [r2, #4]
 8006f58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f5a:	6892      	ldr	r2, [r2, #8]
 8006f5c:	4611      	mov	r1, r2
 8006f5e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	f2c0 80ab 	blt.w	80070be <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f6e:	695b      	ldr	r3, [r3, #20]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d004      	beq.n	8006f7e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f76:	3304      	adds	r3, #4
 8006f78:	4618      	mov	r0, r3
 8006f7a:	f7fe f93b 	bl	80051f4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006f7e:	463b      	mov	r3, r7
 8006f80:	4618      	mov	r0, r3
 8006f82:	f7ff ff6b 	bl	8006e5c <prvSampleTimeNow>
 8006f86:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2b09      	cmp	r3, #9
 8006f8c:	f200 8096 	bhi.w	80070bc <prvProcessReceivedCommands+0x19c>
 8006f90:	a201      	add	r2, pc, #4	; (adr r2, 8006f98 <prvProcessReceivedCommands+0x78>)
 8006f92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f96:	bf00      	nop
 8006f98:	08006fc1 	.word	0x08006fc1
 8006f9c:	08006fc1 	.word	0x08006fc1
 8006fa0:	08006fc1 	.word	0x08006fc1
 8006fa4:	08007035 	.word	0x08007035
 8006fa8:	08007049 	.word	0x08007049
 8006fac:	08007093 	.word	0x08007093
 8006fb0:	08006fc1 	.word	0x08006fc1
 8006fb4:	08006fc1 	.word	0x08006fc1
 8006fb8:	08007035 	.word	0x08007035
 8006fbc:	08007049 	.word	0x08007049
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fc2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006fc6:	f043 0301 	orr.w	r3, r3, #1
 8006fca:	b2da      	uxtb	r2, r3
 8006fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006fd2:	68ba      	ldr	r2, [r7, #8]
 8006fd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fd6:	699b      	ldr	r3, [r3, #24]
 8006fd8:	18d1      	adds	r1, r2, r3
 8006fda:	68bb      	ldr	r3, [r7, #8]
 8006fdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006fde:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006fe0:	f7ff ff5c 	bl	8006e9c <prvInsertTimerInActiveList>
 8006fe4:	4603      	mov	r3, r0
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d069      	beq.n	80070be <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fec:	6a1b      	ldr	r3, [r3, #32]
 8006fee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ff0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ff4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006ff8:	f003 0304 	and.w	r3, r3, #4
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d05e      	beq.n	80070be <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007000:	68ba      	ldr	r2, [r7, #8]
 8007002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007004:	699b      	ldr	r3, [r3, #24]
 8007006:	441a      	add	r2, r3
 8007008:	2300      	movs	r3, #0
 800700a:	9300      	str	r3, [sp, #0]
 800700c:	2300      	movs	r3, #0
 800700e:	2100      	movs	r1, #0
 8007010:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007012:	f7ff fe05 	bl	8006c20 <xTimerGenericCommand>
 8007016:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007018:	6a3b      	ldr	r3, [r7, #32]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d14f      	bne.n	80070be <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800701e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007022:	f383 8811 	msr	BASEPRI, r3
 8007026:	f3bf 8f6f 	isb	sy
 800702a:	f3bf 8f4f 	dsb	sy
 800702e:	61bb      	str	r3, [r7, #24]
}
 8007030:	bf00      	nop
 8007032:	e7fe      	b.n	8007032 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007036:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800703a:	f023 0301 	bic.w	r3, r3, #1
 800703e:	b2da      	uxtb	r2, r3
 8007040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007042:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8007046:	e03a      	b.n	80070be <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800704a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800704e:	f043 0301 	orr.w	r3, r3, #1
 8007052:	b2da      	uxtb	r2, r3
 8007054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007056:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800705a:	68ba      	ldr	r2, [r7, #8]
 800705c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800705e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007062:	699b      	ldr	r3, [r3, #24]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d10a      	bne.n	800707e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8007068:	f04f 0350 	mov.w	r3, #80	; 0x50
 800706c:	f383 8811 	msr	BASEPRI, r3
 8007070:	f3bf 8f6f 	isb	sy
 8007074:	f3bf 8f4f 	dsb	sy
 8007078:	617b      	str	r3, [r7, #20]
}
 800707a:	bf00      	nop
 800707c:	e7fe      	b.n	800707c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800707e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007080:	699a      	ldr	r2, [r3, #24]
 8007082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007084:	18d1      	adds	r1, r2, r3
 8007086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007088:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800708a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800708c:	f7ff ff06 	bl	8006e9c <prvInsertTimerInActiveList>
					break;
 8007090:	e015      	b.n	80070be <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007094:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007098:	f003 0302 	and.w	r3, r3, #2
 800709c:	2b00      	cmp	r3, #0
 800709e:	d103      	bne.n	80070a8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80070a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80070a2:	f000 fbdd 	bl	8007860 <vPortFree>
 80070a6:	e00a      	b.n	80070be <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80070a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80070ae:	f023 0301 	bic.w	r3, r3, #1
 80070b2:	b2da      	uxtb	r2, r3
 80070b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80070ba:	e000      	b.n	80070be <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 80070bc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80070be:	4b08      	ldr	r3, [pc, #32]	; (80070e0 <prvProcessReceivedCommands+0x1c0>)
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	1d39      	adds	r1, r7, #4
 80070c4:	2200      	movs	r2, #0
 80070c6:	4618      	mov	r0, r3
 80070c8:	f7fe fb96 	bl	80057f8 <xQueueReceive>
 80070cc:	4603      	mov	r3, r0
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	f47f af2a 	bne.w	8006f28 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80070d4:	bf00      	nop
 80070d6:	bf00      	nop
 80070d8:	3730      	adds	r7, #48	; 0x30
 80070da:	46bd      	mov	sp, r7
 80070dc:	bd80      	pop	{r7, pc}
 80070de:	bf00      	nop
 80070e0:	20000db8 	.word	0x20000db8

080070e4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b088      	sub	sp, #32
 80070e8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80070ea:	e048      	b.n	800717e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80070ec:	4b2d      	ldr	r3, [pc, #180]	; (80071a4 <prvSwitchTimerLists+0xc0>)
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	68db      	ldr	r3, [r3, #12]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80070f6:	4b2b      	ldr	r3, [pc, #172]	; (80071a4 <prvSwitchTimerLists+0xc0>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	68db      	ldr	r3, [r3, #12]
 80070fc:	68db      	ldr	r3, [r3, #12]
 80070fe:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	3304      	adds	r3, #4
 8007104:	4618      	mov	r0, r3
 8007106:	f7fe f875 	bl	80051f4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	6a1b      	ldr	r3, [r3, #32]
 800710e:	68f8      	ldr	r0, [r7, #12]
 8007110:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007118:	f003 0304 	and.w	r3, r3, #4
 800711c:	2b00      	cmp	r3, #0
 800711e:	d02e      	beq.n	800717e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	699b      	ldr	r3, [r3, #24]
 8007124:	693a      	ldr	r2, [r7, #16]
 8007126:	4413      	add	r3, r2
 8007128:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800712a:	68ba      	ldr	r2, [r7, #8]
 800712c:	693b      	ldr	r3, [r7, #16]
 800712e:	429a      	cmp	r2, r3
 8007130:	d90e      	bls.n	8007150 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	68ba      	ldr	r2, [r7, #8]
 8007136:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	68fa      	ldr	r2, [r7, #12]
 800713c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800713e:	4b19      	ldr	r3, [pc, #100]	; (80071a4 <prvSwitchTimerLists+0xc0>)
 8007140:	681a      	ldr	r2, [r3, #0]
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	3304      	adds	r3, #4
 8007146:	4619      	mov	r1, r3
 8007148:	4610      	mov	r0, r2
 800714a:	f7fe f81a 	bl	8005182 <vListInsert>
 800714e:	e016      	b.n	800717e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007150:	2300      	movs	r3, #0
 8007152:	9300      	str	r3, [sp, #0]
 8007154:	2300      	movs	r3, #0
 8007156:	693a      	ldr	r2, [r7, #16]
 8007158:	2100      	movs	r1, #0
 800715a:	68f8      	ldr	r0, [r7, #12]
 800715c:	f7ff fd60 	bl	8006c20 <xTimerGenericCommand>
 8007160:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d10a      	bne.n	800717e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8007168:	f04f 0350 	mov.w	r3, #80	; 0x50
 800716c:	f383 8811 	msr	BASEPRI, r3
 8007170:	f3bf 8f6f 	isb	sy
 8007174:	f3bf 8f4f 	dsb	sy
 8007178:	603b      	str	r3, [r7, #0]
}
 800717a:	bf00      	nop
 800717c:	e7fe      	b.n	800717c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800717e:	4b09      	ldr	r3, [pc, #36]	; (80071a4 <prvSwitchTimerLists+0xc0>)
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d1b1      	bne.n	80070ec <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007188:	4b06      	ldr	r3, [pc, #24]	; (80071a4 <prvSwitchTimerLists+0xc0>)
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800718e:	4b06      	ldr	r3, [pc, #24]	; (80071a8 <prvSwitchTimerLists+0xc4>)
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	4a04      	ldr	r2, [pc, #16]	; (80071a4 <prvSwitchTimerLists+0xc0>)
 8007194:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007196:	4a04      	ldr	r2, [pc, #16]	; (80071a8 <prvSwitchTimerLists+0xc4>)
 8007198:	697b      	ldr	r3, [r7, #20]
 800719a:	6013      	str	r3, [r2, #0]
}
 800719c:	bf00      	nop
 800719e:	3718      	adds	r7, #24
 80071a0:	46bd      	mov	sp, r7
 80071a2:	bd80      	pop	{r7, pc}
 80071a4:	20000db0 	.word	0x20000db0
 80071a8:	20000db4 	.word	0x20000db4

080071ac <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b082      	sub	sp, #8
 80071b0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80071b2:	f000 f967 	bl	8007484 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80071b6:	4b15      	ldr	r3, [pc, #84]	; (800720c <prvCheckForValidListAndQueue+0x60>)
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d120      	bne.n	8007200 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80071be:	4814      	ldr	r0, [pc, #80]	; (8007210 <prvCheckForValidListAndQueue+0x64>)
 80071c0:	f7fd ff8e 	bl	80050e0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80071c4:	4813      	ldr	r0, [pc, #76]	; (8007214 <prvCheckForValidListAndQueue+0x68>)
 80071c6:	f7fd ff8b 	bl	80050e0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80071ca:	4b13      	ldr	r3, [pc, #76]	; (8007218 <prvCheckForValidListAndQueue+0x6c>)
 80071cc:	4a10      	ldr	r2, [pc, #64]	; (8007210 <prvCheckForValidListAndQueue+0x64>)
 80071ce:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80071d0:	4b12      	ldr	r3, [pc, #72]	; (800721c <prvCheckForValidListAndQueue+0x70>)
 80071d2:	4a10      	ldr	r2, [pc, #64]	; (8007214 <prvCheckForValidListAndQueue+0x68>)
 80071d4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80071d6:	2300      	movs	r3, #0
 80071d8:	9300      	str	r3, [sp, #0]
 80071da:	4b11      	ldr	r3, [pc, #68]	; (8007220 <prvCheckForValidListAndQueue+0x74>)
 80071dc:	4a11      	ldr	r2, [pc, #68]	; (8007224 <prvCheckForValidListAndQueue+0x78>)
 80071de:	2110      	movs	r1, #16
 80071e0:	200a      	movs	r0, #10
 80071e2:	f7fe f899 	bl	8005318 <xQueueGenericCreateStatic>
 80071e6:	4603      	mov	r3, r0
 80071e8:	4a08      	ldr	r2, [pc, #32]	; (800720c <prvCheckForValidListAndQueue+0x60>)
 80071ea:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80071ec:	4b07      	ldr	r3, [pc, #28]	; (800720c <prvCheckForValidListAndQueue+0x60>)
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d005      	beq.n	8007200 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80071f4:	4b05      	ldr	r3, [pc, #20]	; (800720c <prvCheckForValidListAndQueue+0x60>)
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	490b      	ldr	r1, [pc, #44]	; (8007228 <prvCheckForValidListAndQueue+0x7c>)
 80071fa:	4618      	mov	r0, r3
 80071fc:	f7fe fd6c 	bl	8005cd8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007200:	f000 f970 	bl	80074e4 <vPortExitCritical>
}
 8007204:	bf00      	nop
 8007206:	46bd      	mov	sp, r7
 8007208:	bd80      	pop	{r7, pc}
 800720a:	bf00      	nop
 800720c:	20000db8 	.word	0x20000db8
 8007210:	20000d88 	.word	0x20000d88
 8007214:	20000d9c 	.word	0x20000d9c
 8007218:	20000db0 	.word	0x20000db0
 800721c:	20000db4 	.word	0x20000db4
 8007220:	20000e64 	.word	0x20000e64
 8007224:	20000dc4 	.word	0x20000dc4
 8007228:	0800846c 	.word	0x0800846c

0800722c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800722c:	b480      	push	{r7}
 800722e:	b085      	sub	sp, #20
 8007230:	af00      	add	r7, sp, #0
 8007232:	60f8      	str	r0, [r7, #12]
 8007234:	60b9      	str	r1, [r7, #8]
 8007236:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	3b04      	subs	r3, #4
 800723c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007244:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	3b04      	subs	r3, #4
 800724a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800724c:	68bb      	ldr	r3, [r7, #8]
 800724e:	f023 0201 	bic.w	r2, r3, #1
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	3b04      	subs	r3, #4
 800725a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800725c:	4a0c      	ldr	r2, [pc, #48]	; (8007290 <pxPortInitialiseStack+0x64>)
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	3b14      	subs	r3, #20
 8007266:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007268:	687a      	ldr	r2, [r7, #4]
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	3b04      	subs	r3, #4
 8007272:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	f06f 0202 	mvn.w	r2, #2
 800727a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	3b20      	subs	r3, #32
 8007280:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007282:	68fb      	ldr	r3, [r7, #12]
}
 8007284:	4618      	mov	r0, r3
 8007286:	3714      	adds	r7, #20
 8007288:	46bd      	mov	sp, r7
 800728a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728e:	4770      	bx	lr
 8007290:	08007295 	.word	0x08007295

08007294 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007294:	b480      	push	{r7}
 8007296:	b085      	sub	sp, #20
 8007298:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800729a:	2300      	movs	r3, #0
 800729c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800729e:	4b12      	ldr	r3, [pc, #72]	; (80072e8 <prvTaskExitError+0x54>)
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072a6:	d00a      	beq.n	80072be <prvTaskExitError+0x2a>
	__asm volatile
 80072a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072ac:	f383 8811 	msr	BASEPRI, r3
 80072b0:	f3bf 8f6f 	isb	sy
 80072b4:	f3bf 8f4f 	dsb	sy
 80072b8:	60fb      	str	r3, [r7, #12]
}
 80072ba:	bf00      	nop
 80072bc:	e7fe      	b.n	80072bc <prvTaskExitError+0x28>
	__asm volatile
 80072be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072c2:	f383 8811 	msr	BASEPRI, r3
 80072c6:	f3bf 8f6f 	isb	sy
 80072ca:	f3bf 8f4f 	dsb	sy
 80072ce:	60bb      	str	r3, [r7, #8]
}
 80072d0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80072d2:	bf00      	nop
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d0fc      	beq.n	80072d4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80072da:	bf00      	nop
 80072dc:	bf00      	nop
 80072de:	3714      	adds	r7, #20
 80072e0:	46bd      	mov	sp, r7
 80072e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e6:	4770      	bx	lr
 80072e8:	2000000c 	.word	0x2000000c
 80072ec:	00000000 	.word	0x00000000

080072f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80072f0:	4b07      	ldr	r3, [pc, #28]	; (8007310 <pxCurrentTCBConst2>)
 80072f2:	6819      	ldr	r1, [r3, #0]
 80072f4:	6808      	ldr	r0, [r1, #0]
 80072f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072fa:	f380 8809 	msr	PSP, r0
 80072fe:	f3bf 8f6f 	isb	sy
 8007302:	f04f 0000 	mov.w	r0, #0
 8007306:	f380 8811 	msr	BASEPRI, r0
 800730a:	4770      	bx	lr
 800730c:	f3af 8000 	nop.w

08007310 <pxCurrentTCBConst2>:
 8007310:	20000888 	.word	0x20000888
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007314:	bf00      	nop
 8007316:	bf00      	nop

08007318 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007318:	4808      	ldr	r0, [pc, #32]	; (800733c <prvPortStartFirstTask+0x24>)
 800731a:	6800      	ldr	r0, [r0, #0]
 800731c:	6800      	ldr	r0, [r0, #0]
 800731e:	f380 8808 	msr	MSP, r0
 8007322:	f04f 0000 	mov.w	r0, #0
 8007326:	f380 8814 	msr	CONTROL, r0
 800732a:	b662      	cpsie	i
 800732c:	b661      	cpsie	f
 800732e:	f3bf 8f4f 	dsb	sy
 8007332:	f3bf 8f6f 	isb	sy
 8007336:	df00      	svc	0
 8007338:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800733a:	bf00      	nop
 800733c:	e000ed08 	.word	0xe000ed08

08007340 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007340:	b580      	push	{r7, lr}
 8007342:	b086      	sub	sp, #24
 8007344:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007346:	4b46      	ldr	r3, [pc, #280]	; (8007460 <xPortStartScheduler+0x120>)
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	4a46      	ldr	r2, [pc, #280]	; (8007464 <xPortStartScheduler+0x124>)
 800734c:	4293      	cmp	r3, r2
 800734e:	d10a      	bne.n	8007366 <xPortStartScheduler+0x26>
	__asm volatile
 8007350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007354:	f383 8811 	msr	BASEPRI, r3
 8007358:	f3bf 8f6f 	isb	sy
 800735c:	f3bf 8f4f 	dsb	sy
 8007360:	613b      	str	r3, [r7, #16]
}
 8007362:	bf00      	nop
 8007364:	e7fe      	b.n	8007364 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007366:	4b3e      	ldr	r3, [pc, #248]	; (8007460 <xPortStartScheduler+0x120>)
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	4a3f      	ldr	r2, [pc, #252]	; (8007468 <xPortStartScheduler+0x128>)
 800736c:	4293      	cmp	r3, r2
 800736e:	d10a      	bne.n	8007386 <xPortStartScheduler+0x46>
	__asm volatile
 8007370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007374:	f383 8811 	msr	BASEPRI, r3
 8007378:	f3bf 8f6f 	isb	sy
 800737c:	f3bf 8f4f 	dsb	sy
 8007380:	60fb      	str	r3, [r7, #12]
}
 8007382:	bf00      	nop
 8007384:	e7fe      	b.n	8007384 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007386:	4b39      	ldr	r3, [pc, #228]	; (800746c <xPortStartScheduler+0x12c>)
 8007388:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800738a:	697b      	ldr	r3, [r7, #20]
 800738c:	781b      	ldrb	r3, [r3, #0]
 800738e:	b2db      	uxtb	r3, r3
 8007390:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007392:	697b      	ldr	r3, [r7, #20]
 8007394:	22ff      	movs	r2, #255	; 0xff
 8007396:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007398:	697b      	ldr	r3, [r7, #20]
 800739a:	781b      	ldrb	r3, [r3, #0]
 800739c:	b2db      	uxtb	r3, r3
 800739e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80073a0:	78fb      	ldrb	r3, [r7, #3]
 80073a2:	b2db      	uxtb	r3, r3
 80073a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80073a8:	b2da      	uxtb	r2, r3
 80073aa:	4b31      	ldr	r3, [pc, #196]	; (8007470 <xPortStartScheduler+0x130>)
 80073ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80073ae:	4b31      	ldr	r3, [pc, #196]	; (8007474 <xPortStartScheduler+0x134>)
 80073b0:	2207      	movs	r2, #7
 80073b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80073b4:	e009      	b.n	80073ca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80073b6:	4b2f      	ldr	r3, [pc, #188]	; (8007474 <xPortStartScheduler+0x134>)
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	3b01      	subs	r3, #1
 80073bc:	4a2d      	ldr	r2, [pc, #180]	; (8007474 <xPortStartScheduler+0x134>)
 80073be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80073c0:	78fb      	ldrb	r3, [r7, #3]
 80073c2:	b2db      	uxtb	r3, r3
 80073c4:	005b      	lsls	r3, r3, #1
 80073c6:	b2db      	uxtb	r3, r3
 80073c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80073ca:	78fb      	ldrb	r3, [r7, #3]
 80073cc:	b2db      	uxtb	r3, r3
 80073ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073d2:	2b80      	cmp	r3, #128	; 0x80
 80073d4:	d0ef      	beq.n	80073b6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80073d6:	4b27      	ldr	r3, [pc, #156]	; (8007474 <xPortStartScheduler+0x134>)
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f1c3 0307 	rsb	r3, r3, #7
 80073de:	2b04      	cmp	r3, #4
 80073e0:	d00a      	beq.n	80073f8 <xPortStartScheduler+0xb8>
	__asm volatile
 80073e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073e6:	f383 8811 	msr	BASEPRI, r3
 80073ea:	f3bf 8f6f 	isb	sy
 80073ee:	f3bf 8f4f 	dsb	sy
 80073f2:	60bb      	str	r3, [r7, #8]
}
 80073f4:	bf00      	nop
 80073f6:	e7fe      	b.n	80073f6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80073f8:	4b1e      	ldr	r3, [pc, #120]	; (8007474 <xPortStartScheduler+0x134>)
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	021b      	lsls	r3, r3, #8
 80073fe:	4a1d      	ldr	r2, [pc, #116]	; (8007474 <xPortStartScheduler+0x134>)
 8007400:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007402:	4b1c      	ldr	r3, [pc, #112]	; (8007474 <xPortStartScheduler+0x134>)
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800740a:	4a1a      	ldr	r2, [pc, #104]	; (8007474 <xPortStartScheduler+0x134>)
 800740c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	b2da      	uxtb	r2, r3
 8007412:	697b      	ldr	r3, [r7, #20]
 8007414:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007416:	4b18      	ldr	r3, [pc, #96]	; (8007478 <xPortStartScheduler+0x138>)
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	4a17      	ldr	r2, [pc, #92]	; (8007478 <xPortStartScheduler+0x138>)
 800741c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007420:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007422:	4b15      	ldr	r3, [pc, #84]	; (8007478 <xPortStartScheduler+0x138>)
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	4a14      	ldr	r2, [pc, #80]	; (8007478 <xPortStartScheduler+0x138>)
 8007428:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800742c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800742e:	f000 f8dd 	bl	80075ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007432:	4b12      	ldr	r3, [pc, #72]	; (800747c <xPortStartScheduler+0x13c>)
 8007434:	2200      	movs	r2, #0
 8007436:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007438:	f000 f8fc 	bl	8007634 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800743c:	4b10      	ldr	r3, [pc, #64]	; (8007480 <xPortStartScheduler+0x140>)
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	4a0f      	ldr	r2, [pc, #60]	; (8007480 <xPortStartScheduler+0x140>)
 8007442:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007446:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007448:	f7ff ff66 	bl	8007318 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800744c:	f7ff f854 	bl	80064f8 <vTaskSwitchContext>
	prvTaskExitError();
 8007450:	f7ff ff20 	bl	8007294 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007454:	2300      	movs	r3, #0
}
 8007456:	4618      	mov	r0, r3
 8007458:	3718      	adds	r7, #24
 800745a:	46bd      	mov	sp, r7
 800745c:	bd80      	pop	{r7, pc}
 800745e:	bf00      	nop
 8007460:	e000ed00 	.word	0xe000ed00
 8007464:	410fc271 	.word	0x410fc271
 8007468:	410fc270 	.word	0x410fc270
 800746c:	e000e400 	.word	0xe000e400
 8007470:	20000eb4 	.word	0x20000eb4
 8007474:	20000eb8 	.word	0x20000eb8
 8007478:	e000ed20 	.word	0xe000ed20
 800747c:	2000000c 	.word	0x2000000c
 8007480:	e000ef34 	.word	0xe000ef34

08007484 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007484:	b480      	push	{r7}
 8007486:	b083      	sub	sp, #12
 8007488:	af00      	add	r7, sp, #0
	__asm volatile
 800748a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800748e:	f383 8811 	msr	BASEPRI, r3
 8007492:	f3bf 8f6f 	isb	sy
 8007496:	f3bf 8f4f 	dsb	sy
 800749a:	607b      	str	r3, [r7, #4]
}
 800749c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800749e:	4b0f      	ldr	r3, [pc, #60]	; (80074dc <vPortEnterCritical+0x58>)
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	3301      	adds	r3, #1
 80074a4:	4a0d      	ldr	r2, [pc, #52]	; (80074dc <vPortEnterCritical+0x58>)
 80074a6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80074a8:	4b0c      	ldr	r3, [pc, #48]	; (80074dc <vPortEnterCritical+0x58>)
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	2b01      	cmp	r3, #1
 80074ae:	d10f      	bne.n	80074d0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80074b0:	4b0b      	ldr	r3, [pc, #44]	; (80074e0 <vPortEnterCritical+0x5c>)
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	b2db      	uxtb	r3, r3
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d00a      	beq.n	80074d0 <vPortEnterCritical+0x4c>
	__asm volatile
 80074ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074be:	f383 8811 	msr	BASEPRI, r3
 80074c2:	f3bf 8f6f 	isb	sy
 80074c6:	f3bf 8f4f 	dsb	sy
 80074ca:	603b      	str	r3, [r7, #0]
}
 80074cc:	bf00      	nop
 80074ce:	e7fe      	b.n	80074ce <vPortEnterCritical+0x4a>
	}
}
 80074d0:	bf00      	nop
 80074d2:	370c      	adds	r7, #12
 80074d4:	46bd      	mov	sp, r7
 80074d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074da:	4770      	bx	lr
 80074dc:	2000000c 	.word	0x2000000c
 80074e0:	e000ed04 	.word	0xe000ed04

080074e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80074e4:	b480      	push	{r7}
 80074e6:	b083      	sub	sp, #12
 80074e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80074ea:	4b12      	ldr	r3, [pc, #72]	; (8007534 <vPortExitCritical+0x50>)
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d10a      	bne.n	8007508 <vPortExitCritical+0x24>
	__asm volatile
 80074f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074f6:	f383 8811 	msr	BASEPRI, r3
 80074fa:	f3bf 8f6f 	isb	sy
 80074fe:	f3bf 8f4f 	dsb	sy
 8007502:	607b      	str	r3, [r7, #4]
}
 8007504:	bf00      	nop
 8007506:	e7fe      	b.n	8007506 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007508:	4b0a      	ldr	r3, [pc, #40]	; (8007534 <vPortExitCritical+0x50>)
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	3b01      	subs	r3, #1
 800750e:	4a09      	ldr	r2, [pc, #36]	; (8007534 <vPortExitCritical+0x50>)
 8007510:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007512:	4b08      	ldr	r3, [pc, #32]	; (8007534 <vPortExitCritical+0x50>)
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d105      	bne.n	8007526 <vPortExitCritical+0x42>
 800751a:	2300      	movs	r3, #0
 800751c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	f383 8811 	msr	BASEPRI, r3
}
 8007524:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007526:	bf00      	nop
 8007528:	370c      	adds	r7, #12
 800752a:	46bd      	mov	sp, r7
 800752c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007530:	4770      	bx	lr
 8007532:	bf00      	nop
 8007534:	2000000c 	.word	0x2000000c
	...

08007540 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007540:	f3ef 8009 	mrs	r0, PSP
 8007544:	f3bf 8f6f 	isb	sy
 8007548:	4b15      	ldr	r3, [pc, #84]	; (80075a0 <pxCurrentTCBConst>)
 800754a:	681a      	ldr	r2, [r3, #0]
 800754c:	f01e 0f10 	tst.w	lr, #16
 8007550:	bf08      	it	eq
 8007552:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007556:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800755a:	6010      	str	r0, [r2, #0]
 800755c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007560:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007564:	f380 8811 	msr	BASEPRI, r0
 8007568:	f3bf 8f4f 	dsb	sy
 800756c:	f3bf 8f6f 	isb	sy
 8007570:	f7fe ffc2 	bl	80064f8 <vTaskSwitchContext>
 8007574:	f04f 0000 	mov.w	r0, #0
 8007578:	f380 8811 	msr	BASEPRI, r0
 800757c:	bc09      	pop	{r0, r3}
 800757e:	6819      	ldr	r1, [r3, #0]
 8007580:	6808      	ldr	r0, [r1, #0]
 8007582:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007586:	f01e 0f10 	tst.w	lr, #16
 800758a:	bf08      	it	eq
 800758c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007590:	f380 8809 	msr	PSP, r0
 8007594:	f3bf 8f6f 	isb	sy
 8007598:	4770      	bx	lr
 800759a:	bf00      	nop
 800759c:	f3af 8000 	nop.w

080075a0 <pxCurrentTCBConst>:
 80075a0:	20000888 	.word	0x20000888
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80075a4:	bf00      	nop
 80075a6:	bf00      	nop

080075a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b082      	sub	sp, #8
 80075ac:	af00      	add	r7, sp, #0
	__asm volatile
 80075ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075b2:	f383 8811 	msr	BASEPRI, r3
 80075b6:	f3bf 8f6f 	isb	sy
 80075ba:	f3bf 8f4f 	dsb	sy
 80075be:	607b      	str	r3, [r7, #4]
}
 80075c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80075c2:	f7fe fedf 	bl	8006384 <xTaskIncrementTick>
 80075c6:	4603      	mov	r3, r0
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d003      	beq.n	80075d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80075cc:	4b06      	ldr	r3, [pc, #24]	; (80075e8 <xPortSysTickHandler+0x40>)
 80075ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075d2:	601a      	str	r2, [r3, #0]
 80075d4:	2300      	movs	r3, #0
 80075d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	f383 8811 	msr	BASEPRI, r3
}
 80075de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80075e0:	bf00      	nop
 80075e2:	3708      	adds	r7, #8
 80075e4:	46bd      	mov	sp, r7
 80075e6:	bd80      	pop	{r7, pc}
 80075e8:	e000ed04 	.word	0xe000ed04

080075ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80075ec:	b480      	push	{r7}
 80075ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80075f0:	4b0b      	ldr	r3, [pc, #44]	; (8007620 <vPortSetupTimerInterrupt+0x34>)
 80075f2:	2200      	movs	r2, #0
 80075f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80075f6:	4b0b      	ldr	r3, [pc, #44]	; (8007624 <vPortSetupTimerInterrupt+0x38>)
 80075f8:	2200      	movs	r2, #0
 80075fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80075fc:	4b0a      	ldr	r3, [pc, #40]	; (8007628 <vPortSetupTimerInterrupt+0x3c>)
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	4a0a      	ldr	r2, [pc, #40]	; (800762c <vPortSetupTimerInterrupt+0x40>)
 8007602:	fba2 2303 	umull	r2, r3, r2, r3
 8007606:	099b      	lsrs	r3, r3, #6
 8007608:	4a09      	ldr	r2, [pc, #36]	; (8007630 <vPortSetupTimerInterrupt+0x44>)
 800760a:	3b01      	subs	r3, #1
 800760c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800760e:	4b04      	ldr	r3, [pc, #16]	; (8007620 <vPortSetupTimerInterrupt+0x34>)
 8007610:	2207      	movs	r2, #7
 8007612:	601a      	str	r2, [r3, #0]
}
 8007614:	bf00      	nop
 8007616:	46bd      	mov	sp, r7
 8007618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761c:	4770      	bx	lr
 800761e:	bf00      	nop
 8007620:	e000e010 	.word	0xe000e010
 8007624:	e000e018 	.word	0xe000e018
 8007628:	20000000 	.word	0x20000000
 800762c:	10624dd3 	.word	0x10624dd3
 8007630:	e000e014 	.word	0xe000e014

08007634 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007634:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007644 <vPortEnableVFP+0x10>
 8007638:	6801      	ldr	r1, [r0, #0]
 800763a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800763e:	6001      	str	r1, [r0, #0]
 8007640:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007642:	bf00      	nop
 8007644:	e000ed88 	.word	0xe000ed88

08007648 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007648:	b480      	push	{r7}
 800764a:	b085      	sub	sp, #20
 800764c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800764e:	f3ef 8305 	mrs	r3, IPSR
 8007652:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	2b0f      	cmp	r3, #15
 8007658:	d914      	bls.n	8007684 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800765a:	4a17      	ldr	r2, [pc, #92]	; (80076b8 <vPortValidateInterruptPriority+0x70>)
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	4413      	add	r3, r2
 8007660:	781b      	ldrb	r3, [r3, #0]
 8007662:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007664:	4b15      	ldr	r3, [pc, #84]	; (80076bc <vPortValidateInterruptPriority+0x74>)
 8007666:	781b      	ldrb	r3, [r3, #0]
 8007668:	7afa      	ldrb	r2, [r7, #11]
 800766a:	429a      	cmp	r2, r3
 800766c:	d20a      	bcs.n	8007684 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800766e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007672:	f383 8811 	msr	BASEPRI, r3
 8007676:	f3bf 8f6f 	isb	sy
 800767a:	f3bf 8f4f 	dsb	sy
 800767e:	607b      	str	r3, [r7, #4]
}
 8007680:	bf00      	nop
 8007682:	e7fe      	b.n	8007682 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007684:	4b0e      	ldr	r3, [pc, #56]	; (80076c0 <vPortValidateInterruptPriority+0x78>)
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800768c:	4b0d      	ldr	r3, [pc, #52]	; (80076c4 <vPortValidateInterruptPriority+0x7c>)
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	429a      	cmp	r2, r3
 8007692:	d90a      	bls.n	80076aa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007698:	f383 8811 	msr	BASEPRI, r3
 800769c:	f3bf 8f6f 	isb	sy
 80076a0:	f3bf 8f4f 	dsb	sy
 80076a4:	603b      	str	r3, [r7, #0]
}
 80076a6:	bf00      	nop
 80076a8:	e7fe      	b.n	80076a8 <vPortValidateInterruptPriority+0x60>
	}
 80076aa:	bf00      	nop
 80076ac:	3714      	adds	r7, #20
 80076ae:	46bd      	mov	sp, r7
 80076b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b4:	4770      	bx	lr
 80076b6:	bf00      	nop
 80076b8:	e000e3f0 	.word	0xe000e3f0
 80076bc:	20000eb4 	.word	0x20000eb4
 80076c0:	e000ed0c 	.word	0xe000ed0c
 80076c4:	20000eb8 	.word	0x20000eb8

080076c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b08a      	sub	sp, #40	; 0x28
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80076d0:	2300      	movs	r3, #0
 80076d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80076d4:	f7fe fd9a 	bl	800620c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80076d8:	4b5b      	ldr	r3, [pc, #364]	; (8007848 <pvPortMalloc+0x180>)
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d101      	bne.n	80076e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80076e0:	f000 f920 	bl	8007924 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80076e4:	4b59      	ldr	r3, [pc, #356]	; (800784c <pvPortMalloc+0x184>)
 80076e6:	681a      	ldr	r2, [r3, #0]
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	4013      	ands	r3, r2
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	f040 8093 	bne.w	8007818 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d01d      	beq.n	8007734 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80076f8:	2208      	movs	r2, #8
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	4413      	add	r3, r2
 80076fe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	f003 0307 	and.w	r3, r3, #7
 8007706:	2b00      	cmp	r3, #0
 8007708:	d014      	beq.n	8007734 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	f023 0307 	bic.w	r3, r3, #7
 8007710:	3308      	adds	r3, #8
 8007712:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	f003 0307 	and.w	r3, r3, #7
 800771a:	2b00      	cmp	r3, #0
 800771c:	d00a      	beq.n	8007734 <pvPortMalloc+0x6c>
	__asm volatile
 800771e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007722:	f383 8811 	msr	BASEPRI, r3
 8007726:	f3bf 8f6f 	isb	sy
 800772a:	f3bf 8f4f 	dsb	sy
 800772e:	617b      	str	r3, [r7, #20]
}
 8007730:	bf00      	nop
 8007732:	e7fe      	b.n	8007732 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d06e      	beq.n	8007818 <pvPortMalloc+0x150>
 800773a:	4b45      	ldr	r3, [pc, #276]	; (8007850 <pvPortMalloc+0x188>)
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	687a      	ldr	r2, [r7, #4]
 8007740:	429a      	cmp	r2, r3
 8007742:	d869      	bhi.n	8007818 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007744:	4b43      	ldr	r3, [pc, #268]	; (8007854 <pvPortMalloc+0x18c>)
 8007746:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007748:	4b42      	ldr	r3, [pc, #264]	; (8007854 <pvPortMalloc+0x18c>)
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800774e:	e004      	b.n	800775a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007752:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800775a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800775c:	685b      	ldr	r3, [r3, #4]
 800775e:	687a      	ldr	r2, [r7, #4]
 8007760:	429a      	cmp	r2, r3
 8007762:	d903      	bls.n	800776c <pvPortMalloc+0xa4>
 8007764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d1f1      	bne.n	8007750 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800776c:	4b36      	ldr	r3, [pc, #216]	; (8007848 <pvPortMalloc+0x180>)
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007772:	429a      	cmp	r2, r3
 8007774:	d050      	beq.n	8007818 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007776:	6a3b      	ldr	r3, [r7, #32]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	2208      	movs	r2, #8
 800777c:	4413      	add	r3, r2
 800777e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007782:	681a      	ldr	r2, [r3, #0]
 8007784:	6a3b      	ldr	r3, [r7, #32]
 8007786:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800778a:	685a      	ldr	r2, [r3, #4]
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	1ad2      	subs	r2, r2, r3
 8007790:	2308      	movs	r3, #8
 8007792:	005b      	lsls	r3, r3, #1
 8007794:	429a      	cmp	r2, r3
 8007796:	d91f      	bls.n	80077d8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007798:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	4413      	add	r3, r2
 800779e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80077a0:	69bb      	ldr	r3, [r7, #24]
 80077a2:	f003 0307 	and.w	r3, r3, #7
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d00a      	beq.n	80077c0 <pvPortMalloc+0xf8>
	__asm volatile
 80077aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077ae:	f383 8811 	msr	BASEPRI, r3
 80077b2:	f3bf 8f6f 	isb	sy
 80077b6:	f3bf 8f4f 	dsb	sy
 80077ba:	613b      	str	r3, [r7, #16]
}
 80077bc:	bf00      	nop
 80077be:	e7fe      	b.n	80077be <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80077c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077c2:	685a      	ldr	r2, [r3, #4]
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	1ad2      	subs	r2, r2, r3
 80077c8:	69bb      	ldr	r3, [r7, #24]
 80077ca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80077cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ce:	687a      	ldr	r2, [r7, #4]
 80077d0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80077d2:	69b8      	ldr	r0, [r7, #24]
 80077d4:	f000 f908 	bl	80079e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80077d8:	4b1d      	ldr	r3, [pc, #116]	; (8007850 <pvPortMalloc+0x188>)
 80077da:	681a      	ldr	r2, [r3, #0]
 80077dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077de:	685b      	ldr	r3, [r3, #4]
 80077e0:	1ad3      	subs	r3, r2, r3
 80077e2:	4a1b      	ldr	r2, [pc, #108]	; (8007850 <pvPortMalloc+0x188>)
 80077e4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80077e6:	4b1a      	ldr	r3, [pc, #104]	; (8007850 <pvPortMalloc+0x188>)
 80077e8:	681a      	ldr	r2, [r3, #0]
 80077ea:	4b1b      	ldr	r3, [pc, #108]	; (8007858 <pvPortMalloc+0x190>)
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	429a      	cmp	r2, r3
 80077f0:	d203      	bcs.n	80077fa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80077f2:	4b17      	ldr	r3, [pc, #92]	; (8007850 <pvPortMalloc+0x188>)
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	4a18      	ldr	r2, [pc, #96]	; (8007858 <pvPortMalloc+0x190>)
 80077f8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80077fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077fc:	685a      	ldr	r2, [r3, #4]
 80077fe:	4b13      	ldr	r3, [pc, #76]	; (800784c <pvPortMalloc+0x184>)
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	431a      	orrs	r2, r3
 8007804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007806:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800780a:	2200      	movs	r2, #0
 800780c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800780e:	4b13      	ldr	r3, [pc, #76]	; (800785c <pvPortMalloc+0x194>)
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	3301      	adds	r3, #1
 8007814:	4a11      	ldr	r2, [pc, #68]	; (800785c <pvPortMalloc+0x194>)
 8007816:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007818:	f7fe fd06 	bl	8006228 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800781c:	69fb      	ldr	r3, [r7, #28]
 800781e:	f003 0307 	and.w	r3, r3, #7
 8007822:	2b00      	cmp	r3, #0
 8007824:	d00a      	beq.n	800783c <pvPortMalloc+0x174>
	__asm volatile
 8007826:	f04f 0350 	mov.w	r3, #80	; 0x50
 800782a:	f383 8811 	msr	BASEPRI, r3
 800782e:	f3bf 8f6f 	isb	sy
 8007832:	f3bf 8f4f 	dsb	sy
 8007836:	60fb      	str	r3, [r7, #12]
}
 8007838:	bf00      	nop
 800783a:	e7fe      	b.n	800783a <pvPortMalloc+0x172>
	return pvReturn;
 800783c:	69fb      	ldr	r3, [r7, #28]
}
 800783e:	4618      	mov	r0, r3
 8007840:	3728      	adds	r7, #40	; 0x28
 8007842:	46bd      	mov	sp, r7
 8007844:	bd80      	pop	{r7, pc}
 8007846:	bf00      	nop
 8007848:	20004ac4 	.word	0x20004ac4
 800784c:	20004ad8 	.word	0x20004ad8
 8007850:	20004ac8 	.word	0x20004ac8
 8007854:	20004abc 	.word	0x20004abc
 8007858:	20004acc 	.word	0x20004acc
 800785c:	20004ad0 	.word	0x20004ad0

08007860 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007860:	b580      	push	{r7, lr}
 8007862:	b086      	sub	sp, #24
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d04d      	beq.n	800790e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007872:	2308      	movs	r3, #8
 8007874:	425b      	negs	r3, r3
 8007876:	697a      	ldr	r2, [r7, #20]
 8007878:	4413      	add	r3, r2
 800787a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800787c:	697b      	ldr	r3, [r7, #20]
 800787e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007880:	693b      	ldr	r3, [r7, #16]
 8007882:	685a      	ldr	r2, [r3, #4]
 8007884:	4b24      	ldr	r3, [pc, #144]	; (8007918 <vPortFree+0xb8>)
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	4013      	ands	r3, r2
 800788a:	2b00      	cmp	r3, #0
 800788c:	d10a      	bne.n	80078a4 <vPortFree+0x44>
	__asm volatile
 800788e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007892:	f383 8811 	msr	BASEPRI, r3
 8007896:	f3bf 8f6f 	isb	sy
 800789a:	f3bf 8f4f 	dsb	sy
 800789e:	60fb      	str	r3, [r7, #12]
}
 80078a0:	bf00      	nop
 80078a2:	e7fe      	b.n	80078a2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80078a4:	693b      	ldr	r3, [r7, #16]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d00a      	beq.n	80078c2 <vPortFree+0x62>
	__asm volatile
 80078ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078b0:	f383 8811 	msr	BASEPRI, r3
 80078b4:	f3bf 8f6f 	isb	sy
 80078b8:	f3bf 8f4f 	dsb	sy
 80078bc:	60bb      	str	r3, [r7, #8]
}
 80078be:	bf00      	nop
 80078c0:	e7fe      	b.n	80078c0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80078c2:	693b      	ldr	r3, [r7, #16]
 80078c4:	685a      	ldr	r2, [r3, #4]
 80078c6:	4b14      	ldr	r3, [pc, #80]	; (8007918 <vPortFree+0xb8>)
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	4013      	ands	r3, r2
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d01e      	beq.n	800790e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80078d0:	693b      	ldr	r3, [r7, #16]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d11a      	bne.n	800790e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80078d8:	693b      	ldr	r3, [r7, #16]
 80078da:	685a      	ldr	r2, [r3, #4]
 80078dc:	4b0e      	ldr	r3, [pc, #56]	; (8007918 <vPortFree+0xb8>)
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	43db      	mvns	r3, r3
 80078e2:	401a      	ands	r2, r3
 80078e4:	693b      	ldr	r3, [r7, #16]
 80078e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80078e8:	f7fe fc90 	bl	800620c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80078ec:	693b      	ldr	r3, [r7, #16]
 80078ee:	685a      	ldr	r2, [r3, #4]
 80078f0:	4b0a      	ldr	r3, [pc, #40]	; (800791c <vPortFree+0xbc>)
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	4413      	add	r3, r2
 80078f6:	4a09      	ldr	r2, [pc, #36]	; (800791c <vPortFree+0xbc>)
 80078f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80078fa:	6938      	ldr	r0, [r7, #16]
 80078fc:	f000 f874 	bl	80079e8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007900:	4b07      	ldr	r3, [pc, #28]	; (8007920 <vPortFree+0xc0>)
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	3301      	adds	r3, #1
 8007906:	4a06      	ldr	r2, [pc, #24]	; (8007920 <vPortFree+0xc0>)
 8007908:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800790a:	f7fe fc8d 	bl	8006228 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800790e:	bf00      	nop
 8007910:	3718      	adds	r7, #24
 8007912:	46bd      	mov	sp, r7
 8007914:	bd80      	pop	{r7, pc}
 8007916:	bf00      	nop
 8007918:	20004ad8 	.word	0x20004ad8
 800791c:	20004ac8 	.word	0x20004ac8
 8007920:	20004ad4 	.word	0x20004ad4

08007924 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007924:	b480      	push	{r7}
 8007926:	b085      	sub	sp, #20
 8007928:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800792a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800792e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007930:	4b27      	ldr	r3, [pc, #156]	; (80079d0 <prvHeapInit+0xac>)
 8007932:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	f003 0307 	and.w	r3, r3, #7
 800793a:	2b00      	cmp	r3, #0
 800793c:	d00c      	beq.n	8007958 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	3307      	adds	r3, #7
 8007942:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	f023 0307 	bic.w	r3, r3, #7
 800794a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800794c:	68ba      	ldr	r2, [r7, #8]
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	1ad3      	subs	r3, r2, r3
 8007952:	4a1f      	ldr	r2, [pc, #124]	; (80079d0 <prvHeapInit+0xac>)
 8007954:	4413      	add	r3, r2
 8007956:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800795c:	4a1d      	ldr	r2, [pc, #116]	; (80079d4 <prvHeapInit+0xb0>)
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007962:	4b1c      	ldr	r3, [pc, #112]	; (80079d4 <prvHeapInit+0xb0>)
 8007964:	2200      	movs	r2, #0
 8007966:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	68ba      	ldr	r2, [r7, #8]
 800796c:	4413      	add	r3, r2
 800796e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007970:	2208      	movs	r2, #8
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	1a9b      	subs	r3, r3, r2
 8007976:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	f023 0307 	bic.w	r3, r3, #7
 800797e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	4a15      	ldr	r2, [pc, #84]	; (80079d8 <prvHeapInit+0xb4>)
 8007984:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007986:	4b14      	ldr	r3, [pc, #80]	; (80079d8 <prvHeapInit+0xb4>)
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	2200      	movs	r2, #0
 800798c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800798e:	4b12      	ldr	r3, [pc, #72]	; (80079d8 <prvHeapInit+0xb4>)
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	2200      	movs	r2, #0
 8007994:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	68fa      	ldr	r2, [r7, #12]
 800799e:	1ad2      	subs	r2, r2, r3
 80079a0:	683b      	ldr	r3, [r7, #0]
 80079a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80079a4:	4b0c      	ldr	r3, [pc, #48]	; (80079d8 <prvHeapInit+0xb4>)
 80079a6:	681a      	ldr	r2, [r3, #0]
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	685b      	ldr	r3, [r3, #4]
 80079b0:	4a0a      	ldr	r2, [pc, #40]	; (80079dc <prvHeapInit+0xb8>)
 80079b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80079b4:	683b      	ldr	r3, [r7, #0]
 80079b6:	685b      	ldr	r3, [r3, #4]
 80079b8:	4a09      	ldr	r2, [pc, #36]	; (80079e0 <prvHeapInit+0xbc>)
 80079ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80079bc:	4b09      	ldr	r3, [pc, #36]	; (80079e4 <prvHeapInit+0xc0>)
 80079be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80079c2:	601a      	str	r2, [r3, #0]
}
 80079c4:	bf00      	nop
 80079c6:	3714      	adds	r7, #20
 80079c8:	46bd      	mov	sp, r7
 80079ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ce:	4770      	bx	lr
 80079d0:	20000ebc 	.word	0x20000ebc
 80079d4:	20004abc 	.word	0x20004abc
 80079d8:	20004ac4 	.word	0x20004ac4
 80079dc:	20004acc 	.word	0x20004acc
 80079e0:	20004ac8 	.word	0x20004ac8
 80079e4:	20004ad8 	.word	0x20004ad8

080079e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80079e8:	b480      	push	{r7}
 80079ea:	b085      	sub	sp, #20
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80079f0:	4b28      	ldr	r3, [pc, #160]	; (8007a94 <prvInsertBlockIntoFreeList+0xac>)
 80079f2:	60fb      	str	r3, [r7, #12]
 80079f4:	e002      	b.n	80079fc <prvInsertBlockIntoFreeList+0x14>
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	60fb      	str	r3, [r7, #12]
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	687a      	ldr	r2, [r7, #4]
 8007a02:	429a      	cmp	r2, r3
 8007a04:	d8f7      	bhi.n	80079f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	685b      	ldr	r3, [r3, #4]
 8007a0e:	68ba      	ldr	r2, [r7, #8]
 8007a10:	4413      	add	r3, r2
 8007a12:	687a      	ldr	r2, [r7, #4]
 8007a14:	429a      	cmp	r2, r3
 8007a16:	d108      	bne.n	8007a2a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	685a      	ldr	r2, [r3, #4]
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	685b      	ldr	r3, [r3, #4]
 8007a20:	441a      	add	r2, r3
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	685b      	ldr	r3, [r3, #4]
 8007a32:	68ba      	ldr	r2, [r7, #8]
 8007a34:	441a      	add	r2, r3
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	429a      	cmp	r2, r3
 8007a3c:	d118      	bne.n	8007a70 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	681a      	ldr	r2, [r3, #0]
 8007a42:	4b15      	ldr	r3, [pc, #84]	; (8007a98 <prvInsertBlockIntoFreeList+0xb0>)
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	429a      	cmp	r2, r3
 8007a48:	d00d      	beq.n	8007a66 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	685a      	ldr	r2, [r3, #4]
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	685b      	ldr	r3, [r3, #4]
 8007a54:	441a      	add	r2, r3
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	681a      	ldr	r2, [r3, #0]
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	601a      	str	r2, [r3, #0]
 8007a64:	e008      	b.n	8007a78 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007a66:	4b0c      	ldr	r3, [pc, #48]	; (8007a98 <prvInsertBlockIntoFreeList+0xb0>)
 8007a68:	681a      	ldr	r2, [r3, #0]
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	601a      	str	r2, [r3, #0]
 8007a6e:	e003      	b.n	8007a78 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	681a      	ldr	r2, [r3, #0]
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007a78:	68fa      	ldr	r2, [r7, #12]
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	429a      	cmp	r2, r3
 8007a7e:	d002      	beq.n	8007a86 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	687a      	ldr	r2, [r7, #4]
 8007a84:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007a86:	bf00      	nop
 8007a88:	3714      	adds	r7, #20
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a90:	4770      	bx	lr
 8007a92:	bf00      	nop
 8007a94:	20004abc 	.word	0x20004abc
 8007a98:	20004ac4 	.word	0x20004ac4

08007a9c <siprintf>:
 8007a9c:	b40e      	push	{r1, r2, r3}
 8007a9e:	b500      	push	{lr}
 8007aa0:	b09c      	sub	sp, #112	; 0x70
 8007aa2:	ab1d      	add	r3, sp, #116	; 0x74
 8007aa4:	9002      	str	r0, [sp, #8]
 8007aa6:	9006      	str	r0, [sp, #24]
 8007aa8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007aac:	4809      	ldr	r0, [pc, #36]	; (8007ad4 <siprintf+0x38>)
 8007aae:	9107      	str	r1, [sp, #28]
 8007ab0:	9104      	str	r1, [sp, #16]
 8007ab2:	4909      	ldr	r1, [pc, #36]	; (8007ad8 <siprintf+0x3c>)
 8007ab4:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ab8:	9105      	str	r1, [sp, #20]
 8007aba:	6800      	ldr	r0, [r0, #0]
 8007abc:	9301      	str	r3, [sp, #4]
 8007abe:	a902      	add	r1, sp, #8
 8007ac0:	f000 f9a0 	bl	8007e04 <_svfiprintf_r>
 8007ac4:	9b02      	ldr	r3, [sp, #8]
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	701a      	strb	r2, [r3, #0]
 8007aca:	b01c      	add	sp, #112	; 0x70
 8007acc:	f85d eb04 	ldr.w	lr, [sp], #4
 8007ad0:	b003      	add	sp, #12
 8007ad2:	4770      	bx	lr
 8007ad4:	2000005c 	.word	0x2000005c
 8007ad8:	ffff0208 	.word	0xffff0208

08007adc <memset>:
 8007adc:	4402      	add	r2, r0
 8007ade:	4603      	mov	r3, r0
 8007ae0:	4293      	cmp	r3, r2
 8007ae2:	d100      	bne.n	8007ae6 <memset+0xa>
 8007ae4:	4770      	bx	lr
 8007ae6:	f803 1b01 	strb.w	r1, [r3], #1
 8007aea:	e7f9      	b.n	8007ae0 <memset+0x4>

08007aec <__errno>:
 8007aec:	4b01      	ldr	r3, [pc, #4]	; (8007af4 <__errno+0x8>)
 8007aee:	6818      	ldr	r0, [r3, #0]
 8007af0:	4770      	bx	lr
 8007af2:	bf00      	nop
 8007af4:	2000005c 	.word	0x2000005c

08007af8 <__libc_init_array>:
 8007af8:	b570      	push	{r4, r5, r6, lr}
 8007afa:	4d0d      	ldr	r5, [pc, #52]	; (8007b30 <__libc_init_array+0x38>)
 8007afc:	4c0d      	ldr	r4, [pc, #52]	; (8007b34 <__libc_init_array+0x3c>)
 8007afe:	1b64      	subs	r4, r4, r5
 8007b00:	10a4      	asrs	r4, r4, #2
 8007b02:	2600      	movs	r6, #0
 8007b04:	42a6      	cmp	r6, r4
 8007b06:	d109      	bne.n	8007b1c <__libc_init_array+0x24>
 8007b08:	4d0b      	ldr	r5, [pc, #44]	; (8007b38 <__libc_init_array+0x40>)
 8007b0a:	4c0c      	ldr	r4, [pc, #48]	; (8007b3c <__libc_init_array+0x44>)
 8007b0c:	f000 fc6a 	bl	80083e4 <_init>
 8007b10:	1b64      	subs	r4, r4, r5
 8007b12:	10a4      	asrs	r4, r4, #2
 8007b14:	2600      	movs	r6, #0
 8007b16:	42a6      	cmp	r6, r4
 8007b18:	d105      	bne.n	8007b26 <__libc_init_array+0x2e>
 8007b1a:	bd70      	pop	{r4, r5, r6, pc}
 8007b1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b20:	4798      	blx	r3
 8007b22:	3601      	adds	r6, #1
 8007b24:	e7ee      	b.n	8007b04 <__libc_init_array+0xc>
 8007b26:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b2a:	4798      	blx	r3
 8007b2c:	3601      	adds	r6, #1
 8007b2e:	e7f2      	b.n	8007b16 <__libc_init_array+0x1e>
 8007b30:	08008558 	.word	0x08008558
 8007b34:	08008558 	.word	0x08008558
 8007b38:	08008558 	.word	0x08008558
 8007b3c:	0800855c 	.word	0x0800855c

08007b40 <__retarget_lock_acquire_recursive>:
 8007b40:	4770      	bx	lr

08007b42 <__retarget_lock_release_recursive>:
 8007b42:	4770      	bx	lr

08007b44 <memcpy>:
 8007b44:	440a      	add	r2, r1
 8007b46:	4291      	cmp	r1, r2
 8007b48:	f100 33ff 	add.w	r3, r0, #4294967295
 8007b4c:	d100      	bne.n	8007b50 <memcpy+0xc>
 8007b4e:	4770      	bx	lr
 8007b50:	b510      	push	{r4, lr}
 8007b52:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b56:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007b5a:	4291      	cmp	r1, r2
 8007b5c:	d1f9      	bne.n	8007b52 <memcpy+0xe>
 8007b5e:	bd10      	pop	{r4, pc}

08007b60 <_free_r>:
 8007b60:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007b62:	2900      	cmp	r1, #0
 8007b64:	d044      	beq.n	8007bf0 <_free_r+0x90>
 8007b66:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b6a:	9001      	str	r0, [sp, #4]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	f1a1 0404 	sub.w	r4, r1, #4
 8007b72:	bfb8      	it	lt
 8007b74:	18e4      	addlt	r4, r4, r3
 8007b76:	f000 f8df 	bl	8007d38 <__malloc_lock>
 8007b7a:	4a1e      	ldr	r2, [pc, #120]	; (8007bf4 <_free_r+0x94>)
 8007b7c:	9801      	ldr	r0, [sp, #4]
 8007b7e:	6813      	ldr	r3, [r2, #0]
 8007b80:	b933      	cbnz	r3, 8007b90 <_free_r+0x30>
 8007b82:	6063      	str	r3, [r4, #4]
 8007b84:	6014      	str	r4, [r2, #0]
 8007b86:	b003      	add	sp, #12
 8007b88:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007b8c:	f000 b8da 	b.w	8007d44 <__malloc_unlock>
 8007b90:	42a3      	cmp	r3, r4
 8007b92:	d908      	bls.n	8007ba6 <_free_r+0x46>
 8007b94:	6825      	ldr	r5, [r4, #0]
 8007b96:	1961      	adds	r1, r4, r5
 8007b98:	428b      	cmp	r3, r1
 8007b9a:	bf01      	itttt	eq
 8007b9c:	6819      	ldreq	r1, [r3, #0]
 8007b9e:	685b      	ldreq	r3, [r3, #4]
 8007ba0:	1949      	addeq	r1, r1, r5
 8007ba2:	6021      	streq	r1, [r4, #0]
 8007ba4:	e7ed      	b.n	8007b82 <_free_r+0x22>
 8007ba6:	461a      	mov	r2, r3
 8007ba8:	685b      	ldr	r3, [r3, #4]
 8007baa:	b10b      	cbz	r3, 8007bb0 <_free_r+0x50>
 8007bac:	42a3      	cmp	r3, r4
 8007bae:	d9fa      	bls.n	8007ba6 <_free_r+0x46>
 8007bb0:	6811      	ldr	r1, [r2, #0]
 8007bb2:	1855      	adds	r5, r2, r1
 8007bb4:	42a5      	cmp	r5, r4
 8007bb6:	d10b      	bne.n	8007bd0 <_free_r+0x70>
 8007bb8:	6824      	ldr	r4, [r4, #0]
 8007bba:	4421      	add	r1, r4
 8007bbc:	1854      	adds	r4, r2, r1
 8007bbe:	42a3      	cmp	r3, r4
 8007bc0:	6011      	str	r1, [r2, #0]
 8007bc2:	d1e0      	bne.n	8007b86 <_free_r+0x26>
 8007bc4:	681c      	ldr	r4, [r3, #0]
 8007bc6:	685b      	ldr	r3, [r3, #4]
 8007bc8:	6053      	str	r3, [r2, #4]
 8007bca:	440c      	add	r4, r1
 8007bcc:	6014      	str	r4, [r2, #0]
 8007bce:	e7da      	b.n	8007b86 <_free_r+0x26>
 8007bd0:	d902      	bls.n	8007bd8 <_free_r+0x78>
 8007bd2:	230c      	movs	r3, #12
 8007bd4:	6003      	str	r3, [r0, #0]
 8007bd6:	e7d6      	b.n	8007b86 <_free_r+0x26>
 8007bd8:	6825      	ldr	r5, [r4, #0]
 8007bda:	1961      	adds	r1, r4, r5
 8007bdc:	428b      	cmp	r3, r1
 8007bde:	bf04      	itt	eq
 8007be0:	6819      	ldreq	r1, [r3, #0]
 8007be2:	685b      	ldreq	r3, [r3, #4]
 8007be4:	6063      	str	r3, [r4, #4]
 8007be6:	bf04      	itt	eq
 8007be8:	1949      	addeq	r1, r1, r5
 8007bea:	6021      	streq	r1, [r4, #0]
 8007bec:	6054      	str	r4, [r2, #4]
 8007bee:	e7ca      	b.n	8007b86 <_free_r+0x26>
 8007bf0:	b003      	add	sp, #12
 8007bf2:	bd30      	pop	{r4, r5, pc}
 8007bf4:	20004c1c 	.word	0x20004c1c

08007bf8 <sbrk_aligned>:
 8007bf8:	b570      	push	{r4, r5, r6, lr}
 8007bfa:	4e0e      	ldr	r6, [pc, #56]	; (8007c34 <sbrk_aligned+0x3c>)
 8007bfc:	460c      	mov	r4, r1
 8007bfe:	6831      	ldr	r1, [r6, #0]
 8007c00:	4605      	mov	r5, r0
 8007c02:	b911      	cbnz	r1, 8007c0a <sbrk_aligned+0x12>
 8007c04:	f000 fba6 	bl	8008354 <_sbrk_r>
 8007c08:	6030      	str	r0, [r6, #0]
 8007c0a:	4621      	mov	r1, r4
 8007c0c:	4628      	mov	r0, r5
 8007c0e:	f000 fba1 	bl	8008354 <_sbrk_r>
 8007c12:	1c43      	adds	r3, r0, #1
 8007c14:	d00a      	beq.n	8007c2c <sbrk_aligned+0x34>
 8007c16:	1cc4      	adds	r4, r0, #3
 8007c18:	f024 0403 	bic.w	r4, r4, #3
 8007c1c:	42a0      	cmp	r0, r4
 8007c1e:	d007      	beq.n	8007c30 <sbrk_aligned+0x38>
 8007c20:	1a21      	subs	r1, r4, r0
 8007c22:	4628      	mov	r0, r5
 8007c24:	f000 fb96 	bl	8008354 <_sbrk_r>
 8007c28:	3001      	adds	r0, #1
 8007c2a:	d101      	bne.n	8007c30 <sbrk_aligned+0x38>
 8007c2c:	f04f 34ff 	mov.w	r4, #4294967295
 8007c30:	4620      	mov	r0, r4
 8007c32:	bd70      	pop	{r4, r5, r6, pc}
 8007c34:	20004c20 	.word	0x20004c20

08007c38 <_malloc_r>:
 8007c38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c3c:	1ccd      	adds	r5, r1, #3
 8007c3e:	f025 0503 	bic.w	r5, r5, #3
 8007c42:	3508      	adds	r5, #8
 8007c44:	2d0c      	cmp	r5, #12
 8007c46:	bf38      	it	cc
 8007c48:	250c      	movcc	r5, #12
 8007c4a:	2d00      	cmp	r5, #0
 8007c4c:	4607      	mov	r7, r0
 8007c4e:	db01      	blt.n	8007c54 <_malloc_r+0x1c>
 8007c50:	42a9      	cmp	r1, r5
 8007c52:	d905      	bls.n	8007c60 <_malloc_r+0x28>
 8007c54:	230c      	movs	r3, #12
 8007c56:	603b      	str	r3, [r7, #0]
 8007c58:	2600      	movs	r6, #0
 8007c5a:	4630      	mov	r0, r6
 8007c5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c60:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007d34 <_malloc_r+0xfc>
 8007c64:	f000 f868 	bl	8007d38 <__malloc_lock>
 8007c68:	f8d8 3000 	ldr.w	r3, [r8]
 8007c6c:	461c      	mov	r4, r3
 8007c6e:	bb5c      	cbnz	r4, 8007cc8 <_malloc_r+0x90>
 8007c70:	4629      	mov	r1, r5
 8007c72:	4638      	mov	r0, r7
 8007c74:	f7ff ffc0 	bl	8007bf8 <sbrk_aligned>
 8007c78:	1c43      	adds	r3, r0, #1
 8007c7a:	4604      	mov	r4, r0
 8007c7c:	d155      	bne.n	8007d2a <_malloc_r+0xf2>
 8007c7e:	f8d8 4000 	ldr.w	r4, [r8]
 8007c82:	4626      	mov	r6, r4
 8007c84:	2e00      	cmp	r6, #0
 8007c86:	d145      	bne.n	8007d14 <_malloc_r+0xdc>
 8007c88:	2c00      	cmp	r4, #0
 8007c8a:	d048      	beq.n	8007d1e <_malloc_r+0xe6>
 8007c8c:	6823      	ldr	r3, [r4, #0]
 8007c8e:	4631      	mov	r1, r6
 8007c90:	4638      	mov	r0, r7
 8007c92:	eb04 0903 	add.w	r9, r4, r3
 8007c96:	f000 fb5d 	bl	8008354 <_sbrk_r>
 8007c9a:	4581      	cmp	r9, r0
 8007c9c:	d13f      	bne.n	8007d1e <_malloc_r+0xe6>
 8007c9e:	6821      	ldr	r1, [r4, #0]
 8007ca0:	1a6d      	subs	r5, r5, r1
 8007ca2:	4629      	mov	r1, r5
 8007ca4:	4638      	mov	r0, r7
 8007ca6:	f7ff ffa7 	bl	8007bf8 <sbrk_aligned>
 8007caa:	3001      	adds	r0, #1
 8007cac:	d037      	beq.n	8007d1e <_malloc_r+0xe6>
 8007cae:	6823      	ldr	r3, [r4, #0]
 8007cb0:	442b      	add	r3, r5
 8007cb2:	6023      	str	r3, [r4, #0]
 8007cb4:	f8d8 3000 	ldr.w	r3, [r8]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d038      	beq.n	8007d2e <_malloc_r+0xf6>
 8007cbc:	685a      	ldr	r2, [r3, #4]
 8007cbe:	42a2      	cmp	r2, r4
 8007cc0:	d12b      	bne.n	8007d1a <_malloc_r+0xe2>
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	605a      	str	r2, [r3, #4]
 8007cc6:	e00f      	b.n	8007ce8 <_malloc_r+0xb0>
 8007cc8:	6822      	ldr	r2, [r4, #0]
 8007cca:	1b52      	subs	r2, r2, r5
 8007ccc:	d41f      	bmi.n	8007d0e <_malloc_r+0xd6>
 8007cce:	2a0b      	cmp	r2, #11
 8007cd0:	d917      	bls.n	8007d02 <_malloc_r+0xca>
 8007cd2:	1961      	adds	r1, r4, r5
 8007cd4:	42a3      	cmp	r3, r4
 8007cd6:	6025      	str	r5, [r4, #0]
 8007cd8:	bf18      	it	ne
 8007cda:	6059      	strne	r1, [r3, #4]
 8007cdc:	6863      	ldr	r3, [r4, #4]
 8007cde:	bf08      	it	eq
 8007ce0:	f8c8 1000 	streq.w	r1, [r8]
 8007ce4:	5162      	str	r2, [r4, r5]
 8007ce6:	604b      	str	r3, [r1, #4]
 8007ce8:	4638      	mov	r0, r7
 8007cea:	f104 060b 	add.w	r6, r4, #11
 8007cee:	f000 f829 	bl	8007d44 <__malloc_unlock>
 8007cf2:	f026 0607 	bic.w	r6, r6, #7
 8007cf6:	1d23      	adds	r3, r4, #4
 8007cf8:	1af2      	subs	r2, r6, r3
 8007cfa:	d0ae      	beq.n	8007c5a <_malloc_r+0x22>
 8007cfc:	1b9b      	subs	r3, r3, r6
 8007cfe:	50a3      	str	r3, [r4, r2]
 8007d00:	e7ab      	b.n	8007c5a <_malloc_r+0x22>
 8007d02:	42a3      	cmp	r3, r4
 8007d04:	6862      	ldr	r2, [r4, #4]
 8007d06:	d1dd      	bne.n	8007cc4 <_malloc_r+0x8c>
 8007d08:	f8c8 2000 	str.w	r2, [r8]
 8007d0c:	e7ec      	b.n	8007ce8 <_malloc_r+0xb0>
 8007d0e:	4623      	mov	r3, r4
 8007d10:	6864      	ldr	r4, [r4, #4]
 8007d12:	e7ac      	b.n	8007c6e <_malloc_r+0x36>
 8007d14:	4634      	mov	r4, r6
 8007d16:	6876      	ldr	r6, [r6, #4]
 8007d18:	e7b4      	b.n	8007c84 <_malloc_r+0x4c>
 8007d1a:	4613      	mov	r3, r2
 8007d1c:	e7cc      	b.n	8007cb8 <_malloc_r+0x80>
 8007d1e:	230c      	movs	r3, #12
 8007d20:	603b      	str	r3, [r7, #0]
 8007d22:	4638      	mov	r0, r7
 8007d24:	f000 f80e 	bl	8007d44 <__malloc_unlock>
 8007d28:	e797      	b.n	8007c5a <_malloc_r+0x22>
 8007d2a:	6025      	str	r5, [r4, #0]
 8007d2c:	e7dc      	b.n	8007ce8 <_malloc_r+0xb0>
 8007d2e:	605b      	str	r3, [r3, #4]
 8007d30:	deff      	udf	#255	; 0xff
 8007d32:	bf00      	nop
 8007d34:	20004c1c 	.word	0x20004c1c

08007d38 <__malloc_lock>:
 8007d38:	4801      	ldr	r0, [pc, #4]	; (8007d40 <__malloc_lock+0x8>)
 8007d3a:	f7ff bf01 	b.w	8007b40 <__retarget_lock_acquire_recursive>
 8007d3e:	bf00      	nop
 8007d40:	20004c18 	.word	0x20004c18

08007d44 <__malloc_unlock>:
 8007d44:	4801      	ldr	r0, [pc, #4]	; (8007d4c <__malloc_unlock+0x8>)
 8007d46:	f7ff befc 	b.w	8007b42 <__retarget_lock_release_recursive>
 8007d4a:	bf00      	nop
 8007d4c:	20004c18 	.word	0x20004c18

08007d50 <__ssputs_r>:
 8007d50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d54:	688e      	ldr	r6, [r1, #8]
 8007d56:	461f      	mov	r7, r3
 8007d58:	42be      	cmp	r6, r7
 8007d5a:	680b      	ldr	r3, [r1, #0]
 8007d5c:	4682      	mov	sl, r0
 8007d5e:	460c      	mov	r4, r1
 8007d60:	4690      	mov	r8, r2
 8007d62:	d82c      	bhi.n	8007dbe <__ssputs_r+0x6e>
 8007d64:	898a      	ldrh	r2, [r1, #12]
 8007d66:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007d6a:	d026      	beq.n	8007dba <__ssputs_r+0x6a>
 8007d6c:	6965      	ldr	r5, [r4, #20]
 8007d6e:	6909      	ldr	r1, [r1, #16]
 8007d70:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007d74:	eba3 0901 	sub.w	r9, r3, r1
 8007d78:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007d7c:	1c7b      	adds	r3, r7, #1
 8007d7e:	444b      	add	r3, r9
 8007d80:	106d      	asrs	r5, r5, #1
 8007d82:	429d      	cmp	r5, r3
 8007d84:	bf38      	it	cc
 8007d86:	461d      	movcc	r5, r3
 8007d88:	0553      	lsls	r3, r2, #21
 8007d8a:	d527      	bpl.n	8007ddc <__ssputs_r+0x8c>
 8007d8c:	4629      	mov	r1, r5
 8007d8e:	f7ff ff53 	bl	8007c38 <_malloc_r>
 8007d92:	4606      	mov	r6, r0
 8007d94:	b360      	cbz	r0, 8007df0 <__ssputs_r+0xa0>
 8007d96:	6921      	ldr	r1, [r4, #16]
 8007d98:	464a      	mov	r2, r9
 8007d9a:	f7ff fed3 	bl	8007b44 <memcpy>
 8007d9e:	89a3      	ldrh	r3, [r4, #12]
 8007da0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007da4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007da8:	81a3      	strh	r3, [r4, #12]
 8007daa:	6126      	str	r6, [r4, #16]
 8007dac:	6165      	str	r5, [r4, #20]
 8007dae:	444e      	add	r6, r9
 8007db0:	eba5 0509 	sub.w	r5, r5, r9
 8007db4:	6026      	str	r6, [r4, #0]
 8007db6:	60a5      	str	r5, [r4, #8]
 8007db8:	463e      	mov	r6, r7
 8007dba:	42be      	cmp	r6, r7
 8007dbc:	d900      	bls.n	8007dc0 <__ssputs_r+0x70>
 8007dbe:	463e      	mov	r6, r7
 8007dc0:	6820      	ldr	r0, [r4, #0]
 8007dc2:	4632      	mov	r2, r6
 8007dc4:	4641      	mov	r1, r8
 8007dc6:	f000 faab 	bl	8008320 <memmove>
 8007dca:	68a3      	ldr	r3, [r4, #8]
 8007dcc:	1b9b      	subs	r3, r3, r6
 8007dce:	60a3      	str	r3, [r4, #8]
 8007dd0:	6823      	ldr	r3, [r4, #0]
 8007dd2:	4433      	add	r3, r6
 8007dd4:	6023      	str	r3, [r4, #0]
 8007dd6:	2000      	movs	r0, #0
 8007dd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ddc:	462a      	mov	r2, r5
 8007dde:	f000 fac9 	bl	8008374 <_realloc_r>
 8007de2:	4606      	mov	r6, r0
 8007de4:	2800      	cmp	r0, #0
 8007de6:	d1e0      	bne.n	8007daa <__ssputs_r+0x5a>
 8007de8:	6921      	ldr	r1, [r4, #16]
 8007dea:	4650      	mov	r0, sl
 8007dec:	f7ff feb8 	bl	8007b60 <_free_r>
 8007df0:	230c      	movs	r3, #12
 8007df2:	f8ca 3000 	str.w	r3, [sl]
 8007df6:	89a3      	ldrh	r3, [r4, #12]
 8007df8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007dfc:	81a3      	strh	r3, [r4, #12]
 8007dfe:	f04f 30ff 	mov.w	r0, #4294967295
 8007e02:	e7e9      	b.n	8007dd8 <__ssputs_r+0x88>

08007e04 <_svfiprintf_r>:
 8007e04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e08:	4698      	mov	r8, r3
 8007e0a:	898b      	ldrh	r3, [r1, #12]
 8007e0c:	061b      	lsls	r3, r3, #24
 8007e0e:	b09d      	sub	sp, #116	; 0x74
 8007e10:	4607      	mov	r7, r0
 8007e12:	460d      	mov	r5, r1
 8007e14:	4614      	mov	r4, r2
 8007e16:	d50e      	bpl.n	8007e36 <_svfiprintf_r+0x32>
 8007e18:	690b      	ldr	r3, [r1, #16]
 8007e1a:	b963      	cbnz	r3, 8007e36 <_svfiprintf_r+0x32>
 8007e1c:	2140      	movs	r1, #64	; 0x40
 8007e1e:	f7ff ff0b 	bl	8007c38 <_malloc_r>
 8007e22:	6028      	str	r0, [r5, #0]
 8007e24:	6128      	str	r0, [r5, #16]
 8007e26:	b920      	cbnz	r0, 8007e32 <_svfiprintf_r+0x2e>
 8007e28:	230c      	movs	r3, #12
 8007e2a:	603b      	str	r3, [r7, #0]
 8007e2c:	f04f 30ff 	mov.w	r0, #4294967295
 8007e30:	e0d0      	b.n	8007fd4 <_svfiprintf_r+0x1d0>
 8007e32:	2340      	movs	r3, #64	; 0x40
 8007e34:	616b      	str	r3, [r5, #20]
 8007e36:	2300      	movs	r3, #0
 8007e38:	9309      	str	r3, [sp, #36]	; 0x24
 8007e3a:	2320      	movs	r3, #32
 8007e3c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007e40:	f8cd 800c 	str.w	r8, [sp, #12]
 8007e44:	2330      	movs	r3, #48	; 0x30
 8007e46:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007fec <_svfiprintf_r+0x1e8>
 8007e4a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007e4e:	f04f 0901 	mov.w	r9, #1
 8007e52:	4623      	mov	r3, r4
 8007e54:	469a      	mov	sl, r3
 8007e56:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007e5a:	b10a      	cbz	r2, 8007e60 <_svfiprintf_r+0x5c>
 8007e5c:	2a25      	cmp	r2, #37	; 0x25
 8007e5e:	d1f9      	bne.n	8007e54 <_svfiprintf_r+0x50>
 8007e60:	ebba 0b04 	subs.w	fp, sl, r4
 8007e64:	d00b      	beq.n	8007e7e <_svfiprintf_r+0x7a>
 8007e66:	465b      	mov	r3, fp
 8007e68:	4622      	mov	r2, r4
 8007e6a:	4629      	mov	r1, r5
 8007e6c:	4638      	mov	r0, r7
 8007e6e:	f7ff ff6f 	bl	8007d50 <__ssputs_r>
 8007e72:	3001      	adds	r0, #1
 8007e74:	f000 80a9 	beq.w	8007fca <_svfiprintf_r+0x1c6>
 8007e78:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007e7a:	445a      	add	r2, fp
 8007e7c:	9209      	str	r2, [sp, #36]	; 0x24
 8007e7e:	f89a 3000 	ldrb.w	r3, [sl]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	f000 80a1 	beq.w	8007fca <_svfiprintf_r+0x1c6>
 8007e88:	2300      	movs	r3, #0
 8007e8a:	f04f 32ff 	mov.w	r2, #4294967295
 8007e8e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007e92:	f10a 0a01 	add.w	sl, sl, #1
 8007e96:	9304      	str	r3, [sp, #16]
 8007e98:	9307      	str	r3, [sp, #28]
 8007e9a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007e9e:	931a      	str	r3, [sp, #104]	; 0x68
 8007ea0:	4654      	mov	r4, sl
 8007ea2:	2205      	movs	r2, #5
 8007ea4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ea8:	4850      	ldr	r0, [pc, #320]	; (8007fec <_svfiprintf_r+0x1e8>)
 8007eaa:	f7f8 f999 	bl	80001e0 <memchr>
 8007eae:	9a04      	ldr	r2, [sp, #16]
 8007eb0:	b9d8      	cbnz	r0, 8007eea <_svfiprintf_r+0xe6>
 8007eb2:	06d0      	lsls	r0, r2, #27
 8007eb4:	bf44      	itt	mi
 8007eb6:	2320      	movmi	r3, #32
 8007eb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007ebc:	0711      	lsls	r1, r2, #28
 8007ebe:	bf44      	itt	mi
 8007ec0:	232b      	movmi	r3, #43	; 0x2b
 8007ec2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007ec6:	f89a 3000 	ldrb.w	r3, [sl]
 8007eca:	2b2a      	cmp	r3, #42	; 0x2a
 8007ecc:	d015      	beq.n	8007efa <_svfiprintf_r+0xf6>
 8007ece:	9a07      	ldr	r2, [sp, #28]
 8007ed0:	4654      	mov	r4, sl
 8007ed2:	2000      	movs	r0, #0
 8007ed4:	f04f 0c0a 	mov.w	ip, #10
 8007ed8:	4621      	mov	r1, r4
 8007eda:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007ede:	3b30      	subs	r3, #48	; 0x30
 8007ee0:	2b09      	cmp	r3, #9
 8007ee2:	d94d      	bls.n	8007f80 <_svfiprintf_r+0x17c>
 8007ee4:	b1b0      	cbz	r0, 8007f14 <_svfiprintf_r+0x110>
 8007ee6:	9207      	str	r2, [sp, #28]
 8007ee8:	e014      	b.n	8007f14 <_svfiprintf_r+0x110>
 8007eea:	eba0 0308 	sub.w	r3, r0, r8
 8007eee:	fa09 f303 	lsl.w	r3, r9, r3
 8007ef2:	4313      	orrs	r3, r2
 8007ef4:	9304      	str	r3, [sp, #16]
 8007ef6:	46a2      	mov	sl, r4
 8007ef8:	e7d2      	b.n	8007ea0 <_svfiprintf_r+0x9c>
 8007efa:	9b03      	ldr	r3, [sp, #12]
 8007efc:	1d19      	adds	r1, r3, #4
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	9103      	str	r1, [sp, #12]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	bfbb      	ittet	lt
 8007f06:	425b      	neglt	r3, r3
 8007f08:	f042 0202 	orrlt.w	r2, r2, #2
 8007f0c:	9307      	strge	r3, [sp, #28]
 8007f0e:	9307      	strlt	r3, [sp, #28]
 8007f10:	bfb8      	it	lt
 8007f12:	9204      	strlt	r2, [sp, #16]
 8007f14:	7823      	ldrb	r3, [r4, #0]
 8007f16:	2b2e      	cmp	r3, #46	; 0x2e
 8007f18:	d10c      	bne.n	8007f34 <_svfiprintf_r+0x130>
 8007f1a:	7863      	ldrb	r3, [r4, #1]
 8007f1c:	2b2a      	cmp	r3, #42	; 0x2a
 8007f1e:	d134      	bne.n	8007f8a <_svfiprintf_r+0x186>
 8007f20:	9b03      	ldr	r3, [sp, #12]
 8007f22:	1d1a      	adds	r2, r3, #4
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	9203      	str	r2, [sp, #12]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	bfb8      	it	lt
 8007f2c:	f04f 33ff 	movlt.w	r3, #4294967295
 8007f30:	3402      	adds	r4, #2
 8007f32:	9305      	str	r3, [sp, #20]
 8007f34:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8007ffc <_svfiprintf_r+0x1f8>
 8007f38:	7821      	ldrb	r1, [r4, #0]
 8007f3a:	2203      	movs	r2, #3
 8007f3c:	4650      	mov	r0, sl
 8007f3e:	f7f8 f94f 	bl	80001e0 <memchr>
 8007f42:	b138      	cbz	r0, 8007f54 <_svfiprintf_r+0x150>
 8007f44:	9b04      	ldr	r3, [sp, #16]
 8007f46:	eba0 000a 	sub.w	r0, r0, sl
 8007f4a:	2240      	movs	r2, #64	; 0x40
 8007f4c:	4082      	lsls	r2, r0
 8007f4e:	4313      	orrs	r3, r2
 8007f50:	3401      	adds	r4, #1
 8007f52:	9304      	str	r3, [sp, #16]
 8007f54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f58:	4825      	ldr	r0, [pc, #148]	; (8007ff0 <_svfiprintf_r+0x1ec>)
 8007f5a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007f5e:	2206      	movs	r2, #6
 8007f60:	f7f8 f93e 	bl	80001e0 <memchr>
 8007f64:	2800      	cmp	r0, #0
 8007f66:	d038      	beq.n	8007fda <_svfiprintf_r+0x1d6>
 8007f68:	4b22      	ldr	r3, [pc, #136]	; (8007ff4 <_svfiprintf_r+0x1f0>)
 8007f6a:	bb1b      	cbnz	r3, 8007fb4 <_svfiprintf_r+0x1b0>
 8007f6c:	9b03      	ldr	r3, [sp, #12]
 8007f6e:	3307      	adds	r3, #7
 8007f70:	f023 0307 	bic.w	r3, r3, #7
 8007f74:	3308      	adds	r3, #8
 8007f76:	9303      	str	r3, [sp, #12]
 8007f78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f7a:	4433      	add	r3, r6
 8007f7c:	9309      	str	r3, [sp, #36]	; 0x24
 8007f7e:	e768      	b.n	8007e52 <_svfiprintf_r+0x4e>
 8007f80:	fb0c 3202 	mla	r2, ip, r2, r3
 8007f84:	460c      	mov	r4, r1
 8007f86:	2001      	movs	r0, #1
 8007f88:	e7a6      	b.n	8007ed8 <_svfiprintf_r+0xd4>
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	3401      	adds	r4, #1
 8007f8e:	9305      	str	r3, [sp, #20]
 8007f90:	4619      	mov	r1, r3
 8007f92:	f04f 0c0a 	mov.w	ip, #10
 8007f96:	4620      	mov	r0, r4
 8007f98:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007f9c:	3a30      	subs	r2, #48	; 0x30
 8007f9e:	2a09      	cmp	r2, #9
 8007fa0:	d903      	bls.n	8007faa <_svfiprintf_r+0x1a6>
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d0c6      	beq.n	8007f34 <_svfiprintf_r+0x130>
 8007fa6:	9105      	str	r1, [sp, #20]
 8007fa8:	e7c4      	b.n	8007f34 <_svfiprintf_r+0x130>
 8007faa:	fb0c 2101 	mla	r1, ip, r1, r2
 8007fae:	4604      	mov	r4, r0
 8007fb0:	2301      	movs	r3, #1
 8007fb2:	e7f0      	b.n	8007f96 <_svfiprintf_r+0x192>
 8007fb4:	ab03      	add	r3, sp, #12
 8007fb6:	9300      	str	r3, [sp, #0]
 8007fb8:	462a      	mov	r2, r5
 8007fba:	4b0f      	ldr	r3, [pc, #60]	; (8007ff8 <_svfiprintf_r+0x1f4>)
 8007fbc:	a904      	add	r1, sp, #16
 8007fbe:	4638      	mov	r0, r7
 8007fc0:	f3af 8000 	nop.w
 8007fc4:	1c42      	adds	r2, r0, #1
 8007fc6:	4606      	mov	r6, r0
 8007fc8:	d1d6      	bne.n	8007f78 <_svfiprintf_r+0x174>
 8007fca:	89ab      	ldrh	r3, [r5, #12]
 8007fcc:	065b      	lsls	r3, r3, #25
 8007fce:	f53f af2d 	bmi.w	8007e2c <_svfiprintf_r+0x28>
 8007fd2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007fd4:	b01d      	add	sp, #116	; 0x74
 8007fd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fda:	ab03      	add	r3, sp, #12
 8007fdc:	9300      	str	r3, [sp, #0]
 8007fde:	462a      	mov	r2, r5
 8007fe0:	4b05      	ldr	r3, [pc, #20]	; (8007ff8 <_svfiprintf_r+0x1f4>)
 8007fe2:	a904      	add	r1, sp, #16
 8007fe4:	4638      	mov	r0, r7
 8007fe6:	f000 f879 	bl	80080dc <_printf_i>
 8007fea:	e7eb      	b.n	8007fc4 <_svfiprintf_r+0x1c0>
 8007fec:	0800851c 	.word	0x0800851c
 8007ff0:	08008526 	.word	0x08008526
 8007ff4:	00000000 	.word	0x00000000
 8007ff8:	08007d51 	.word	0x08007d51
 8007ffc:	08008522 	.word	0x08008522

08008000 <_printf_common>:
 8008000:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008004:	4616      	mov	r6, r2
 8008006:	4699      	mov	r9, r3
 8008008:	688a      	ldr	r2, [r1, #8]
 800800a:	690b      	ldr	r3, [r1, #16]
 800800c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008010:	4293      	cmp	r3, r2
 8008012:	bfb8      	it	lt
 8008014:	4613      	movlt	r3, r2
 8008016:	6033      	str	r3, [r6, #0]
 8008018:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800801c:	4607      	mov	r7, r0
 800801e:	460c      	mov	r4, r1
 8008020:	b10a      	cbz	r2, 8008026 <_printf_common+0x26>
 8008022:	3301      	adds	r3, #1
 8008024:	6033      	str	r3, [r6, #0]
 8008026:	6823      	ldr	r3, [r4, #0]
 8008028:	0699      	lsls	r1, r3, #26
 800802a:	bf42      	ittt	mi
 800802c:	6833      	ldrmi	r3, [r6, #0]
 800802e:	3302      	addmi	r3, #2
 8008030:	6033      	strmi	r3, [r6, #0]
 8008032:	6825      	ldr	r5, [r4, #0]
 8008034:	f015 0506 	ands.w	r5, r5, #6
 8008038:	d106      	bne.n	8008048 <_printf_common+0x48>
 800803a:	f104 0a19 	add.w	sl, r4, #25
 800803e:	68e3      	ldr	r3, [r4, #12]
 8008040:	6832      	ldr	r2, [r6, #0]
 8008042:	1a9b      	subs	r3, r3, r2
 8008044:	42ab      	cmp	r3, r5
 8008046:	dc26      	bgt.n	8008096 <_printf_common+0x96>
 8008048:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800804c:	1e13      	subs	r3, r2, #0
 800804e:	6822      	ldr	r2, [r4, #0]
 8008050:	bf18      	it	ne
 8008052:	2301      	movne	r3, #1
 8008054:	0692      	lsls	r2, r2, #26
 8008056:	d42b      	bmi.n	80080b0 <_printf_common+0xb0>
 8008058:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800805c:	4649      	mov	r1, r9
 800805e:	4638      	mov	r0, r7
 8008060:	47c0      	blx	r8
 8008062:	3001      	adds	r0, #1
 8008064:	d01e      	beq.n	80080a4 <_printf_common+0xa4>
 8008066:	6823      	ldr	r3, [r4, #0]
 8008068:	6922      	ldr	r2, [r4, #16]
 800806a:	f003 0306 	and.w	r3, r3, #6
 800806e:	2b04      	cmp	r3, #4
 8008070:	bf02      	ittt	eq
 8008072:	68e5      	ldreq	r5, [r4, #12]
 8008074:	6833      	ldreq	r3, [r6, #0]
 8008076:	1aed      	subeq	r5, r5, r3
 8008078:	68a3      	ldr	r3, [r4, #8]
 800807a:	bf0c      	ite	eq
 800807c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008080:	2500      	movne	r5, #0
 8008082:	4293      	cmp	r3, r2
 8008084:	bfc4      	itt	gt
 8008086:	1a9b      	subgt	r3, r3, r2
 8008088:	18ed      	addgt	r5, r5, r3
 800808a:	2600      	movs	r6, #0
 800808c:	341a      	adds	r4, #26
 800808e:	42b5      	cmp	r5, r6
 8008090:	d11a      	bne.n	80080c8 <_printf_common+0xc8>
 8008092:	2000      	movs	r0, #0
 8008094:	e008      	b.n	80080a8 <_printf_common+0xa8>
 8008096:	2301      	movs	r3, #1
 8008098:	4652      	mov	r2, sl
 800809a:	4649      	mov	r1, r9
 800809c:	4638      	mov	r0, r7
 800809e:	47c0      	blx	r8
 80080a0:	3001      	adds	r0, #1
 80080a2:	d103      	bne.n	80080ac <_printf_common+0xac>
 80080a4:	f04f 30ff 	mov.w	r0, #4294967295
 80080a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080ac:	3501      	adds	r5, #1
 80080ae:	e7c6      	b.n	800803e <_printf_common+0x3e>
 80080b0:	18e1      	adds	r1, r4, r3
 80080b2:	1c5a      	adds	r2, r3, #1
 80080b4:	2030      	movs	r0, #48	; 0x30
 80080b6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80080ba:	4422      	add	r2, r4
 80080bc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80080c0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80080c4:	3302      	adds	r3, #2
 80080c6:	e7c7      	b.n	8008058 <_printf_common+0x58>
 80080c8:	2301      	movs	r3, #1
 80080ca:	4622      	mov	r2, r4
 80080cc:	4649      	mov	r1, r9
 80080ce:	4638      	mov	r0, r7
 80080d0:	47c0      	blx	r8
 80080d2:	3001      	adds	r0, #1
 80080d4:	d0e6      	beq.n	80080a4 <_printf_common+0xa4>
 80080d6:	3601      	adds	r6, #1
 80080d8:	e7d9      	b.n	800808e <_printf_common+0x8e>
	...

080080dc <_printf_i>:
 80080dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80080e0:	7e0f      	ldrb	r7, [r1, #24]
 80080e2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80080e4:	2f78      	cmp	r7, #120	; 0x78
 80080e6:	4691      	mov	r9, r2
 80080e8:	4680      	mov	r8, r0
 80080ea:	460c      	mov	r4, r1
 80080ec:	469a      	mov	sl, r3
 80080ee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80080f2:	d807      	bhi.n	8008104 <_printf_i+0x28>
 80080f4:	2f62      	cmp	r7, #98	; 0x62
 80080f6:	d80a      	bhi.n	800810e <_printf_i+0x32>
 80080f8:	2f00      	cmp	r7, #0
 80080fa:	f000 80d4 	beq.w	80082a6 <_printf_i+0x1ca>
 80080fe:	2f58      	cmp	r7, #88	; 0x58
 8008100:	f000 80c0 	beq.w	8008284 <_printf_i+0x1a8>
 8008104:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008108:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800810c:	e03a      	b.n	8008184 <_printf_i+0xa8>
 800810e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008112:	2b15      	cmp	r3, #21
 8008114:	d8f6      	bhi.n	8008104 <_printf_i+0x28>
 8008116:	a101      	add	r1, pc, #4	; (adr r1, 800811c <_printf_i+0x40>)
 8008118:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800811c:	08008175 	.word	0x08008175
 8008120:	08008189 	.word	0x08008189
 8008124:	08008105 	.word	0x08008105
 8008128:	08008105 	.word	0x08008105
 800812c:	08008105 	.word	0x08008105
 8008130:	08008105 	.word	0x08008105
 8008134:	08008189 	.word	0x08008189
 8008138:	08008105 	.word	0x08008105
 800813c:	08008105 	.word	0x08008105
 8008140:	08008105 	.word	0x08008105
 8008144:	08008105 	.word	0x08008105
 8008148:	0800828d 	.word	0x0800828d
 800814c:	080081b5 	.word	0x080081b5
 8008150:	08008247 	.word	0x08008247
 8008154:	08008105 	.word	0x08008105
 8008158:	08008105 	.word	0x08008105
 800815c:	080082af 	.word	0x080082af
 8008160:	08008105 	.word	0x08008105
 8008164:	080081b5 	.word	0x080081b5
 8008168:	08008105 	.word	0x08008105
 800816c:	08008105 	.word	0x08008105
 8008170:	0800824f 	.word	0x0800824f
 8008174:	682b      	ldr	r3, [r5, #0]
 8008176:	1d1a      	adds	r2, r3, #4
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	602a      	str	r2, [r5, #0]
 800817c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008180:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008184:	2301      	movs	r3, #1
 8008186:	e09f      	b.n	80082c8 <_printf_i+0x1ec>
 8008188:	6820      	ldr	r0, [r4, #0]
 800818a:	682b      	ldr	r3, [r5, #0]
 800818c:	0607      	lsls	r7, r0, #24
 800818e:	f103 0104 	add.w	r1, r3, #4
 8008192:	6029      	str	r1, [r5, #0]
 8008194:	d501      	bpl.n	800819a <_printf_i+0xbe>
 8008196:	681e      	ldr	r6, [r3, #0]
 8008198:	e003      	b.n	80081a2 <_printf_i+0xc6>
 800819a:	0646      	lsls	r6, r0, #25
 800819c:	d5fb      	bpl.n	8008196 <_printf_i+0xba>
 800819e:	f9b3 6000 	ldrsh.w	r6, [r3]
 80081a2:	2e00      	cmp	r6, #0
 80081a4:	da03      	bge.n	80081ae <_printf_i+0xd2>
 80081a6:	232d      	movs	r3, #45	; 0x2d
 80081a8:	4276      	negs	r6, r6
 80081aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80081ae:	485a      	ldr	r0, [pc, #360]	; (8008318 <_printf_i+0x23c>)
 80081b0:	230a      	movs	r3, #10
 80081b2:	e012      	b.n	80081da <_printf_i+0xfe>
 80081b4:	682b      	ldr	r3, [r5, #0]
 80081b6:	6820      	ldr	r0, [r4, #0]
 80081b8:	1d19      	adds	r1, r3, #4
 80081ba:	6029      	str	r1, [r5, #0]
 80081bc:	0605      	lsls	r5, r0, #24
 80081be:	d501      	bpl.n	80081c4 <_printf_i+0xe8>
 80081c0:	681e      	ldr	r6, [r3, #0]
 80081c2:	e002      	b.n	80081ca <_printf_i+0xee>
 80081c4:	0641      	lsls	r1, r0, #25
 80081c6:	d5fb      	bpl.n	80081c0 <_printf_i+0xe4>
 80081c8:	881e      	ldrh	r6, [r3, #0]
 80081ca:	4853      	ldr	r0, [pc, #332]	; (8008318 <_printf_i+0x23c>)
 80081cc:	2f6f      	cmp	r7, #111	; 0x6f
 80081ce:	bf0c      	ite	eq
 80081d0:	2308      	moveq	r3, #8
 80081d2:	230a      	movne	r3, #10
 80081d4:	2100      	movs	r1, #0
 80081d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80081da:	6865      	ldr	r5, [r4, #4]
 80081dc:	60a5      	str	r5, [r4, #8]
 80081de:	2d00      	cmp	r5, #0
 80081e0:	bfa2      	ittt	ge
 80081e2:	6821      	ldrge	r1, [r4, #0]
 80081e4:	f021 0104 	bicge.w	r1, r1, #4
 80081e8:	6021      	strge	r1, [r4, #0]
 80081ea:	b90e      	cbnz	r6, 80081f0 <_printf_i+0x114>
 80081ec:	2d00      	cmp	r5, #0
 80081ee:	d04b      	beq.n	8008288 <_printf_i+0x1ac>
 80081f0:	4615      	mov	r5, r2
 80081f2:	fbb6 f1f3 	udiv	r1, r6, r3
 80081f6:	fb03 6711 	mls	r7, r3, r1, r6
 80081fa:	5dc7      	ldrb	r7, [r0, r7]
 80081fc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008200:	4637      	mov	r7, r6
 8008202:	42bb      	cmp	r3, r7
 8008204:	460e      	mov	r6, r1
 8008206:	d9f4      	bls.n	80081f2 <_printf_i+0x116>
 8008208:	2b08      	cmp	r3, #8
 800820a:	d10b      	bne.n	8008224 <_printf_i+0x148>
 800820c:	6823      	ldr	r3, [r4, #0]
 800820e:	07de      	lsls	r6, r3, #31
 8008210:	d508      	bpl.n	8008224 <_printf_i+0x148>
 8008212:	6923      	ldr	r3, [r4, #16]
 8008214:	6861      	ldr	r1, [r4, #4]
 8008216:	4299      	cmp	r1, r3
 8008218:	bfde      	ittt	le
 800821a:	2330      	movle	r3, #48	; 0x30
 800821c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008220:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008224:	1b52      	subs	r2, r2, r5
 8008226:	6122      	str	r2, [r4, #16]
 8008228:	f8cd a000 	str.w	sl, [sp]
 800822c:	464b      	mov	r3, r9
 800822e:	aa03      	add	r2, sp, #12
 8008230:	4621      	mov	r1, r4
 8008232:	4640      	mov	r0, r8
 8008234:	f7ff fee4 	bl	8008000 <_printf_common>
 8008238:	3001      	adds	r0, #1
 800823a:	d14a      	bne.n	80082d2 <_printf_i+0x1f6>
 800823c:	f04f 30ff 	mov.w	r0, #4294967295
 8008240:	b004      	add	sp, #16
 8008242:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008246:	6823      	ldr	r3, [r4, #0]
 8008248:	f043 0320 	orr.w	r3, r3, #32
 800824c:	6023      	str	r3, [r4, #0]
 800824e:	4833      	ldr	r0, [pc, #204]	; (800831c <_printf_i+0x240>)
 8008250:	2778      	movs	r7, #120	; 0x78
 8008252:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008256:	6823      	ldr	r3, [r4, #0]
 8008258:	6829      	ldr	r1, [r5, #0]
 800825a:	061f      	lsls	r7, r3, #24
 800825c:	f851 6b04 	ldr.w	r6, [r1], #4
 8008260:	d402      	bmi.n	8008268 <_printf_i+0x18c>
 8008262:	065f      	lsls	r7, r3, #25
 8008264:	bf48      	it	mi
 8008266:	b2b6      	uxthmi	r6, r6
 8008268:	07df      	lsls	r7, r3, #31
 800826a:	bf48      	it	mi
 800826c:	f043 0320 	orrmi.w	r3, r3, #32
 8008270:	6029      	str	r1, [r5, #0]
 8008272:	bf48      	it	mi
 8008274:	6023      	strmi	r3, [r4, #0]
 8008276:	b91e      	cbnz	r6, 8008280 <_printf_i+0x1a4>
 8008278:	6823      	ldr	r3, [r4, #0]
 800827a:	f023 0320 	bic.w	r3, r3, #32
 800827e:	6023      	str	r3, [r4, #0]
 8008280:	2310      	movs	r3, #16
 8008282:	e7a7      	b.n	80081d4 <_printf_i+0xf8>
 8008284:	4824      	ldr	r0, [pc, #144]	; (8008318 <_printf_i+0x23c>)
 8008286:	e7e4      	b.n	8008252 <_printf_i+0x176>
 8008288:	4615      	mov	r5, r2
 800828a:	e7bd      	b.n	8008208 <_printf_i+0x12c>
 800828c:	682b      	ldr	r3, [r5, #0]
 800828e:	6826      	ldr	r6, [r4, #0]
 8008290:	6961      	ldr	r1, [r4, #20]
 8008292:	1d18      	adds	r0, r3, #4
 8008294:	6028      	str	r0, [r5, #0]
 8008296:	0635      	lsls	r5, r6, #24
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	d501      	bpl.n	80082a0 <_printf_i+0x1c4>
 800829c:	6019      	str	r1, [r3, #0]
 800829e:	e002      	b.n	80082a6 <_printf_i+0x1ca>
 80082a0:	0670      	lsls	r0, r6, #25
 80082a2:	d5fb      	bpl.n	800829c <_printf_i+0x1c0>
 80082a4:	8019      	strh	r1, [r3, #0]
 80082a6:	2300      	movs	r3, #0
 80082a8:	6123      	str	r3, [r4, #16]
 80082aa:	4615      	mov	r5, r2
 80082ac:	e7bc      	b.n	8008228 <_printf_i+0x14c>
 80082ae:	682b      	ldr	r3, [r5, #0]
 80082b0:	1d1a      	adds	r2, r3, #4
 80082b2:	602a      	str	r2, [r5, #0]
 80082b4:	681d      	ldr	r5, [r3, #0]
 80082b6:	6862      	ldr	r2, [r4, #4]
 80082b8:	2100      	movs	r1, #0
 80082ba:	4628      	mov	r0, r5
 80082bc:	f7f7 ff90 	bl	80001e0 <memchr>
 80082c0:	b108      	cbz	r0, 80082c6 <_printf_i+0x1ea>
 80082c2:	1b40      	subs	r0, r0, r5
 80082c4:	6060      	str	r0, [r4, #4]
 80082c6:	6863      	ldr	r3, [r4, #4]
 80082c8:	6123      	str	r3, [r4, #16]
 80082ca:	2300      	movs	r3, #0
 80082cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80082d0:	e7aa      	b.n	8008228 <_printf_i+0x14c>
 80082d2:	6923      	ldr	r3, [r4, #16]
 80082d4:	462a      	mov	r2, r5
 80082d6:	4649      	mov	r1, r9
 80082d8:	4640      	mov	r0, r8
 80082da:	47d0      	blx	sl
 80082dc:	3001      	adds	r0, #1
 80082de:	d0ad      	beq.n	800823c <_printf_i+0x160>
 80082e0:	6823      	ldr	r3, [r4, #0]
 80082e2:	079b      	lsls	r3, r3, #30
 80082e4:	d413      	bmi.n	800830e <_printf_i+0x232>
 80082e6:	68e0      	ldr	r0, [r4, #12]
 80082e8:	9b03      	ldr	r3, [sp, #12]
 80082ea:	4298      	cmp	r0, r3
 80082ec:	bfb8      	it	lt
 80082ee:	4618      	movlt	r0, r3
 80082f0:	e7a6      	b.n	8008240 <_printf_i+0x164>
 80082f2:	2301      	movs	r3, #1
 80082f4:	4632      	mov	r2, r6
 80082f6:	4649      	mov	r1, r9
 80082f8:	4640      	mov	r0, r8
 80082fa:	47d0      	blx	sl
 80082fc:	3001      	adds	r0, #1
 80082fe:	d09d      	beq.n	800823c <_printf_i+0x160>
 8008300:	3501      	adds	r5, #1
 8008302:	68e3      	ldr	r3, [r4, #12]
 8008304:	9903      	ldr	r1, [sp, #12]
 8008306:	1a5b      	subs	r3, r3, r1
 8008308:	42ab      	cmp	r3, r5
 800830a:	dcf2      	bgt.n	80082f2 <_printf_i+0x216>
 800830c:	e7eb      	b.n	80082e6 <_printf_i+0x20a>
 800830e:	2500      	movs	r5, #0
 8008310:	f104 0619 	add.w	r6, r4, #25
 8008314:	e7f5      	b.n	8008302 <_printf_i+0x226>
 8008316:	bf00      	nop
 8008318:	0800852d 	.word	0x0800852d
 800831c:	0800853e 	.word	0x0800853e

08008320 <memmove>:
 8008320:	4288      	cmp	r0, r1
 8008322:	b510      	push	{r4, lr}
 8008324:	eb01 0402 	add.w	r4, r1, r2
 8008328:	d902      	bls.n	8008330 <memmove+0x10>
 800832a:	4284      	cmp	r4, r0
 800832c:	4623      	mov	r3, r4
 800832e:	d807      	bhi.n	8008340 <memmove+0x20>
 8008330:	1e43      	subs	r3, r0, #1
 8008332:	42a1      	cmp	r1, r4
 8008334:	d008      	beq.n	8008348 <memmove+0x28>
 8008336:	f811 2b01 	ldrb.w	r2, [r1], #1
 800833a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800833e:	e7f8      	b.n	8008332 <memmove+0x12>
 8008340:	4402      	add	r2, r0
 8008342:	4601      	mov	r1, r0
 8008344:	428a      	cmp	r2, r1
 8008346:	d100      	bne.n	800834a <memmove+0x2a>
 8008348:	bd10      	pop	{r4, pc}
 800834a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800834e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008352:	e7f7      	b.n	8008344 <memmove+0x24>

08008354 <_sbrk_r>:
 8008354:	b538      	push	{r3, r4, r5, lr}
 8008356:	4d06      	ldr	r5, [pc, #24]	; (8008370 <_sbrk_r+0x1c>)
 8008358:	2300      	movs	r3, #0
 800835a:	4604      	mov	r4, r0
 800835c:	4608      	mov	r0, r1
 800835e:	602b      	str	r3, [r5, #0]
 8008360:	f7f9 faf8 	bl	8001954 <_sbrk>
 8008364:	1c43      	adds	r3, r0, #1
 8008366:	d102      	bne.n	800836e <_sbrk_r+0x1a>
 8008368:	682b      	ldr	r3, [r5, #0]
 800836a:	b103      	cbz	r3, 800836e <_sbrk_r+0x1a>
 800836c:	6023      	str	r3, [r4, #0]
 800836e:	bd38      	pop	{r3, r4, r5, pc}
 8008370:	20004c14 	.word	0x20004c14

08008374 <_realloc_r>:
 8008374:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008378:	4680      	mov	r8, r0
 800837a:	4614      	mov	r4, r2
 800837c:	460e      	mov	r6, r1
 800837e:	b921      	cbnz	r1, 800838a <_realloc_r+0x16>
 8008380:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008384:	4611      	mov	r1, r2
 8008386:	f7ff bc57 	b.w	8007c38 <_malloc_r>
 800838a:	b92a      	cbnz	r2, 8008398 <_realloc_r+0x24>
 800838c:	f7ff fbe8 	bl	8007b60 <_free_r>
 8008390:	4625      	mov	r5, r4
 8008392:	4628      	mov	r0, r5
 8008394:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008398:	f000 f81b 	bl	80083d2 <_malloc_usable_size_r>
 800839c:	4284      	cmp	r4, r0
 800839e:	4607      	mov	r7, r0
 80083a0:	d802      	bhi.n	80083a8 <_realloc_r+0x34>
 80083a2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80083a6:	d812      	bhi.n	80083ce <_realloc_r+0x5a>
 80083a8:	4621      	mov	r1, r4
 80083aa:	4640      	mov	r0, r8
 80083ac:	f7ff fc44 	bl	8007c38 <_malloc_r>
 80083b0:	4605      	mov	r5, r0
 80083b2:	2800      	cmp	r0, #0
 80083b4:	d0ed      	beq.n	8008392 <_realloc_r+0x1e>
 80083b6:	42bc      	cmp	r4, r7
 80083b8:	4622      	mov	r2, r4
 80083ba:	4631      	mov	r1, r6
 80083bc:	bf28      	it	cs
 80083be:	463a      	movcs	r2, r7
 80083c0:	f7ff fbc0 	bl	8007b44 <memcpy>
 80083c4:	4631      	mov	r1, r6
 80083c6:	4640      	mov	r0, r8
 80083c8:	f7ff fbca 	bl	8007b60 <_free_r>
 80083cc:	e7e1      	b.n	8008392 <_realloc_r+0x1e>
 80083ce:	4635      	mov	r5, r6
 80083d0:	e7df      	b.n	8008392 <_realloc_r+0x1e>

080083d2 <_malloc_usable_size_r>:
 80083d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80083d6:	1f18      	subs	r0, r3, #4
 80083d8:	2b00      	cmp	r3, #0
 80083da:	bfbc      	itt	lt
 80083dc:	580b      	ldrlt	r3, [r1, r0]
 80083de:	18c0      	addlt	r0, r0, r3
 80083e0:	4770      	bx	lr
	...

080083e4 <_init>:
 80083e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083e6:	bf00      	nop
 80083e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083ea:	bc08      	pop	{r3}
 80083ec:	469e      	mov	lr, r3
 80083ee:	4770      	bx	lr

080083f0 <_fini>:
 80083f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083f2:	bf00      	nop
 80083f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083f6:	bc08      	pop	{r3}
 80083f8:	469e      	mov	lr, r3
 80083fa:	4770      	bx	lr
